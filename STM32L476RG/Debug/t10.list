
t10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e78  08007e78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e80  08007e80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08007e94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007e94  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002395  00000000  00000000  00033a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00036fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a5a  00000000  00000000  000380d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d92d  00000000  00000000  00060b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010656a  00000000  00000000  0006e457  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001749c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  00174a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a48 	.word	0x08007a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007a48 	.word	0x08007a48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4abb      	ldr	r2, [pc, #748]	; (8001028 <SVPWM_Update+0x2fc>)
 8000d3c:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d44:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d4c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800102c <SVPWM_Update+0x300>
 8000d50:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d88:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001030 <SVPWM_Update+0x304>
 8000d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	db09      	blt.n	8000daa <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d9c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001030 <SVPWM_Update+0x304>
 8000da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000db8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001030 <SVPWM_Update+0x304>
 8000dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f006 f8f4 	bl	8006fb0 <sinf>
 8000dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000dec:	eeb0 0a67 	vmov.f32	s0, s15
 8000df0:	f006 f8de 	bl	8006fb0 <sinf>
 8000df4:	eeb0 7a40 	vmov.f32	s14, s0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	d518      	bpl.n	8000e86 <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e5a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000e5e:	eef4 7a47 	vcmp.f32	s15, s14
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	d104      	bne.n	8000e72 <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	e009      	b.n	8000e86 <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	d11f      	bne.n	8000ed6 <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	621a      	str	r2, [r3, #32]
 8000ed4:	e0d7      	b.n	8001086 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee0:	eef4 7a47 	vcmp.f32	s15, s14
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d11f      	bne.n	8000f2a <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	621a      	str	r2, [r3, #32]
 8000f28:	e0ad      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f34:	eef4 7a47 	vcmp.f32	s15, s14
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	d11f      	bne.n	8000f7e <SVPWM_Update+0x252>
    	svm->U = svm->to;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	edc3 7a08 	vstr	s15, [r3, #32]
 8000f7c:	e083      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f84:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f88:	eef4 7a47 	vcmp.f32	s15, s14
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d11f      	bne.n	8000fd2 <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
 8000fd0:	e059      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d126      	bne.n	8001034 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	edc3 7a08 	vstr	s15, [r3, #32]
 8001024:	e02f      	b.n	8001086 <SVPWM_Update+0x35a>
 8001026:	bf00      	nop
 8001028:	3f666666 	.word	0x3f666666
 800102c:	40c90fdb 	.word	0x40c90fdb
 8001030:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edd3 7a05 	vldr	s15, [r3, #20]
 800103a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800103e:	eef4 7a47 	vcmp.f32	s15, s14
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d11e      	bne.n	8001086 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 6a06 	vldr	s13, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <SVPWM_Update+0x3ec>)
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	3301      	adds	r3, #1
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <SVPWM_Update+0x3ec>)
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	ee17 2a90 	vmov	r2, s15
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 6a07 	vldr	s13, [r3, #28]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80010c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <SVPWM_Update+0x3ec>)
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	3301      	adds	r3, #1
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SVPWM_Update+0x3ec>)
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	ee17 2a90 	vmov	r2, s15
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edd3 6a08 	vldr	s13, [r3, #32]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <SVPWM_Update+0x3ec>)
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	3301      	adds	r3, #1
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SVPWM_Update+0x3ec>)
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 2a90 	vmov	r2, s15
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40012c00 	.word	0x40012c00

0800111c <VHZ_Init>:
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6178      	str	r0, [r7, #20]
 8001124:	ed87 0a04 	vstr	s0, [r7, #16]
 8001128:	edc7 0a03 	vstr	s1, [r7, #12]
 800112c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001130:	edc7 1a01 	vstr	s3, [r7, #4]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001150:	edd7 7a02 	vldr	s15, [r7, #8]
 8001154:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001158:	ed97 7a03 	vldr	s14, [r7, #12]
 800115c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	edc3 7a04 	vstr	s15, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <VHZ_Update>:
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	ed93 7a06 	vldr	s14, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d804      	bhi.n	80011b0 <VHZ_Update+0x28>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	e03b      	b.n	8001228 <VHZ_Update+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	dd20      	ble.n	8001208 <VHZ_Update+0x80>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d815      	bhi.n	8001208 <VHZ_Update+0x80>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	ed93 6a06 	vldr	s12, [r3, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a05 	vstr	s15, [r3, #20]
 8001206:	e00f      	b.n	8001228 <VHZ_Update+0xa0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	ed93 7a06 	vldr	s14, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edd3 7a01 	vldr	s15, [r3, #4]
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	dc00      	bgt.n	8001220 <VHZ_Update+0x98>
 800121e:	e003      	b.n	8001228 <VHZ_Update+0xa0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 800123a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001338 <main+0x104>
 800123e:	483f      	ldr	r0, [pc, #252]	; (800133c <main+0x108>)
 8001240:	f7ff fd30 	bl	8000ca4 <SVPWM_Init>
  VHZ_Init(&vhz1, 0.001, 0.01, 10, 100);
 8001244:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8001340 <main+0x10c>
 8001248:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800124c:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001344 <main+0x110>
 8001250:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001348 <main+0x114>
 8001254:	483d      	ldr	r0, [pc, #244]	; (800134c <main+0x118>)
 8001256:	f7ff ff61 	bl	800111c <VHZ_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f000 ff2d 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f883 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 fbab 	bl	80019bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001266:	f000 fa4d 	bl	8001704 <MX_TIM1_Init>
  MX_TIM15_Init();
 800126a:	f000 fb25 	bl	80018b8 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 800126e:	f000 fb75 	bl	800195c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001272:	f000 f901 	bl	8001478 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001276:	f000 f979 	bl	800156c <MX_ADC2_Init>
  MX_ADC3_Init();
 800127a:	f000 f9dd 	bl	8001638 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4833      	ldr	r0, [pc, #204]	; (8001350 <main+0x11c>)
 8001282:	f003 ff61 	bl	8005148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4831      	ldr	r0, [pc, #196]	; (8001350 <main+0x11c>)
 800128a:	f004 ffc9 	bl	8006220 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800128e:	2104      	movs	r1, #4
 8001290:	482f      	ldr	r0, [pc, #188]	; (8001350 <main+0x11c>)
 8001292:	f003 ff59 	bl	8005148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	482d      	ldr	r0, [pc, #180]	; (8001350 <main+0x11c>)
 800129a:	f004 ffc1 	bl	8006220 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800129e:	2108      	movs	r1, #8
 80012a0:	482b      	ldr	r0, [pc, #172]	; (8001350 <main+0x11c>)
 80012a2:	f003 ff51 	bl	8005148 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012a6:	2108      	movs	r1, #8
 80012a8:	4829      	ldr	r0, [pc, #164]	; (8001350 <main+0x11c>)
 80012aa:	f004 ffb9 	bl	8006220 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 80012ae:	4829      	ldr	r0, [pc, #164]	; (8001354 <main+0x120>)
 80012b0:	f003 feea 	bl	8005088 <HAL_TIM_Base_Start_IT>

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2104      	movs	r1, #4
 80012b8:	4827      	ldr	r0, [pc, #156]	; (8001358 <main+0x124>)
 80012ba:	f002 fba3 	bl	8003a04 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <main+0x128>)
 80012c0:	f001 fabe 	bl	8002840 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c8:	4824      	ldr	r0, [pc, #144]	; (800135c <main+0x128>)
 80012ca:	f001 fb73 	bl	80029b4 <HAL_ADC_PollForConversion>
	  voltage = HAL_ADC_GetValue(&hadc1);
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <main+0x128>)
 80012d0:	f001 fc40 	bl	8002b54 <HAL_ADC_GetValue>
 80012d4:	4603      	mov	r3, r0
 80012d6:	81fb      	strh	r3, [r7, #14]
	  voltage = adc_voltage_conversion (voltage);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fc38 	bl	8001b50 <adc_voltage_conversion>
 80012e0:	4603      	mov	r3, r0
 80012e2:	81fb      	strh	r3, [r7, #14]

	  HAL_Delay (100);
 80012e4:	2064      	movs	r0, #100	; 0x64
 80012e6:	f000 ff5f 	bl	80021a8 <HAL_Delay>

	  HAL_ADC_Start (&hadc2);
 80012ea:	481d      	ldr	r0, [pc, #116]	; (8001360 <main+0x12c>)
 80012ec:	f001 faa8 	bl	8002840 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f4:	481a      	ldr	r0, [pc, #104]	; (8001360 <main+0x12c>)
 80012f6:	f001 fb5d 	bl	80029b4 <HAL_ADC_PollForConversion>
	  current1 = HAL_ADC_GetValue(&hadc1);
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <main+0x128>)
 80012fc:	f001 fc2a 	bl	8002b54 <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	81bb      	strh	r3, [r7, #12]

	  HAL_ADC_Start (&hadc3);
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <main+0x130>)
 8001306:	f001 fa9b 	bl	8002840 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800130a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800130e:	4815      	ldr	r0, [pc, #84]	; (8001364 <main+0x130>)
 8001310:	f001 fb50 	bl	80029b4 <HAL_ADC_PollForConversion>
	  current2 = HAL_ADC_GetValue(&hadc3);
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <main+0x130>)
 8001316:	f001 fc1d 	bl	8002b54 <HAL_ADC_GetValue>
 800131a:	4603      	mov	r3, r0
 800131c:	817b      	strh	r3, [r7, #10]

	  current1 = current_sensing (current1, current2);	//current 1 is the actual current we want not current2
 800131e:	897a      	ldrh	r2, [r7, #10]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fc3f 	bl	8001ba8 <current_sensing>
 800132a:	4603      	mov	r3, r0
 800132c:	81bb      	strh	r3, [r7, #12]



	  // Send out buffer (temperature or error message)

	  HAL_Delay (1000);
 800132e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001332:	f000 ff39 	bl	80021a8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001336:	e7c2      	b.n	80012be <main+0x8a>
 8001338:	461c4000 	.word	0x461c4000
 800133c:	2000027c 	.word	0x2000027c
 8001340:	42c80000 	.word	0x42c80000
 8001344:	3c23d70a 	.word	0x3c23d70a
 8001348:	3a83126f 	.word	0x3a83126f
 800134c:	200001a0 	.word	0x200001a0
 8001350:	200001bc 	.word	0x200001bc
 8001354:	20000098 	.word	0x20000098
 8001358:	48000400 	.word	0x48000400
 800135c:	200000d8 	.word	0x200000d8
 8001360:	20000034 	.word	0x20000034
 8001364:	2000013c 	.word	0x2000013c

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0b8      	sub	sp, #224	; 0xe0
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001372:	2244      	movs	r2, #68	; 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fe12 	bl	8006fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2288      	movs	r2, #136	; 0x88
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fe04 	bl	8006fa0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013be:	230a      	movs	r3, #10
 80013c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fb8e 	bl	8003afc <HAL_RCC_OscConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013e6:	f000 fc0f 	bl	8001c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	230f      	movs	r3, #15
 80013ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001408:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800140c:	2104      	movs	r1, #4
 800140e:	4618      	mov	r0, r3
 8001410:	f002 ff5a 	bl	80042c8 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800141a:	f000 fbf5 	bl	8001c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800141e:	f244 0302 	movw	r3, #16386	; 0x4002
 8001422:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001428:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800142c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800142e:	2302      	movs	r3, #2
 8001430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001432:	2301      	movs	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001436:	2308      	movs	r3, #8
 8001438:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800143a:	2307      	movs	r3, #7
 800143c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001446:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800144a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f93e 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800145a:	f000 fbd5 	bl	8001c08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001462:	f002 faf5 	bl	8003a50 <HAL_PWREx_ControlVoltageScaling>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800146c:	f000 fbcc 	bl	8001c08 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	37e0      	adds	r7, #224	; 0xe0
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <MX_ADC1_Init+0xe8>)
 800149c:	4a31      	ldr	r2, [pc, #196]	; (8001564 <MX_ADC1_Init+0xec>)
 800149e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC1_Init+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <MX_ADC1_Init+0xe8>)
 8001502:	f001 f849 	bl	8002598 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800150c:	f000 fb7c 	bl	8001c08 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4811      	ldr	r0, [pc, #68]	; (8001560 <MX_ADC1_Init+0xe8>)
 800151c:	f001 ff0c 	bl	8003338 <HAL_ADCEx_MultiModeConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001526:	f000 fb6f 	bl	8001c08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_ADC1_Init+0xf0>)
 800152c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152e:	2306      	movs	r3, #6
 8001530:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001536:	237f      	movs	r3, #127	; 0x7f
 8001538:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153a:	2304      	movs	r3, #4
 800153c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_ADC1_Init+0xe8>)
 8001548:	f001 fb12 	bl	8002b70 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001552:	f000 fb59 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000d8 	.word	0x200000d8
 8001564:	50040000 	.word	0x50040000
 8001568:	14f00020 	.word	0x14f00020

0800156c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <MX_ADC2_Init+0xc0>)
 8001584:	4a2a      	ldr	r2, [pc, #168]	; (8001630 <MX_ADC2_Init+0xc4>)
 8001586:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_ADC2_Init+0xc0>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <MX_ADC2_Init+0xc0>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <MX_ADC2_Init+0xc0>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_ADC2_Init+0xc0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_ADC2_Init+0xc0>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_ADC2_Init+0xc0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_ADC2_Init+0xc0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_ADC2_Init+0xc0>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_ADC2_Init+0xc0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_ADC2_Init+0xc0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_ADC2_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_ADC2_Init+0xc0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_ADC2_Init+0xc0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_ADC2_Init+0xc0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_ADC2_Init+0xc0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <MX_ADC2_Init+0xc0>)
 80015ea:	f000 ffd5 	bl	8002598 <HAL_ADC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f000 fb08 	bl	8001c08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_ADC2_Init+0xc8>)
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fc:	2306      	movs	r3, #6
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001604:	237f      	movs	r3, #127	; 0x7f
 8001606:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001608:	2304      	movs	r3, #4
 800160a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_ADC2_Init+0xc0>)
 8001616:	f001 faab 	bl	8002b70 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001620:	f000 faf2 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000034 	.word	0x20000034
 8001630:	50040100 	.word	0x50040100
 8001634:	10c00010 	.word	0x10c00010

08001638 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <MX_ADC3_Init+0xc4>)
 8001652:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_ADC3_Init+0xc0>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_ADC3_Init+0xc0>)
 800166e:	2204      	movs	r2, #4
 8001670:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_ADC3_Init+0xc0>)
 800167a:	2200      	movs	r2, #0
 800167c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001680:	2201      	movs	r2, #1
 8001682:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_ADC3_Init+0xc0>)
 800168e:	2201      	movs	r2, #1
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_ADC3_Init+0xc0>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_ADC3_Init+0xc0>)
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_ADC3_Init+0xc0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_ADC3_Init+0xc0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_ADC3_Init+0xc0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_ADC3_Init+0xc0>)
 80016b6:	f000 ff6f 	bl	8002598 <HAL_ADC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 faa2 	bl	8001c08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_ADC3_Init+0xc8>)
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c8:	2306      	movs	r3, #6
 80016ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016d0:	237f      	movs	r3, #127	; 0x7f
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016d4:	2304      	movs	r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC3_Init+0xc0>)
 80016e2:	f001 fa45 	bl	8002b70 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80016ec:	f000 fa8c 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000013c 	.word	0x2000013c
 80016fc:	50040200 	.word	0x50040200
 8001700:	04300002 	.word	0x04300002

08001704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b09e      	sub	sp, #120	; 0x78
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	222c      	movs	r2, #44	; 0x2c
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f005 fc26 	bl	8006fa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001756:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <MX_TIM1_Init+0x1b0>)
 8001758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 800175c:	224f      	movs	r2, #79	; 0x4f
 800175e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001762:	2260      	movs	r2, #96	; 0x60
 8001764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001768:	2263      	movs	r2, #99	; 0x63
 800176a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001772:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800177e:	484c      	ldr	r0, [pc, #304]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001780:	f003 fc56 	bl	8005030 <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800178a:	f000 fa3d 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001798:	4619      	mov	r1, r3
 800179a:	4845      	ldr	r0, [pc, #276]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 800179c:	f003 ff64 	bl	8005668 <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017a6:	f000 fa2f 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017aa:	4841      	ldr	r0, [pc, #260]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 80017ac:	f003 fc96 	bl	80050dc <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80017b6:	f000 fa27 	bl	8001c08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017be:	2300      	movs	r3, #0
 80017c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80017c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c6:	4619      	mov	r1, r3
 80017c8:	4839      	ldr	r0, [pc, #228]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 80017ca:	f004 f806 	bl	80057da <HAL_TIM_SlaveConfigSynchro>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80017d4:	f000 fa18 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e8:	4619      	mov	r1, r3
 80017ea:	4831      	ldr	r0, [pc, #196]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 80017ec:	f004 fd48 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80017f6:	f000 fa07 	bl	8001c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4824      	ldr	r0, [pc, #144]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001820:	f003 fe0a 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800182a:	f000 f9ed 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	2204      	movs	r2, #4
 8001834:	4619      	mov	r1, r3
 8001836:	481e      	ldr	r0, [pc, #120]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001838:	f003 fdfe 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001842:	f000 f9e1 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	2208      	movs	r2, #8
 800184c:	4619      	mov	r1, r3
 800184e:	4818      	ldr	r0, [pc, #96]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001850:	f003 fdf2 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800185a:	f000 f9d5 	bl	8001c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 8001894:	f004 fd7c 	bl	8006390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 800189e:	f000 f9b3 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM1_Init+0x1ac>)
 80018a4:	f000 fad4 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3778      	adds	r7, #120	; 0x78
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200001bc 	.word	0x200001bc
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <MX_TIM15_Init+0xa0>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018e0:	224f      	movs	r2, #79	; 0x4f
 80018e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018ec:	2263      	movs	r2, #99	; 0x63
 80018ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM15_Init+0x9c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <MX_TIM15_Init+0x9c>)
 8001904:	f003 fb94 	bl	8005030 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800190e:	f000 f97b 	bl	8001c08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM15_Init+0x9c>)
 8001922:	f003 ff5a 	bl	80057da <HAL_TIM_SlaveConfigSynchro>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800192c:	f000 f96c 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM15_Init+0x9c>)
 800193e:	f004 fc9f 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001948:	f000 f95e 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000098 	.word	0x20000098
 8001958:	40014000 	.word	0x40014000

0800195c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <MX_USART2_UART_Init+0x5c>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 80019a0:	f004 fdb7 	bl	8006512 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019aa:	f000 f92d 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001fc 	.word	0x200001fc
 80019b8:	40004400 	.word	0x40004400

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a2d      	ldr	r2, [pc, #180]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_GPIO_Init+0xe8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2104      	movs	r1, #4
 8001a36:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <MX_GPIO_Init+0xec>)
 8001a38:	f001 ffe4 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2120      	movs	r1, #32
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f001 ffde 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_GPIO_Init+0xf0>)
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <MX_GPIO_Init+0xec>)
 8001a5e:	f001 fe29 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a62:	2304      	movs	r3, #4
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <MX_GPIO_Init+0xec>)
 8001a7a:	f001 fe1b 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f001 fe0c 	bl	80036b4 <HAL_GPIO_Init>

}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	10210000 	.word	0x10210000

08001ab0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(a==1000){
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001b3c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001ac2:	eef4 7a47 	vcmp.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d105      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2120      	movs	r1, #32
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f001 ff96 	bl	8003a04 <HAL_GPIO_WritePin>
	}
	OldSector = svpwm1.SectorPointer;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001ada:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae2:	ee17 2a90 	vmov	r2, s15
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8001aea:	4817      	ldr	r0, [pc, #92]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aec:	f7ff fb4c 	bl	8001188 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001af2:	4915      	ldr	r1, [pc, #84]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001af6:	f7ff f919 	bl	8000d2c <SVPWM_Update>
	if(a==1000){
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b3c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001b04:	eef4 7a47 	vcmp.f32	s15, s14
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d105      	bne.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2120      	movs	r1, #32
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f001 ff75 	bl	8003a04 <HAL_GPIO_WritePin>
	}
	a = a+1;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002b4 	.word	0x200002b4
 8001b3c:	447a0000 	.word	0x447a0000
 8001b40:	2000027c 	.word	0x2000027c
 8001b44:	2000002c 	.word	0x2000002c
 8001b48:	200001a0 	.word	0x200001a0
 8001b4c:	200001bc 	.word	0x200001bc

08001b50 <adc_voltage_conversion>:


unsigned int adc_voltage_conversion (uint16_t raw_a)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
	return (unsigned int) (raw_a / ADC_VOLTAGE_CONVERSION / SCALING_FACTOR);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc85 	bl	800046c <__aeabi_i2d>
 8001b62:	a30d      	add	r3, pc, #52	; (adr r3, 8001b98 <adc_voltage_conversion+0x48>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fe14 	bl	8000794 <__aeabi_ddiv>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	4618      	mov	r0, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	a30a      	add	r3, pc, #40	; (adr r3, 8001ba0 <adc_voltage_conversion+0x50>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fe0b 	bl	8000794 <__aeabi_ddiv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460c      	mov	r4, r1
 8001b82:	4618      	mov	r0, r3
 8001b84:	4621      	mov	r1, r4
 8001b86:	f7fe feed 	bl	8000964 <__aeabi_d2uiz>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	f3af 8000 	nop.w
 8001b98:	e8ba2e8c 	.word	0xe8ba2e8c
 8001b9c:	409363a2 	.word	0x409363a2
 8001ba0:	e847d5fd 	.word	0xe847d5fd
 8001ba4:	3f7dd193 	.word	0x3f7dd193

08001ba8 <current_sensing>:
		return (unsigned int) (THERMISTOR_RESISTANCE * raw_a / (INPUT_VOLTAGE - raw_a));
	else
		return raw_a;
}
unsigned int current_sensing (uint16_t v1, uint16_t v2)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	80fb      	strh	r3, [r7, #6]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80bb      	strh	r3, [r7, #4]
	v1 = adc_voltage_conversion (v1);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffc8 	bl	8001b50 <adc_voltage_conversion>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80fb      	strh	r3, [r7, #6]
	v2 = adc_voltage_conversion (v2);
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffc2 	bl	8001b50 <adc_voltage_conversion>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80bb      	strh	r3, [r7, #4]
	return ((unsigned int) ((v1-v2)/ I_RESISTOR));
 8001bd0:	88fa      	ldrh	r2, [r7, #6]
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fc48 	bl	800046c <__aeabi_i2d>
 8001bdc:	a308      	add	r3, pc, #32	; (adr r3, 8001c00 <current_sensing+0x58>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fdd7 	bl	8000794 <__aeabi_ddiv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	4618      	mov	r0, r3
 8001bec:	4621      	mov	r1, r4
 8001bee:	f7fe feb9 	bl	8000964 <__aeabi_d2uiz>
 8001bf2:	4603      	mov	r3, r0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	eb1c432d 	.word	0xeb1c432d
 8001c04:	3f1a36e2 	.word	0x3f1a36e2

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_MspInit+0x44>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_MspInit+0x44>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_MspInit+0x44>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x44>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x44>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x44>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	; 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_ADC_MspInit+0x154>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12e      	bne.n	8001ce0 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001c8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10b      	bne.n	8001cac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001c9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cc8:	230b      	movs	r3, #11
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f001 fceb 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cde:	e064      	b.n	8001daa <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <HAL_ADC_MspInit+0x160>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12d      	bne.n	8001d46 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a31      	ldr	r2, [pc, #196]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001cf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10b      	bne.n	8001d14 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d30:	230b      	movs	r3, #11
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4821      	ldr	r0, [pc, #132]	; (8001dc4 <HAL_ADC_MspInit+0x164>)
 8001d40:	f001 fcb8 	bl	80036b4 <HAL_GPIO_Init>
}
 8001d44:	e031      	b.n	8001daa <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_ADC_MspInit+0x168>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d12c      	bne.n	8001daa <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001d58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_ADC_MspInit+0x158>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10b      	bne.n	8001d7a <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_ADC_MspInit+0x15c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d96:	230b      	movs	r3, #11
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <HAL_ADC_MspInit+0x164>)
 8001da6:	f001 fc85 	bl	80036b4 <HAL_GPIO_Init>
}
 8001daa:	bf00      	nop
 8001dac:	3738      	adds	r7, #56	; 0x38
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	50040000 	.word	0x50040000
 8001db8:	20000028 	.word	0x20000028
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	50040100 	.word	0x50040100
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	50040200 	.word	0x50040200

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_TIM_Base_MspInit+0x78>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d114      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2018      	movs	r0, #24
 8001dfc:	f001 fc23 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e00:	2018      	movs	r0, #24
 8001e02:	f001 fc3c 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e06:	e018      	b.n	8001e3a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_TIM_Base_MspInit+0x80>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d113      	bne.n	8001e3a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_TIM_Base_MspInit+0x7c>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2018      	movs	r0, #24
 8001e30:	f001 fc09 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e34:	2018      	movs	r0, #24
 8001e36:	f001 fc22 	bl	800367e <HAL_NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40014000 	.word	0x40014000

08001e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_TIM_MspPostInit+0xa0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d13a      	bne.n	8001ee8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_TIM_MspPostInit+0xa4>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ea2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <HAL_TIM_MspPostInit+0xa8>)
 8001ec0:	f001 fbf8 	bl	80036b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ec4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee4:	f001 fbe6 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x7c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d128      	bne.n	8001f70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_UART_MspInit+0x80>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f001 fba2 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40021000 	.word	0x40021000

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f8ca 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001fe2:	f003 f909 	bl	80051f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001fe8:	f003 f906 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200001bc 	.word	0x200001bc
 8001ff4:	20000098 	.word	0x20000098

08001ff8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <SystemInit+0x64>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <SystemInit+0x64>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <SystemInit+0x68>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <SystemInit+0x68>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <SystemInit+0x68>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <SystemInit+0x68>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <SystemInit+0x68>)
 8002024:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002028:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800202c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <SystemInit+0x68>)
 8002030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002034:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <SystemInit+0x68>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <SystemInit+0x68>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <SystemInit+0x68>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SystemInit+0x64>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	609a      	str	r2, [r3, #8]
#endif
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	40021000 	.word	0x40021000

08002064 <Reset_Handler>:
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800209c <LoopForever+0x2>
 8002068:	2100      	movs	r1, #0
 800206a:	e003      	b.n	8002074 <LoopCopyDataInit>

0800206c <CopyDataInit>:
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <LoopForever+0x6>)
 800206e:	585b      	ldr	r3, [r3, r1]
 8002070:	5043      	str	r3, [r0, r1]
 8002072:	3104      	adds	r1, #4

08002074 <LoopCopyDataInit>:
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <LoopForever+0xa>)
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <LoopForever+0xe>)
 8002078:	1842      	adds	r2, r0, r1
 800207a:	429a      	cmp	r2, r3
 800207c:	d3f6      	bcc.n	800206c <CopyDataInit>
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LoopForever+0x12>)
 8002080:	e002      	b.n	8002088 <LoopFillZerobss>

08002082 <FillZerobss>:
 8002082:	2300      	movs	r3, #0
 8002084:	f842 3b04 	str.w	r3, [r2], #4

08002088 <LoopFillZerobss>:
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LoopForever+0x16>)
 800208a:	429a      	cmp	r2, r3
 800208c:	d3f9      	bcc.n	8002082 <FillZerobss>
 800208e:	f7ff ffb3 	bl	8001ff8 <SystemInit>
 8002092:	f004 ff61 	bl	8006f58 <__libc_init_array>
 8002096:	f7ff f8cd 	bl	8001234 <main>

0800209a <LoopForever>:
 800209a:	e7fe      	b.n	800209a <LoopForever>
 800209c:	20018000 	.word	0x20018000
 80020a0:	08007e88 	.word	0x08007e88
 80020a4:	20000000 	.word	0x20000000
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	200002bc 	.word	0x200002bc

080020b4 <ADC1_2_IRQHandler>:
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_Init+0x3c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_Init+0x3c>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ce:	2003      	movs	r0, #3
 80020d0:	f001 faae 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f80f 	bl	80020f8 <HAL_InitTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	e001      	b.n	80020ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020e6:	f7ff fd97 	bl	8001c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_InitTick+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d022      	beq.n	8002152 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_InitTick+0x6c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_InitTick+0x68>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002118:	fbb1 f3f3 	udiv	r3, r1, r3
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f001 faba 	bl	800369a <HAL_SYSTICK_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	d809      	bhi.n	8002146 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002132:	2200      	movs	r2, #0
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213a:	f001 fa84 	bl	8003646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_InitTick+0x70>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e007      	b.n	8002156 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e004      	b.n	8002156 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000008 	.word	0x20000008
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x1c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x20>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4413      	add	r3, r2
 800217a:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_IncTick+0x1c>)
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	200002b8 	.word	0x200002b8
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200002b8 	.word	0x200002b8

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c0:	d004      	beq.n	80021cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_Delay+0x40>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021cc:	bf00      	nop
 80021ce:	f7ff ffdf 	bl	8002190 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d8f7      	bhi.n	80021ce <HAL_Delay+0x26>
  {
  }
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008

080021ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002254:	b490      	push	{r4, r7}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <LL_ADC_SetOffset+0x40>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	4313      	orrs	r3, r2
 8002282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002286:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bc90      	pop	{r4, r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	03fff000 	.word	0x03fff000

08002298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002298:	b490      	push	{r4, r7}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	461a      	mov	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc90      	pop	{r4, r7}
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3360      	adds	r3, #96	; 0x60
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc90      	pop	{r4, r7}
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002316:	b490      	push	{r4, r7}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3330      	adds	r3, #48	; 0x30
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	4413      	add	r3, r2
 8002334:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	211f      	movs	r1, #31
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	f003 011f 	and.w	r1, r3, #31
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bc90      	pop	{r4, r7}
 8002366:	4770      	bx	lr

08002368 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002368:	b490      	push	{r4, r7}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3314      	adds	r3, #20
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	0e5b      	lsrs	r3, r3, #25
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2107      	movs	r1, #7
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	0d1b      	lsrs	r3, r3, #20
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc90      	pop	{r4, r7}
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0318 	and.w	r3, r3, #24
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80023dc:	40d9      	lsrs	r1, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	400b      	ands	r3, r1
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	0007ffff 	.word	0x0007ffff

08002400 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6093      	str	r3, [r2, #8]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800246c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002470:	d101      	bne.n	8002476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <LL_ADC_IsEnabled+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_IsEnabled+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002532:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002536:	f043 0204 	orr.w	r2, r3, #4
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d101      	bne.n	8002562 <LL_ADC_REG_IsConversionOngoing+0x18>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b08      	cmp	r3, #8
 8002582:	d101      	bne.n	8002588 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e134      	b.n	800281c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fb4d 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff3f 	bl	800245c <LL_ADC_IsDeepPowerDownEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff25 	bl	8002438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff5a 	bl	80024ac <LL_ADC_IsInternalRegulatorEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d113      	bne.n	8002626 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff3e 	bl	8002484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002608:	4b86      	ldr	r3, [pc, #536]	; (8002824 <HAL_ADC_Init+0x28c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	4a86      	ldr	r2, [pc, #536]	; (8002828 <HAL_ADC_Init+0x290>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002618:	e002      	b.n	8002620 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3b01      	subs	r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f9      	bne.n	800261a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff3e 	bl	80024ac <LL_ADC_IsInternalRegulatorEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff77 	bl	800254a <LL_ADC_REG_IsConversionOngoing>
 800265c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80cf 	bne.w	800280a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 80cb 	bne.w	800280a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff37 	bl	80024fc <LL_ADC_IsEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d115      	bne.n	80026c0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002694:	4865      	ldr	r0, [pc, #404]	; (800282c <HAL_ADC_Init+0x294>)
 8002696:	f7ff ff31 	bl	80024fc <LL_ADC_IsEnabled>
 800269a:	4604      	mov	r4, r0
 800269c:	4864      	ldr	r0, [pc, #400]	; (8002830 <HAL_ADC_Init+0x298>)
 800269e:	f7ff ff2d 	bl	80024fc <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	431c      	orrs	r4, r3
 80026a6:	4863      	ldr	r0, [pc, #396]	; (8002834 <HAL_ADC_Init+0x29c>)
 80026a8:	f7ff ff28 	bl	80024fc <LL_ADC_IsEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4323      	orrs	r3, r4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4619      	mov	r1, r3
 80026ba:	485f      	ldr	r0, [pc, #380]	; (8002838 <HAL_ADC_Init+0x2a0>)
 80026bc:	f7ff fd96 	bl	80021ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e5b      	ldrb	r3, [r3, #25]
 80026c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	3b01      	subs	r3, #1
 80026f4:	045b      	lsls	r3, r3, #17
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_ADC_Init+0x2a4>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	430b      	orrs	r3, r1
 800272a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff0a 	bl	800254a <LL_ADC_REG_IsConversionOngoing>
 8002736:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff17 	bl	8002570 <LL_ADC_INJ_IsConversionOngoing>
 8002742:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13d      	bne.n	80027c6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d13a      	bne.n	80027c6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002754:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800275c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276c:	f023 0302 	bic.w	r3, r3, #2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	69b9      	ldr	r1, [r7, #24]
 8002776:	430b      	orrs	r3, r1
 8002778:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002780:	2b01      	cmp	r3, #1
 8002782:	d118      	bne.n	80027b6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027a6:	430a      	orrs	r2, r1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	e007      	b.n	80027c6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10c      	bne.n	80027e8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f023 010f 	bic.w	r1, r3, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
 80027e6:	e007      	b.n	80027f8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 020f 	bic.w	r2, r2, #15
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
 8002808:	e007      	b.n	800281a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800281a:	7ffb      	ldrb	r3, [r7, #31]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	20000000 	.word	0x20000000
 8002828:	053e2d63 	.word	0x053e2d63
 800282c:	50040000 	.word	0x50040000
 8002830:	50040100 	.word	0x50040100
 8002834:	50040200 	.word	0x50040200
 8002838:	50040300 	.word	0x50040300
 800283c:	fff0c007 	.word	0xfff0c007

08002840 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002848:	4857      	ldr	r0, [pc, #348]	; (80029a8 <HAL_ADC_Start+0x168>)
 800284a:	f7ff fdd9 	bl	8002400 <LL_ADC_GetMultimode>
 800284e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fe78 	bl	800254a <LL_ADC_REG_IsConversionOngoing>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 809c 	bne.w	800299a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ADC_Start+0x30>
 800286c:	2302      	movs	r3, #2
 800286e:	e097      	b.n	80029a0 <HAL_ADC_Start+0x160>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fcdd 	bl	8003238 <ADC_Enable>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 8083 	bne.w	8002990 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a42      	ldr	r2, [pc, #264]	; (80029ac <HAL_ADC_Start+0x16c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d002      	beq.n	80028ae <HAL_ADC_Start+0x6e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_Start+0x70>
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_ADC_Start+0x170>)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d002      	beq.n	80028be <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f023 0206 	bic.w	r2, r3, #6
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58
 80028e4:	e002      	b.n	80028ec <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	221c      	movs	r2, #28
 80028f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <HAL_ADC_Start+0x16c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d002      	beq.n	800290c <HAL_ADC_Start+0xcc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	e000      	b.n	800290e <HAL_ADC_Start+0xce>
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_ADC_Start+0x170>)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	4293      	cmp	r3, r2
 8002914:	d008      	beq.n	8002928 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d002      	beq.n	8002928 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b09      	cmp	r3, #9
 8002926:	d114      	bne.n	8002952 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800293e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fde9 	bl	8002522 <LL_ADC_REG_StartConversion>
 8002950:	e025      	b.n	800299e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_ADC_Start+0x16c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_Start+0x12e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e000      	b.n	8002970 <HAL_ADC_Start+0x130>
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_ADC_Start+0x170>)
 8002970:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00f      	beq.n	800299e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002986:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
 800298e:	e006      	b.n	800299e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002998:	e001      	b.n	800299e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	50040300 	.word	0x50040300
 80029ac:	50040100 	.word	0x50040100
 80029b0:	50040000 	.word	0x50040000

080029b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029be:	4862      	ldr	r0, [pc, #392]	; (8002b48 <HAL_ADC_PollForConversion+0x194>)
 80029c0:	f7ff fd1e 	bl	8002400 <LL_ADC_GetMultimode>
 80029c4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d102      	bne.n	80029d4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029ce:	2308      	movs	r3, #8
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e02a      	b.n	8002a2a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e09d      	b.n	8002b40 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a04:	2304      	movs	r3, #4
 8002a06:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a08:	e00f      	b.n	8002a2a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a0a:	484f      	ldr	r0, [pc, #316]	; (8002b48 <HAL_ADC_PollForConversion+0x194>)
 8002a0c:	f7ff fd06 	bl	800241c <LL_ADC_GetMultiDMATransfer>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08c      	b.n	8002b40 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a26:	2304      	movs	r3, #4
 8002a28:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a2a:	f7ff fbb1 	bl	8002190 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a30:	e01a      	b.n	8002a68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a38:	d016      	beq.n	8002a68 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a3a:	f7ff fba9 	bl	8002190 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <HAL_ADC_PollForConversion+0x9c>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e06b      	b.n	8002b40 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0dd      	beq.n	8002a32 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fc32 	bl	80022f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01c      	beq.n	8002acc <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7e5b      	ldrb	r3, [r3, #25]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d111      	bne.n	8002acc <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_ADC_PollForConversion+0x198>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d002      	beq.n	8002adc <HAL_ADC_PollForConversion+0x128>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e000      	b.n	8002ade <HAL_ADC_PollForConversion+0x12a>
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_ADC_PollForConversion+0x19c>)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d008      	beq.n	8002af8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d002      	beq.n	8002af8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d104      	bne.n	8002b02 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e00c      	b.n	8002b1c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_PollForConversion+0x198>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d002      	beq.n	8002b12 <HAL_ADC_PollForConversion+0x15e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e000      	b.n	8002b14 <HAL_ADC_PollForConversion+0x160>
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_ADC_PollForConversion+0x19c>)
 8002b14:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d104      	bne.n	8002b2c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2208      	movs	r2, #8
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e008      	b.n	8002b3e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	50040300 	.word	0x50040300
 8002b4c:	50040100 	.word	0x50040100
 8002b50:	50040000 	.word	0x50040000

08002b54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0a6      	sub	sp, #152	; 0x98
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x22>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e348      	b.n	8003224 <HAL_ADC_ConfigChannel+0x6b4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fcd3 	bl	800254a <LL_ADC_REG_IsConversionOngoing>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 8329 	bne.w	80031fe <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d824      	bhi.n	8002bfe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	3b02      	subs	r3, #2
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d81b      	bhi.n	8002bf6 <HAL_ADC_ConfigChannel+0x86>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_ADC_ConfigChannel+0x54>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002be5 	.word	0x08002be5
 8002bd0:	08002bed 	.word	0x08002bed
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e011      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2212      	movs	r2, #18
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e00d      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2218      	movs	r2, #24
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e009      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002bfe:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f7ff fb82 	bl	8002316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fc97 	bl	800254a <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fca3 	bl	8002570 <LL_ADC_INJ_IsConversionOngoing>
 8002c2a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8148 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8143 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f7ff fb8a 	bl	8002368 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	08db      	lsrs	r3, r3, #3
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00a      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c86:	f7ff fae5 	bl	8002254 <LL_ADC_SetOffset>
 8002c8a:	e11d      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fb00 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x148>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff faf5 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 021f 	and.w	r2, r3, #31
 8002cb6:	e012      	b.n	8002cde <HAL_ADC_ConfigChannel+0x16e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff faea 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x186>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e00a      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x19c>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d106      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fad1 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fab7 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1da>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff faac 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	e010      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1fc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff faa1 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x214>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	e00a      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x22a>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fa8a 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fa70 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x268>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa65 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	f003 021f 	and.w	r2, r3, #31
 8002dd6:	e010      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x28a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fa5a 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x2a2>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	e00a      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x2b8>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d106      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fa43 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fa29 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x2f6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2103      	movs	r1, #3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fa1e 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	e010      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x318>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fa13 	bl	8002298 <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x330>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	e00a      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x346>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f9fc 	bl	80022c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb15 	bl	80024fc <LL_ADC_IsEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 810c 	bne.w	80030f2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fa66 	bl	80023b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4aad      	ldr	r2, [pc, #692]	; (80031a8 <HAL_ADC_ConfigChannel+0x638>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f040 80fd 	bne.w	80030f2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x3b0>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b09      	cmp	r3, #9
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e012      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x3d6>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d064      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x3f6>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	069b      	lsls	r3, r3, #26
 8002f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f64:	e00e      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x414>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x434>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	e010      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x456>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x47c>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0e9b      	lsrs	r3, r3, #26
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	051b      	lsls	r3, r3, #20
 8002fea:	e011      	b.n	8003010 <HAL_ADC_ConfigChannel+0x4a0>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003010:	430b      	orrs	r3, r1
 8003012:	e069      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x4c0>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	3301      	adds	r3, #1
 8003028:	069b      	lsls	r3, r3, #26
 800302a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800302e:	e00e      	b.n	800304e <HAL_ADC_ConfigChannel+0x4de>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	61fb      	str	r3, [r7, #28]
  return result;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3301      	adds	r3, #1
 8003048:	069b      	lsls	r3, r3, #26
 800304a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_ADC_ConfigChannel+0x4fe>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	e010      	b.n	8003090 <HAL_ADC_ConfigChannel+0x520>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	617b      	str	r3, [r7, #20]
  return result;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x54c>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ba:	e014      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x576>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
  return result;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	3b1e      	subs	r3, #30
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e6:	430b      	orrs	r3, r1
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7ff f93b 	bl	8002368 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_ADC_ConfigChannel+0x63c>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 808c 	beq.w	8003218 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003100:	482b      	ldr	r0, [pc, #172]	; (80031b0 <HAL_ADC_ConfigChannel+0x640>)
 8003102:	f7ff f899 	bl	8002238 <LL_ADC_GetCommonPathInternalCh>
 8003106:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_ADC_ConfigChannel+0x644>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d12b      	bne.n	800316c <HAL_ADC_ConfigChannel+0x5fc>
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d125      	bne.n	800316c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_ADC_ConfigChannel+0x648>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x5c4>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_ADC_ConfigChannel+0x64c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d16e      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800313c:	4619      	mov	r1, r3
 800313e:	481c      	ldr	r0, [pc, #112]	; (80031b0 <HAL_ADC_ConfigChannel+0x640>)
 8003140:	f7ff f867 	bl	8002212 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <HAL_ADC_ConfigChannel+0x650>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_ADC_ConfigChannel+0x654>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	099a      	lsrs	r2, r3, #6
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800315c:	e002      	b.n	8003164 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3b01      	subs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800316a:	e052      	b.n	8003212 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <HAL_ADC_ConfigChannel+0x658>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12a      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x65c>
 8003176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800317a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d124      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_ADC_ConfigChannel+0x648>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x626>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_ADC_ConfigChannel+0x64c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d13f      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319e:	4619      	mov	r1, r3
 80031a0:	4803      	ldr	r0, [pc, #12]	; (80031b0 <HAL_ADC_ConfigChannel+0x640>)
 80031a2:	f7ff f836 	bl	8002212 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a6:	e036      	b.n	8003216 <HAL_ADC_ConfigChannel+0x6a6>
 80031a8:	407f0000 	.word	0x407f0000
 80031ac:	80080000 	.word	0x80080000
 80031b0:	50040300 	.word	0x50040300
 80031b4:	c7520000 	.word	0xc7520000
 80031b8:	50040000 	.word	0x50040000
 80031bc:	50040200 	.word	0x50040200
 80031c0:	20000000 	.word	0x20000000
 80031c4:	053e2d63 	.word	0x053e2d63
 80031c8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_ADC_ConfigChannel+0x6bc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d120      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <HAL_ADC_ConfigChannel+0x6c0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d115      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031f4:	4619      	mov	r1, r3
 80031f6:	480f      	ldr	r0, [pc, #60]	; (8003234 <HAL_ADC_ConfigChannel+0x6c4>)
 80031f8:	f7ff f80b 	bl	8002212 <LL_ADC_SetCommonPathInternalCh>
 80031fc:	e00c      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003210:	e002      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003216:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003220:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003224:	4618      	mov	r0, r3
 8003226:	3798      	adds	r7, #152	; 0x98
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	80000001 	.word	0x80000001
 8003230:	50040000 	.word	0x50040000
 8003234:	50040300 	.word	0x50040300

08003238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f959 	bl	80024fc <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d146      	bne.n	80032de <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <ADC_Enable+0xb0>)
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e032      	b.n	80032e0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f928 	bl	80024d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003284:	f7fe ff84 	bl	8002190 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800328a:	e021      	b.n	80032d0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f933 	bl	80024fc <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f917 	bl	80024d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032a6:	f7fe ff73 	bl	8002190 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d90d      	bls.n	80032d0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d1d6      	bne.n	800328c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	8000003f 	.word	0x8000003f

080032ec <LL_ADC_IsEnabled>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <LL_ADC_IsEnabled+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_ADC_IsEnabled+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <LL_ADC_REG_IsConversionOngoing>:
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d101      	bne.n	800332a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b09f      	sub	sp, #124	; 0x7c
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003352:	2302      	movs	r3, #2
 8003354:	e08f      	b.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003368:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	e001      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e072      	b.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ffbd 	bl	8003312 <LL_ADC_REG_IsConversionOngoing>
 8003398:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffb7 	bl	8003312 <LL_ADC_REG_IsConversionOngoing>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d154      	bne.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d151      	bne.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02c      	beq.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ce:	035b      	lsls	r3, r3, #13
 80033d0:	430b      	orrs	r3, r1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d8:	4829      	ldr	r0, [pc, #164]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033da:	f7ff ff87 	bl	80032ec <LL_ADC_IsEnabled>
 80033de:	4604      	mov	r4, r0
 80033e0:	4828      	ldr	r0, [pc, #160]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033e2:	f7ff ff83 	bl	80032ec <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	431c      	orrs	r4, r3
 80033ea:	4828      	ldr	r0, [pc, #160]	; (800348c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033ec:	f7ff ff7e 	bl	80032ec <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d137      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003400:	f023 030f 	bic.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	430a      	orrs	r2, r1
 800340e:	431a      	orrs	r2, r3
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	e028      	b.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003422:	4817      	ldr	r0, [pc, #92]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003424:	f7ff ff62 	bl	80032ec <LL_ADC_IsEnabled>
 8003428:	4604      	mov	r4, r0
 800342a:	4816      	ldr	r0, [pc, #88]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800342c:	f7ff ff5e 	bl	80032ec <LL_ADC_IsEnabled>
 8003430:	4603      	mov	r3, r0
 8003432:	431c      	orrs	r4, r3
 8003434:	4815      	ldr	r0, [pc, #84]	; (800348c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003436:	f7ff ff59 	bl	80032ec <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	4323      	orrs	r3, r4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d112      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800344a:	f023 030f 	bic.w	r3, r3, #15
 800344e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003450:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003452:	e009      	b.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003466:	e000      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003468:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003472:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003476:	4618      	mov	r0, r3
 8003478:	377c      	adds	r7, #124	; 0x7c
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	bf00      	nop
 8003480:	50040000 	.word	0x50040000
 8003484:	50040100 	.word	0x50040100
 8003488:	50040300 	.word	0x50040300
 800348c:	50040200 	.word	0x50040200

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff29 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff3e 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff8e 	bl	8003584 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff31 	bl	80034f4 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e17f      	b.n	80039c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8171 	beq.w	80039be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d00b      	beq.n	80036fc <HAL_GPIO_Init+0x48>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d007      	beq.n	80036fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f0:	2b11      	cmp	r3, #17
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b12      	cmp	r3, #18
 80036fa:	d130      	bne.n	800375e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003732:	2201      	movs	r2, #1
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 0201 	and.w	r2, r3, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b03      	cmp	r3, #3
 8003768:	d118      	bne.n	800379c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003770:	2201      	movs	r2, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	08db      	lsrs	r3, r3, #3
 8003786:	f003 0201 	and.w	r2, r3, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x128>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	6939      	ldr	r1, [r7, #16]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ac 	beq.w	80039be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_GPIO_Init+0x32c>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	4a5d      	ldr	r2, [pc, #372]	; (80039e0 <HAL_GPIO_Init+0x32c>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6613      	str	r3, [r2, #96]	; 0x60
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <HAL_GPIO_Init+0x32c>)
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800387e:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <HAL_GPIO_Init+0x330>)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038a8:	d025      	beq.n	80038f6 <HAL_GPIO_Init+0x242>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4e      	ldr	r2, [pc, #312]	; (80039e8 <HAL_GPIO_Init+0x334>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <HAL_GPIO_Init+0x23e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4d      	ldr	r2, [pc, #308]	; (80039ec <HAL_GPIO_Init+0x338>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d019      	beq.n	80038ee <HAL_GPIO_Init+0x23a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <HAL_GPIO_Init+0x33c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x236>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	; (80039f4 <HAL_GPIO_Init+0x340>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x232>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_GPIO_Init+0x344>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x22e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_GPIO_Init+0x348>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x22a>
 80038da:	2306      	movs	r3, #6
 80038dc:	e00c      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038de:	2307      	movs	r3, #7
 80038e0:	e00a      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e008      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e004      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x244>
 80038f6:	2300      	movs	r3, #0
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	4093      	lsls	r3, r2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003908:	4936      	ldr	r1, [pc, #216]	; (80039e4 <HAL_GPIO_Init+0x330>)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800393a:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003940:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_GPIO_Init+0x34c>)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3301      	adds	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f47f ae78 	bne.w	80036c4 <HAL_GPIO_Init+0x10>
  }
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010000 	.word	0x40010000
 80039e8:	48000400 	.word	0x48000400
 80039ec:	48000800 	.word	0x48000800
 80039f0:	48000c00 	.word	0x48000c00
 80039f4:	48001000 	.word	0x48001000
 80039f8:	48001400 	.word	0x48001400
 80039fc:	48001800 	.word	0x48001800
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40007000 	.word	0x40007000

08003a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5e:	d130      	bne.n	8003ac2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6c:	d038      	beq.n	8003ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2232      	movs	r2, #50	; 0x32
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0c9b      	lsrs	r3, r3, #18
 8003a90:	3301      	adds	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a94:	e002      	b.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa8:	d102      	bne.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f2      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abc:	d110      	bne.n	8003ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e00f      	b.n	8003ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d007      	beq.n	8003ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad8:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ade:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40007000 	.word	0x40007000
 8003af4:	20000000 	.word	0x20000000
 8003af8:	431bde83 	.word	0x431bde83

08003afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e3d4      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4ba1      	ldr	r3, [pc, #644]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b18:	4b9e      	ldr	r3, [pc, #632]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80e4 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4a>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	f040 808b 	bne.w	8003c54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 8087 	bne.w	8003c54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b46:	4b93      	ldr	r3, [pc, #588]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e3ac      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	4b8c      	ldr	r3, [pc, #560]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCC_OscConfig+0x7c>
 8003b6e:	4b89      	ldr	r3, [pc, #548]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b76:	e005      	b.n	8003b84 <HAL_RCC_OscConfig+0x88>
 8003b78:	4b86      	ldr	r3, [pc, #536]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d223      	bcs.n	8003bd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fd3f 	bl	8004610 <RCC_SetFlashLatencyFromMSIRange>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e38d      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9c:	4b7d      	ldr	r3, [pc, #500]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7c      	ldr	r2, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003ba2:	f043 0308 	orr.w	r3, r3, #8
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b7a      	ldr	r3, [pc, #488]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4977      	ldr	r1, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	4972      	ldr	r1, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
 8003bce:	e025      	b.n	8003c1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd0:	4b70      	ldr	r3, [pc, #448]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a6f      	ldr	r2, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b6d      	ldr	r3, [pc, #436]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	496a      	ldr	r1, [pc, #424]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bee:	4b69      	ldr	r3, [pc, #420]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	4965      	ldr	r1, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fcff 	bl	8004610 <RCC_SetFlashLatencyFromMSIRange>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e34d      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c1c:	f000 fc36 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8003c20:	4601      	mov	r1, r0
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_RCC_OscConfig+0x29c>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	fa21 f303 	lsr.w	r3, r1, r3
 8003c38:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x2a0>)
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_OscConfig+0x2a4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fa59 	bl	80020f8 <HAL_InitTick>
 8003c46:	4603      	mov	r3, r0
 8003c48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d052      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	e331      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d032      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a4c      	ldr	r2, [pc, #304]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fa92 	bl	8002190 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c70:	f7fe fa8e 	bl	8002190 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e31a      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c94:	f043 0308 	orr.w	r3, r3, #8
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	493b      	ldr	r1, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	4936      	ldr	r1, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
 8003cc0:	e01a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cce:	f7fe fa5f 	bl	8002190 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd6:	f7fe fa5b 	bl	8002190 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e2e7      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f0      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x1da>
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d074      	beq.n	8003dee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x21a>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d10e      	bne.n	8003d2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d064      	beq.n	8003dec <HAL_RCC_OscConfig+0x2f0>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d160      	bne.n	8003dec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e2c4      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x24a>
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e01d      	b.n	8003d82 <HAL_RCC_OscConfig+0x286>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0x26e>
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e00b      	b.n	8003d82 <HAL_RCC_OscConfig+0x286>
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x298>)
 8003d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fe fa01 	bl	8002190 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d90:	e011      	b.n	8003db6 <HAL_RCC_OscConfig+0x2ba>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	08007a60 	.word	0x08007a60
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe f9f4 	bl	8002190 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e280      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db6:	4baf      	ldr	r3, [pc, #700]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2a8>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f9e4 	bl	8002190 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe f9e0 	bl	8002190 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e26c      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dde:	4ba5      	ldr	r3, [pc, #660]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2d0>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d060      	beq.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x310>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d119      	bne.n	8003e3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d116      	bne.n	8003e3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e0c:	4b99      	ldr	r3, [pc, #612]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_OscConfig+0x328>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e249      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b93      	ldr	r3, [pc, #588]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	4990      	ldr	r1, [pc, #576]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e38:	e040      	b.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d023      	beq.n	8003e8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e42:	4b8c      	ldr	r3, [pc, #560]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a8b      	ldr	r2, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fe f99f 	bl	8002190 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fe f99b 	bl	8002190 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e227      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e68:	4b82      	ldr	r3, [pc, #520]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b7f      	ldr	r3, [pc, #508]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	497c      	ldr	r1, [pc, #496]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	e018      	b.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	4b7a      	ldr	r3, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a79      	ldr	r2, [pc, #484]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fe f97b 	bl	8002190 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fe f977 	bl	8002190 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e203      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb0:	4b70      	ldr	r3, [pc, #448]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed6:	4a67      	ldr	r2, [pc, #412]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f956 	bl	8002190 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe f952 	bl	8002190 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1de      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003efa:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x3ec>
 8003f08:	e01b      	b.n	8003f42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0a:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f10:	4a58      	ldr	r2, [pc, #352]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fe f939 	bl	8002190 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fe f935 	bl	8002190 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e1c1      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f34:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ef      	bne.n	8003f22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a6 	beq.w	800409c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f54:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10d      	bne.n	8003f7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	4a43      	ldr	r2, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6c:	4b41      	ldr	r3, [pc, #260]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7c:	4b3e      	ldr	r3, [pc, #248]	; (8004078 <HAL_RCC_OscConfig+0x57c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d118      	bne.n	8003fba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f88:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x57c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <HAL_RCC_OscConfig+0x57c>)
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f94:	f7fe f8fc 	bl	8002190 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9c:	f7fe f8f8 	bl	8002190 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e184      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fae:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_RCC_OscConfig+0x57c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4d8>
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd2:	e024      	b.n	800401e <HAL_RCC_OscConfig+0x522>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d110      	bne.n	8003ffe <HAL_RCC_OscConfig+0x502>
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	4a24      	ldr	r2, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	4a20      	ldr	r2, [pc, #128]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ffc:	e00f      	b.n	800401e <HAL_RCC_OscConfig+0x522>
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fe f8b3 	bl	8002190 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe f8af 	bl	8002190 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e139      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_OscConfig+0x578>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ed      	beq.n	800402e <HAL_RCC_OscConfig+0x532>
 8004052:	e01a      	b.n	800408a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe f89c 	bl	8002190 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405a:	e00f      	b.n	800407c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe f898 	bl	8002190 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d906      	bls.n	800407c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e122      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800407c:	4b90      	ldr	r3, [pc, #576]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e8      	bne.n	800405c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b8b      	ldr	r3, [pc, #556]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	4a8a      	ldr	r2, [pc, #552]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8108 	beq.w	80042b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 80d0 	bne.w	8004250 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040b0:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 0203 	and.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d130      	bne.n	8004126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	3b01      	subs	r3, #1
 80040d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d127      	bne.n	8004126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11f      	bne.n	8004126 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f0:	2a07      	cmp	r2, #7
 80040f2:	bf14      	ite	ne
 80040f4:	2201      	movne	r2, #1
 80040f6:	2200      	moveq	r2, #0
 80040f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d113      	bne.n	8004126 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d109      	bne.n	8004126 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d06e      	beq.n	8004204 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d069      	beq.n	8004200 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b7      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004148:	4b5d      	ldr	r3, [pc, #372]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004152:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004154:	f7fe f81c 	bl	8002190 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fe f818 	bl	8002190 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0a4      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416e:	4b54      	ldr	r3, [pc, #336]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <HAL_RCC_OscConfig+0x7c8>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800418a:	3a01      	subs	r2, #1
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004194:	0212      	lsls	r2, r2, #8
 8004196:	4311      	orrs	r1, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800419c:	0852      	lsrs	r2, r2, #1
 800419e:	3a01      	subs	r2, #1
 80041a0:	0552      	lsls	r2, r2, #21
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041a8:	0852      	lsrs	r2, r2, #1
 80041aa:	3a01      	subs	r2, #1
 80041ac:	0652      	lsls	r2, r2, #25
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b4:	0912      	lsrs	r2, r2, #4
 80041b6:	0452      	lsls	r2, r2, #17
 80041b8:	430a      	orrs	r2, r1
 80041ba:	4941      	ldr	r1, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041c0:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a3e      	ldr	r2, [pc, #248]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041cc:	4b3c      	ldr	r3, [pc, #240]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d8:	f7fd ffda 	bl	8002190 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd ffd6 	bl	8002190 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e062      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f2:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fe:	e05a      	b.n	80042b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e059      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004204:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d152      	bne.n	80042b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004228:	f7fd ffb2 	bl	8002190 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd ffae 	bl	8002190 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e03a      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x734>
 800424e:	e032      	b.n	80042b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d02d      	beq.n	80042b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800425c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004260:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004274:	f023 0303 	bic.w	r3, r3, #3
 8004278:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 8004280:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004288:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd ff81 	bl	8002190 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004292:	f7fd ff7d 	bl	8002190 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e009      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x7c4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f0      	bne.n	8004292 <HAL_RCC_OscConfig+0x796>
 80042b0:	e001      	b.n	80042b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	f99d808c 	.word	0xf99d808c

080042c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0c8      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d910      	bls.n	800430c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	4961      	ldr	r1, [pc, #388]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b0      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d04c      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004320:	4b56      	ldr	r3, [pc, #344]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d121      	bne.n	8004370 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e09e      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d107      	bne.n	8004348 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d115      	bne.n	8004370 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e092      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004350:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e086      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004360:	4b46      	ldr	r3, [pc, #280]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e07e      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 0203 	bic.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	493f      	ldr	r1, [pc, #252]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004382:	f7fd ff05 	bl	8002190 <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438a:	f7fd ff01 	bl	8002190 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e066      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a0:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 020c 	and.w	r2, r3, #12
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d1eb      	bne.n	800438a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	492c      	ldr	r1, [pc, #176]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4924      	ldr	r1, [pc, #144]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1b0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e036      	b.n	800446e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4918      	ldr	r1, [pc, #96]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4910      	ldr	r1, [pc, #64]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800443e:	f000 f825 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8004442:	4601      	mov	r1, r0
 8004444:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCC_ClockConfig+0x1b4>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	fa21 f303 	lsr.w	r3, r1, r3
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd fe48 	bl	80020f8 <HAL_InitTick>
 8004468:	4603      	mov	r3, r0
 800446a:	72fb      	strb	r3, [r7, #11]

  return status;
 800446c:	7afb      	ldrb	r3, [r7, #11]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	08007a60 	.word	0x08007a60
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d121      	bne.n	80044fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d11e      	bne.n	80044fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c0:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e005      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044dc:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10d      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d102      	bne.n	800450a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e004      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d101      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCC_GetSysClockFreq+0x110>)
 8004512:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d133      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800451a:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d002      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0xa4>
 800452a:	2b03      	cmp	r3, #3
 800452c:	d003      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0xaa>
 800452e:	e005      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004530:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004532:	617b      	str	r3, [r7, #20]
      break;
 8004534:	e005      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCC_GetSysClockFreq+0x110>)
 8004538:	617b      	str	r3, [r7, #20]
      break;
 800453a:	e002      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	617b      	str	r3, [r7, #20]
      break;
 8004540:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	3301      	adds	r3, #1
 800454e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	fb02 f203 	mul.w	r2, r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_GetSysClockFreq+0x104>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0e5b      	lsrs	r3, r3, #25
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004582:	69bb      	ldr	r3, [r7, #24]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3724      	adds	r7, #36	; 0x24
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40021000 	.word	0x40021000
 8004594:	08007a78 	.word	0x08007a78
 8004598:	00f42400 	.word	0x00f42400
 800459c:	007a1200 	.word	0x007a1200

080045a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000000 	.word	0x20000000

080045b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045bc:	f7ff fff0 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 80045c0:	4601      	mov	r1, r0
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08007a70 	.word	0x08007a70

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045e8:	f7ff ffda 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 80045ec:	4601      	mov	r1, r0
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0adb      	lsrs	r3, r3, #11
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	08007a70 	.word	0x08007a70

08004610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800461c:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004628:	f7ff fa04 	bl	8003a34 <HAL_PWREx_GetVoltageRange>
 800462c:	6178      	str	r0, [r7, #20]
 800462e:	e014      	b.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004648:	f7ff f9f4 	bl	8003a34 <HAL_PWREx_GetVoltageRange>
 800464c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d10b      	bne.n	800467a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d919      	bls.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2ba0      	cmp	r3, #160	; 0xa0
 800466c:	d902      	bls.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800466e:	2302      	movs	r3, #2
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e013      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004674:	2301      	movs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e010      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d902      	bls.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004680:	2303      	movs	r3, #3
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	e00a      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d102      	bne.n	8004692 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800468c:	2302      	movs	r3, #2
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e004      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d101      	bne.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004698:	2301      	movs	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 0207 	bic.w	r2, r3, #7
 80046a4:	4909      	ldr	r1, [pc, #36]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40022000 	.word	0x40022000

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d8:	2300      	movs	r3, #0
 80046da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046dc:	2300      	movs	r3, #0
 80046de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d03f      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f4:	d01c      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fa:	d802      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004700:	e01f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470c:	d01c      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800470e:	e018      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004710:	4b85      	ldr	r3, [pc, #532]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a84      	ldr	r2, [pc, #528]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800471c:	e015      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fab9 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800472e:	e00c      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3320      	adds	r3, #32
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fba0 	bl	8004e7c <RCCEx_PLLSAI2_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	74fb      	strb	r3, [r7, #19]
      break;
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004750:	4b75      	ldr	r3, [pc, #468]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475e:	4972      	ldr	r1, [pc, #456]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004766:	e001      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03f      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004780:	d01c      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004786:	d802      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800478c:	e01f      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800478e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004792:	d003      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004798:	d01c      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800479a:	e018      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800479c:	4b62      	ldr	r3, [pc, #392]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fa73 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047ba:	e00c      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3320      	adds	r3, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb5a 	bl	8004e7c <RCCEx_PLLSAI2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	74fb      	strb	r3, [r7, #19]
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047dc:	4b52      	ldr	r3, [pc, #328]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	494f      	ldr	r1, [pc, #316]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047f2:	e001      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a0 	beq.w	8004946 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	4a40      	ldr	r2, [pc, #256]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6593      	str	r3, [r2, #88]	; 0x58
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004848:	f7fd fca2 	bl	8002190 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800484e:	e009      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd fc9e 	bl	8002190 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d902      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	74fb      	strb	r3, [r7, #19]
        break;
 8004862:	e005      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d15c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004880:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01f      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d019      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004894:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd fc5d 	bl	8002190 <HAL_GetTick>
 80048d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d8:	e00b      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd fc59 	bl	8002190 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d902      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	74fb      	strb	r3, [r7, #19]
            break;
 80048f0:	e006      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ec      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800491e:	e009      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	74bb      	strb	r3, [r7, #18]
 8004924:	e006      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004934:	7c7b      	ldrb	r3, [r7, #17]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b9e      	ldr	r3, [pc, #632]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	4a9d      	ldr	r2, [pc, #628]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004952:	4b98      	ldr	r3, [pc, #608]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 0203 	bic.w	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	4994      	ldr	r1, [pc, #592]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004974:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f023 020c 	bic.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	498c      	ldr	r1, [pc, #560]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	4983      	ldr	r1, [pc, #524]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	497b      	ldr	r1, [pc, #492]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	4972      	ldr	r1, [pc, #456]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049fc:	4b6d      	ldr	r3, [pc, #436]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	496a      	ldr	r1, [pc, #424]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1e:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	4961      	ldr	r1, [pc, #388]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a40:	4b5c      	ldr	r3, [pc, #368]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	4959      	ldr	r1, [pc, #356]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a62:	4b54      	ldr	r3, [pc, #336]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	4950      	ldr	r1, [pc, #320]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a84:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	4948      	ldr	r1, [pc, #288]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d028      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad6:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
 8004af4:	e011      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f8c8 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d028      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b26:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	491f      	ldr	r1, [pc, #124]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b50:	60d3      	str	r3, [r2, #12]
 8004b52:	e011      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f899 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02b      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b92:	4908      	ldr	r1, [pc, #32]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a02      	ldr	r2, [pc, #8]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bae:	60d3      	str	r3, [r2, #12]
 8004bb0:	e014      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f867 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02f      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf6:	4928      	ldr	r1, [pc, #160]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f844 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	74bb      	strb	r3, [r7, #18]
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3320      	adds	r3, #32
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f921 	bl	8004e7c <RCCEx_PLLSAI2_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c62:	490d      	ldr	r1, [pc, #52]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000

08004c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004caa:	4b73      	ldr	r3, [pc, #460]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cb6:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10d      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cce:	4b6a      	ldr	r3, [pc, #424]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d044      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e041      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d00c      	beq.n	8004d0a <RCCEx_PLLSAI1_Config+0x6e>
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d013      	beq.n	8004d1c <RCCEx_PLLSAI1_Config+0x80>
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d120      	bne.n	8004d3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cf8:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11d      	bne.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d08:	e01a      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d0a:	4b5b      	ldr	r3, [pc, #364]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d116      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1a:	e013      	b.n	8004d44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d1c:	4b56      	ldr	r3, [pc, #344]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10f      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d38:	e006      	b.n	8004d48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3e:	e004      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d48:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	430b      	orrs	r3, r1
 8004d66:	4944      	ldr	r1, [pc, #272]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d17d      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7e:	f7fd fa07 	bl	8002190 <HAL_GetTick>
 8004d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d84:	e009      	b.n	8004d9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d86:	f7fd fa03 	bl	8002190 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d902      	bls.n	8004d9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	73fb      	strb	r3, [r7, #15]
        break;
 8004d98:	e005      	b.n	8004da6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9a:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ef      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d160      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d111      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db2:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6892      	ldr	r2, [r2, #8]
 8004dc2:	0211      	lsls	r1, r2, #8
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68d2      	ldr	r2, [r2, #12]
 8004dc8:	0912      	lsrs	r2, r2, #4
 8004dca:	0452      	lsls	r2, r2, #17
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	492a      	ldr	r1, [pc, #168]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	610b      	str	r3, [r1, #16]
 8004dd4:	e027      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d112      	bne.n	8004e02 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6892      	ldr	r2, [r2, #8]
 8004dec:	0211      	lsls	r1, r2, #8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	0852      	lsrs	r2, r2, #1
 8004df4:	3a01      	subs	r2, #1
 8004df6:	0552      	lsls	r2, r2, #21
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	491f      	ldr	r1, [pc, #124]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]
 8004e00:	e011      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6892      	ldr	r2, [r2, #8]
 8004e12:	0211      	lsls	r1, r2, #8
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6952      	ldr	r2, [r2, #20]
 8004e18:	0852      	lsrs	r2, r2, #1
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	0652      	lsls	r2, r2, #25
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	4915      	ldr	r1, [pc, #84]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fd f9ad 	bl	8002190 <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e38:	e009      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e3a:	f7fd f9a9 	bl	8002190 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d902      	bls.n	8004e4e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004e4c:	e005      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4903      	ldr	r1, [pc, #12]	; (8004e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8a:	4b68      	ldr	r3, [pc, #416]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e96:	4b65      	ldr	r3, [pc, #404]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0203 	and.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d044      	beq.n	8004f4c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e041      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d00c      	beq.n	8004eea <RCCEx_PLLSAI2_Config+0x6e>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d013      	beq.n	8004efc <RCCEx_PLLSAI2_Config+0x80>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d120      	bne.n	8004f1a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ed8:	4b54      	ldr	r3, [pc, #336]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11d      	bne.n	8004f20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee8:	e01a      	b.n	8004f20 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eea:	4b50      	ldr	r3, [pc, #320]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d116      	bne.n	8004f24 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efa:	e013      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004efc:	4b4b      	ldr	r3, [pc, #300]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10f      	bne.n	8004f28 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f08:	4b48      	ldr	r3, [pc, #288]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f18:	e006      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e004      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f20:	bf00      	nop
 8004f22:	e002      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f24:	bf00      	nop
 8004f26:	e000      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f28:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	430b      	orrs	r3, r1
 8004f46:	4939      	ldr	r1, [pc, #228]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d167      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f52:	4b36      	ldr	r3, [pc, #216]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a35      	ldr	r2, [pc, #212]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fd f917 	bl	8002190 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f64:	e009      	b.n	8004f7a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f66:	f7fd f913 	bl	8002190 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	73fb      	strb	r3, [r7, #15]
        break;
 8004f78:	e005      	b.n	8004f86 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ef      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d14a      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d111      	bne.n	8004fb6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f92:	4b26      	ldr	r3, [pc, #152]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6892      	ldr	r2, [r2, #8]
 8004fa2:	0211      	lsls	r1, r2, #8
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68d2      	ldr	r2, [r2, #12]
 8004fa8:	0912      	lsrs	r2, r2, #4
 8004faa:	0452      	lsls	r2, r2, #17
 8004fac:	430a      	orrs	r2, r1
 8004fae:	491f      	ldr	r1, [pc, #124]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	614b      	str	r3, [r1, #20]
 8004fb4:	e011      	b.n	8004fda <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6892      	ldr	r2, [r2, #8]
 8004fc6:	0211      	lsls	r1, r2, #8
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6912      	ldr	r2, [r2, #16]
 8004fcc:	0852      	lsrs	r2, r2, #1
 8004fce:	3a01      	subs	r2, #1
 8004fd0:	0652      	lsls	r2, r2, #25
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	4915      	ldr	r1, [pc, #84]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fd f8d3 	bl	8002190 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fec:	e009      	b.n	8005002 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fee:	f7fd f8cf 	bl	8002190 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	73fb      	strb	r3, [r7, #15]
          break;
 8005000:	e005      	b.n	800500e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <RCCEx_PLLSAI2_Config+0x1b0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e01d      	b.n	800507e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc feb8 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 fc1e 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_TIM_Base_Start_IT+0x50>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d00b      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x42>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d007      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e01d      	b.n	800512a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f815 	bl	8005132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fbc8 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f83a 	bl	80061d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_TIM_PWM_Start+0x98>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_TIM_PWM_Start+0x4a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_TIM_PWM_Start+0x9c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIM_PWM_Start+0x4a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <HAL_TIM_PWM_Start+0xa0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIM_PWM_Start+0x4a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_TIM_PWM_Start+0xa4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIM_PWM_Start+0x4a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_TIM_PWM_Start+0xa8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <HAL_TIM_PWM_Start+0x4e>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_TIM_PWM_Start+0x50>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_TIM_PWM_Start+0xac>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b06      	cmp	r3, #6
 80051bc:	d00b      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x8e>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d007      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	00010007 	.word	0x00010007

080051f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0202 	mvn.w	r2, #2
 8005224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb19 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fb0b 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb1c 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d122      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d11b      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0204 	mvn.w	r2, #4
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 faef 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fae1 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 faf2 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0208 	mvn.w	r2, #8
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fac5 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fab7 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fac8 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b10      	cmp	r3, #16
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0210 	mvn.w	r2, #16
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2208      	movs	r2, #8
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa9b 	bl	8005872 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa8d 	bl	800585e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fa9e 	bl	8005886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0201 	mvn.w	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fb9a 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 f87c 	bl	80064a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b6:	d10e      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 f86f 	bl	80064b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fa4c 	bl	800589a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b20      	cmp	r3, #32
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0220 	mvn.w	r2, #32
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 f82f 	bl	800648c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e105      	b.n	800565e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b14      	cmp	r3, #20
 8005466:	f200 80f0 	bhi.w	800564a <HAL_TIM_PWM_ConfigChannel+0x212>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	080054c5 	.word	0x080054c5
 8005474:	0800564b 	.word	0x0800564b
 8005478:	0800564b 	.word	0x0800564b
 800547c:	0800564b 	.word	0x0800564b
 8005480:	08005505 	.word	0x08005505
 8005484:	0800564b 	.word	0x0800564b
 8005488:	0800564b 	.word	0x0800564b
 800548c:	0800564b 	.word	0x0800564b
 8005490:	08005547 	.word	0x08005547
 8005494:	0800564b 	.word	0x0800564b
 8005498:	0800564b 	.word	0x0800564b
 800549c:	0800564b 	.word	0x0800564b
 80054a0:	08005587 	.word	0x08005587
 80054a4:	0800564b 	.word	0x0800564b
 80054a8:	0800564b 	.word	0x0800564b
 80054ac:	0800564b 	.word	0x0800564b
 80054b0:	080055c9 	.word	0x080055c9
 80054b4:	0800564b 	.word	0x0800564b
 80054b8:	0800564b 	.word	0x0800564b
 80054bc:	0800564b 	.word	0x0800564b
 80054c0:	08005609 	.word	0x08005609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fa8a 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0208 	orr.w	r2, r2, #8
 80054de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0204 	bic.w	r2, r2, #4
 80054ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6999      	ldr	r1, [r3, #24]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	619a      	str	r2, [r3, #24]
      break;
 8005502:	e0a3      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fafa 	bl	8005b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6999      	ldr	r1, [r3, #24]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]
      break;
 8005544:	e082      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fb63 	bl	8005c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0208 	orr.w	r2, r2, #8
 8005560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0204 	bic.w	r2, r2, #4
 8005570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69d9      	ldr	r1, [r3, #28]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	61da      	str	r2, [r3, #28]
      break;
 8005584:	e062      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fbcb 	bl	8005d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	021a      	lsls	r2, r3, #8
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	61da      	str	r2, [r3, #28]
      break;
 80055c6:	e041      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fc14 	bl	8005dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005606:	e021      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fc58 	bl	8005ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005648:	e000      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800564a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop

08005668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIM_ConfigClockSource+0x18>
 800567c:	2302      	movs	r3, #2
 800567e:	e0a8      	b.n	80057d2 <HAL_TIM_ConfigClockSource+0x16a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d067      	beq.n	800578c <HAL_TIM_ConfigClockSource+0x124>
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d80b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x70>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d073      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x144>
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d802      	bhi.n	80056ce <HAL_TIM_ConfigClockSource+0x66>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d06f      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056cc:	e078      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d06c      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x144>
 80056d2:	2b30      	cmp	r3, #48	; 0x30
 80056d4:	d06a      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x144>
      break;
 80056d6:	e073      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d00d      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x90>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d804      	bhi.n	80056ea <HAL_TIM_ConfigClockSource+0x82>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d033      	beq.n	800574c <HAL_TIM_ConfigClockSource+0xe4>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d041      	beq.n	800576c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80056e8:	e06a      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d066      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x156>
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f4:	d017      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80056f6:	e063      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6899      	ldr	r1, [r3, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f000 fd44 	bl	8006194 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800571a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]
      break;
 8005724:	e04c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f000 fd2d 	bl	8006194 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005748:	609a      	str	r2, [r3, #8]
      break;
 800574a:	e039      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	461a      	mov	r2, r3
 800575a:	f000 fca1 	bl	80060a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2150      	movs	r1, #80	; 0x50
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fcfa 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 800576a:	e029      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	461a      	mov	r2, r3
 800577a:	f000 fcc0 	bl	80060fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2160      	movs	r1, #96	; 0x60
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fcea 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 800578a:	e019      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	461a      	mov	r2, r3
 800579a:	f000 fc81 	bl	80060a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fcda 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 80057aa:	e009      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 fcd1 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 80057bc:	e000      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80057be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e031      	b.n	8005856 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fbc3 	bl	8005f90 <TIM_SlaveTimer_SetConfig>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e018      	b.n	8005856 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005832:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005842:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a40      	ldr	r2, [pc, #256]	; (80059c4 <TIM_Base_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d00f      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3d      	ldr	r2, [pc, #244]	; (80059c8 <TIM_Base_SetConfig+0x118>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3c      	ldr	r2, [pc, #240]	; (80059cc <TIM_Base_SetConfig+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3b      	ldr	r2, [pc, #236]	; (80059d0 <TIM_Base_SetConfig+0x120>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3a      	ldr	r2, [pc, #232]	; (80059d4 <TIM_Base_SetConfig+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2f      	ldr	r2, [pc, #188]	; (80059c4 <TIM_Base_SetConfig+0x114>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01f      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d01b      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <TIM_Base_SetConfig+0x118>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d017      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <TIM_Base_SetConfig+0x11c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <TIM_Base_SetConfig+0x120>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00f      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <TIM_Base_SetConfig+0x124>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a28      	ldr	r2, [pc, #160]	; (80059d8 <TIM_Base_SetConfig+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a27      	ldr	r2, [pc, #156]	; (80059dc <TIM_Base_SetConfig+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <TIM_Base_SetConfig+0x130>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <TIM_Base_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <TIM_Base_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a11      	ldr	r2, [pc, #68]	; (80059d8 <TIM_Base_SetConfig+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	; (80059dc <TIM_Base_SetConfig+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <TIM_Base_SetConfig+0x130>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0302 	bic.w	r3, r3, #2
 8005a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <TIM_OC1_SetConfig+0x10c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00f      	beq.n	8005a64 <TIM_OC1_SetConfig+0x80>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <TIM_OC1_SetConfig+0x110>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_OC1_SetConfig+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <TIM_OC1_SetConfig+0x114>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_OC1_SetConfig+0x80>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a29      	ldr	r2, [pc, #164]	; (8005afc <TIM_OC1_SetConfig+0x118>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_OC1_SetConfig+0x80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_OC1_SetConfig+0x11c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10c      	bne.n	8005a7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0308 	bic.w	r3, r3, #8
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <TIM_OC1_SetConfig+0x10c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <TIM_OC1_SetConfig+0xc2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <TIM_OC1_SetConfig+0x110>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_OC1_SetConfig+0xc2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <TIM_OC1_SetConfig+0x114>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_OC1_SetConfig+0xc2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <TIM_OC1_SetConfig+0x118>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC1_SetConfig+0xc2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <TIM_OC1_SetConfig+0x11c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d111      	bne.n	8005aca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40013400 	.word	0x40013400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800

08005b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f023 0210 	bic.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0320 	bic.w	r3, r3, #32
 8005b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <TIM_OC2_SetConfig+0x100>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_OC2_SetConfig+0x6c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <TIM_OC2_SetConfig+0x104>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10d      	bne.n	8005b8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <TIM_OC2_SetConfig+0x100>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <TIM_OC2_SetConfig+0xb0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_OC2_SetConfig+0x104>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_OC2_SetConfig+0xb0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <TIM_OC2_SetConfig+0x108>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_OC2_SetConfig+0xb0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <TIM_OC2_SetConfig+0x10c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC2_SetConfig+0xb0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <TIM_OC2_SetConfig+0x110>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d113      	bne.n	8005bdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800

08005c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a27      	ldr	r2, [pc, #156]	; (8005d14 <TIM_OC3_SetConfig+0xfc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC3_SetConfig+0x6a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <TIM_OC3_SetConfig+0x100>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10d      	bne.n	8005c9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <TIM_OC3_SetConfig+0xfc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xae>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <TIM_OC3_SetConfig+0x100>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xae>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <TIM_OC3_SetConfig+0x104>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xae>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <TIM_OC3_SetConfig+0x108>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC3_SetConfig+0xae>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_OC3_SetConfig+0x10c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d113      	bne.n	8005cee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40013400 	.word	0x40013400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <TIM_OC4_SetConfig+0xc0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_OC4_SetConfig+0x84>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	; (8005dec <TIM_OC4_SetConfig+0xc4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_OC4_SetConfig+0x84>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <TIM_OC4_SetConfig+0xc8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_OC4_SetConfig+0x84>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <TIM_OC4_SetConfig+0xcc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC4_SetConfig+0x84>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <TIM_OC4_SetConfig+0xd0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d109      	bne.n	8005dc0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <TIM_OC5_SetConfig+0xb4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_OC5_SetConfig+0x7a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <TIM_OC5_SetConfig+0xb8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_OC5_SetConfig+0x7a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <TIM_OC5_SetConfig+0xbc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_OC5_SetConfig+0x7a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC5_SetConfig+0xc0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_OC5_SetConfig+0x7a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <TIM_OC5_SetConfig+0xc4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d109      	bne.n	8005e8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	051b      	lsls	r3, r3, #20
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <TIM_OC6_SetConfig+0xb8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_OC6_SetConfig+0x7c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <TIM_OC6_SetConfig+0xbc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <TIM_OC6_SetConfig+0x7c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <TIM_OC6_SetConfig+0xc0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_OC6_SetConfig+0x7c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <TIM_OC6_SetConfig+0xc4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC6_SetConfig+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC6_SetConfig+0xc8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d109      	bne.n	8005f54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800

08005f90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d05c      	beq.n	8006094 <TIM_SlaveTimer_SetConfig+0x104>
 8005fda:	2b30      	cmp	r3, #48	; 0x30
 8005fdc:	d806      	bhi.n	8005fec <TIM_SlaveTimer_SetConfig+0x5c>
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d058      	beq.n	8006094 <TIM_SlaveTimer_SetConfig+0x104>
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d056      	beq.n	8006094 <TIM_SlaveTimer_SetConfig+0x104>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d054      	beq.n	8006094 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005fea:	e054      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8005fec:	2b50      	cmp	r3, #80	; 0x50
 8005fee:	d03d      	beq.n	800606c <TIM_SlaveTimer_SetConfig+0xdc>
 8005ff0:	2b50      	cmp	r3, #80	; 0x50
 8005ff2:	d802      	bhi.n	8005ffa <TIM_SlaveTimer_SetConfig+0x6a>
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d010      	beq.n	800601a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8005ff8:	e04d      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8005ffa:	2b60      	cmp	r3, #96	; 0x60
 8005ffc:	d040      	beq.n	8006080 <TIM_SlaveTimer_SetConfig+0xf0>
 8005ffe:	2b70      	cmp	r3, #112	; 0x70
 8006000:	d000      	beq.n	8006004 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8006002:	e048      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68d9      	ldr	r1, [r3, #12]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f000 f8be 	bl	8006194 <TIM_ETR_SetConfig>
      break;
 8006018:	e03d      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b05      	cmp	r3, #5
 8006020:	d101      	bne.n	8006026 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e038      	b.n	8006098 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	621a      	str	r2, [r3, #32]
      break;
 800606a:	e014      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6899      	ldr	r1, [r3, #8]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	461a      	mov	r2, r3
 800607a:	f000 f811 	bl	80060a0 <TIM_TI1_ConfigInputStage>
      break;
 800607e:	e00a      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	461a      	mov	r2, r3
 800608e:	f000 f836 	bl	80060fe <TIM_TI2_ConfigInputStage>
      break;
 8006092:	e000      	b.n	8006096 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8006094:	bf00      	nop
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f023 0201 	bic.w	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 030a 	bic.w	r3, r3, #10
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0210 	bic.w	r2, r3, #16
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800613a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	f043 0307 	orr.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2201      	movs	r2, #1
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	401a      	ands	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	fa01 f303 	lsl.w	r3, r1, r3
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2204      	movs	r2, #4
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f948 	bl	80064c8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006246:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_TIMEx_PWMN_Start+0x5c>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b06      	cmp	r3, #6
 8006258:	d00b      	beq.n	8006272 <HAL_TIMEx_PWMN_Start+0x52>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d007      	beq.n	8006272 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	00010007 	.word	0x00010007

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e068      	b.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2e      	ldr	r2, [pc, #184]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2d      	ldr	r2, [pc, #180]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d108      	bne.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01d      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d018      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a18      	ldr	r2, [pc, #96]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10c      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4313      	orrs	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40014000 	.word	0x40014000

08006390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e065      	b.n	8006478 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d115      	bne.n	8006466 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40013400 	.word	0x40013400

0800648c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2204      	movs	r2, #4
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	431a      	orrs	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e040      	b.n	80065a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fb fce1 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2224      	movs	r2, #36	; 0x24
 800653e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f82d 	bl	80065b0 <UART_SetConfig>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e022      	b.n	80065a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb93 	bl	8006c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fc1a 	bl	8006dd8 <UART_CheckIdleState>
 80065a4:	4603      	mov	r3, r0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065b4:	b08a      	sub	sp, #40	; 0x28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	4313      	orrs	r3, r2
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	4bb8      	ldr	r3, [pc, #736]	; (80068c8 <UART_SetConfig+0x318>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4aae      	ldr	r2, [pc, #696]	; (80068cc <UART_SetConfig+0x31c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661e:	4313      	orrs	r3, r2
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4aa5      	ldr	r2, [pc, #660]	; (80068d0 <UART_SetConfig+0x320>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d126      	bne.n	800668e <UART_SetConfig+0xde>
 8006640:	4ba4      	ldr	r3, [pc, #656]	; (80068d4 <UART_SetConfig+0x324>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d81a      	bhi.n	8006684 <UART_SetConfig+0xd4>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xa4>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006665 	.word	0x08006665
 8006658:	08006675 	.word	0x08006675
 800665c:	0800666d 	.word	0x0800666d
 8006660:	0800667d 	.word	0x0800667d
 8006664:	2301      	movs	r3, #1
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666a:	e105      	b.n	8006878 <UART_SetConfig+0x2c8>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006672:	e101      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667a:	e0fd      	b.n	8006878 <UART_SetConfig+0x2c8>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e0f9      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	bf00      	nop
 800668c:	e0f4      	b.n	8006878 <UART_SetConfig+0x2c8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a91      	ldr	r2, [pc, #580]	; (80068d8 <UART_SetConfig+0x328>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d138      	bne.n	800670a <UART_SetConfig+0x15a>
 8006698:	4b8e      	ldr	r3, [pc, #568]	; (80068d4 <UART_SetConfig+0x324>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d82c      	bhi.n	8006700 <UART_SetConfig+0x150>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0xfc>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	08006701 	.word	0x08006701
 80066b4:	08006701 	.word	0x08006701
 80066b8:	08006701 	.word	0x08006701
 80066bc:	080066f1 	.word	0x080066f1
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
 80066cc:	080066e9 	.word	0x080066e9
 80066d0:	08006701 	.word	0x08006701
 80066d4:	08006701 	.word	0x08006701
 80066d8:	08006701 	.word	0x08006701
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e0c7      	b.n	8006878 <UART_SetConfig+0x2c8>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e0c3      	b.n	8006878 <UART_SetConfig+0x2c8>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f6:	e0bf      	b.n	8006878 <UART_SetConfig+0x2c8>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e0bb      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	bf00      	nop
 8006708:	e0b6      	b.n	8006878 <UART_SetConfig+0x2c8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a73      	ldr	r2, [pc, #460]	; (80068dc <UART_SetConfig+0x32c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d125      	bne.n	8006760 <UART_SetConfig+0x1b0>
 8006714:	4b6f      	ldr	r3, [pc, #444]	; (80068d4 <UART_SetConfig+0x324>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800671e:	2b10      	cmp	r3, #16
 8006720:	d011      	beq.n	8006746 <UART_SetConfig+0x196>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d802      	bhi.n	800672c <UART_SetConfig+0x17c>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <UART_SetConfig+0x186>
 800672a:	e014      	b.n	8006756 <UART_SetConfig+0x1a6>
 800672c:	2b20      	cmp	r3, #32
 800672e:	d006      	beq.n	800673e <UART_SetConfig+0x18e>
 8006730:	2b30      	cmp	r3, #48	; 0x30
 8006732:	d00c      	beq.n	800674e <UART_SetConfig+0x19e>
 8006734:	e00f      	b.n	8006756 <UART_SetConfig+0x1a6>
 8006736:	2300      	movs	r3, #0
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673c:	e09c      	b.n	8006878 <UART_SetConfig+0x2c8>
 800673e:	2302      	movs	r3, #2
 8006740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006744:	e098      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006746:	2304      	movs	r3, #4
 8006748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674c:	e094      	b.n	8006878 <UART_SetConfig+0x2c8>
 800674e:	2308      	movs	r3, #8
 8006750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006754:	e090      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006756:	2310      	movs	r3, #16
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675c:	bf00      	nop
 800675e:	e08b      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a5e      	ldr	r2, [pc, #376]	; (80068e0 <UART_SetConfig+0x330>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d125      	bne.n	80067b6 <UART_SetConfig+0x206>
 800676a:	4b5a      	ldr	r3, [pc, #360]	; (80068d4 <UART_SetConfig+0x324>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d011      	beq.n	800679c <UART_SetConfig+0x1ec>
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d802      	bhi.n	8006782 <UART_SetConfig+0x1d2>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <UART_SetConfig+0x1dc>
 8006780:	e014      	b.n	80067ac <UART_SetConfig+0x1fc>
 8006782:	2b80      	cmp	r3, #128	; 0x80
 8006784:	d006      	beq.n	8006794 <UART_SetConfig+0x1e4>
 8006786:	2bc0      	cmp	r3, #192	; 0xc0
 8006788:	d00c      	beq.n	80067a4 <UART_SetConfig+0x1f4>
 800678a:	e00f      	b.n	80067ac <UART_SetConfig+0x1fc>
 800678c:	2300      	movs	r3, #0
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006792:	e071      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006794:	2302      	movs	r3, #2
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679a:	e06d      	b.n	8006878 <UART_SetConfig+0x2c8>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a2:	e069      	b.n	8006878 <UART_SetConfig+0x2c8>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067aa:	e065      	b.n	8006878 <UART_SetConfig+0x2c8>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b2:	bf00      	nop
 80067b4:	e060      	b.n	8006878 <UART_SetConfig+0x2c8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4a      	ldr	r2, [pc, #296]	; (80068e4 <UART_SetConfig+0x334>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d129      	bne.n	8006814 <UART_SetConfig+0x264>
 80067c0:	4b44      	ldr	r3, [pc, #272]	; (80068d4 <UART_SetConfig+0x324>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ce:	d014      	beq.n	80067fa <UART_SetConfig+0x24a>
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d4:	d802      	bhi.n	80067dc <UART_SetConfig+0x22c>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <UART_SetConfig+0x23a>
 80067da:	e016      	b.n	800680a <UART_SetConfig+0x25a>
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e0:	d007      	beq.n	80067f2 <UART_SetConfig+0x242>
 80067e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e6:	d00c      	beq.n	8006802 <UART_SetConfig+0x252>
 80067e8:	e00f      	b.n	800680a <UART_SetConfig+0x25a>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f0:	e042      	b.n	8006878 <UART_SetConfig+0x2c8>
 80067f2:	2302      	movs	r3, #2
 80067f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f8:	e03e      	b.n	8006878 <UART_SetConfig+0x2c8>
 80067fa:	2304      	movs	r3, #4
 80067fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006800:	e03a      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006802:	2308      	movs	r3, #8
 8006804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006808:	e036      	b.n	8006878 <UART_SetConfig+0x2c8>
 800680a:	2310      	movs	r3, #16
 800680c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006810:	bf00      	nop
 8006812:	e031      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2c      	ldr	r2, [pc, #176]	; (80068cc <UART_SetConfig+0x31c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d129      	bne.n	8006872 <UART_SetConfig+0x2c2>
 800681e:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <UART_SetConfig+0x324>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d014      	beq.n	8006858 <UART_SetConfig+0x2a8>
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d802      	bhi.n	800683a <UART_SetConfig+0x28a>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <UART_SetConfig+0x298>
 8006838:	e016      	b.n	8006868 <UART_SetConfig+0x2b8>
 800683a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683e:	d007      	beq.n	8006850 <UART_SetConfig+0x2a0>
 8006840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006844:	d00c      	beq.n	8006860 <UART_SetConfig+0x2b0>
 8006846:	e00f      	b.n	8006868 <UART_SetConfig+0x2b8>
 8006848:	2300      	movs	r3, #0
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684e:	e013      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006850:	2302      	movs	r3, #2
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006856:	e00f      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e00b      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e007      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <UART_SetConfig+0x2c8>
 8006872:	2310      	movs	r3, #16
 8006874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a13      	ldr	r2, [pc, #76]	; (80068cc <UART_SetConfig+0x31c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	f040 80fe 	bne.w	8006a80 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006888:	2b08      	cmp	r3, #8
 800688a:	d837      	bhi.n	80068fc <UART_SetConfig+0x34c>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x2e4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068fd 	.word	0x080068fd
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068fd 	.word	0x080068fd
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068f5 	.word	0x080068f5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fd fe7e 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 80068bc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068be:	e020      	b.n	8006902 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <UART_SetConfig+0x338>)
 80068c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068c4:	e01d      	b.n	8006902 <UART_SetConfig+0x352>
 80068c6:	bf00      	nop
 80068c8:	efff69f3 	.word	0xefff69f3
 80068cc:	40008000 	.word	0x40008000
 80068d0:	40013800 	.word	0x40013800
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80068ec:	f7fd fdce 	bl	800448c <HAL_RCC_GetSysClockFreq>
 80068f0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068f2:	e006      	b.n	8006902 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80068f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068fa:	e002      	b.n	8006902 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	76fb      	strb	r3, [r7, #27]
        break;
 8006900:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 81b9 	beq.w	8006c7c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d305      	bcc.n	8006926 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	429a      	cmp	r2, r3
 8006924:	d902      	bls.n	800692c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	76fb      	strb	r3, [r7, #27]
 800692a:	e1a7      	b.n	8006c7c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800692c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006930:	2b08      	cmp	r3, #8
 8006932:	f200 8092 	bhi.w	8006a5a <UART_SetConfig+0x4aa>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0x38c>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006961 	.word	0x08006961
 8006940:	08006a5b 	.word	0x08006a5b
 8006944:	080069af 	.word	0x080069af
 8006948:	08006a5b 	.word	0x08006a5b
 800694c:	080069e3 	.word	0x080069e3
 8006950:	08006a5b 	.word	0x08006a5b
 8006954:	08006a5b 	.word	0x08006a5b
 8006958:	08006a5b 	.word	0x08006a5b
 800695c:	08006a31 	.word	0x08006a31
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006960:	f7fd fe2a 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 8006964:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4619      	mov	r1, r3
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	0214      	lsls	r4, r2, #8
 8006978:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800697c:	020b      	lsls	r3, r1, #8
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6852      	ldr	r2, [r2, #4]
 8006982:	0852      	lsrs	r2, r2, #1
 8006984:	4611      	mov	r1, r2
 8006986:	f04f 0200 	mov.w	r2, #0
 800698a:	eb13 0b01 	adds.w	fp, r3, r1
 800698e:	eb44 0c02 	adc.w	ip, r4, r2
 8006992:	4658      	mov	r0, fp
 8006994:	4661      	mov	r1, ip
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f04f 0400 	mov.w	r4, #0
 800699e:	461a      	mov	r2, r3
 80069a0:	4623      	mov	r3, r4
 80069a2:	f7f9 ffff 	bl	80009a4 <__aeabi_uldivmod>
 80069a6:	4603      	mov	r3, r0
 80069a8:	460c      	mov	r4, r1
 80069aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069ac:	e058      	b.n	8006a60 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	f04f 0400 	mov.w	r4, #0
 80069b8:	49ae      	ldr	r1, [pc, #696]	; (8006c74 <UART_SetConfig+0x6c4>)
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	eb13 0b01 	adds.w	fp, r3, r1
 80069c2:	eb44 0c02 	adc.w	ip, r4, r2
 80069c6:	4658      	mov	r0, fp
 80069c8:	4661      	mov	r1, ip
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f04f 0400 	mov.w	r4, #0
 80069d2:	461a      	mov	r2, r3
 80069d4:	4623      	mov	r3, r4
 80069d6:	f7f9 ffe5 	bl	80009a4 <__aeabi_uldivmod>
 80069da:	4603      	mov	r3, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069e0:	e03e      	b.n	8006a60 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80069e2:	f7fd fd53 	bl	800448c <HAL_RCC_GetSysClockFreq>
 80069e6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	0214      	lsls	r4, r2, #8
 80069fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069fe:	020b      	lsls	r3, r1, #8
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6852      	ldr	r2, [r2, #4]
 8006a04:	0852      	lsrs	r2, r2, #1
 8006a06:	4611      	mov	r1, r2
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	eb13 0b01 	adds.w	fp, r3, r1
 8006a10:	eb44 0c02 	adc.w	ip, r4, r2
 8006a14:	4658      	mov	r0, fp
 8006a16:	4661      	mov	r1, ip
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	461a      	mov	r2, r3
 8006a22:	4623      	mov	r3, r4
 8006a24:	f7f9 ffbe 	bl	80009a4 <__aeabi_uldivmod>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a2e:	e017      	b.n	8006a60 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a3e:	f144 0100 	adc.w	r1, r4, #0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f04f 0400 	mov.w	r4, #0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	f7f9 ffa9 	bl	80009a4 <__aeabi_uldivmod>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a58:	e002      	b.n	8006a60 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	76fb      	strb	r3, [r7, #27]
            break;
 8006a5e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a66:	d308      	bcc.n	8006a7a <UART_SetConfig+0x4ca>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d204      	bcs.n	8006a7a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e100      	b.n	8006c7c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	76fb      	strb	r3, [r7, #27]
 8006a7e:	e0fd      	b.n	8006c7c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a88:	f040 8084 	bne.w	8006b94 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d85f      	bhi.n	8006b54 <UART_SetConfig+0x5a4>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <UART_SetConfig+0x4ec>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ae1 	.word	0x08006ae1
 8006aa4:	08006b01 	.word	0x08006b01
 8006aa8:	08006b55 	.word	0x08006b55
 8006aac:	08006b1d 	.word	0x08006b1d
 8006ab0:	08006b55 	.word	0x08006b55
 8006ab4:	08006b55 	.word	0x08006b55
 8006ab8:	08006b55 	.word	0x08006b55
 8006abc:	08006b3d 	.word	0x08006b3d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac0:	f7fd fd7a 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 8006ac4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	005a      	lsls	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ade:	e03c      	b.n	8006b5a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fd fd80 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	005a      	lsls	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	441a      	add	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006afe:	e02c      	b.n	8006b5a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006b0a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6852      	ldr	r2, [r2, #4]
 8006b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b1a:	e01e      	b.n	8006b5a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1c:	f7fd fcb6 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8006b20:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	005a      	lsls	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b3a:	e00e      	b.n	8006b5a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b52:	e002      	b.n	8006b5a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	76fb      	strb	r3, [r7, #27]
        break;
 8006b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d916      	bls.n	8006b8e <UART_SetConfig+0x5de>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d212      	bcs.n	8006b8e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f023 030f 	bic.w	r3, r3, #15
 8006b70:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	89fa      	ldrh	r2, [r7, #14]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	e076      	b.n	8006c7c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	76fb      	strb	r3, [r7, #27]
 8006b92:	e073      	b.n	8006c7c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d85c      	bhi.n	8006c56 <UART_SetConfig+0x6a6>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0x5f4>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006be7 	.word	0x08006be7
 8006bac:	08006c05 	.word	0x08006c05
 8006bb0:	08006c57 	.word	0x08006c57
 8006bb4:	08006c21 	.word	0x08006c21
 8006bb8:	08006c57 	.word	0x08006c57
 8006bbc:	08006c57 	.word	0x08006c57
 8006bc0:	08006c57 	.word	0x08006c57
 8006bc4:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fd fcf6 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 8006bcc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085a      	lsrs	r2, r3, #1
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006be4:	e03a      	b.n	8006c5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be6:	f7fd fcfd 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8006bea:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085a      	lsrs	r2, r3, #1
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c02:	e02b      	b.n	8006c5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006c0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6852      	ldr	r2, [r2, #4]
 8006c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c1e:	e01d      	b.n	8006c5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c20:	f7fd fc34 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8006c24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	085a      	lsrs	r2, r3, #1
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	441a      	add	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c3c:	e00e      	b.n	8006c5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c54:	e002      	b.n	8006c5c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	76fb      	strb	r3, [r7, #27]
        break;
 8006c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b0f      	cmp	r3, #15
 8006c60:	d90a      	bls.n	8006c78 <UART_SetConfig+0x6c8>
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d206      	bcs.n	8006c78 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e003      	b.n	8006c7c <UART_SetConfig+0x6cc>
 8006c74:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c88:	7efb      	ldrb	r3, [r7, #27]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	d10a      	bne.n	8006daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006de6:	f7fb f9d3 	bl	8002190 <HAL_GetTick>
 8006dea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d10e      	bne.n	8006e18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f82a 	bl	8006e62 <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e020      	b.n	8006e5a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d10e      	bne.n	8006e44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f814 	bl	8006e62 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e00a      	b.n	8006e5a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e72:	e05d      	b.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7a:	d059      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7c:	f7fb f988 	bl	8002190 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d302      	bcc.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d11b      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ea0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e042      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d02b      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d123      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f00:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e00f      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	bf0c      	ite	eq
 8006f40:	2301      	moveq	r3, #1
 8006f42:	2300      	movne	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d092      	beq.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <__libc_init_array>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0d      	ldr	r6, [pc, #52]	; (8006f90 <__libc_init_array+0x38>)
 8006f5c:	4c0d      	ldr	r4, [pc, #52]	; (8006f94 <__libc_init_array+0x3c>)
 8006f5e:	1ba4      	subs	r4, r4, r6
 8006f60:	10a4      	asrs	r4, r4, #2
 8006f62:	2500      	movs	r5, #0
 8006f64:	42a5      	cmp	r5, r4
 8006f66:	d109      	bne.n	8006f7c <__libc_init_array+0x24>
 8006f68:	4e0b      	ldr	r6, [pc, #44]	; (8006f98 <__libc_init_array+0x40>)
 8006f6a:	4c0c      	ldr	r4, [pc, #48]	; (8006f9c <__libc_init_array+0x44>)
 8006f6c:	f000 fd6c 	bl	8007a48 <_init>
 8006f70:	1ba4      	subs	r4, r4, r6
 8006f72:	10a4      	asrs	r4, r4, #2
 8006f74:	2500      	movs	r5, #0
 8006f76:	42a5      	cmp	r5, r4
 8006f78:	d105      	bne.n	8006f86 <__libc_init_array+0x2e>
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f80:	4798      	blx	r3
 8006f82:	3501      	adds	r5, #1
 8006f84:	e7ee      	b.n	8006f64 <__libc_init_array+0xc>
 8006f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f8a:	4798      	blx	r3
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	e7f2      	b.n	8006f76 <__libc_init_array+0x1e>
 8006f90:	08007e80 	.word	0x08007e80
 8006f94:	08007e80 	.word	0x08007e80
 8006f98:	08007e80 	.word	0x08007e80
 8006f9c:	08007e84 	.word	0x08007e84

08006fa0 <memset>:
 8006fa0:	4402      	add	r2, r0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d100      	bne.n	8006faa <memset+0xa>
 8006fa8:	4770      	bx	lr
 8006faa:	f803 1b01 	strb.w	r1, [r3], #1
 8006fae:	e7f9      	b.n	8006fa4 <memset+0x4>

08006fb0 <sinf>:
 8006fb0:	ee10 3a10 	vmov	r3, s0
 8006fb4:	b507      	push	{r0, r1, r2, lr}
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	; (800702c <sinf+0x7c>)
 8006fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	dc05      	bgt.n	8006fcc <sinf+0x1c>
 8006fc0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007030 <sinf+0x80>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f000 fc41 	bl	800784c <__kernel_sinf>
 8006fca:	e004      	b.n	8006fd6 <sinf+0x26>
 8006fcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fd0:	db04      	blt.n	8006fdc <sinf+0x2c>
 8006fd2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006fd6:	b003      	add	sp, #12
 8006fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fdc:	4668      	mov	r0, sp
 8006fde:	f000 f829 	bl	8007034 <__ieee754_rem_pio2f>
 8006fe2:	f000 0003 	and.w	r0, r0, #3
 8006fe6:	2801      	cmp	r0, #1
 8006fe8:	d008      	beq.n	8006ffc <sinf+0x4c>
 8006fea:	2802      	cmp	r0, #2
 8006fec:	d00d      	beq.n	800700a <sinf+0x5a>
 8006fee:	b9b0      	cbnz	r0, 800701e <sinf+0x6e>
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ff6:	ed9d 0a00 	vldr	s0, [sp]
 8006ffa:	e7e4      	b.n	8006fc6 <sinf+0x16>
 8006ffc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007000:	ed9d 0a00 	vldr	s0, [sp]
 8007004:	f000 f942 	bl	800728c <__kernel_cosf>
 8007008:	e7e5      	b.n	8006fd6 <sinf+0x26>
 800700a:	2001      	movs	r0, #1
 800700c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007010:	ed9d 0a00 	vldr	s0, [sp]
 8007014:	f000 fc1a 	bl	800784c <__kernel_sinf>
 8007018:	eeb1 0a40 	vneg.f32	s0, s0
 800701c:	e7db      	b.n	8006fd6 <sinf+0x26>
 800701e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007022:	ed9d 0a00 	vldr	s0, [sp]
 8007026:	f000 f931 	bl	800728c <__kernel_cosf>
 800702a:	e7f5      	b.n	8007018 <sinf+0x68>
 800702c:	3f490fd8 	.word	0x3f490fd8
 8007030:	00000000 	.word	0x00000000

08007034 <__ieee754_rem_pio2f>:
 8007034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007036:	ee10 6a10 	vmov	r6, s0
 800703a:	4b86      	ldr	r3, [pc, #536]	; (8007254 <__ieee754_rem_pio2f+0x220>)
 800703c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007040:	429c      	cmp	r4, r3
 8007042:	b087      	sub	sp, #28
 8007044:	4605      	mov	r5, r0
 8007046:	dc05      	bgt.n	8007054 <__ieee754_rem_pio2f+0x20>
 8007048:	2300      	movs	r3, #0
 800704a:	ed85 0a00 	vstr	s0, [r5]
 800704e:	6043      	str	r3, [r0, #4]
 8007050:	2000      	movs	r0, #0
 8007052:	e020      	b.n	8007096 <__ieee754_rem_pio2f+0x62>
 8007054:	4b80      	ldr	r3, [pc, #512]	; (8007258 <__ieee754_rem_pio2f+0x224>)
 8007056:	429c      	cmp	r4, r3
 8007058:	dc38      	bgt.n	80070cc <__ieee754_rem_pio2f+0x98>
 800705a:	2e00      	cmp	r6, #0
 800705c:	f024 040f 	bic.w	r4, r4, #15
 8007060:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800725c <__ieee754_rem_pio2f+0x228>
 8007064:	4b7e      	ldr	r3, [pc, #504]	; (8007260 <__ieee754_rem_pio2f+0x22c>)
 8007066:	dd18      	ble.n	800709a <__ieee754_rem_pio2f+0x66>
 8007068:	429c      	cmp	r4, r3
 800706a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800706e:	bf09      	itett	eq
 8007070:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007264 <__ieee754_rem_pio2f+0x230>
 8007074:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007268 <__ieee754_rem_pio2f+0x234>
 8007078:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800707c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800726c <__ieee754_rem_pio2f+0x238>
 8007080:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007084:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007088:	edc0 6a00 	vstr	s13, [r0]
 800708c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007090:	edc0 7a01 	vstr	s15, [r0, #4]
 8007094:	2001      	movs	r0, #1
 8007096:	b007      	add	sp, #28
 8007098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709a:	429c      	cmp	r4, r3
 800709c:	ee70 7a07 	vadd.f32	s15, s0, s14
 80070a0:	bf09      	itett	eq
 80070a2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007264 <__ieee754_rem_pio2f+0x230>
 80070a6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007268 <__ieee754_rem_pio2f+0x234>
 80070aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80070ae:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800726c <__ieee754_rem_pio2f+0x238>
 80070b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80070b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070ba:	edc0 6a00 	vstr	s13, [r0]
 80070be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ca:	e7e4      	b.n	8007096 <__ieee754_rem_pio2f+0x62>
 80070cc:	4b68      	ldr	r3, [pc, #416]	; (8007270 <__ieee754_rem_pio2f+0x23c>)
 80070ce:	429c      	cmp	r4, r3
 80070d0:	dc71      	bgt.n	80071b6 <__ieee754_rem_pio2f+0x182>
 80070d2:	f000 fc03 	bl	80078dc <fabsf>
 80070d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007274 <__ieee754_rem_pio2f+0x240>
 80070da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80070de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80070e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80070ea:	ee17 0a90 	vmov	r0, s15
 80070ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800725c <__ieee754_rem_pio2f+0x228>
 80070f2:	eeb1 7a46 	vneg.f32	s14, s12
 80070f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80070fa:	281f      	cmp	r0, #31
 80070fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007268 <__ieee754_rem_pio2f+0x234>
 8007100:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007104:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007108:	ee16 3a90 	vmov	r3, s13
 800710c:	dc1c      	bgt.n	8007148 <__ieee754_rem_pio2f+0x114>
 800710e:	1e47      	subs	r7, r0, #1
 8007110:	4959      	ldr	r1, [pc, #356]	; (8007278 <__ieee754_rem_pio2f+0x244>)
 8007112:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007116:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800711a:	428a      	cmp	r2, r1
 800711c:	d014      	beq.n	8007148 <__ieee754_rem_pio2f+0x114>
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	ed95 7a00 	vldr	s14, [r5]
 8007124:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007128:	2e00      	cmp	r6, #0
 800712a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800712e:	ed85 0a01 	vstr	s0, [r5, #4]
 8007132:	dab0      	bge.n	8007096 <__ieee754_rem_pio2f+0x62>
 8007134:	eeb1 7a47 	vneg.f32	s14, s14
 8007138:	eeb1 0a40 	vneg.f32	s0, s0
 800713c:	ed85 7a00 	vstr	s14, [r5]
 8007140:	ed85 0a01 	vstr	s0, [r5, #4]
 8007144:	4240      	negs	r0, r0
 8007146:	e7a6      	b.n	8007096 <__ieee754_rem_pio2f+0x62>
 8007148:	15e4      	asrs	r4, r4, #23
 800714a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800714e:	1aa2      	subs	r2, r4, r2
 8007150:	2a08      	cmp	r2, #8
 8007152:	dde4      	ble.n	800711e <__ieee754_rem_pio2f+0xea>
 8007154:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007264 <__ieee754_rem_pio2f+0x230>
 8007158:	eef0 6a40 	vmov.f32	s13, s0
 800715c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007160:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007164:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007168:	eddf 7a40 	vldr	s15, [pc, #256]	; 800726c <__ieee754_rem_pio2f+0x238>
 800716c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007170:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007174:	eef0 7a40 	vmov.f32	s15, s0
 8007178:	ee15 3a90 	vmov	r3, s11
 800717c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007180:	1aa4      	subs	r4, r4, r2
 8007182:	2c19      	cmp	r4, #25
 8007184:	dc04      	bgt.n	8007190 <__ieee754_rem_pio2f+0x15c>
 8007186:	edc5 5a00 	vstr	s11, [r5]
 800718a:	eeb0 0a66 	vmov.f32	s0, s13
 800718e:	e7c7      	b.n	8007120 <__ieee754_rem_pio2f+0xec>
 8007190:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800727c <__ieee754_rem_pio2f+0x248>
 8007194:	eeb0 0a66 	vmov.f32	s0, s13
 8007198:	eea7 0a25 	vfma.f32	s0, s14, s11
 800719c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80071a0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80071a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007280 <__ieee754_rem_pio2f+0x24c>
 80071a8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80071ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80071b0:	ed85 7a00 	vstr	s14, [r5]
 80071b4:	e7b4      	b.n	8007120 <__ieee754_rem_pio2f+0xec>
 80071b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071ba:	db06      	blt.n	80071ca <__ieee754_rem_pio2f+0x196>
 80071bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80071c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80071c4:	edc0 7a00 	vstr	s15, [r0]
 80071c8:	e742      	b.n	8007050 <__ieee754_rem_pio2f+0x1c>
 80071ca:	15e2      	asrs	r2, r4, #23
 80071cc:	3a86      	subs	r2, #134	; 0x86
 80071ce:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071da:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007284 <__ieee754_rem_pio2f+0x250>
 80071de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80071ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80071fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007202:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	edcd 7a05 	vstr	s15, [sp, #20]
 800720e:	d11e      	bne.n	800724e <__ieee754_rem_pio2f+0x21a>
 8007210:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2302      	movne	r3, #2
 800721e:	491a      	ldr	r1, [pc, #104]	; (8007288 <__ieee754_rem_pio2f+0x254>)
 8007220:	9101      	str	r1, [sp, #4]
 8007222:	2102      	movs	r1, #2
 8007224:	9100      	str	r1, [sp, #0]
 8007226:	a803      	add	r0, sp, #12
 8007228:	4629      	mov	r1, r5
 800722a:	f000 f88d 	bl	8007348 <__kernel_rem_pio2f>
 800722e:	2e00      	cmp	r6, #0
 8007230:	f6bf af31 	bge.w	8007096 <__ieee754_rem_pio2f+0x62>
 8007234:	edd5 7a00 	vldr	s15, [r5]
 8007238:	eef1 7a67 	vneg.f32	s15, s15
 800723c:	edc5 7a00 	vstr	s15, [r5]
 8007240:	edd5 7a01 	vldr	s15, [r5, #4]
 8007244:	eef1 7a67 	vneg.f32	s15, s15
 8007248:	edc5 7a01 	vstr	s15, [r5, #4]
 800724c:	e77a      	b.n	8007144 <__ieee754_rem_pio2f+0x110>
 800724e:	2303      	movs	r3, #3
 8007250:	e7e5      	b.n	800721e <__ieee754_rem_pio2f+0x1ea>
 8007252:	bf00      	nop
 8007254:	3f490fd8 	.word	0x3f490fd8
 8007258:	4016cbe3 	.word	0x4016cbe3
 800725c:	3fc90f80 	.word	0x3fc90f80
 8007260:	3fc90fd0 	.word	0x3fc90fd0
 8007264:	37354400 	.word	0x37354400
 8007268:	37354443 	.word	0x37354443
 800726c:	2e85a308 	.word	0x2e85a308
 8007270:	43490f80 	.word	0x43490f80
 8007274:	3f22f984 	.word	0x3f22f984
 8007278:	08007aa8 	.word	0x08007aa8
 800727c:	2e85a300 	.word	0x2e85a300
 8007280:	248d3132 	.word	0x248d3132
 8007284:	43800000 	.word	0x43800000
 8007288:	08007b28 	.word	0x08007b28

0800728c <__kernel_cosf>:
 800728c:	ee10 3a10 	vmov	r3, s0
 8007290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007294:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729c:	da05      	bge.n	80072aa <__kernel_cosf+0x1e>
 800729e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80072a2:	ee17 2a90 	vmov	r2, s15
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d03b      	beq.n	8007322 <__kernel_cosf+0x96>
 80072aa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80072ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007328 <__kernel_cosf+0x9c>
 80072b6:	4a1d      	ldr	r2, [pc, #116]	; (800732c <__kernel_cosf+0xa0>)
 80072b8:	ee66 7a07 	vmul.f32	s15, s12, s14
 80072bc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007330 <__kernel_cosf+0xa4>
 80072c0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80072c4:	4293      	cmp	r3, r2
 80072c6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007334 <__kernel_cosf+0xa8>
 80072ca:	eee7 5a06 	vfma.f32	s11, s14, s12
 80072ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007338 <__kernel_cosf+0xac>
 80072d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80072d6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800733c <__kernel_cosf+0xb0>
 80072da:	eee7 5a06 	vfma.f32	s11, s14, s12
 80072de:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007340 <__kernel_cosf+0xb4>
 80072e2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80072e6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80072ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 80072ee:	eee6 0a07 	vfma.f32	s1, s12, s14
 80072f2:	dc04      	bgt.n	80072fe <__kernel_cosf+0x72>
 80072f4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80072f8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80072fc:	4770      	bx	lr
 80072fe:	4a11      	ldr	r2, [pc, #68]	; (8007344 <__kernel_cosf+0xb8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	bfda      	itte	le
 8007304:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007308:	ee07 3a10 	vmovle	s14, r3
 800730c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007314:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007318:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800731c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007320:	4770      	bx	lr
 8007322:	eeb0 0a66 	vmov.f32	s0, s13
 8007326:	4770      	bx	lr
 8007328:	ad47d74e 	.word	0xad47d74e
 800732c:	3e999999 	.word	0x3e999999
 8007330:	310f74f6 	.word	0x310f74f6
 8007334:	b493f27c 	.word	0xb493f27c
 8007338:	37d00d01 	.word	0x37d00d01
 800733c:	bab60b61 	.word	0xbab60b61
 8007340:	3d2aaaab 	.word	0x3d2aaaab
 8007344:	3f480000 	.word	0x3f480000

08007348 <__kernel_rem_pio2f>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	ed2d 8b04 	vpush	{d8-d9}
 8007350:	b0d7      	sub	sp, #348	; 0x15c
 8007352:	469b      	mov	fp, r3
 8007354:	460e      	mov	r6, r1
 8007356:	4bbe      	ldr	r3, [pc, #760]	; (8007650 <__kernel_rem_pio2f+0x308>)
 8007358:	9964      	ldr	r1, [sp, #400]	; 0x190
 800735a:	9002      	str	r0, [sp, #8]
 800735c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007360:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007362:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007660 <__kernel_rem_pio2f+0x318>
 8007366:	1ed1      	subs	r1, r2, #3
 8007368:	2308      	movs	r3, #8
 800736a:	fb91 f1f3 	sdiv	r1, r1, r3
 800736e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007372:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8007376:	1c4c      	adds	r4, r1, #1
 8007378:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800737c:	eba1 050a 	sub.w	r5, r1, sl
 8007380:	aa1a      	add	r2, sp, #104	; 0x68
 8007382:	eb09 070a 	add.w	r7, r9, sl
 8007386:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800738a:	4696      	mov	lr, r2
 800738c:	2300      	movs	r3, #0
 800738e:	42bb      	cmp	r3, r7
 8007390:	dd0f      	ble.n	80073b2 <__kernel_rem_pio2f+0x6a>
 8007392:	af42      	add	r7, sp, #264	; 0x108
 8007394:	2200      	movs	r2, #0
 8007396:	454a      	cmp	r2, r9
 8007398:	dc27      	bgt.n	80073ea <__kernel_rem_pio2f+0xa2>
 800739a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800739e:	eb0b 0302 	add.w	r3, fp, r2
 80073a2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80073a6:	9d02      	ldr	r5, [sp, #8]
 80073a8:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007660 <__kernel_rem_pio2f+0x318>
 80073ac:	f04f 0c00 	mov.w	ip, #0
 80073b0:	e015      	b.n	80073de <__kernel_rem_pio2f+0x96>
 80073b2:	42dd      	cmn	r5, r3
 80073b4:	bf5d      	ittte	pl
 80073b6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80073ba:	ee07 2a90 	vmovpl	s15, r2
 80073be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80073c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80073c6:	ecee 7a01 	vstmia	lr!, {s15}
 80073ca:	3301      	adds	r3, #1
 80073cc:	e7df      	b.n	800738e <__kernel_rem_pio2f+0x46>
 80073ce:	ecf5 6a01 	vldmia	r5!, {s13}
 80073d2:	ed33 7a01 	vldmdb	r3!, {s14}
 80073d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073da:	f10c 0c01 	add.w	ip, ip, #1
 80073de:	45d4      	cmp	ip, sl
 80073e0:	ddf5      	ble.n	80073ce <__kernel_rem_pio2f+0x86>
 80073e2:	ece7 7a01 	vstmia	r7!, {s15}
 80073e6:	3201      	adds	r2, #1
 80073e8:	e7d5      	b.n	8007396 <__kernel_rem_pio2f+0x4e>
 80073ea:	ab06      	add	r3, sp, #24
 80073ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800765c <__kernel_rem_pio2f+0x314>
 80073f6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007658 <__kernel_rem_pio2f+0x310>
 80073fa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	464d      	mov	r5, r9
 8007402:	ab56      	add	r3, sp, #344	; 0x158
 8007404:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007408:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800740c:	3f01      	subs	r7, #1
 800740e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007412:	00bf      	lsls	r7, r7, #2
 8007414:	ab56      	add	r3, sp, #344	; 0x158
 8007416:	19da      	adds	r2, r3, r7
 8007418:	3a4c      	subs	r2, #76	; 0x4c
 800741a:	2300      	movs	r3, #0
 800741c:	1ae9      	subs	r1, r5, r3
 800741e:	2900      	cmp	r1, #0
 8007420:	dc4c      	bgt.n	80074bc <__kernel_rem_pio2f+0x174>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 faa4 	bl	8007970 <scalbnf>
 8007428:	eeb0 8a40 	vmov.f32	s16, s0
 800742c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007430:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007434:	f000 fa5a 	bl	80078ec <floorf>
 8007438:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800743c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007440:	2c00      	cmp	r4, #0
 8007442:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007446:	edcd 7a01 	vstr	s15, [sp, #4]
 800744a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800744e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007452:	dd48      	ble.n	80074e6 <__kernel_rem_pio2f+0x19e>
 8007454:	1e69      	subs	r1, r5, #1
 8007456:	ab06      	add	r3, sp, #24
 8007458:	f1c4 0008 	rsb	r0, r4, #8
 800745c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007460:	9a01      	ldr	r2, [sp, #4]
 8007462:	fa4c f300 	asr.w	r3, ip, r0
 8007466:	441a      	add	r2, r3
 8007468:	4083      	lsls	r3, r0
 800746a:	9201      	str	r2, [sp, #4]
 800746c:	ebac 0203 	sub.w	r2, ip, r3
 8007470:	ab06      	add	r3, sp, #24
 8007472:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007476:	f1c4 0307 	rsb	r3, r4, #7
 800747a:	fa42 f803 	asr.w	r8, r2, r3
 800747e:	f1b8 0f00 	cmp.w	r8, #0
 8007482:	dd41      	ble.n	8007508 <__kernel_rem_pio2f+0x1c0>
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	2000      	movs	r0, #0
 8007488:	3301      	adds	r3, #1
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	4601      	mov	r1, r0
 800748e:	4285      	cmp	r5, r0
 8007490:	dc6d      	bgt.n	800756e <__kernel_rem_pio2f+0x226>
 8007492:	2c00      	cmp	r4, #0
 8007494:	dd04      	ble.n	80074a0 <__kernel_rem_pio2f+0x158>
 8007496:	2c01      	cmp	r4, #1
 8007498:	d07e      	beq.n	8007598 <__kernel_rem_pio2f+0x250>
 800749a:	2c02      	cmp	r4, #2
 800749c:	f000 8086 	beq.w	80075ac <__kernel_rem_pio2f+0x264>
 80074a0:	f1b8 0f02 	cmp.w	r8, #2
 80074a4:	d130      	bne.n	8007508 <__kernel_rem_pio2f+0x1c0>
 80074a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074aa:	ee30 8a48 	vsub.f32	s16, s0, s16
 80074ae:	b359      	cbz	r1, 8007508 <__kernel_rem_pio2f+0x1c0>
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fa5d 	bl	8007970 <scalbnf>
 80074b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80074ba:	e025      	b.n	8007508 <__kernel_rem_pio2f+0x1c0>
 80074bc:	ee60 7a28 	vmul.f32	s15, s0, s17
 80074c0:	a806      	add	r0, sp, #24
 80074c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80074ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80074d2:	ee10 1a10 	vmov	r1, s0
 80074d6:	ed32 0a01 	vldmdb	r2!, {s0}
 80074da:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80074de:	ee37 0a80 	vadd.f32	s0, s15, s0
 80074e2:	3301      	adds	r3, #1
 80074e4:	e79a      	b.n	800741c <__kernel_rem_pio2f+0xd4>
 80074e6:	d106      	bne.n	80074f6 <__kernel_rem_pio2f+0x1ae>
 80074e8:	1e6b      	subs	r3, r5, #1
 80074ea:	aa06      	add	r2, sp, #24
 80074ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80074f0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80074f4:	e7c3      	b.n	800747e <__kernel_rem_pio2f+0x136>
 80074f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80074fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007502:	da31      	bge.n	8007568 <__kernel_rem_pio2f+0x220>
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800750c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007510:	f040 80a8 	bne.w	8007664 <__kernel_rem_pio2f+0x31c>
 8007514:	1e6b      	subs	r3, r5, #1
 8007516:	4618      	mov	r0, r3
 8007518:	2200      	movs	r2, #0
 800751a:	4548      	cmp	r0, r9
 800751c:	da4d      	bge.n	80075ba <__kernel_rem_pio2f+0x272>
 800751e:	2a00      	cmp	r2, #0
 8007520:	f000 8087 	beq.w	8007632 <__kernel_rem_pio2f+0x2ea>
 8007524:	aa06      	add	r2, sp, #24
 8007526:	3c08      	subs	r4, #8
 8007528:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800752c:	2900      	cmp	r1, #0
 800752e:	f000 808d 	beq.w	800764c <__kernel_rem_pio2f+0x304>
 8007532:	4620      	mov	r0, r4
 8007534:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	f000 fa19 	bl	8007970 <scalbnf>
 800753e:	9b02      	ldr	r3, [sp, #8]
 8007540:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800765c <__kernel_rem_pio2f+0x314>
 8007544:	0099      	lsls	r1, r3, #2
 8007546:	aa42      	add	r2, sp, #264	; 0x108
 8007548:	1850      	adds	r0, r2, r1
 800754a:	1d05      	adds	r5, r0, #4
 800754c:	461c      	mov	r4, r3
 800754e:	2c00      	cmp	r4, #0
 8007550:	f280 80b8 	bge.w	80076c4 <__kernel_rem_pio2f+0x37c>
 8007554:	2500      	movs	r5, #0
 8007556:	1b5c      	subs	r4, r3, r5
 8007558:	2c00      	cmp	r4, #0
 800755a:	f2c0 80d8 	blt.w	800770e <__kernel_rem_pio2f+0x3c6>
 800755e:	4f3d      	ldr	r7, [pc, #244]	; (8007654 <__kernel_rem_pio2f+0x30c>)
 8007560:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007660 <__kernel_rem_pio2f+0x318>
 8007564:	2400      	movs	r4, #0
 8007566:	e0c6      	b.n	80076f6 <__kernel_rem_pio2f+0x3ae>
 8007568:	f04f 0802 	mov.w	r8, #2
 800756c:	e78a      	b.n	8007484 <__kernel_rem_pio2f+0x13c>
 800756e:	ab06      	add	r3, sp, #24
 8007570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007574:	b949      	cbnz	r1, 800758a <__kernel_rem_pio2f+0x242>
 8007576:	b12b      	cbz	r3, 8007584 <__kernel_rem_pio2f+0x23c>
 8007578:	aa06      	add	r2, sp, #24
 800757a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800757e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007582:	2301      	movs	r3, #1
 8007584:	3001      	adds	r0, #1
 8007586:	4619      	mov	r1, r3
 8007588:	e781      	b.n	800748e <__kernel_rem_pio2f+0x146>
 800758a:	aa06      	add	r2, sp, #24
 800758c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007590:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007594:	460b      	mov	r3, r1
 8007596:	e7f5      	b.n	8007584 <__kernel_rem_pio2f+0x23c>
 8007598:	1e68      	subs	r0, r5, #1
 800759a:	ab06      	add	r3, sp, #24
 800759c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a4:	aa06      	add	r2, sp, #24
 80075a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80075aa:	e779      	b.n	80074a0 <__kernel_rem_pio2f+0x158>
 80075ac:	1e68      	subs	r0, r5, #1
 80075ae:	ab06      	add	r3, sp, #24
 80075b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b8:	e7f4      	b.n	80075a4 <__kernel_rem_pio2f+0x25c>
 80075ba:	a906      	add	r1, sp, #24
 80075bc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80075c0:	3801      	subs	r0, #1
 80075c2:	430a      	orrs	r2, r1
 80075c4:	e7a9      	b.n	800751a <__kernel_rem_pio2f+0x1d2>
 80075c6:	f10c 0c01 	add.w	ip, ip, #1
 80075ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	d0f9      	beq.n	80075c6 <__kernel_rem_pio2f+0x27e>
 80075d2:	eb0b 0305 	add.w	r3, fp, r5
 80075d6:	aa1a      	add	r2, sp, #104	; 0x68
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	1898      	adds	r0, r3, r2
 80075dc:	3004      	adds	r0, #4
 80075de:	1c69      	adds	r1, r5, #1
 80075e0:	3704      	adds	r7, #4
 80075e2:	2200      	movs	r2, #0
 80075e4:	4465      	add	r5, ip
 80075e6:	9005      	str	r0, [sp, #20]
 80075e8:	428d      	cmp	r5, r1
 80075ea:	f6ff af0a 	blt.w	8007402 <__kernel_rem_pio2f+0xba>
 80075ee:	a81a      	add	r0, sp, #104	; 0x68
 80075f0:	eb02 0c03 	add.w	ip, r2, r3
 80075f4:	4484      	add	ip, r0
 80075f6:	9803      	ldr	r0, [sp, #12]
 80075f8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80075fc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007600:	9001      	str	r0, [sp, #4]
 8007602:	ee07 0a90 	vmov	s15, r0
 8007606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800760a:	9805      	ldr	r0, [sp, #20]
 800760c:	edcc 7a00 	vstr	s15, [ip]
 8007610:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007660 <__kernel_rem_pio2f+0x318>
 8007614:	eb00 0802 	add.w	r8, r0, r2
 8007618:	f04f 0c00 	mov.w	ip, #0
 800761c:	45d4      	cmp	ip, sl
 800761e:	dd0c      	ble.n	800763a <__kernel_rem_pio2f+0x2f2>
 8007620:	eb02 0c07 	add.w	ip, r2, r7
 8007624:	a842      	add	r0, sp, #264	; 0x108
 8007626:	4484      	add	ip, r0
 8007628:	edcc 7a01 	vstr	s15, [ip, #4]
 800762c:	3101      	adds	r1, #1
 800762e:	3204      	adds	r2, #4
 8007630:	e7da      	b.n	80075e8 <__kernel_rem_pio2f+0x2a0>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	f04f 0c01 	mov.w	ip, #1
 8007638:	e7c7      	b.n	80075ca <__kernel_rem_pio2f+0x282>
 800763a:	ecfe 6a01 	vldmia	lr!, {s13}
 800763e:	ed38 7a01 	vldmdb	r8!, {s14}
 8007642:	f10c 0c01 	add.w	ip, ip, #1
 8007646:	eee6 7a87 	vfma.f32	s15, s13, s14
 800764a:	e7e7      	b.n	800761c <__kernel_rem_pio2f+0x2d4>
 800764c:	3b01      	subs	r3, #1
 800764e:	e769      	b.n	8007524 <__kernel_rem_pio2f+0x1dc>
 8007650:	08007e6c 	.word	0x08007e6c
 8007654:	08007e40 	.word	0x08007e40
 8007658:	43800000 	.word	0x43800000
 800765c:	3b800000 	.word	0x3b800000
 8007660:	00000000 	.word	0x00000000
 8007664:	4260      	negs	r0, r4
 8007666:	eeb0 0a48 	vmov.f32	s0, s16
 800766a:	f000 f981 	bl	8007970 <scalbnf>
 800766e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007658 <__kernel_rem_pio2f+0x310>
 8007672:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767a:	db1a      	blt.n	80076b2 <__kernel_rem_pio2f+0x36a>
 800767c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800765c <__kernel_rem_pio2f+0x314>
 8007680:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007684:	aa06      	add	r2, sp, #24
 8007686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800768a:	a906      	add	r1, sp, #24
 800768c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007690:	3408      	adds	r4, #8
 8007692:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800769a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800769e:	ee10 3a10 	vmov	r3, s0
 80076a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80076a6:	1c6b      	adds	r3, r5, #1
 80076a8:	ee17 2a90 	vmov	r2, s15
 80076ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80076b0:	e73f      	b.n	8007532 <__kernel_rem_pio2f+0x1ea>
 80076b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076b6:	aa06      	add	r2, sp, #24
 80076b8:	ee10 3a10 	vmov	r3, s0
 80076bc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80076c0:	462b      	mov	r3, r5
 80076c2:	e736      	b.n	8007532 <__kernel_rem_pio2f+0x1ea>
 80076c4:	aa06      	add	r2, sp, #24
 80076c6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80076ca:	9202      	str	r2, [sp, #8]
 80076cc:	ee07 2a90 	vmov	s15, r2
 80076d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d4:	3c01      	subs	r4, #1
 80076d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80076da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80076de:	ed65 7a01 	vstmdb	r5!, {s15}
 80076e2:	e734      	b.n	800754e <__kernel_rem_pio2f+0x206>
 80076e4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80076e8:	ecf7 6a01 	vldmia	r7!, {s13}
 80076ec:	ed9c 7a00 	vldr	s14, [ip]
 80076f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80076f4:	3401      	adds	r4, #1
 80076f6:	454c      	cmp	r4, r9
 80076f8:	dc01      	bgt.n	80076fe <__kernel_rem_pio2f+0x3b6>
 80076fa:	42a5      	cmp	r5, r4
 80076fc:	daf2      	bge.n	80076e4 <__kernel_rem_pio2f+0x39c>
 80076fe:	aa56      	add	r2, sp, #344	; 0x158
 8007700:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007704:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007708:	3501      	adds	r5, #1
 800770a:	3804      	subs	r0, #4
 800770c:	e723      	b.n	8007556 <__kernel_rem_pio2f+0x20e>
 800770e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007710:	2a03      	cmp	r2, #3
 8007712:	d84d      	bhi.n	80077b0 <__kernel_rem_pio2f+0x468>
 8007714:	e8df f002 	tbb	[pc, r2]
 8007718:	021f1f3e 	.word	0x021f1f3e
 800771c:	aa56      	add	r2, sp, #344	; 0x158
 800771e:	4411      	add	r1, r2
 8007720:	399c      	subs	r1, #156	; 0x9c
 8007722:	4608      	mov	r0, r1
 8007724:	461c      	mov	r4, r3
 8007726:	2c00      	cmp	r4, #0
 8007728:	dc5f      	bgt.n	80077ea <__kernel_rem_pio2f+0x4a2>
 800772a:	4608      	mov	r0, r1
 800772c:	461c      	mov	r4, r3
 800772e:	2c01      	cmp	r4, #1
 8007730:	dc6b      	bgt.n	800780a <__kernel_rem_pio2f+0x4c2>
 8007732:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007660 <__kernel_rem_pio2f+0x318>
 8007736:	2b01      	cmp	r3, #1
 8007738:	dc77      	bgt.n	800782a <__kernel_rem_pio2f+0x4e2>
 800773a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800773e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007742:	f1b8 0f00 	cmp.w	r8, #0
 8007746:	d176      	bne.n	8007836 <__kernel_rem_pio2f+0x4ee>
 8007748:	edc6 6a00 	vstr	s13, [r6]
 800774c:	ed86 7a01 	vstr	s14, [r6, #4]
 8007750:	edc6 7a02 	vstr	s15, [r6, #8]
 8007754:	e02c      	b.n	80077b0 <__kernel_rem_pio2f+0x468>
 8007756:	aa56      	add	r2, sp, #344	; 0x158
 8007758:	4411      	add	r1, r2
 800775a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007660 <__kernel_rem_pio2f+0x318>
 800775e:	399c      	subs	r1, #156	; 0x9c
 8007760:	4618      	mov	r0, r3
 8007762:	2800      	cmp	r0, #0
 8007764:	da32      	bge.n	80077cc <__kernel_rem_pio2f+0x484>
 8007766:	f1b8 0f00 	cmp.w	r8, #0
 800776a:	d035      	beq.n	80077d8 <__kernel_rem_pio2f+0x490>
 800776c:	eef1 7a47 	vneg.f32	s15, s14
 8007770:	edc6 7a00 	vstr	s15, [r6]
 8007774:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800777c:	a82f      	add	r0, sp, #188	; 0xbc
 800777e:	2101      	movs	r1, #1
 8007780:	428b      	cmp	r3, r1
 8007782:	da2c      	bge.n	80077de <__kernel_rem_pio2f+0x496>
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	d001      	beq.n	800778e <__kernel_rem_pio2f+0x446>
 800778a:	eef1 7a67 	vneg.f32	s15, s15
 800778e:	edc6 7a01 	vstr	s15, [r6, #4]
 8007792:	e00d      	b.n	80077b0 <__kernel_rem_pio2f+0x468>
 8007794:	aa56      	add	r2, sp, #344	; 0x158
 8007796:	4411      	add	r1, r2
 8007798:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007660 <__kernel_rem_pio2f+0x318>
 800779c:	399c      	subs	r1, #156	; 0x9c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da0e      	bge.n	80077c0 <__kernel_rem_pio2f+0x478>
 80077a2:	f1b8 0f00 	cmp.w	r8, #0
 80077a6:	d001      	beq.n	80077ac <__kernel_rem_pio2f+0x464>
 80077a8:	eef1 7a67 	vneg.f32	s15, s15
 80077ac:	edc6 7a00 	vstr	s15, [r6]
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	f003 0007 	and.w	r0, r3, #7
 80077b6:	b057      	add	sp, #348	; 0x15c
 80077b8:	ecbd 8b04 	vpop	{d8-d9}
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	ed31 7a01 	vldmdb	r1!, {s14}
 80077c4:	3b01      	subs	r3, #1
 80077c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077ca:	e7e8      	b.n	800779e <__kernel_rem_pio2f+0x456>
 80077cc:	ed71 7a01 	vldmdb	r1!, {s15}
 80077d0:	3801      	subs	r0, #1
 80077d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077d6:	e7c4      	b.n	8007762 <__kernel_rem_pio2f+0x41a>
 80077d8:	eef0 7a47 	vmov.f32	s15, s14
 80077dc:	e7c8      	b.n	8007770 <__kernel_rem_pio2f+0x428>
 80077de:	ecb0 7a01 	vldmia	r0!, {s14}
 80077e2:	3101      	adds	r1, #1
 80077e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e8:	e7ca      	b.n	8007780 <__kernel_rem_pio2f+0x438>
 80077ea:	ed50 7a02 	vldr	s15, [r0, #-8]
 80077ee:	ed70 6a01 	vldmdb	r0!, {s13}
 80077f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80077f6:	3c01      	subs	r4, #1
 80077f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077fc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007804:	edc0 7a00 	vstr	s15, [r0]
 8007808:	e78d      	b.n	8007726 <__kernel_rem_pio2f+0x3de>
 800780a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800780e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007812:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007816:	3c01      	subs	r4, #1
 8007818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800781c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007824:	edc0 7a00 	vstr	s15, [r0]
 8007828:	e781      	b.n	800772e <__kernel_rem_pio2f+0x3e6>
 800782a:	ed31 7a01 	vldmdb	r1!, {s14}
 800782e:	3b01      	subs	r3, #1
 8007830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007834:	e77f      	b.n	8007736 <__kernel_rem_pio2f+0x3ee>
 8007836:	eef1 6a66 	vneg.f32	s13, s13
 800783a:	eeb1 7a47 	vneg.f32	s14, s14
 800783e:	edc6 6a00 	vstr	s13, [r6]
 8007842:	ed86 7a01 	vstr	s14, [r6, #4]
 8007846:	eef1 7a67 	vneg.f32	s15, s15
 800784a:	e781      	b.n	8007750 <__kernel_rem_pio2f+0x408>

0800784c <__kernel_sinf>:
 800784c:	ee10 3a10 	vmov	r3, s0
 8007850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007854:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007858:	da04      	bge.n	8007864 <__kernel_sinf+0x18>
 800785a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800785e:	ee17 3a90 	vmov	r3, s15
 8007862:	b35b      	cbz	r3, 80078bc <__kernel_sinf+0x70>
 8007864:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007868:	eddf 7a15 	vldr	s15, [pc, #84]	; 80078c0 <__kernel_sinf+0x74>
 800786c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80078c4 <__kernel_sinf+0x78>
 8007870:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007874:	eddf 7a14 	vldr	s15, [pc, #80]	; 80078c8 <__kernel_sinf+0x7c>
 8007878:	eee6 7a07 	vfma.f32	s15, s12, s14
 800787c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80078cc <__kernel_sinf+0x80>
 8007880:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007884:	eddf 7a12 	vldr	s15, [pc, #72]	; 80078d0 <__kernel_sinf+0x84>
 8007888:	ee60 6a07 	vmul.f32	s13, s0, s14
 800788c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007890:	b930      	cbnz	r0, 80078a0 <__kernel_sinf+0x54>
 8007892:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80078d4 <__kernel_sinf+0x88>
 8007896:	eea7 6a27 	vfma.f32	s12, s14, s15
 800789a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800789e:	4770      	bx	lr
 80078a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80078a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80078a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80078ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80078b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80078d8 <__kernel_sinf+0x8c>
 80078b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80078b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	2f2ec9d3 	.word	0x2f2ec9d3
 80078c4:	b2d72f34 	.word	0xb2d72f34
 80078c8:	3638ef1b 	.word	0x3638ef1b
 80078cc:	b9500d01 	.word	0xb9500d01
 80078d0:	3c088889 	.word	0x3c088889
 80078d4:	be2aaaab 	.word	0xbe2aaaab
 80078d8:	3e2aaaab 	.word	0x3e2aaaab

080078dc <fabsf>:
 80078dc:	ee10 3a10 	vmov	r3, s0
 80078e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078e4:	ee00 3a10 	vmov	s0, r3
 80078e8:	4770      	bx	lr
	...

080078ec <floorf>:
 80078ec:	ee10 3a10 	vmov	r3, s0
 80078f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078f4:	0dca      	lsrs	r2, r1, #23
 80078f6:	3a7f      	subs	r2, #127	; 0x7f
 80078f8:	2a16      	cmp	r2, #22
 80078fa:	dc2a      	bgt.n	8007952 <floorf+0x66>
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	da11      	bge.n	8007924 <floorf+0x38>
 8007900:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007964 <floorf+0x78>
 8007904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007908:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	dd05      	ble.n	800791e <floorf+0x32>
 8007912:	2b00      	cmp	r3, #0
 8007914:	da23      	bge.n	800795e <floorf+0x72>
 8007916:	4a14      	ldr	r2, [pc, #80]	; (8007968 <floorf+0x7c>)
 8007918:	2900      	cmp	r1, #0
 800791a:	bf18      	it	ne
 800791c:	4613      	movne	r3, r2
 800791e:	ee00 3a10 	vmov	s0, r3
 8007922:	4770      	bx	lr
 8007924:	4911      	ldr	r1, [pc, #68]	; (800796c <floorf+0x80>)
 8007926:	4111      	asrs	r1, r2
 8007928:	420b      	tst	r3, r1
 800792a:	d0fa      	beq.n	8007922 <floorf+0x36>
 800792c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007964 <floorf+0x78>
 8007930:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007934:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	ddef      	ble.n	800791e <floorf+0x32>
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfbe      	ittt	lt
 8007942:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007946:	fa40 f202 	asrlt.w	r2, r0, r2
 800794a:	189b      	addlt	r3, r3, r2
 800794c:	ea23 0301 	bic.w	r3, r3, r1
 8007950:	e7e5      	b.n	800791e <floorf+0x32>
 8007952:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007956:	d3e4      	bcc.n	8007922 <floorf+0x36>
 8007958:	ee30 0a00 	vadd.f32	s0, s0, s0
 800795c:	4770      	bx	lr
 800795e:	2300      	movs	r3, #0
 8007960:	e7dd      	b.n	800791e <floorf+0x32>
 8007962:	bf00      	nop
 8007964:	7149f2ca 	.word	0x7149f2ca
 8007968:	bf800000 	.word	0xbf800000
 800796c:	007fffff 	.word	0x007fffff

08007970 <scalbnf>:
 8007970:	b508      	push	{r3, lr}
 8007972:	ee10 2a10 	vmov	r2, s0
 8007976:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800797a:	ed2d 8b02 	vpush	{d8}
 800797e:	eef0 0a40 	vmov.f32	s1, s0
 8007982:	d004      	beq.n	800798e <scalbnf+0x1e>
 8007984:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007988:	d306      	bcc.n	8007998 <scalbnf+0x28>
 800798a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800798e:	ecbd 8b02 	vpop	{d8}
 8007992:	eeb0 0a60 	vmov.f32	s0, s1
 8007996:	bd08      	pop	{r3, pc}
 8007998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800799c:	d21c      	bcs.n	80079d8 <scalbnf+0x68>
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <scalbnf+0xac>)
 80079a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a20 <scalbnf+0xb0>
 80079a4:	4298      	cmp	r0, r3
 80079a6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80079aa:	db10      	blt.n	80079ce <scalbnf+0x5e>
 80079ac:	ee10 2a90 	vmov	r2, s1
 80079b0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80079b4:	3b19      	subs	r3, #25
 80079b6:	4403      	add	r3, r0
 80079b8:	2bfe      	cmp	r3, #254	; 0xfe
 80079ba:	dd0f      	ble.n	80079dc <scalbnf+0x6c>
 80079bc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007a24 <scalbnf+0xb4>
 80079c0:	eeb0 0a48 	vmov.f32	s0, s16
 80079c4:	f000 f834 	bl	8007a30 <copysignf>
 80079c8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80079cc:	e7df      	b.n	800798e <scalbnf+0x1e>
 80079ce:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a28 <scalbnf+0xb8>
 80079d2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80079d6:	e7da      	b.n	800798e <scalbnf+0x1e>
 80079d8:	0ddb      	lsrs	r3, r3, #23
 80079da:	e7ec      	b.n	80079b6 <scalbnf+0x46>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd06      	ble.n	80079ee <scalbnf+0x7e>
 80079e0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80079e4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80079e8:	ee00 3a90 	vmov	s1, r3
 80079ec:	e7cf      	b.n	800798e <scalbnf+0x1e>
 80079ee:	f113 0f16 	cmn.w	r3, #22
 80079f2:	da06      	bge.n	8007a02 <scalbnf+0x92>
 80079f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079f8:	4298      	cmp	r0, r3
 80079fa:	dcdf      	bgt.n	80079bc <scalbnf+0x4c>
 80079fc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007a28 <scalbnf+0xb8>
 8007a00:	e7de      	b.n	80079c0 <scalbnf+0x50>
 8007a02:	3319      	adds	r3, #25
 8007a04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007a08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007a0c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007a2c <scalbnf+0xbc>
 8007a10:	ee07 3a10 	vmov	s14, r3
 8007a14:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007a18:	e7b9      	b.n	800798e <scalbnf+0x1e>
 8007a1a:	bf00      	nop
 8007a1c:	ffff3cb0 	.word	0xffff3cb0
 8007a20:	4c000000 	.word	0x4c000000
 8007a24:	7149f2ca 	.word	0x7149f2ca
 8007a28:	0da24260 	.word	0x0da24260
 8007a2c:	33000000 	.word	0x33000000

08007a30 <copysignf>:
 8007a30:	ee10 3a10 	vmov	r3, s0
 8007a34:	ee10 2a90 	vmov	r2, s1
 8007a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a40:	4313      	orrs	r3, r2
 8007a42:	ee00 3a10 	vmov	s0, r3
 8007a46:	4770      	bx	lr

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
