
t10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e90  08007e90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e98  08007e98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08007eac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007eac  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002395  00000000  00000000  00033a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00036fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a5a  00000000  00000000  000380d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d92d  00000000  00000000  00060b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010656a  00000000  00000000  0006e457  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001749c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  00174a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a60 	.word	0x08007a60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007a60 	.word	0x08007a60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4abb      	ldr	r2, [pc, #748]	; (8001028 <SVPWM_Update+0x2fc>)
 8000d3c:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d44:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d4c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800102c <SVPWM_Update+0x300>
 8000d50:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d88:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001030 <SVPWM_Update+0x304>
 8000d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	db09      	blt.n	8000daa <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d9c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001030 <SVPWM_Update+0x304>
 8000da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000db8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001030 <SVPWM_Update+0x304>
 8000dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f006 f900 	bl	8006fc8 <sinf>
 8000dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000dec:	eeb0 0a67 	vmov.f32	s0, s15
 8000df0:	f006 f8ea 	bl	8006fc8 <sinf>
 8000df4:	eeb0 7a40 	vmov.f32	s14, s0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	d518      	bpl.n	8000e86 <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e5a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000e5e:	eef4 7a47 	vcmp.f32	s15, s14
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	d104      	bne.n	8000e72 <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	e009      	b.n	8000e86 <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	d11f      	bne.n	8000ed6 <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	621a      	str	r2, [r3, #32]
 8000ed4:	e0d7      	b.n	8001086 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee0:	eef4 7a47 	vcmp.f32	s15, s14
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d11f      	bne.n	8000f2a <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	621a      	str	r2, [r3, #32]
 8000f28:	e0ad      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f34:	eef4 7a47 	vcmp.f32	s15, s14
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	d11f      	bne.n	8000f7e <SVPWM_Update+0x252>
    	svm->U = svm->to;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	edc3 7a08 	vstr	s15, [r3, #32]
 8000f7c:	e083      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f84:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f88:	eef4 7a47 	vcmp.f32	s15, s14
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d11f      	bne.n	8000fd2 <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
 8000fd0:	e059      	b.n	8001086 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d126      	bne.n	8001034 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	edc3 7a08 	vstr	s15, [r3, #32]
 8001024:	e02f      	b.n	8001086 <SVPWM_Update+0x35a>
 8001026:	bf00      	nop
 8001028:	3f666666 	.word	0x3f666666
 800102c:	40c90fdb 	.word	0x40c90fdb
 8001030:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edd3 7a05 	vldr	s15, [r3, #20]
 800103a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800103e:	eef4 7a47 	vcmp.f32	s15, s14
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d11e      	bne.n	8001086 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 6a06 	vldr	s13, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <SVPWM_Update+0x3ec>)
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	3301      	adds	r3, #1
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <SVPWM_Update+0x3ec>)
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	ee17 2a90 	vmov	r2, s15
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 6a07 	vldr	s13, [r3, #28]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80010c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <SVPWM_Update+0x3ec>)
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	3301      	adds	r3, #1
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SVPWM_Update+0x3ec>)
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	ee17 2a90 	vmov	r2, s15
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edd3 6a08 	vldr	s13, [r3, #32]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <SVPWM_Update+0x3ec>)
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	3301      	adds	r3, #1
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SVPWM_Update+0x3ec>)
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 2a90 	vmov	r2, s15
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40012c00 	.word	0x40012c00

0800111c <VHZ_Init>:
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6178      	str	r0, [r7, #20]
 8001124:	ed87 0a04 	vstr	s0, [r7, #16]
 8001128:	edc7 0a03 	vstr	s1, [r7, #12]
 800112c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001130:	edc7 1a01 	vstr	s3, [r7, #4]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001150:	edd7 7a02 	vldr	s15, [r7, #8]
 8001154:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001158:	ed97 7a03 	vldr	s14, [r7, #12]
 800115c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	edc3 7a04 	vstr	s15, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <VHZ_Update>:
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	ed93 7a06 	vldr	s14, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d804      	bhi.n	80011b0 <VHZ_Update+0x28>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	e03b      	b.n	8001228 <VHZ_Update+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	dd20      	ble.n	8001208 <VHZ_Update+0x80>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d815      	bhi.n	8001208 <VHZ_Update+0x80>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	ed93 6a06 	vldr	s12, [r3, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a05 	vstr	s15, [r3, #20]
 8001206:	e00f      	b.n	8001228 <VHZ_Update+0xa0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	ed93 7a06 	vldr	s14, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edd3 7a01 	vldr	s15, [r3, #4]
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	dc00      	bgt.n	8001220 <VHZ_Update+0x98>
 800121e:	e003      	b.n	8001228 <VHZ_Update+0xa0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	0000      	movs	r0, r0
	...

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 800123e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001368 <main+0x130>
 8001242:	484a      	ldr	r0, [pc, #296]	; (800136c <main+0x134>)
 8001244:	f7ff fd2e 	bl	8000ca4 <SVPWM_Init>
  VHZ_Init(&vhz1, 0.001, 0.01, 10, 100);
 8001248:	eddf 1a49 	vldr	s3, [pc, #292]	; 8001370 <main+0x138>
 800124c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001250:	eddf 0a48 	vldr	s1, [pc, #288]	; 8001374 <main+0x13c>
 8001254:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001378 <main+0x140>
 8001258:	4848      	ldr	r0, [pc, #288]	; (800137c <main+0x144>)
 800125a:	f7ff ff5f 	bl	800111c <VHZ_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f000 ff37 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f899 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 fbc1 	bl	80019ec <MX_GPIO_Init>
  MX_TIM1_Init();
 800126a:	f000 fa63 	bl	8001734 <MX_TIM1_Init>
  MX_TIM15_Init();
 800126e:	f000 fb3b 	bl	80018e8 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001272:	f000 fb8b 	bl	800198c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001276:	f000 f917 	bl	80014a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800127a:	f000 f98f 	bl	800159c <MX_ADC2_Init>
  MX_ADC3_Init();
 800127e:	f000 f9f3 	bl	8001668 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001282:	2100      	movs	r1, #0
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <main+0x148>)
 8001286:	f003 ff6b 	bl	8005160 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	483c      	ldr	r0, [pc, #240]	; (8001380 <main+0x148>)
 800128e:	f004 ffd3 	bl	8006238 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001292:	2104      	movs	r1, #4
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <main+0x148>)
 8001296:	f003 ff63 	bl	8005160 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800129a:	2104      	movs	r1, #4
 800129c:	4838      	ldr	r0, [pc, #224]	; (8001380 <main+0x148>)
 800129e:	f004 ffcb 	bl	8006238 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012a2:	2108      	movs	r1, #8
 80012a4:	4836      	ldr	r0, [pc, #216]	; (8001380 <main+0x148>)
 80012a6:	f003 ff5b 	bl	8005160 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012aa:	2108      	movs	r1, #8
 80012ac:	4834      	ldr	r0, [pc, #208]	; (8001380 <main+0x148>)
 80012ae:	f004 ffc3 	bl	8006238 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 80012b2:	4834      	ldr	r0, [pc, #208]	; (8001384 <main+0x14c>)
 80012b4:	f003 fef4 	bl	80050a0 <HAL_TIM_Base_Start_IT>

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2104      	movs	r1, #4
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <main+0x150>)
 80012be:	f002 fbad 	bl	8003a1c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80012c2:	4832      	ldr	r0, [pc, #200]	; (800138c <main+0x154>)
 80012c4:	f001 fac8 	bl	8002858 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012cc:	482f      	ldr	r0, [pc, #188]	; (800138c <main+0x154>)
 80012ce:	f001 fb7d 	bl	80029cc <HAL_ADC_PollForConversion>
	  voltage = HAL_ADC_GetValue(&hadc1);
 80012d2:	482e      	ldr	r0, [pc, #184]	; (800138c <main+0x154>)
 80012d4:	f001 fc4a 	bl	8002b6c <HAL_ADC_GetValue>
 80012d8:	4603      	mov	r3, r0
 80012da:	81fb      	strh	r3, [r7, #14]
	  voltage = adc_voltage_conversion (voltage) / SCALING_FACTOR;
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fc4e 	bl	8001b80 <adc_voltage_conversion>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f8b0 	bl	800044c <__aeabi_ui2d>
 80012ec:	a31c      	add	r3, pc, #112	; (adr r3, 8001360 <main+0x128>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fa4f 	bl	8000794 <__aeabi_ddiv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	f7ff fb31 	bl	8000964 <__aeabi_d2uiz>
 8001302:	4603      	mov	r3, r0
 8001304:	81fb      	strh	r3, [r7, #14]

	  HAL_Delay (100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f000 ff5a 	bl	80021c0 <HAL_Delay>

	  HAL_ADC_Start (&hadc2);
 800130c:	4820      	ldr	r0, [pc, #128]	; (8001390 <main+0x158>)
 800130e:	f001 faa3 	bl	8002858 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <main+0x158>)
 8001318:	f001 fb58 	bl	80029cc <HAL_ADC_PollForConversion>
	  current1 = HAL_ADC_GetValue(&hadc2);
 800131c:	481c      	ldr	r0, [pc, #112]	; (8001390 <main+0x158>)
 800131e:	f001 fc25 	bl	8002b6c <HAL_ADC_GetValue>
 8001322:	4603      	mov	r3, r0
 8001324:	81bb      	strh	r3, [r7, #12]

	  HAL_ADC_Start (&hadc3);
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <main+0x15c>)
 8001328:	f001 fa96 	bl	8002858 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <main+0x15c>)
 8001332:	f001 fb4b 	bl	80029cc <HAL_ADC_PollForConversion>
	  current2 = HAL_ADC_GetValue(&hadc3);
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <main+0x15c>)
 8001338:	f001 fc18 	bl	8002b6c <HAL_ADC_GetValue>
 800133c:	4603      	mov	r3, r0
 800133e:	817b      	strh	r3, [r7, #10]

	  current1 = current_sensing (current1, current2);	//current 1 is the actual current we want not current2
 8001340:	897a      	ldrh	r2, [r7, #10]
 8001342:	89bb      	ldrh	r3, [r7, #12]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc3a 	bl	8001bc0 <current_sensing>
 800134c:	4603      	mov	r3, r0
 800134e:	81bb      	strh	r3, [r7, #12]



	  // Send out buffer (temperature or error message)

	  HAL_Delay (1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001354:	f000 ff34 	bl	80021c0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001358:	e7b3      	b.n	80012c2 <main+0x8a>
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	e847d5fd 	.word	0xe847d5fd
 8001364:	3f7dd193 	.word	0x3f7dd193
 8001368:	461c4000 	.word	0x461c4000
 800136c:	2000027c 	.word	0x2000027c
 8001370:	42c80000 	.word	0x42c80000
 8001374:	3c23d70a 	.word	0x3c23d70a
 8001378:	3a83126f 	.word	0x3a83126f
 800137c:	200001a0 	.word	0x200001a0
 8001380:	200001bc 	.word	0x200001bc
 8001384:	20000098 	.word	0x20000098
 8001388:	48000400 	.word	0x48000400
 800138c:	200000d8 	.word	0x200000d8
 8001390:	20000034 	.word	0x20000034
 8001394:	2000013c 	.word	0x2000013c

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0b8      	sub	sp, #224	; 0xe0
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a2:	2244      	movs	r2, #68	; 0x44
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fe06 	bl	8006fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2288      	movs	r2, #136	; 0x88
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fdf8 	bl	8006fb8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d6:	2310      	movs	r3, #16
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ee:	230a      	movs	r3, #10
 80013f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fb82 	bl	8003b14 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001416:	f000 fc03 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001438:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800143c:	2104      	movs	r1, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f002 ff4e 	bl	80042e0 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800144a:	f000 fbe9 	bl	8001c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800144e:	f244 0302 	movw	r3, #16386	; 0x4002
 8001452:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800145c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800145e:	2302      	movs	r3, #2
 8001460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001466:	2308      	movs	r3, #8
 8001468:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800146a:	2307      	movs	r3, #7
 800146c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f932 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800148a:	f000 fbc9 	bl	8001c20 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800148e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001492:	f002 fae9 	bl	8003a68 <HAL_PWREx_ControlVoltageScaling>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800149c:	f000 fbc0 	bl	8001c20 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	37e0      	adds	r7, #224	; 0xe0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014cc:	4a31      	ldr	r2, [pc, #196]	; (8001594 <MX_ADC1_Init+0xec>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014ea:	2204      	movs	r2, #4
 80014ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC1_Init+0xe8>)
 800150a:	2201      	movs	r2, #1
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC1_Init+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_ADC1_Init+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001530:	4817      	ldr	r0, [pc, #92]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001532:	f001 f83d 	bl	80025b0 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800153c:	f000 fb70 	bl	8001c20 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <MX_ADC1_Init+0xe8>)
 800154c:	f001 ff00 	bl	8003350 <HAL_ADCEx_MultiModeConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001556:	f000 fb63 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_ADC1_Init+0xf0>)
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155e:	2306      	movs	r3, #6
 8001560:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001566:	237f      	movs	r3, #127	; 0x7f
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156a:	2304      	movs	r3, #4
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_ADC1_Init+0xe8>)
 8001578:	f001 fb06 	bl	8002b88 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001582:	f000 fb4d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000d8 	.word	0x200000d8
 8001594:	50040000 	.word	0x50040000
 8001598:	14f00020 	.word	0x14f00020

0800159c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <MX_ADC2_Init+0xc0>)
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <MX_ADC2_Init+0xc4>)
 80015b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_ADC2_Init+0xc0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <MX_ADC2_Init+0xc0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_ADC2_Init+0xc0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_ADC2_Init+0xc0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_ADC2_Init+0xc0>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_ADC2_Init+0xc0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_ADC2_Init+0xc0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_ADC2_Init+0xc0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_ADC2_Init+0xc0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_ADC2_Init+0xc0>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_ADC2_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_ADC2_Init+0xc0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_ADC2_Init+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_ADC2_Init+0xc0>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_ADC2_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <MX_ADC2_Init+0xc0>)
 800161a:	f000 ffc9 	bl	80025b0 <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 fafc 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_ADC2_Init+0xc8>)
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162c:	2306      	movs	r3, #6
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001634:	237f      	movs	r3, #127	; 0x7f
 8001636:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001638:	2304      	movs	r3, #4
 800163a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_ADC2_Init+0xc0>)
 8001646:	f001 fa9f 	bl	8002b88 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001650:	f000 fae6 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000034 	.word	0x20000034
 8001660:	50040100 	.word	0x50040100
 8001664:	10c00010 	.word	0x10c00010

08001668 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_ADC3_Init+0xc0>)
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <MX_ADC3_Init+0xc4>)
 8001682:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_ADC3_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_ADC3_Init+0xc0>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_ADC3_Init+0xc0>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_ADC3_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_ADC3_Init+0xc0>)
 800169e:	2204      	movs	r2, #4
 80016a0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <MX_ADC3_Init+0xc0>)
 80016e6:	f000 ff63 	bl	80025b0 <HAL_ADC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80016f0:	f000 fa96 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_ADC3_Init+0xc8>)
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f8:	2306      	movs	r3, #6
 80016fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001700:	237f      	movs	r3, #127	; 0x7f
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001704:	2304      	movs	r3, #4
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_ADC3_Init+0xc0>)
 8001712:	f001 fa39 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800171c:	f000 fa80 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000013c 	.word	0x2000013c
 800172c:	50040200 	.word	0x50040200
 8001730:	04300002 	.word	0x04300002

08001734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09e      	sub	sp, #120	; 0x78
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001748:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	222c      	movs	r2, #44	; 0x2c
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fc1a 	bl	8006fb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001786:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <MX_TIM1_Init+0x1b0>)
 8001788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800178a:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 800178c:	224f      	movs	r2, #79	; 0x4f
 800178e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001792:	2260      	movs	r2, #96	; 0x60
 8001794:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001798:	2263      	movs	r2, #99	; 0x63
 800179a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a2:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ae:	484c      	ldr	r0, [pc, #304]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017b0:	f003 fc4a 	bl	8005048 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017ba:	f000 fa31 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c8:	4619      	mov	r1, r3
 80017ca:	4845      	ldr	r0, [pc, #276]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017cc:	f003 ff58 	bl	8005680 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017d6:	f000 fa23 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017da:	4841      	ldr	r0, [pc, #260]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017dc:	f003 fc8a 	bl	80050f4 <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80017e6:	f000 fa1b 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80017f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f6:	4619      	mov	r1, r3
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80017fa:	f003 fffa 	bl	80057f2 <HAL_TIM_SlaveConfigSynchro>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001804:	f000 fa0c 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001814:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001818:	4619      	mov	r1, r3
 800181a:	4831      	ldr	r0, [pc, #196]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 800181c:	f004 fd3c 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001826:	f000 f9fb 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	; 0x60
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	4824      	ldr	r0, [pc, #144]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001850:	f003 fdfe 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800185a:	f000 f9e1 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	2204      	movs	r2, #4
 8001864:	4619      	mov	r1, r3
 8001866:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001868:	f003 fdf2 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001872:	f000 f9d5 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	2208      	movs	r2, #8
 800187c:	4619      	mov	r1, r3
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 8001880:	f003 fde6 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800188a:	f000 f9c9 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80018c4:	f004 fd70 	bl	80063a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 80018ce:	f000 f9a7 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM1_Init+0x1ac>)
 80018d4:	f000 fac8 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3778      	adds	r7, #120	; 0x78
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200001bc 	.word	0x200001bc
 80018e4:	40012c00 	.word	0x40012c00

080018e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	463b      	mov	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_TIM15_Init+0x9c>)
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <MX_TIM15_Init+0xa0>)
 800190c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001910:	224f      	movs	r2, #79	; 0x4f
 8001912:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_TIM15_Init+0x9c>)
 800191c:	2263      	movs	r2, #99	; 0x63
 800191e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_TIM15_Init+0x9c>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001934:	f003 fb88 	bl	8005048 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800193e:	f000 f96f 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_TIM15_Init+0x9c>)
 8001952:	f003 ff4e 	bl	80057f2 <HAL_TIM_SlaveConfigSynchro>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800195c:	f000 f960 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM15_Init+0x9c>)
 800196e:	f004 fc93 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001978:	f000 f952 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000098 	.word	0x20000098
 8001988:	40014000 	.word	0x40014000

0800198c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <MX_USART2_UART_Init+0x5c>)
 8001994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019d0:	f004 fdab 	bl	800652a <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019da:	f000 f921 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001fc 	.word	0x200001fc
 80019e8:	40004400 	.word	0x40004400

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_GPIO_Init+0xe8>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2104      	movs	r1, #4
 8001a66:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <MX_GPIO_Init+0xec>)
 8001a68:	f001 ffd8 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2120      	movs	r1, #32
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f001 ffd2 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_GPIO_Init+0xf0>)
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <MX_GPIO_Init+0xec>)
 8001a8e:	f001 fe1d 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a92:	2304      	movs	r3, #4
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <MX_GPIO_Init+0xec>)
 8001aaa:	f001 fe0f 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f001 fe00 	bl	80036cc <HAL_GPIO_Init>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	10210000 	.word	0x10210000

08001ae0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if(a==1000){
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001b6c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001af2:	eef4 7a47 	vcmp.f32	s15, s14
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	d105      	bne.n	8001b08 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2120      	movs	r1, #32
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f001 ff8a 	bl	8003a1c <HAL_GPIO_WritePin>
	}
	OldSector = svpwm1.SectorPointer;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b12:	ee17 2a90 	vmov	r2, s15
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b18:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8001b1a:	4817      	ldr	r0, [pc, #92]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b1c:	f7ff fb34 	bl	8001188 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001b20:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b22:	4915      	ldr	r1, [pc, #84]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b24:	4812      	ldr	r0, [pc, #72]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b26:	f7ff f901 	bl	8000d2c <SVPWM_Update>
	if(a==1000){
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b6c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001b34:	eef4 7a47 	vcmp.f32	s15, s14
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	d105      	bne.n	8001b4a <HAL_TIM_PeriodElapsedCallback+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2120      	movs	r1, #32
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f001 ff69 	bl	8003a1c <HAL_GPIO_WritePin>
	}
	a = a+1;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b5a:	edc3 7a00 	vstr	s15, [r3]
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002b4 	.word	0x200002b4
 8001b6c:	447a0000 	.word	0x447a0000
 8001b70:	2000027c 	.word	0x2000027c
 8001b74:	2000002c 	.word	0x2000002c
 8001b78:	200001a0 	.word	0x200001a0
 8001b7c:	200001bc 	.word	0x200001bc

08001b80 <adc_voltage_conversion>:


unsigned int adc_voltage_conversion (uint16_t raw_a)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
	return (unsigned int) (raw_a / ADC_VOLTAGE_CONVERSION);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc6d 	bl	800046c <__aeabi_i2d>
 8001b92:	a309      	add	r3, pc, #36	; (adr r3, 8001bb8 <adc_voltage_conversion+0x38>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fdfc 	bl	8000794 <__aeabi_ddiv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7fe fede 	bl	8000964 <__aeabi_d2uiz>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	e8ba2e8c 	.word	0xe8ba2e8c
 8001bbc:	409363a2 	.word	0x409363a2

08001bc0 <current_sensing>:
		return (unsigned int) (THERMISTOR_RESISTANCE * raw_a / (INPUT_VOLTAGE - raw_a));
	else
		return raw_a;
}
unsigned int current_sensing (uint16_t v1, uint16_t v2)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460a      	mov	r2, r1
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80bb      	strh	r3, [r7, #4]
	v1 = adc_voltage_conversion (v1);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffd4 	bl	8001b80 <adc_voltage_conversion>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	80fb      	strh	r3, [r7, #6]
	v2 = adc_voltage_conversion (v2);
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ffce 	bl	8001b80 <adc_voltage_conversion>
 8001be4:	4603      	mov	r3, r0
 8001be6:	80bb      	strh	r3, [r7, #4]
	return ((unsigned int) ((v1-v2)/ I_RESISTOR));
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc3c 	bl	800046c <__aeabi_i2d>
 8001bf4:	a308      	add	r3, pc, #32	; (adr r3, 8001c18 <current_sensing+0x58>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fdcb 	bl	8000794 <__aeabi_ddiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	4618      	mov	r0, r3
 8001c04:	4621      	mov	r1, r4
 8001c06:	f7fe fead 	bl	8000964 <__aeabi_d2uiz>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	eb1c432d 	.word	0xeb1c432d
 8001c1c:	3f1a36e2 	.word	0x3f1a36e2

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_MspInit+0x44>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_MspInit+0x44>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_MspInit+0x44>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_MspInit+0x44>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_MspInit+0x44>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_MspInit+0x44>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <HAL_ADC_MspInit+0x154>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12e      	bne.n	8001cf8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd0:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f001 fceb 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cf6:	e064      	b.n	8001dc2 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_ADC_MspInit+0x160>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12d      	bne.n	8001d5e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10b      	bne.n	8001d2c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a2e      	ldr	r2, [pc, #184]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d44:	2308      	movs	r3, #8
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d48:	230b      	movs	r3, #11
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	4619      	mov	r1, r3
 8001d56:	4821      	ldr	r0, [pc, #132]	; (8001ddc <HAL_ADC_MspInit+0x164>)
 8001d58:	f001 fcb8 	bl	80036cc <HAL_GPIO_Init>
}
 8001d5c:	e031      	b.n	8001dc2 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_ADC_MspInit+0x168>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d12c      	bne.n	8001dc2 <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_ADC_MspInit+0x158>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10b      	bne.n	8001d92 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_ADC_MspInit+0x15c>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dae:	230b      	movs	r3, #11
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <HAL_ADC_MspInit+0x164>)
 8001dbe:	f001 fc85 	bl	80036cc <HAL_GPIO_Init>
}
 8001dc2:	bf00      	nop
 8001dc4:	3738      	adds	r7, #56	; 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	50040000 	.word	0x50040000
 8001dd0:	20000028 	.word	0x20000028
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	50040100 	.word	0x50040100
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	50040200 	.word	0x50040200

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_TIM_Base_MspInit+0x78>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d114      	bne.n	8001e20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e00:	6613      	str	r3, [r2, #96]	; 0x60
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2018      	movs	r0, #24
 8001e14:	f001 fc23 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e18:	2018      	movs	r0, #24
 8001e1a:	f001 fc3c 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e1e:	e018      	b.n	8001e52 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_TIM_Base_MspInit+0x80>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d113      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6613      	str	r3, [r2, #96]	; 0x60
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x7c>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2018      	movs	r0, #24
 8001e48:	f001 fc09 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e4c:	2018      	movs	r0, #24
 8001e4e:	f001 fc22 	bl	8003696 <HAL_NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40014000 	.word	0x40014000

08001e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_TIM_MspPostInit+0xa0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d13a      	bne.n	8001f00 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_TIM_MspPostInit+0xa4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480e      	ldr	r0, [pc, #56]	; (8001f10 <HAL_TIM_MspPostInit+0xa8>)
 8001ed8:	f001 fbf8 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001edc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f001 fbe6 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x7c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d128      	bne.n	8001f88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_UART_MspInit+0x80>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f66:	230c      	movs	r3, #12
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f76:	2307      	movs	r3, #7
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f001 fba2 	bl	80036cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40004400 	.word	0x40004400
 8001f94:	40021000 	.word	0x40021000

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 f8ca 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001ffa:	f003 f909 	bl	8005210 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002000:	f003 f906 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200001bc 	.word	0x200001bc
 800200c:	20000098 	.word	0x20000098

08002010 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <SystemInit+0x64>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <SystemInit+0x64>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <SystemInit+0x68>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <SystemInit+0x68>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <SystemInit+0x68>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <SystemInit+0x68>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <SystemInit+0x68>)
 800203c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002040:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002044:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <SystemInit+0x68>)
 8002048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800204c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <SystemInit+0x68>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <SystemInit+0x68>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <SystemInit+0x68>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SystemInit+0x64>)
 8002062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002066:	609a      	str	r2, [r3, #8]
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	40021000 	.word	0x40021000

0800207c <Reset_Handler>:
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopForever+0x2>
 8002080:	2100      	movs	r1, #0
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopForever+0x6>)
 8002086:	585b      	ldr	r3, [r3, r1]
 8002088:	5043      	str	r3, [r0, r1]
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopForever+0xa>)
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopForever+0xe>)
 8002090:	1842      	adds	r2, r0, r1
 8002092:	429a      	cmp	r2, r3
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopForever+0x12>)
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
 800209a:	2300      	movs	r3, #0
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopForever+0x16>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>
 80020a6:	f7ff ffb3 	bl	8002010 <SystemInit>
 80020aa:	f004 ff61 	bl	8006f70 <__libc_init_array>
 80020ae:	f7ff f8c3 	bl	8001238 <main>

080020b2 <LoopForever>:
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
 80020b4:	20018000 	.word	0x20018000
 80020b8:	08007ea0 	.word	0x08007ea0
 80020bc:	20000000 	.word	0x20000000
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	200002bc 	.word	0x200002bc

080020cc <ADC1_2_IRQHandler>:
 80020cc:	e7fe      	b.n	80020cc <ADC1_2_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_Init+0x3c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_Init+0x3c>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e6:	2003      	movs	r0, #3
 80020e8:	f001 faae 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 f80f 	bl	8002110 <HAL_InitTick>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	e001      	b.n	8002102 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020fe:	f7ff fd97 	bl	8001c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002102:	79fb      	ldrb	r3, [r7, #7]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_InitTick+0x68>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d022      	beq.n	800216a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_InitTick+0x6c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_InitTick+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002130:	fbb1 f3f3 	udiv	r3, r1, r3
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f001 faba 	bl	80036b2 <HAL_SYSTICK_Config>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10f      	bne.n	8002164 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	d809      	bhi.n	800215e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214a:	2200      	movs	r2, #0
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002152:	f001 fa84 	bl	800365e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_InitTick+0x70>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e007      	b.n	800216e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e004      	b.n	800216e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e001      	b.n	800216e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000008 	.word	0x20000008
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_IncTick+0x1c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_IncTick+0x20>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4413      	add	r3, r2
 8002192:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_IncTick+0x1c>)
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	200002b8 	.word	0x200002b8
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200002b8 	.word	0x200002b8

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d8:	d004      	beq.n	80021e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_Delay+0x40>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e4:	bf00      	nop
 80021e6:	f7ff ffdf 	bl	80021a8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d8f7      	bhi.n	80021e6 <HAL_Delay+0x26>
  {
  }
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008

08002204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800226c:	b490      	push	{r4, r7}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3360      	adds	r3, #96	; 0x60
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002288:	6822      	ldr	r2, [r4, #0]
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <LL_ADC_SetOffset+0x40>)
 800228c:	4013      	ands	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	4313      	orrs	r3, r2
 800229a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc90      	pop	{r4, r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	03fff000 	.word	0x03fff000

080022b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc90      	pop	{r4, r7}
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022d8:	b490      	push	{r4, r7}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3360      	adds	r3, #96	; 0x60
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bc90      	pop	{r4, r7}
 8002306:	4770      	bx	lr

08002308 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800232e:	b490      	push	{r4, r7}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3330      	adds	r3, #48	; 0x30
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	4413      	add	r3, r2
 800234c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	211f      	movs	r1, #31
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	401a      	ands	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 011f 	and.w	r1, r3, #31
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bc90      	pop	{r4, r7}
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002380:	b490      	push	{r4, r7}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3314      	adds	r3, #20
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0e5b      	lsrs	r3, r3, #25
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2107      	movs	r1, #7
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	401a      	ands	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0d1b      	lsrs	r3, r3, #20
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc90      	pop	{r4, r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	43db      	mvns	r3, r3
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0318 	and.w	r3, r3, #24
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023f4:	40d9      	lsrs	r1, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	400b      	ands	r3, r1
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	431a      	orrs	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	0007ffff 	.word	0x0007ffff

08002418 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6093      	str	r3, [r2, #8]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002488:	d101      	bne.n	800248e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024d8:	d101      	bne.n	80024de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <LL_ADC_IsEnabled+0x18>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_ADC_IsEnabled+0x1a>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800254a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800254e:	f043 0204 	orr.w	r2, r3, #4
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b04      	cmp	r3, #4
 8002574:	d101      	bne.n	800257a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d101      	bne.n	80025a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e134      	b.n	8002834 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fb4d 	bl	8001c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff3f 	bl	8002474 <LL_ADC_IsDeepPowerDownEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff25 	bl	8002450 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff5a 	bl	80024c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff3e 	bl	800249c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002620:	4b86      	ldr	r3, [pc, #536]	; (800283c <HAL_ADC_Init+0x28c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	4a86      	ldr	r2, [pc, #536]	; (8002840 <HAL_ADC_Init+0x290>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002630:	e002      	b.n	8002638 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff3e 	bl	80024c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff77 	bl	8002562 <LL_ADC_REG_IsConversionOngoing>
 8002674:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80cf 	bne.w	8002822 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80cb 	bne.w	8002822 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002694:	f043 0202 	orr.w	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff37 	bl	8002514 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ac:	4865      	ldr	r0, [pc, #404]	; (8002844 <HAL_ADC_Init+0x294>)
 80026ae:	f7ff ff31 	bl	8002514 <LL_ADC_IsEnabled>
 80026b2:	4604      	mov	r4, r0
 80026b4:	4864      	ldr	r0, [pc, #400]	; (8002848 <HAL_ADC_Init+0x298>)
 80026b6:	f7ff ff2d 	bl	8002514 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	431c      	orrs	r4, r3
 80026be:	4863      	ldr	r0, [pc, #396]	; (800284c <HAL_ADC_Init+0x29c>)
 80026c0:	f7ff ff28 	bl	8002514 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4323      	orrs	r3, r4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	485f      	ldr	r0, [pc, #380]	; (8002850 <HAL_ADC_Init+0x2a0>)
 80026d4:	f7ff fd96 	bl	8002204 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e5b      	ldrb	r3, [r3, #25]
 80026dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d106      	bne.n	8002714 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	3b01      	subs	r3, #1
 800270c:	045b      	lsls	r3, r3, #17
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_ADC_Init+0x2a4>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	430b      	orrs	r3, r1
 8002742:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff0a 	bl	8002562 <LL_ADC_REG_IsConversionOngoing>
 800274e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff17 	bl	8002588 <LL_ADC_INJ_IsConversionOngoing>
 800275a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d13d      	bne.n	80027de <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d13a      	bne.n	80027de <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002774:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002798:	2b01      	cmp	r3, #1
 800279a:	d118      	bne.n	80027ce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027be:	430a      	orrs	r2, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	e007      	b.n	80027de <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f023 010f 	bic.w	r1, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
 80027fe:	e007      	b.n	8002810 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 020f 	bic.w	r2, r2, #15
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
 8002820:	e007      	b.n	8002832 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002832:	7ffb      	ldrb	r3, [r7, #31]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3724      	adds	r7, #36	; 0x24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	20000000 	.word	0x20000000
 8002840:	053e2d63 	.word	0x053e2d63
 8002844:	50040000 	.word	0x50040000
 8002848:	50040100 	.word	0x50040100
 800284c:	50040200 	.word	0x50040200
 8002850:	50040300 	.word	0x50040300
 8002854:	fff0c007 	.word	0xfff0c007

08002858 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002860:	4857      	ldr	r0, [pc, #348]	; (80029c0 <HAL_ADC_Start+0x168>)
 8002862:	f7ff fdd9 	bl	8002418 <LL_ADC_GetMultimode>
 8002866:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe78 	bl	8002562 <LL_ADC_REG_IsConversionOngoing>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 809c 	bne.w	80029b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADC_Start+0x30>
 8002884:	2302      	movs	r3, #2
 8002886:	e097      	b.n	80029b8 <HAL_ADC_Start+0x160>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fcdd 	bl	8003250 <ADC_Enable>
 8002896:	4603      	mov	r3, r0
 8002898:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 8083 	bne.w	80029a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a42      	ldr	r2, [pc, #264]	; (80029c4 <HAL_ADC_Start+0x16c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d002      	beq.n	80028c6 <HAL_ADC_Start+0x6e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_Start+0x70>
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_ADC_Start+0x170>)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ee:	d106      	bne.n	80028fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f023 0206 	bic.w	r2, r3, #6
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
 80028fc:	e002      	b.n	8002904 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	221c      	movs	r2, #28
 800290a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_ADC_Start+0x16c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d002      	beq.n	8002924 <HAL_ADC_Start+0xcc>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_ADC_Start+0xce>
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_ADC_Start+0x170>)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	4293      	cmp	r3, r2
 800292c:	d008      	beq.n	8002940 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d002      	beq.n	8002940 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b09      	cmp	r3, #9
 800293e:	d114      	bne.n	800296a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fde9 	bl	800253a <LL_ADC_REG_StartConversion>
 8002968:	e025      	b.n	80029b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_ADC_Start+0x16c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d002      	beq.n	8002986 <HAL_ADC_Start+0x12e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e000      	b.n	8002988 <HAL_ADC_Start+0x130>
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_ADC_Start+0x170>)
 8002988:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800299e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
 80029a6:	e006      	b.n	80029b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029b0:	e001      	b.n	80029b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	50040300 	.word	0x50040300
 80029c4:	50040100 	.word	0x50040100
 80029c8:	50040000 	.word	0x50040000

080029cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d6:	4862      	ldr	r0, [pc, #392]	; (8002b60 <HAL_ADC_PollForConversion+0x194>)
 80029d8:	f7ff fd1e 	bl	8002418 <LL_ADC_GetMultimode>
 80029dc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d102      	bne.n	80029ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029e6:	2308      	movs	r3, #8
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e02a      	b.n	8002a42 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d002      	beq.n	80029fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b09      	cmp	r3, #9
 80029fc:	d111      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e09d      	b.n	8002b58 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a20:	e00f      	b.n	8002a42 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a22:	484f      	ldr	r0, [pc, #316]	; (8002b60 <HAL_ADC_PollForConversion+0x194>)
 8002a24:	f7ff fd06 	bl	8002434 <LL_ADC_GetMultiDMATransfer>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e08c      	b.n	8002b58 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a3e:	2304      	movs	r3, #4
 8002a40:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a42:	f7ff fbb1 	bl	80021a8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a48:	e01a      	b.n	8002a80 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d016      	beq.n	8002a80 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a52:	f7ff fba9 	bl	80021a8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <HAL_ADC_PollForConversion+0x9c>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e06b      	b.n	8002b58 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0dd      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fc32 	bl	8002308 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01c      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7e5b      	ldrb	r3, [r3, #25]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d118      	bne.n	8002ae4 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d111      	bne.n	8002ae4 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_ADC_PollForConversion+0x198>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d002      	beq.n	8002af4 <HAL_ADC_PollForConversion+0x128>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_PollForConversion+0x12a>
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_ADC_PollForConversion+0x19c>)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d008      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d002      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d104      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e00c      	b.n	8002b34 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_ADC_PollForConversion+0x198>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d002      	beq.n	8002b2a <HAL_ADC_PollForConversion+0x15e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_PollForConversion+0x160>
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_ADC_PollForConversion+0x19c>)
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d104      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e008      	b.n	8002b56 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	220c      	movs	r2, #12
 8002b54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	50040300 	.word	0x50040300
 8002b64:	50040100 	.word	0x50040100
 8002b68:	50040000 	.word	0x50040000

08002b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0a6      	sub	sp, #152	; 0x98
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x22>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e348      	b.n	800323c <HAL_ADC_ConfigChannel+0x6b4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fcd3 	bl	8002562 <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8329 	bne.w	8003216 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d824      	bhi.n	8002c16 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	3b02      	subs	r3, #2
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d81b      	bhi.n	8002c0e <HAL_ADC_ConfigChannel+0x86>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_ADC_ConfigChannel+0x54>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf5 	.word	0x08002bf5
 8002be4:	08002bfd 	.word	0x08002bfd
 8002be8:	08002c05 	.word	0x08002c05
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	220c      	movs	r2, #12
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e011      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2212      	movs	r2, #18
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e00d      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2218      	movs	r2, #24
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e009      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e004      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2206      	movs	r2, #6
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	e000      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c16:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f7ff fb82 	bl	800232e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fc97 	bl	8002562 <LL_ADC_REG_IsConversionOngoing>
 8002c34:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fca3 	bl	8002588 <LL_ADC_INJ_IsConversionOngoing>
 8002c42:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8148 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 8143 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f7ff fb8a 	bl	8002380 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c9e:	f7ff fae5 	bl	800226c <LL_ADC_SetOffset>
 8002ca2:	e11d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fb00 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x148>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff faf5 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	e012      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x16e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff faea 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x186>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0e9b      	lsrs	r3, r3, #26
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	e00a      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x19c>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fad1 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fab7 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x1da>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff faac 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e010      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1fc>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff faa1 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x214>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	e00a      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x22a>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d106      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fa8a 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fa70 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x268>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fa65 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	e010      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x28a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa5a 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x2a2>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	e00a      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x2b8>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fa43 	bl	80022d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2103      	movs	r1, #3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fa29 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x2f6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fa1e 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	e010      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x318>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2103      	movs	r1, #3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa13 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x330>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	e00a      	b.n	8002ece <HAL_ADC_ConfigChannel+0x346>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f9fc 	bl	80022d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fb15 	bl	8002514 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 810c 	bne.w	800310a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7ff fa66 	bl	80023d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4aad      	ldr	r2, [pc, #692]	; (80031c0 <HAL_ADC_ConfigChannel+0x638>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f040 80fd 	bne.w	800310a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x3b0>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e012      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x3d6>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d064      	beq.n	800302c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x3f6>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	3301      	adds	r3, #1
 8002f76:	069b      	lsls	r3, r3, #26
 8002f78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7c:	e00e      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x414>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x434>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	e010      	b.n	8002fde <HAL_ADC_ConfigChannel+0x456>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x47c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	e011      	b.n	8003028 <HAL_ADC_ConfigChannel+0x4a0>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003028:	430b      	orrs	r3, r1
 800302a:	e069      	b.n	8003100 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x4c0>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003046:	e00e      	b.n	8003066 <HAL_ADC_ConfigChannel+0x4de>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	61fb      	str	r3, [r7, #28]
  return result;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x4fe>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	e010      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x520>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	617b      	str	r3, [r7, #20]
  return result;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x54c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d2:	e014      	b.n	80030fe <HAL_ADC_ConfigChannel+0x576>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	60fb      	str	r3, [r7, #12]
  return result;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	430b      	orrs	r3, r1
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	4619      	mov	r1, r3
 8003106:	f7ff f93b 	bl	8002380 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_ADC_ConfigChannel+0x63c>)
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 808c 	beq.w	8003230 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003118:	482b      	ldr	r0, [pc, #172]	; (80031c8 <HAL_ADC_ConfigChannel+0x640>)
 800311a:	f7ff f899 	bl	8002250 <LL_ADC_GetCommonPathInternalCh>
 800311e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_ADC_ConfigChannel+0x644>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d12b      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x5fc>
 800312c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d125      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_ADC_ConfigChannel+0x648>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x5c4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <HAL_ADC_ConfigChannel+0x64c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d16e      	bne.n	800322a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003154:	4619      	mov	r1, r3
 8003156:	481c      	ldr	r0, [pc, #112]	; (80031c8 <HAL_ADC_ConfigChannel+0x640>)
 8003158:	f7ff f867 	bl	800222a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_ADC_ConfigChannel+0x650>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_ADC_ConfigChannel+0x654>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099a      	lsrs	r2, r3, #6
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003174:	e002      	b.n	800317c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3b01      	subs	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003182:	e052      	b.n	800322a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <HAL_ADC_ConfigChannel+0x658>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x65c>
 800318e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d124      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <HAL_ADC_ConfigChannel+0x648>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_ADC_ConfigChannel+0x626>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_ADC_ConfigChannel+0x64c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d13f      	bne.n	800322e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	4619      	mov	r1, r3
 80031b8:	4803      	ldr	r0, [pc, #12]	; (80031c8 <HAL_ADC_ConfigChannel+0x640>)
 80031ba:	f7ff f836 	bl	800222a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031be:	e036      	b.n	800322e <HAL_ADC_ConfigChannel+0x6a6>
 80031c0:	407f0000 	.word	0x407f0000
 80031c4:	80080000 	.word	0x80080000
 80031c8:	50040300 	.word	0x50040300
 80031cc:	c7520000 	.word	0xc7520000
 80031d0:	50040000 	.word	0x50040000
 80031d4:	50040200 	.word	0x50040200
 80031d8:	20000000 	.word	0x20000000
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_ADC_ConfigChannel+0x6bc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d120      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11a      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_ADC_ConfigChannel+0x6c0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d115      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800320c:	4619      	mov	r1, r3
 800320e:	480f      	ldr	r0, [pc, #60]	; (800324c <HAL_ADC_ConfigChannel+0x6c4>)
 8003210:	f7ff f80b 	bl	800222a <LL_ADC_SetCommonPathInternalCh>
 8003214:	e00c      	b.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003228:	e002      	b.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800322e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003238:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800323c:	4618      	mov	r0, r3
 800323e:	3798      	adds	r7, #152	; 0x98
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	80000001 	.word	0x80000001
 8003248:	50040000 	.word	0x50040000
 800324c:	50040300 	.word	0x50040300

08003250 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f959 	bl	8002514 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d146      	bne.n	80032f6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <ADC_Enable+0xb0>)
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e032      	b.n	80032f8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f928 	bl	80024ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800329c:	f7fe ff84 	bl	80021a8 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a2:	e021      	b.n	80032e8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f933 	bl	8002514 <LL_ADC_IsEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f917 	bl	80024ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032be:	f7fe ff73 	bl	80021a8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d90d      	bls.n	80032e8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d1d6      	bne.n	80032a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	8000003f 	.word	0x8000003f

08003304 <LL_ADC_IsEnabled>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <LL_ADC_IsEnabled+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_IsEnabled+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_REG_IsConversionOngoing>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d101      	bne.n	8003342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b09f      	sub	sp, #124	; 0x7c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e08f      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	e001      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e072      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffbd 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 80033b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ffb7 	bl	800332a <LL_ADC_REG_IsConversionOngoing>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d154      	bne.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d151      	bne.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02c      	beq.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e6:	035b      	lsls	r3, r3, #13
 80033e8:	430b      	orrs	r3, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f0:	4829      	ldr	r0, [pc, #164]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033f2:	f7ff ff87 	bl	8003304 <LL_ADC_IsEnabled>
 80033f6:	4604      	mov	r4, r0
 80033f8:	4828      	ldr	r0, [pc, #160]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033fa:	f7ff ff83 	bl	8003304 <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	431c      	orrs	r4, r3
 8003402:	4828      	ldr	r0, [pc, #160]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003404:	f7ff ff7e 	bl	8003304 <LL_ADC_IsEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	4323      	orrs	r3, r4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d137      	bne.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003418:	f023 030f 	bic.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	6811      	ldr	r1, [r2, #0]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	6892      	ldr	r2, [r2, #8]
 8003424:	430a      	orrs	r2, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342c:	e028      	b.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343a:	4817      	ldr	r0, [pc, #92]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800343c:	f7ff ff62 	bl	8003304 <LL_ADC_IsEnabled>
 8003440:	4604      	mov	r4, r0
 8003442:	4816      	ldr	r0, [pc, #88]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003444:	f7ff ff5e 	bl	8003304 <LL_ADC_IsEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	431c      	orrs	r4, r3
 800344c:	4815      	ldr	r0, [pc, #84]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800344e:	f7ff ff59 	bl	8003304 <LL_ADC_IsEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	4323      	orrs	r3, r4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d112      	bne.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003462:	f023 030f 	bic.w	r3, r3, #15
 8003466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003468:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800346a:	e009      	b.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800347e:	e000      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003480:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800348a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800348e:	4618      	mov	r0, r3
 8003490:	377c      	adds	r7, #124	; 0x7c
 8003492:	46bd      	mov	sp, r7
 8003494:	bd90      	pop	{r4, r7, pc}
 8003496:	bf00      	nop
 8003498:	50040000 	.word	0x50040000
 800349c:	50040100 	.word	0x50040100
 80034a0:	50040300 	.word	0x50040300
 80034a4:	50040200 	.word	0x50040200

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff3e 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff31 	bl	800350c <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa2 	bl	8003604 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036da:	e17f      	b.n	80039dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8171 	beq.w	80039d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d00b      	beq.n	8003714 <HAL_GPIO_Init+0x48>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d007      	beq.n	8003714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003708:	2b11      	cmp	r3, #17
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b12      	cmp	r3, #18
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0201 	and.w	r2, r3, #1
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d118      	bne.n	80037b4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	08db      	lsrs	r3, r3, #3
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x128>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b12      	cmp	r3, #18
 80037f2:	d123      	bne.n	800383c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0203 	and.w	r2, r3, #3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80ac 	beq.w	80039d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_GPIO_Init+0x32c>)
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_GPIO_Init+0x32c>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6613      	str	r3, [r2, #96]	; 0x60
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_GPIO_Init+0x32c>)
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	220f      	movs	r2, #15
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x242>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_GPIO_Init+0x334>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x23e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <HAL_GPIO_Init+0x338>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x23a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_GPIO_Init+0x33c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x236>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_GPIO_Init+0x340>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x232>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_GPIO_Init+0x344>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x22e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a49      	ldr	r2, [pc, #292]	; (8003a14 <HAL_GPIO_Init+0x348>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x22a>
 80038f2:	2306      	movs	r3, #6
 80038f4:	e00c      	b.n	8003910 <HAL_GPIO_Init+0x244>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e00a      	b.n	8003910 <HAL_GPIO_Init+0x244>
 80038fa:	2305      	movs	r3, #5
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x244>
 80038fe:	2304      	movs	r3, #4
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x244>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x244>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x244>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x244>
 800390e:	2300      	movs	r3, #0
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	f002 0203 	and.w	r2, r2, #3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003920:	4936      	ldr	r1, [pc, #216]	; (80039fc <HAL_GPIO_Init+0x330>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800392e:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003952:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003958:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43db      	mvns	r3, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003982:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039a6:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039d0:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_GPIO_Init+0x34c>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f47f ae78 	bne.w	80036dc <HAL_GPIO_Init+0x10>
  }
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40010000 	.word	0x40010000
 8003a00:	48000400 	.word	0x48000400
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48000c00 	.word	0x48000c00
 8003a0c:	48001000 	.word	0x48001000
 8003a10:	48001400 	.word	0x48001400
 8003a14:	48001800 	.word	0x48001800
 8003a18:	40010400 	.word	0x40010400

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40007000 	.word	0x40007000

08003a68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a76:	d130      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a84:	d038      	beq.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2232      	movs	r2, #50	; 0x32
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9b      	lsrs	r3, r3, #18
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aac:	e002      	b.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ab4:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d102      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f2      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d110      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e00f      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d007      	beq.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003af0:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003af6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	431bde83 	.word	0x431bde83

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e3d4      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b26:	4ba1      	ldr	r3, [pc, #644]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80e4 	beq.w	8003d10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4a>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	f040 808b 	bne.w	8003c6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 8087 	bne.w	8003c6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b5e:	4b93      	ldr	r3, [pc, #588]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e3ac      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	4b8c      	ldr	r3, [pc, #560]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_RCC_OscConfig+0x7c>
 8003b86:	4b89      	ldr	r3, [pc, #548]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8e:	e005      	b.n	8003b9c <HAL_RCC_OscConfig+0x88>
 8003b90:	4b86      	ldr	r3, [pc, #536]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d223      	bcs.n	8003be8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd3f 	bl	8004628 <RCC_SetFlashLatencyFromMSIRange>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e38d      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb4:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bba:	f043 0308 	orr.w	r3, r3, #8
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b7a      	ldr	r3, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4977      	ldr	r1, [pc, #476]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	4972      	ldr	r1, [pc, #456]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 8003be6:	e025      	b.n	8003c34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be8:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6f      	ldr	r2, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bee:	f043 0308 	orr.w	r3, r3, #8
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	496a      	ldr	r1, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c06:	4b69      	ldr	r3, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	4965      	ldr	r1, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fcff 	bl	8004628 <RCC_SetFlashLatencyFromMSIRange>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e34d      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c34:	f000 fc36 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8003c38:	4601      	mov	r1, r0
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	4a5a      	ldr	r2, [pc, #360]	; (8003db0 <HAL_RCC_OscConfig+0x29c>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	fa21 f303 	lsr.w	r3, r1, r3
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_RCC_OscConfig+0x2a0>)
 8003c52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c54:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_RCC_OscConfig+0x2a4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fa59 	bl	8002110 <HAL_InitTick>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d052      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	e331      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d032      	beq.n	8003cda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c74:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a4c      	ldr	r2, [pc, #304]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fa92 	bl	80021a8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c88:	f7fe fa8e 	bl	80021a8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e31a      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca6:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a40      	ldr	r2, [pc, #256]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	493b      	ldr	r1, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc4:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	4936      	ldr	r1, [pc, #216]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	e01a      	b.n	8003d10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a33      	ldr	r2, [pc, #204]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fa5f 	bl	80021a8 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cee:	f7fe fa5b 	bl	80021a8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e2e7      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d00:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x1da>
 8003d0c:	e000      	b.n	8003d10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d074      	beq.n	8003e06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x21a>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d10e      	bne.n	8003d46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d064      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2f0>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d160      	bne.n	8003e04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e2c4      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x24a>
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e01d      	b.n	8003d9a <HAL_RCC_OscConfig+0x286>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x26e>
 8003d68:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x286>
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a06      	ldr	r2, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x298>)
 8003d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe fa01 	bl	80021a8 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da8:	e011      	b.n	8003dce <HAL_RCC_OscConfig+0x2ba>
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	08007a78 	.word	0x08007a78
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe f9f4 	bl	80021a8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e280      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	4baf      	ldr	r3, [pc, #700]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2a8>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f9e4 	bl	80021a8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe f9e0 	bl	80021a8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e26c      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	4ba5      	ldr	r3, [pc, #660]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2d0>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d060      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_OscConfig+0x310>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d119      	bne.n	8003e52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d116      	bne.n	8003e52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e24:	4b99      	ldr	r3, [pc, #612]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_OscConfig+0x328>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e249      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b93      	ldr	r3, [pc, #588]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	4990      	ldr	r1, [pc, #576]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e50:	e040      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d023      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5a:	4b8c      	ldr	r3, [pc, #560]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a8b      	ldr	r2, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe f99f 	bl	80021a8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f99b 	bl	80021a8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e227      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	4b82      	ldr	r3, [pc, #520]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b7f      	ldr	r3, [pc, #508]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	497c      	ldr	r1, [pc, #496]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	e018      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a79      	ldr	r2, [pc, #484]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe f97b 	bl	80021a8 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe f977 	bl	80021a8 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e203      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec8:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01c      	beq.n	8003f22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	4a67      	ldr	r2, [pc, #412]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f956 	bl	80021a8 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fe f952 	bl	80021a8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1de      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f12:	4b5e      	ldr	r3, [pc, #376]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ef      	beq.n	8003f00 <HAL_RCC_OscConfig+0x3ec>
 8003f20:	e01b      	b.n	8003f5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f22:	4b5a      	ldr	r3, [pc, #360]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f28:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe f939 	bl	80021a8 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f935 	bl	80021a8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1c1      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ef      	bne.n	8003f3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a6 	beq.w	80040b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f6c:	4b47      	ldr	r3, [pc, #284]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	4b44      	ldr	r3, [pc, #272]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	4a43      	ldr	r2, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f82:	6593      	str	r3, [r2, #88]	; 0x58
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f94:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <HAL_RCC_OscConfig+0x57c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d118      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x57c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x57c>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fac:	f7fe f8fc 	bl	80021a8 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fe f8f8 	bl	80021a8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e184      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc6:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCC_OscConfig+0x57c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d108      	bne.n	8003fec <HAL_RCC_OscConfig+0x4d8>
 8003fda:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fea:	e024      	b.n	8004036 <HAL_RCC_OscConfig+0x522>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d110      	bne.n	8004016 <HAL_RCC_OscConfig+0x502>
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a20      	ldr	r2, [pc, #128]	; (800408c <HAL_RCC_OscConfig+0x578>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004014:	e00f      	b.n	8004036 <HAL_RCC_OscConfig+0x522>
 8004016:	4b1d      	ldr	r3, [pc, #116]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x578>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_OscConfig+0x578>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_RCC_OscConfig+0x578>)
 800402e:	f023 0304 	bic.w	r3, r3, #4
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe f8b3 	bl	80021a8 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe f8af 	bl	80021a8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e139      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x578>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ed      	beq.n	8004046 <HAL_RCC_OscConfig+0x532>
 800406a:	e01a      	b.n	80040a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fe f89c 	bl	80021a8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fe f898 	bl	80021a8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d906      	bls.n	8004094 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e122      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004094:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e8      	bne.n	8004074 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8108 	beq.w	80042ce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	f040 80d0 	bne.w	8004268 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040c8:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 0203 	and.w	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d130      	bne.n	800413e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	3b01      	subs	r3, #1
 80040e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d127      	bne.n	800413e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d11f      	bne.n	800413e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004108:	2a07      	cmp	r2, #7
 800410a:	bf14      	ite	ne
 800410c:	2201      	movne	r2, #1
 800410e:	2200      	moveq	r2, #0
 8004110:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004112:	4293      	cmp	r3, r2
 8004114:	d113      	bne.n	800413e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d109      	bne.n	800413e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	3b01      	subs	r3, #1
 8004138:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d06e      	beq.n	800421c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d069      	beq.n	8004218 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004144:	4b64      	ldr	r3, [pc, #400]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b7      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004160:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800416c:	f7fe f81c 	bl	80021a8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe f818 	bl	80021a8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0a4      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004192:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4b51      	ldr	r3, [pc, #324]	; (80042dc <HAL_RCC_OscConfig+0x7c8>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ac:	0212      	lsls	r2, r2, #8
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041b4:	0852      	lsrs	r2, r2, #1
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0552      	lsls	r2, r2, #21
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041c0:	0852      	lsrs	r2, r2, #1
 80041c2:	3a01      	subs	r2, #1
 80041c4:	0652      	lsls	r2, r2, #25
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041cc:	0912      	lsrs	r2, r2, #4
 80041ce:	0452      	lsls	r2, r2, #17
 80041d0:	430a      	orrs	r2, r1
 80041d2:	4941      	ldr	r1, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3e      	ldr	r2, [pc, #248]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80041de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041e4:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041f0:	f7fd ffda 	bl	80021a8 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd ffd6 	bl	80021a8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e062      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004216:	e05a      	b.n	80042ce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e059      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421c:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d152      	bne.n	80042ce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004232:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004240:	f7fd ffb2 	bl	80021a8 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd ffae 	bl	80021a8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e03a      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x734>
 8004266:	e032      	b.n	80042ce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d02d      	beq.n	80042ca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004278:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 800428c:	f023 0303 	bic.w	r3, r3, #3
 8004290:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 8004298:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd ff81 	bl	80021a8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fd ff7d 	bl	80021a8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e009      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x7c4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x796>
 80042c8:	e001      	b.n	80042ce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	f99d808c 	.word	0xf99d808c

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0c8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4961      	ldr	r1, [pc, #388]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b5f      	ldr	r3, [pc, #380]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b0      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d04c      	beq.n	80043ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d107      	bne.n	8004348 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	4b56      	ldr	r3, [pc, #344]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d121      	bne.n	8004388 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e09e      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d107      	bne.n	8004360 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004350:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e092      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e086      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004378:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e07e      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004388:	4b42      	ldr	r3, [pc, #264]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f023 0203 	bic.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	493f      	ldr	r1, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439a:	f7fd ff05 	bl	80021a8 <HAL_GetTick>
 800439e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a2:	f7fd ff01 	bl	80021a8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e066      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b8:	4b36      	ldr	r3, [pc, #216]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 020c 	and.w	r2, r3, #12
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d1eb      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	492c      	ldr	r1, [pc, #176]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d210      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4924      	ldr	r1, [pc, #144]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x1b0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e036      	b.n	8004486 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4918      	ldr	r1, [pc, #96]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4910      	ldr	r1, [pc, #64]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004456:	f000 f825 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 800445a:	4601      	mov	r1, r0
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_RCC_ClockConfig+0x1b4>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	fa21 f303 	lsr.w	r3, r1, r3
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fe48 	bl	8002110 <HAL_InitTick>
 8004480:	4603      	mov	r3, r0
 8004482:	72fb      	strb	r3, [r7, #11]

  return status;
 8004484:	7afb      	ldrb	r3, [r7, #11]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40022000 	.word	0x40022000
 8004494:	40021000 	.word	0x40021000
 8004498:	08007a78 	.word	0x08007a78
 800449c:	20000000 	.word	0x20000000
 80044a0:	20000004 	.word	0x20000004

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b2:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x34>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d121      	bne.n	8004516 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d11e      	bne.n	8004516 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044e4:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e005      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004500:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004508:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004514:	e00a      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b04      	cmp	r3, #4
 800451a:	d102      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e004      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d101      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004528:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800452a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d133      	bne.n	800459a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d002      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xa4>
 8004542:	2b03      	cmp	r3, #3
 8004544:	d003      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0xaa>
 8004546:	e005      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800454a:	617b      	str	r3, [r7, #20]
      break;
 800454c:	e005      	b.n	800455a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	e002      	b.n	800455a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	617b      	str	r3, [r7, #20]
      break;
 8004558:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	3301      	adds	r3, #1
 8004566:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	fb02 f203 	mul.w	r2, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	0e5b      	lsrs	r3, r3, #25
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	3301      	adds	r3, #1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800459a:	69bb      	ldr	r3, [r7, #24]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3724      	adds	r7, #36	; 0x24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40021000 	.word	0x40021000
 80045ac:	08007a90 	.word	0x08007a90
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	007a1200 	.word	0x007a1200

080045b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_RCC_GetHCLKFreq+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000000 	.word	0x20000000

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045d4:	f7ff fff0 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 80045d8:	4601      	mov	r1, r0
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08007a88 	.word	0x08007a88

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004600:	f7ff ffda 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 8004604:	4601      	mov	r1, r0
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0adb      	lsrs	r3, r3, #11
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	08007a88 	.word	0x08007a88

08004628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004640:	f7ff fa04 	bl	8003a4c <HAL_PWREx_GetVoltageRange>
 8004644:	6178      	str	r0, [r7, #20]
 8004646:	e014      	b.n	8004672 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	4a24      	ldr	r2, [pc, #144]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004652:	6593      	str	r3, [r2, #88]	; 0x58
 8004654:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004660:	f7ff f9f4 	bl	8003a4c <HAL_PWREx_GetVoltageRange>
 8004664:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d10b      	bne.n	8004692 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d919      	bls.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2ba0      	cmp	r3, #160	; 0xa0
 8004684:	d902      	bls.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004686:	2302      	movs	r3, #2
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e013      	b.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e010      	b.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d902      	bls.n	800469e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004698:	2303      	movs	r3, #3
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	e00a      	b.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d102      	bne.n	80046aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046a4:	2302      	movs	r3, #2
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e004      	b.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d101      	bne.n	80046b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046b0:	2301      	movs	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 0207 	bic.w	r2, r3, #7
 80046bc:	4909      	ldr	r1, [pc, #36]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40022000 	.word	0x40022000

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f0:	2300      	movs	r3, #0
 80046f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f4:	2300      	movs	r3, #0
 80046f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004700:	2b00      	cmp	r3, #0
 8004702:	d03f      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470c:	d01c      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004712:	d802      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004718:	e01f      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800471a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004724:	d01c      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004726:	e018      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004728:	4b85      	ldr	r3, [pc, #532]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a84      	ldr	r2, [pc, #528]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004732:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004734:	e015      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fab9 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3320      	adds	r3, #32
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fba0 	bl	8004e94 <RCCEx_PLLSAI2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	74fb      	strb	r3, [r7, #19]
      break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004768:	4b75      	ldr	r3, [pc, #468]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	4972      	ldr	r1, [pc, #456]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800477e:	e001      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004798:	d01c      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800479a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800479e:	d802      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00e      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80047a4:	e01f      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80047ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b0:	d01c      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x104>
 80047b2:	e018      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a61      	ldr	r2, [pc, #388]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047c0:	e015      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fa73 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d2:	e00c      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3320      	adds	r3, #32
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb5a 	bl	8004e94 <RCCEx_PLLSAI2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	74fb      	strb	r3, [r7, #19]
      break;
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047f4:	4b52      	ldr	r3, [pc, #328]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004802:	494f      	ldr	r1, [pc, #316]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800480a:	e001      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a0 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	4a40      	ldr	r2, [pc, #256]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004842:	6593      	str	r3, [r2, #88]	; 0x58
 8004844:	4b3e      	ldr	r3, [pc, #248]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004850:	2301      	movs	r3, #1
 8004852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3a      	ldr	r2, [pc, #232]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800485a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004860:	f7fd fca2 	bl	80021a8 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004866:	e009      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fd fc9e 	bl	80021a8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d902      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	74fb      	strb	r3, [r7, #19]
        break;
 800487a:	e005      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d15c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800488e:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d019      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a20      	ldr	r2, [pc, #128]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fc5d 	bl	80021a8 <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f0:	e00b      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fd fc59 	bl	80021a8 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d902      	bls.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	74fb      	strb	r3, [r7, #19]
            break;
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ec      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004936:	e009      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494c:	7c7b      	ldrb	r3, [r7, #17]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b9e      	ldr	r3, [pc, #632]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	4a9d      	ldr	r2, [pc, #628]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496a:	4b98      	ldr	r3, [pc, #608]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f023 0203 	bic.w	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	4994      	ldr	r1, [pc, #592]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800498c:	4b8f      	ldr	r3, [pc, #572]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f023 020c 	bic.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	498c      	ldr	r1, [pc, #560]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ae:	4b87      	ldr	r3, [pc, #540]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	4983      	ldr	r1, [pc, #524]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049d0:	4b7e      	ldr	r3, [pc, #504]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	497b      	ldr	r1, [pc, #492]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049f2:	4b76      	ldr	r3, [pc, #472]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a00:	4972      	ldr	r1, [pc, #456]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a14:	4b6d      	ldr	r3, [pc, #436]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	496a      	ldr	r1, [pc, #424]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a36:	4b65      	ldr	r3, [pc, #404]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	4961      	ldr	r1, [pc, #388]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a58:	4b5c      	ldr	r3, [pc, #368]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	4959      	ldr	r1, [pc, #356]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a7a:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a88:	4950      	ldr	r1, [pc, #320]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	4948      	ldr	r1, [pc, #288]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004abe:	4b43      	ldr	r3, [pc, #268]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	493f      	ldr	r1, [pc, #252]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d028      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ae0:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aee:	4937      	ldr	r1, [pc, #220]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afe:	d106      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b00:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4a31      	ldr	r2, [pc, #196]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0a:	60d3      	str	r3, [r2, #12]
 8004b0c:	e011      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b16:	d10c      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f8c8 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b3e:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	491f      	ldr	r1, [pc, #124]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b68:	60d3      	str	r3, [r2, #12]
 8004b6a:	e011      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f899 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d02b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004baa:	4908      	ldr	r1, [pc, #32]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a02      	ldr	r2, [pc, #8]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]
 8004bc8:	e014      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f867 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02f      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0e:	4928      	ldr	r1, [pc, #160]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f844 	bl	8004cb4 <RCCEx_PLLSAI1_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d014      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c36:	7cfb      	ldrb	r3, [r7, #19]
 8004c38:	74bb      	strb	r3, [r7, #18]
 8004c3a:	e011      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3320      	adds	r3, #32
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f921 	bl	8004e94 <RCCEx_PLLSAI2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9e:	4904      	ldr	r1, [pc, #16]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ca6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cce:	4b70      	ldr	r3, [pc, #448]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0203 	and.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d10d      	bne.n	8004cfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ce6:	4b6a      	ldr	r3, [pc, #424]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d044      	beq.n	8004d84 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	e041      	b.n	8004d84 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d00c      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x6e>
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d013      	beq.n	8004d34 <RCCEx_PLLSAI1_Config+0x80>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d120      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d10:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11d      	bne.n	8004d58 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e01a      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d22:	4b5b      	ldr	r3, [pc, #364]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d116      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d32:	e013      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d34:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d50:	e006      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
      break;
 8004d56:	e004      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004d60:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d68:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	4944      	ldr	r1, [pc, #272]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d17d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d8a:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a40      	ldr	r2, [pc, #256]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fd fa07 	bl	80021a8 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9c:	e009      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d9e:	f7fd fa03 	bl	80021a8 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d902      	bls.n	8004db2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	73fb      	strb	r3, [r7, #15]
        break;
 8004db0:	e005      	b.n	8004dbe <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d160      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d111      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dca:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6892      	ldr	r2, [r2, #8]
 8004dda:	0211      	lsls	r1, r2, #8
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68d2      	ldr	r2, [r2, #12]
 8004de0:	0912      	lsrs	r2, r2, #4
 8004de2:	0452      	lsls	r2, r2, #17
 8004de4:	430a      	orrs	r2, r1
 8004de6:	492a      	ldr	r1, [pc, #168]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	610b      	str	r3, [r1, #16]
 8004dec:	e027      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d112      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6892      	ldr	r2, [r2, #8]
 8004e04:	0211      	lsls	r1, r2, #8
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6912      	ldr	r2, [r2, #16]
 8004e0a:	0852      	lsrs	r2, r2, #1
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	0552      	lsls	r2, r2, #21
 8004e10:	430a      	orrs	r2, r1
 8004e12:	491f      	ldr	r1, [pc, #124]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	610b      	str	r3, [r1, #16]
 8004e18:	e011      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	0211      	lsls	r1, r2, #8
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6952      	ldr	r2, [r2, #20]
 8004e30:	0852      	lsrs	r2, r2, #1
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0652      	lsls	r2, r2, #25
 8004e36:	430a      	orrs	r2, r1
 8004e38:	4915      	ldr	r1, [pc, #84]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fd f9ad 	bl	80021a8 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e50:	e009      	b.n	8004e66 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e52:	f7fd f9a9 	bl	80021a8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d902      	bls.n	8004e66 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	73fb      	strb	r3, [r7, #15]
          break;
 8004e64:	e005      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ef      	beq.n	8004e52 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000

08004e94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ea2:	4b68      	ldr	r3, [pc, #416]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eae:	4b65      	ldr	r3, [pc, #404]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0203 	and.w	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d10d      	bne.n	8004eda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ec6:	4b5f      	ldr	r3, [pc, #380]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d044      	beq.n	8004f64 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e041      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d00c      	beq.n	8004f02 <RCCEx_PLLSAI2_Config+0x6e>
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d013      	beq.n	8004f14 <RCCEx_PLLSAI2_Config+0x80>
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d120      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ef0:	4b54      	ldr	r3, [pc, #336]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11d      	bne.n	8004f38 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e01a      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f02:	4b50      	ldr	r3, [pc, #320]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f12:	e013      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f14:	4b4b      	ldr	r3, [pc, #300]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10f      	bne.n	8004f40 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f20:	4b48      	ldr	r3, [pc, #288]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f30:	e006      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
      break;
 8004f36:	e004      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004f40:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10d      	bne.n	8004f64 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f48:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	4939      	ldr	r1, [pc, #228]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d167      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f6a:	4b36      	ldr	r3, [pc, #216]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a35      	ldr	r2, [pc, #212]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f76:	f7fd f917 	bl	80021a8 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f7c:	e009      	b.n	8004f92 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f7e:	f7fd f913 	bl	80021a8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	73fb      	strb	r3, [r7, #15]
        break;
 8004f90:	e005      	b.n	8004f9e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f92:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ef      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d14a      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d111      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6892      	ldr	r2, [r2, #8]
 8004fba:	0211      	lsls	r1, r2, #8
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68d2      	ldr	r2, [r2, #12]
 8004fc0:	0912      	lsrs	r2, r2, #4
 8004fc2:	0452      	lsls	r2, r2, #17
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	491f      	ldr	r1, [pc, #124]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	614b      	str	r3, [r1, #20]
 8004fcc:	e011      	b.n	8004ff2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6892      	ldr	r2, [r2, #8]
 8004fde:	0211      	lsls	r1, r2, #8
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6912      	ldr	r2, [r2, #16]
 8004fe4:	0852      	lsrs	r2, r2, #1
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	0652      	lsls	r2, r2, #25
 8004fea:	430a      	orrs	r2, r1
 8004fec:	4915      	ldr	r1, [pc, #84]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffe:	f7fd f8d3 	bl	80021a8 <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005004:	e009      	b.n	800501a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005006:	f7fd f8cf 	bl	80021a8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d902      	bls.n	800501a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	73fb      	strb	r3, [r7, #15]
          break;
 8005018:	e005      	b.n	8005026 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ef      	beq.n	8005006 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e01d      	b.n	8005096 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc feb8 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fc1e 	bl	80058c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_TIM_Base_Start_IT+0x50>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d00b      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x42>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	00010007 	.word	0x00010007

080050f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01d      	b.n	8005142 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f815 	bl	800514a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fbc8 	bl	80058c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f83a 	bl	80061ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_TIM_PWM_Start+0x98>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_TIM_PWM_Start+0x4a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <HAL_TIM_PWM_Start+0x9c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIM_PWM_Start+0x4a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <HAL_TIM_PWM_Start+0xa0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIM_PWM_Start+0x4a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <HAL_TIM_PWM_Start+0xa4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Start+0x4a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <HAL_TIM_PWM_Start+0xa8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_Start+0x4e>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_TIM_PWM_Start+0x50>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_TIM_PWM_Start+0xac>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d00b      	beq.n	80051ee <HAL_TIM_PWM_Start+0x8e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d007      	beq.n	80051ee <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	00010007 	.word	0x00010007

08005210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0202 	mvn.w	r2, #2
 800523c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb19 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fb0b 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb1c 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0204 	mvn.w	r2, #4
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 faef 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fae1 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 faf2 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0208 	mvn.w	r2, #8
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2204      	movs	r2, #4
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fac5 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fab7 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fac8 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b10      	cmp	r3, #16
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0210 	mvn.w	r2, #16
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2208      	movs	r2, #8
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa9b 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa8d 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa9e 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0201 	mvn.w	r2, #1
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fba6 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 f87c 	bl	80064b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	d10e      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b80      	cmp	r3, #128	; 0x80
 80053dc:	d107      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 f86f 	bl	80064cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d10e      	bne.n	800541a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d107      	bne.n	800541a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa4c 	bl	80058b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f06f 0220 	mvn.w	r2, #32
 800543e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f001 f82f 	bl	80064a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005466:	2302      	movs	r3, #2
 8005468:	e105      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x226>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b14      	cmp	r3, #20
 800547e:	f200 80f0 	bhi.w	8005662 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005663 	.word	0x08005663
 8005490:	08005663 	.word	0x08005663
 8005494:	08005663 	.word	0x08005663
 8005498:	0800551d 	.word	0x0800551d
 800549c:	08005663 	.word	0x08005663
 80054a0:	08005663 	.word	0x08005663
 80054a4:	08005663 	.word	0x08005663
 80054a8:	0800555f 	.word	0x0800555f
 80054ac:	08005663 	.word	0x08005663
 80054b0:	08005663 	.word	0x08005663
 80054b4:	08005663 	.word	0x08005663
 80054b8:	0800559f 	.word	0x0800559f
 80054bc:	08005663 	.word	0x08005663
 80054c0:	08005663 	.word	0x08005663
 80054c4:	08005663 	.word	0x08005663
 80054c8:	080055e1 	.word	0x080055e1
 80054cc:	08005663 	.word	0x08005663
 80054d0:	08005663 	.word	0x08005663
 80054d4:	08005663 	.word	0x08005663
 80054d8:	08005621 	.word	0x08005621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fa8a 	bl	80059fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0208 	orr.w	r2, r2, #8
 80054f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6999      	ldr	r1, [r3, #24]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	619a      	str	r2, [r3, #24]
      break;
 800551a:	e0a3      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fafa 	bl	8005b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	619a      	str	r2, [r3, #24]
      break;
 800555c:	e082      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fb63 	bl	8005c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0208 	orr.w	r2, r2, #8
 8005578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0204 	bic.w	r2, r2, #4
 8005588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69d9      	ldr	r1, [r3, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	61da      	str	r2, [r3, #28]
      break;
 800559c:	e062      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fbcb 	bl	8005d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	61da      	str	r2, [r3, #28]
      break;
 80055de:	e041      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fc14 	bl	8005e14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0208 	orr.w	r2, r2, #8
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800561e:	e021      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fc58 	bl	8005edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005660:	e000      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005662:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop

08005680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIM_ConfigClockSource+0x18>
 8005694:	2302      	movs	r3, #2
 8005696:	e0a8      	b.n	80057ea <HAL_TIM_ConfigClockSource+0x16a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d067      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x124>
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d80b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x70>
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d073      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0x144>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d802      	bhi.n	80056e6 <HAL_TIM_ConfigClockSource+0x66>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d06f      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056e4:	e078      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d06c      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0x144>
 80056ea:	2b30      	cmp	r3, #48	; 0x30
 80056ec:	d06a      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80056ee:	e073      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d00d      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0x90>
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d804      	bhi.n	8005702 <HAL_TIM_ConfigClockSource+0x82>
 80056f8:	2b50      	cmp	r3, #80	; 0x50
 80056fa:	d033      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0xe4>
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d041      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005700:	e06a      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	d066      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x156>
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d017      	beq.n	800573e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800570e:	e063      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6899      	ldr	r1, [r3, #8]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f000 fd44 	bl	80061ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005732:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
      break;
 800573c:	e04c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6899      	ldr	r1, [r3, #8]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f000 fd2d 	bl	80061ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005760:	609a      	str	r2, [r3, #8]
      break;
 8005762:	e039      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	461a      	mov	r2, r3
 8005772:	f000 fca1 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2150      	movs	r1, #80	; 0x50
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fcfa 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005782:	e029      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	461a      	mov	r2, r3
 8005792:	f000 fcc0 	bl	8006116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2160      	movs	r1, #96	; 0x60
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fcea 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 80057a2:	e019      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f000 fc81 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2140      	movs	r1, #64	; 0x40
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fcda 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 80057c2:	e009      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f000 fcd1 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 80057d4:	e000      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80057d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005806:	2302      	movs	r3, #2
 8005808:	e031      	b.n	800586e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fbc3 	bl	8005fa8 <TIM_SlaveTimer_SetConfig>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e018      	b.n	800586e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800585a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a40      	ldr	r2, [pc, #256]	; (80059dc <TIM_Base_SetConfig+0x114>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d00f      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3d      	ldr	r2, [pc, #244]	; (80059e0 <TIM_Base_SetConfig+0x118>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00b      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3c      	ldr	r2, [pc, #240]	; (80059e4 <TIM_Base_SetConfig+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3b      	ldr	r2, [pc, #236]	; (80059e8 <TIM_Base_SetConfig+0x120>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3a      	ldr	r2, [pc, #232]	; (80059ec <TIM_Base_SetConfig+0x124>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2f      	ldr	r2, [pc, #188]	; (80059dc <TIM_Base_SetConfig+0x114>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01f      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005928:	d01b      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2c      	ldr	r2, [pc, #176]	; (80059e0 <TIM_Base_SetConfig+0x118>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d017      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2b      	ldr	r2, [pc, #172]	; (80059e4 <TIM_Base_SetConfig+0x11c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2a      	ldr	r2, [pc, #168]	; (80059e8 <TIM_Base_SetConfig+0x120>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a29      	ldr	r2, [pc, #164]	; (80059ec <TIM_Base_SetConfig+0x124>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <TIM_Base_SetConfig+0x128>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <TIM_Base_SetConfig+0x12c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0x9a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <TIM_Base_SetConfig+0x130>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	; (80059dc <TIM_Base_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_Base_SetConfig+0xf8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <TIM_Base_SetConfig+0x128>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0xf8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <TIM_Base_SetConfig+0x12c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0xf8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a0f      	ldr	r2, [pc, #60]	; (80059f8 <TIM_Base_SetConfig+0x130>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d103      	bne.n	80059c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	615a      	str	r2, [r3, #20]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800

080059fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f023 0201 	bic.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 0302 	bic.w	r3, r3, #2
 8005a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_OC1_SetConfig+0x10c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_OC1_SetConfig+0x80>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_OC1_SetConfig+0x110>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_OC1_SetConfig+0x80>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_OC1_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_OC1_SetConfig+0x80>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_OC1_SetConfig+0x118>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC1_SetConfig+0x80>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_OC1_SetConfig+0x11c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10c      	bne.n	8005a96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0308 	bic.w	r3, r3, #8
 8005a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 0304 	bic.w	r3, r3, #4
 8005a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <TIM_OC1_SetConfig+0x10c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_OC1_SetConfig+0xc2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <TIM_OC1_SetConfig+0x110>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_OC1_SetConfig+0xc2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <TIM_OC1_SetConfig+0x114>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC1_SetConfig+0xc2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <TIM_OC1_SetConfig+0x118>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC1_SetConfig+0xc2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <TIM_OC1_SetConfig+0x11c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0210 	bic.w	r2, r3, #16
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0320 	bic.w	r3, r3, #32
 8005b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <TIM_OC2_SetConfig+0x100>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x6c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <TIM_OC2_SetConfig+0x104>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10d      	bne.n	8005ba4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <TIM_OC2_SetConfig+0x100>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00f      	beq.n	8005bcc <TIM_OC2_SetConfig+0xb0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <TIM_OC2_SetConfig+0x104>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_OC2_SetConfig+0xb0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <TIM_OC2_SetConfig+0x108>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_OC2_SetConfig+0xb0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <TIM_OC2_SetConfig+0x10c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0xb0>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <TIM_OC2_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d113      	bne.n	8005bf4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40013400 	.word	0x40013400
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800

08005c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <TIM_OC3_SetConfig+0xfc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_OC3_SetConfig+0x6a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <TIM_OC3_SetConfig+0x100>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_OC3_SetConfig+0xfc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_OC3_SetConfig+0xae>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <TIM_OC3_SetConfig+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_OC3_SetConfig+0xae>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <TIM_OC3_SetConfig+0x104>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_OC3_SetConfig+0xae>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <TIM_OC3_SetConfig+0x108>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC3_SetConfig+0xae>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <TIM_OC3_SetConfig+0x10c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <TIM_OC4_SetConfig+0xc0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x84>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <TIM_OC4_SetConfig+0xc4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x84>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <TIM_OC4_SetConfig+0xc8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x84>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <TIM_OC4_SetConfig+0xcc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x84>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <TIM_OC4_SetConfig+0xd0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <TIM_OC5_SetConfig+0xb4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_OC5_SetConfig+0x7a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <TIM_OC5_SetConfig+0xb8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_OC5_SetConfig+0x7a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <TIM_OC5_SetConfig+0xbc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_OC5_SetConfig+0x7a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC5_SetConfig+0xc0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC5_SetConfig+0x7a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <TIM_OC5_SetConfig+0xc4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d109      	bne.n	8005ea2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	051b      	lsls	r3, r3, #20
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <TIM_OC6_SetConfig+0xb8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_OC6_SetConfig+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC6_SetConfig+0xbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_OC6_SetConfig+0x7c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC6_SetConfig+0xc0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_OC6_SetConfig+0x7c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC6_SetConfig+0xc4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC6_SetConfig+0x7c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_OC6_SetConfig+0xc8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	d05c      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x104>
 8005ff2:	2b30      	cmp	r3, #48	; 0x30
 8005ff4:	d806      	bhi.n	8006004 <TIM_SlaveTimer_SetConfig+0x5c>
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d058      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x104>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d056      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x104>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d054      	beq.n	80060ac <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006002:	e054      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006004:	2b50      	cmp	r3, #80	; 0x50
 8006006:	d03d      	beq.n	8006084 <TIM_SlaveTimer_SetConfig+0xdc>
 8006008:	2b50      	cmp	r3, #80	; 0x50
 800600a:	d802      	bhi.n	8006012 <TIM_SlaveTimer_SetConfig+0x6a>
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d010      	beq.n	8006032 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8006010:	e04d      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006012:	2b60      	cmp	r3, #96	; 0x60
 8006014:	d040      	beq.n	8006098 <TIM_SlaveTimer_SetConfig+0xf0>
 8006016:	2b70      	cmp	r3, #112	; 0x70
 8006018:	d000      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800601a:	e048      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68d9      	ldr	r1, [r3, #12]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f000 f8be 	bl	80061ac <TIM_ETR_SetConfig>
      break;
 8006030:	e03d      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b05      	cmp	r3, #5
 8006038:	d101      	bne.n	800603e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e038      	b.n	80060b0 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006064:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	621a      	str	r2, [r3, #32]
      break;
 8006082:	e014      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6899      	ldr	r1, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	461a      	mov	r2, r3
 8006092:	f000 f811 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      break;
 8006096:	e00a      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6899      	ldr	r1, [r3, #8]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f000 f836 	bl	8006116 <TIM_TI2_ConfigInputStage>
      break;
 80060aa:	e000      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80060ac:	bf00      	nop
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0210 	bic.w	r2, r3, #16
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	f043 0307 	orr.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2201      	movs	r2, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	43db      	mvns	r3, r3
 800620e:	401a      	ands	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	431a      	orrs	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2204      	movs	r2, #4
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f948 	bl	80064e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800625e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <HAL_TIMEx_PWMN_Start+0x5c>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d00b      	beq.n	800628a <HAL_TIMEx_PWMN_Start+0x52>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d007      	beq.n	800628a <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	00010007 	.word	0x00010007

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e068      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01d      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d018      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40014000 	.word	0x40014000

080063a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e065      	b.n	8006490 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d115      	bne.n	800647e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	051b      	lsls	r3, r3, #20
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400

080064a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	2204      	movs	r2, #4
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1a      	ldr	r2, [r3, #32]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	fa01 f303 	lsl.w	r3, r1, r3
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e040      	b.n	80065be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fb fce1 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2224      	movs	r2, #36	; 0x24
 8006556:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f82d 	bl	80065c8 <UART_SetConfig>
 800656e:	4603      	mov	r3, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e022      	b.n	80065be <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb93 	bl	8006cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006594:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc1a 	bl	8006df0 <UART_CheckIdleState>
 80065bc:	4603      	mov	r3, r0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065cc:	b08a      	sub	sp, #40	; 0x28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4bb8      	ldr	r3, [pc, #736]	; (80068e0 <UART_SetConfig+0x318>)
 80065fe:	4013      	ands	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006606:	430b      	orrs	r3, r1
 8006608:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4aae      	ldr	r2, [pc, #696]	; (80068e4 <UART_SetConfig+0x31c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006636:	4313      	orrs	r3, r2
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4aa5      	ldr	r2, [pc, #660]	; (80068e8 <UART_SetConfig+0x320>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d126      	bne.n	80066a6 <UART_SetConfig+0xde>
 8006658:	4ba4      	ldr	r3, [pc, #656]	; (80068ec <UART_SetConfig+0x324>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d81a      	bhi.n	800669c <UART_SetConfig+0xd4>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0xa4>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800667d 	.word	0x0800667d
 8006670:	0800668d 	.word	0x0800668d
 8006674:	08006685 	.word	0x08006685
 8006678:	08006695 	.word	0x08006695
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e105      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e101      	b.n	8006890 <UART_SetConfig+0x2c8>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e0fd      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e0f9      	b.n	8006890 <UART_SetConfig+0x2c8>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	bf00      	nop
 80066a4:	e0f4      	b.n	8006890 <UART_SetConfig+0x2c8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a91      	ldr	r2, [pc, #580]	; (80068f0 <UART_SetConfig+0x328>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d138      	bne.n	8006722 <UART_SetConfig+0x15a>
 80066b0:	4b8e      	ldr	r3, [pc, #568]	; (80068ec <UART_SetConfig+0x324>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	d82c      	bhi.n	8006718 <UART_SetConfig+0x150>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0xfc>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006719 	.word	0x08006719
 80066cc:	08006719 	.word	0x08006719
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006709 	.word	0x08006709
 80066d8:	08006719 	.word	0x08006719
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006701 	.word	0x08006701
 80066e8:	08006719 	.word	0x08006719
 80066ec:	08006719 	.word	0x08006719
 80066f0:	08006719 	.word	0x08006719
 80066f4:	08006711 	.word	0x08006711
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e0c7      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e0c3      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670e:	e0bf      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006716:	e0bb      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	bf00      	nop
 8006720:	e0b6      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a73      	ldr	r2, [pc, #460]	; (80068f4 <UART_SetConfig+0x32c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d125      	bne.n	8006778 <UART_SetConfig+0x1b0>
 800672c:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <UART_SetConfig+0x324>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006736:	2b10      	cmp	r3, #16
 8006738:	d011      	beq.n	800675e <UART_SetConfig+0x196>
 800673a:	2b10      	cmp	r3, #16
 800673c:	d802      	bhi.n	8006744 <UART_SetConfig+0x17c>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <UART_SetConfig+0x186>
 8006742:	e014      	b.n	800676e <UART_SetConfig+0x1a6>
 8006744:	2b20      	cmp	r3, #32
 8006746:	d006      	beq.n	8006756 <UART_SetConfig+0x18e>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d00c      	beq.n	8006766 <UART_SetConfig+0x19e>
 800674c:	e00f      	b.n	800676e <UART_SetConfig+0x1a6>
 800674e:	2300      	movs	r3, #0
 8006750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006754:	e09c      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006756:	2302      	movs	r3, #2
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675c:	e098      	b.n	8006890 <UART_SetConfig+0x2c8>
 800675e:	2304      	movs	r3, #4
 8006760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006764:	e094      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006766:	2308      	movs	r3, #8
 8006768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676c:	e090      	b.n	8006890 <UART_SetConfig+0x2c8>
 800676e:	2310      	movs	r3, #16
 8006770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006774:	bf00      	nop
 8006776:	e08b      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5e      	ldr	r2, [pc, #376]	; (80068f8 <UART_SetConfig+0x330>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d125      	bne.n	80067ce <UART_SetConfig+0x206>
 8006782:	4b5a      	ldr	r3, [pc, #360]	; (80068ec <UART_SetConfig+0x324>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d011      	beq.n	80067b4 <UART_SetConfig+0x1ec>
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d802      	bhi.n	800679a <UART_SetConfig+0x1d2>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <UART_SetConfig+0x1dc>
 8006798:	e014      	b.n	80067c4 <UART_SetConfig+0x1fc>
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d006      	beq.n	80067ac <UART_SetConfig+0x1e4>
 800679e:	2bc0      	cmp	r3, #192	; 0xc0
 80067a0:	d00c      	beq.n	80067bc <UART_SetConfig+0x1f4>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x1fc>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067aa:	e071      	b.n	8006890 <UART_SetConfig+0x2c8>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b2:	e06d      	b.n	8006890 <UART_SetConfig+0x2c8>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ba:	e069      	b.n	8006890 <UART_SetConfig+0x2c8>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c2:	e065      	b.n	8006890 <UART_SetConfig+0x2c8>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	bf00      	nop
 80067cc:	e060      	b.n	8006890 <UART_SetConfig+0x2c8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <UART_SetConfig+0x334>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d129      	bne.n	800682c <UART_SetConfig+0x264>
 80067d8:	4b44      	ldr	r3, [pc, #272]	; (80068ec <UART_SetConfig+0x324>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e6:	d014      	beq.n	8006812 <UART_SetConfig+0x24a>
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d802      	bhi.n	80067f4 <UART_SetConfig+0x22c>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <UART_SetConfig+0x23a>
 80067f2:	e016      	b.n	8006822 <UART_SetConfig+0x25a>
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f8:	d007      	beq.n	800680a <UART_SetConfig+0x242>
 80067fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fe:	d00c      	beq.n	800681a <UART_SetConfig+0x252>
 8006800:	e00f      	b.n	8006822 <UART_SetConfig+0x25a>
 8006802:	2300      	movs	r3, #0
 8006804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006808:	e042      	b.n	8006890 <UART_SetConfig+0x2c8>
 800680a:	2302      	movs	r3, #2
 800680c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006810:	e03e      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006812:	2304      	movs	r3, #4
 8006814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006818:	e03a      	b.n	8006890 <UART_SetConfig+0x2c8>
 800681a:	2308      	movs	r3, #8
 800681c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006820:	e036      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006822:	2310      	movs	r3, #16
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006828:	bf00      	nop
 800682a:	e031      	b.n	8006890 <UART_SetConfig+0x2c8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <UART_SetConfig+0x31c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d129      	bne.n	800688a <UART_SetConfig+0x2c2>
 8006836:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <UART_SetConfig+0x324>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d014      	beq.n	8006870 <UART_SetConfig+0x2a8>
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d802      	bhi.n	8006852 <UART_SetConfig+0x28a>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <UART_SetConfig+0x298>
 8006850:	e016      	b.n	8006880 <UART_SetConfig+0x2b8>
 8006852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006856:	d007      	beq.n	8006868 <UART_SetConfig+0x2a0>
 8006858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800685c:	d00c      	beq.n	8006878 <UART_SetConfig+0x2b0>
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x2b8>
 8006860:	2300      	movs	r3, #0
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e013      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006868:	2302      	movs	r3, #2
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e00b      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e007      	b.n	8006890 <UART_SetConfig+0x2c8>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <UART_SetConfig+0x2c8>
 800688a:	2310      	movs	r3, #16
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <UART_SetConfig+0x31c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	f040 80fe 	bne.w	8006a98 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800689c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d837      	bhi.n	8006914 <UART_SetConfig+0x34c>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <UART_SetConfig+0x2e4>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	08006915 	.word	0x08006915
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	08006915 	.word	0x08006915
 80068bc:	08006905 	.word	0x08006905
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006915 	.word	0x08006915
 80068cc:	0800690d 	.word	0x0800690d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fd fe7e 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 80068d4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d6:	e020      	b.n	800691a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80068d8:	4b09      	ldr	r3, [pc, #36]	; (8006900 <UART_SetConfig+0x338>)
 80068da:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068dc:	e01d      	b.n	800691a <UART_SetConfig+0x352>
 80068de:	bf00      	nop
 80068e0:	efff69f3 	.word	0xefff69f3
 80068e4:	40008000 	.word	0x40008000
 80068e8:	40013800 	.word	0x40013800
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40004400 	.word	0x40004400
 80068f4:	40004800 	.word	0x40004800
 80068f8:	40004c00 	.word	0x40004c00
 80068fc:	40005000 	.word	0x40005000
 8006900:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006904:	f7fd fdce 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8006908:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800690a:	e006      	b.n	800691a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800690c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006910:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006912:	e002      	b.n	800691a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	76fb      	strb	r3, [r7, #27]
        break;
 8006918:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 81b9 	beq.w	8006c94 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4413      	add	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d305      	bcc.n	800693e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	429a      	cmp	r2, r3
 800693c:	d902      	bls.n	8006944 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	76fb      	strb	r3, [r7, #27]
 8006942:	e1a7      	b.n	8006c94 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8006944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006948:	2b08      	cmp	r3, #8
 800694a:	f200 8092 	bhi.w	8006a72 <UART_SetConfig+0x4aa>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x38c>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006979 	.word	0x08006979
 8006958:	08006a73 	.word	0x08006a73
 800695c:	080069c7 	.word	0x080069c7
 8006960:	08006a73 	.word	0x08006a73
 8006964:	080069fb 	.word	0x080069fb
 8006968:	08006a73 	.word	0x08006a73
 800696c:	08006a73 	.word	0x08006a73
 8006970:	08006a73 	.word	0x08006a73
 8006974:	08006a49 	.word	0x08006a49
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006978:	f7fd fe2a 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 800697c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4619      	mov	r1, r3
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	f04f 0400 	mov.w	r4, #0
 800698e:	0214      	lsls	r4, r2, #8
 8006990:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006994:	020b      	lsls	r3, r1, #8
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6852      	ldr	r2, [r2, #4]
 800699a:	0852      	lsrs	r2, r2, #1
 800699c:	4611      	mov	r1, r2
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	eb13 0b01 	adds.w	fp, r3, r1
 80069a6:	eb44 0c02 	adc.w	ip, r4, r2
 80069aa:	4658      	mov	r0, fp
 80069ac:	4661      	mov	r1, ip
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f04f 0400 	mov.w	r4, #0
 80069b6:	461a      	mov	r2, r3
 80069b8:	4623      	mov	r3, r4
 80069ba:	f7f9 fff3 	bl	80009a4 <__aeabi_uldivmod>
 80069be:	4603      	mov	r3, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069c4:	e058      	b.n	8006a78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	f04f 0400 	mov.w	r4, #0
 80069d0:	49ae      	ldr	r1, [pc, #696]	; (8006c8c <UART_SetConfig+0x6c4>)
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	eb13 0b01 	adds.w	fp, r3, r1
 80069da:	eb44 0c02 	adc.w	ip, r4, r2
 80069de:	4658      	mov	r0, fp
 80069e0:	4661      	mov	r1, ip
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f04f 0400 	mov.w	r4, #0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7f9 ffd9 	bl	80009a4 <__aeabi_uldivmod>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069f8:	e03e      	b.n	8006a78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fd fd53 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 80069fe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4619      	mov	r1, r3
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f04f 0400 	mov.w	r4, #0
 8006a10:	0214      	lsls	r4, r2, #8
 8006a12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a16:	020b      	lsls	r3, r1, #8
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6852      	ldr	r2, [r2, #4]
 8006a1c:	0852      	lsrs	r2, r2, #1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	eb13 0b01 	adds.w	fp, r3, r1
 8006a28:	eb44 0c02 	adc.w	ip, r4, r2
 8006a2c:	4658      	mov	r0, fp
 8006a2e:	4661      	mov	r1, ip
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	f7f9 ffb2 	bl	80009a4 <__aeabi_uldivmod>
 8006a40:	4603      	mov	r3, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a46:	e017      	b.n	8006a78 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	f04f 0400 	mov.w	r4, #0
 8006a52:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a56:	f144 0100 	adc.w	r1, r4, #0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f04f 0400 	mov.w	r4, #0
 8006a62:	461a      	mov	r2, r3
 8006a64:	4623      	mov	r3, r4
 8006a66:	f7f9 ff9d 	bl	80009a4 <__aeabi_uldivmod>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a70:	e002      	b.n	8006a78 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	76fb      	strb	r3, [r7, #27]
            break;
 8006a76:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7e:	d308      	bcc.n	8006a92 <UART_SetConfig+0x4ca>
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a86:	d204      	bcs.n	8006a92 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	60da      	str	r2, [r3, #12]
 8006a90:	e100      	b.n	8006c94 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	76fb      	strb	r3, [r7, #27]
 8006a96:	e0fd      	b.n	8006c94 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa0:	f040 8084 	bne.w	8006bac <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d85f      	bhi.n	8006b6c <UART_SetConfig+0x5a4>
 8006aac:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <UART_SetConfig+0x4ec>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006af9 	.word	0x08006af9
 8006abc:	08006b19 	.word	0x08006b19
 8006ac0:	08006b6d 	.word	0x08006b6d
 8006ac4:	08006b35 	.word	0x08006b35
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b6d 	.word	0x08006b6d
 8006ad0:	08006b6d 	.word	0x08006b6d
 8006ad4:	08006b55 	.word	0x08006b55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad8:	f7fd fd7a 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8006adc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	005a      	lsls	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006af6:	e03c      	b.n	8006b72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af8:	f7fd fd80 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8006afc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	005a      	lsls	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b16:	e02c      	b.n	8006b72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006b22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6852      	ldr	r2, [r2, #4]
 8006b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b32:	e01e      	b.n	8006b72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b34:	f7fd fcb6 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8006b38:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	005a      	lsls	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b52:	e00e      	b.n	8006b72 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b6a:	e002      	b.n	8006b72 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	76fb      	strb	r3, [r7, #27]
        break;
 8006b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d916      	bls.n	8006ba6 <UART_SetConfig+0x5de>
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d212      	bcs.n	8006ba6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f023 030f 	bic.w	r3, r3, #15
 8006b88:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	89fa      	ldrh	r2, [r7, #14]
 8006ba2:	60da      	str	r2, [r3, #12]
 8006ba4:	e076      	b.n	8006c94 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	76fb      	strb	r3, [r7, #27]
 8006baa:	e073      	b.n	8006c94 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d85c      	bhi.n	8006c6e <UART_SetConfig+0x6a6>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x5f4>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006bff 	.word	0x08006bff
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c6f 	.word	0x08006c6f
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006c6f 	.word	0x08006c6f
 8006bd4:	08006c6f 	.word	0x08006c6f
 8006bd8:	08006c6f 	.word	0x08006c6f
 8006bdc:	08006c57 	.word	0x08006c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fd fcf6 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8006be4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085a      	lsrs	r2, r3, #1
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	441a      	add	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bfc:	e03a      	b.n	8006c74 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfe:	f7fd fcfd 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8006c02:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	085a      	lsrs	r2, r3, #1
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c1a:	e02b      	b.n	8006c74 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006c26:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6852      	ldr	r2, [r2, #4]
 8006c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c36:	e01d      	b.n	8006c74 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c38:	f7fd fc34 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8006c3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085a      	lsrs	r2, r3, #1
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	441a      	add	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c54:	e00e      	b.n	8006c74 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c6c:	e002      	b.n	8006c74 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	76fb      	strb	r3, [r7, #27]
        break;
 8006c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d90a      	bls.n	8006c90 <UART_SetConfig+0x6c8>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d206      	bcs.n	8006c90 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e003      	b.n	8006c94 <UART_SetConfig+0x6cc>
 8006c8c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006ca0:	7efb      	ldrb	r3, [r7, #27]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01a      	beq.n	8006dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006daa:	d10a      	bne.n	8006dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006dfe:	f7fb f9d3 	bl	80021a8 <HAL_GetTick>
 8006e02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d10e      	bne.n	8006e30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f82a 	bl	8006e7a <UART_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e020      	b.n	8006e72 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d10e      	bne.n	8006e5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f814 	bl	8006e7a <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e00a      	b.n	8006e72 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	4613      	mov	r3, r2
 8006e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8a:	e05d      	b.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e92:	d059      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e94:	f7fb f988 	bl	80021a8 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d302      	bcc.n	8006eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d11b      	bne.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0201 	bic.w	r2, r2, #1
 8006ec8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e042      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02b      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d123      	bne.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f08:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0201 	bic.w	r2, r2, #1
 8006f28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e00f      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d092      	beq.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <__libc_init_array>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4e0d      	ldr	r6, [pc, #52]	; (8006fa8 <__libc_init_array+0x38>)
 8006f74:	4c0d      	ldr	r4, [pc, #52]	; (8006fac <__libc_init_array+0x3c>)
 8006f76:	1ba4      	subs	r4, r4, r6
 8006f78:	10a4      	asrs	r4, r4, #2
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	42a5      	cmp	r5, r4
 8006f7e:	d109      	bne.n	8006f94 <__libc_init_array+0x24>
 8006f80:	4e0b      	ldr	r6, [pc, #44]	; (8006fb0 <__libc_init_array+0x40>)
 8006f82:	4c0c      	ldr	r4, [pc, #48]	; (8006fb4 <__libc_init_array+0x44>)
 8006f84:	f000 fd6c 	bl	8007a60 <_init>
 8006f88:	1ba4      	subs	r4, r4, r6
 8006f8a:	10a4      	asrs	r4, r4, #2
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	42a5      	cmp	r5, r4
 8006f90:	d105      	bne.n	8006f9e <__libc_init_array+0x2e>
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f98:	4798      	blx	r3
 8006f9a:	3501      	adds	r5, #1
 8006f9c:	e7ee      	b.n	8006f7c <__libc_init_array+0xc>
 8006f9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fa2:	4798      	blx	r3
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e7f2      	b.n	8006f8e <__libc_init_array+0x1e>
 8006fa8:	08007e98 	.word	0x08007e98
 8006fac:	08007e98 	.word	0x08007e98
 8006fb0:	08007e98 	.word	0x08007e98
 8006fb4:	08007e9c 	.word	0x08007e9c

08006fb8 <memset>:
 8006fb8:	4402      	add	r2, r0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d100      	bne.n	8006fc2 <memset+0xa>
 8006fc0:	4770      	bx	lr
 8006fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc6:	e7f9      	b.n	8006fbc <memset+0x4>

08006fc8 <sinf>:
 8006fc8:	ee10 3a10 	vmov	r3, s0
 8006fcc:	b507      	push	{r0, r1, r2, lr}
 8006fce:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <sinf+0x7c>)
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	dc05      	bgt.n	8006fe4 <sinf+0x1c>
 8006fd8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007048 <sinf+0x80>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f000 fc41 	bl	8007864 <__kernel_sinf>
 8006fe2:	e004      	b.n	8006fee <sinf+0x26>
 8006fe4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fe8:	db04      	blt.n	8006ff4 <sinf+0x2c>
 8006fea:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006fee:	b003      	add	sp, #12
 8006ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ff4:	4668      	mov	r0, sp
 8006ff6:	f000 f829 	bl	800704c <__ieee754_rem_pio2f>
 8006ffa:	f000 0003 	and.w	r0, r0, #3
 8006ffe:	2801      	cmp	r0, #1
 8007000:	d008      	beq.n	8007014 <sinf+0x4c>
 8007002:	2802      	cmp	r0, #2
 8007004:	d00d      	beq.n	8007022 <sinf+0x5a>
 8007006:	b9b0      	cbnz	r0, 8007036 <sinf+0x6e>
 8007008:	2001      	movs	r0, #1
 800700a:	eddd 0a01 	vldr	s1, [sp, #4]
 800700e:	ed9d 0a00 	vldr	s0, [sp]
 8007012:	e7e4      	b.n	8006fde <sinf+0x16>
 8007014:	eddd 0a01 	vldr	s1, [sp, #4]
 8007018:	ed9d 0a00 	vldr	s0, [sp]
 800701c:	f000 f942 	bl	80072a4 <__kernel_cosf>
 8007020:	e7e5      	b.n	8006fee <sinf+0x26>
 8007022:	2001      	movs	r0, #1
 8007024:	eddd 0a01 	vldr	s1, [sp, #4]
 8007028:	ed9d 0a00 	vldr	s0, [sp]
 800702c:	f000 fc1a 	bl	8007864 <__kernel_sinf>
 8007030:	eeb1 0a40 	vneg.f32	s0, s0
 8007034:	e7db      	b.n	8006fee <sinf+0x26>
 8007036:	eddd 0a01 	vldr	s1, [sp, #4]
 800703a:	ed9d 0a00 	vldr	s0, [sp]
 800703e:	f000 f931 	bl	80072a4 <__kernel_cosf>
 8007042:	e7f5      	b.n	8007030 <sinf+0x68>
 8007044:	3f490fd8 	.word	0x3f490fd8
 8007048:	00000000 	.word	0x00000000

0800704c <__ieee754_rem_pio2f>:
 800704c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704e:	ee10 6a10 	vmov	r6, s0
 8007052:	4b86      	ldr	r3, [pc, #536]	; (800726c <__ieee754_rem_pio2f+0x220>)
 8007054:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007058:	429c      	cmp	r4, r3
 800705a:	b087      	sub	sp, #28
 800705c:	4605      	mov	r5, r0
 800705e:	dc05      	bgt.n	800706c <__ieee754_rem_pio2f+0x20>
 8007060:	2300      	movs	r3, #0
 8007062:	ed85 0a00 	vstr	s0, [r5]
 8007066:	6043      	str	r3, [r0, #4]
 8007068:	2000      	movs	r0, #0
 800706a:	e020      	b.n	80070ae <__ieee754_rem_pio2f+0x62>
 800706c:	4b80      	ldr	r3, [pc, #512]	; (8007270 <__ieee754_rem_pio2f+0x224>)
 800706e:	429c      	cmp	r4, r3
 8007070:	dc38      	bgt.n	80070e4 <__ieee754_rem_pio2f+0x98>
 8007072:	2e00      	cmp	r6, #0
 8007074:	f024 040f 	bic.w	r4, r4, #15
 8007078:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007274 <__ieee754_rem_pio2f+0x228>
 800707c:	4b7e      	ldr	r3, [pc, #504]	; (8007278 <__ieee754_rem_pio2f+0x22c>)
 800707e:	dd18      	ble.n	80070b2 <__ieee754_rem_pio2f+0x66>
 8007080:	429c      	cmp	r4, r3
 8007082:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007086:	bf09      	itett	eq
 8007088:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800727c <__ieee754_rem_pio2f+0x230>
 800708c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007280 <__ieee754_rem_pio2f+0x234>
 8007090:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007094:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007284 <__ieee754_rem_pio2f+0x238>
 8007098:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800709c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070a0:	edc0 6a00 	vstr	s13, [r0]
 80070a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80070ac:	2001      	movs	r0, #1
 80070ae:	b007      	add	sp, #28
 80070b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b2:	429c      	cmp	r4, r3
 80070b4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80070b8:	bf09      	itett	eq
 80070ba:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800727c <__ieee754_rem_pio2f+0x230>
 80070be:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007280 <__ieee754_rem_pio2f+0x234>
 80070c2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80070c6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007284 <__ieee754_rem_pio2f+0x238>
 80070ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 80070ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070d2:	edc0 6a00 	vstr	s13, [r0]
 80070d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070da:	edc0 7a01 	vstr	s15, [r0, #4]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e2:	e7e4      	b.n	80070ae <__ieee754_rem_pio2f+0x62>
 80070e4:	4b68      	ldr	r3, [pc, #416]	; (8007288 <__ieee754_rem_pio2f+0x23c>)
 80070e6:	429c      	cmp	r4, r3
 80070e8:	dc71      	bgt.n	80071ce <__ieee754_rem_pio2f+0x182>
 80070ea:	f000 fc03 	bl	80078f4 <fabsf>
 80070ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800728c <__ieee754_rem_pio2f+0x240>
 80070f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80070f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80070fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070fe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007102:	ee17 0a90 	vmov	r0, s15
 8007106:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007274 <__ieee754_rem_pio2f+0x228>
 800710a:	eeb1 7a46 	vneg.f32	s14, s12
 800710e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007112:	281f      	cmp	r0, #31
 8007114:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007280 <__ieee754_rem_pio2f+0x234>
 8007118:	ee66 7a27 	vmul.f32	s15, s12, s15
 800711c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007120:	ee16 3a90 	vmov	r3, s13
 8007124:	dc1c      	bgt.n	8007160 <__ieee754_rem_pio2f+0x114>
 8007126:	1e47      	subs	r7, r0, #1
 8007128:	4959      	ldr	r1, [pc, #356]	; (8007290 <__ieee754_rem_pio2f+0x244>)
 800712a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800712e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007132:	428a      	cmp	r2, r1
 8007134:	d014      	beq.n	8007160 <__ieee754_rem_pio2f+0x114>
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	ed95 7a00 	vldr	s14, [r5]
 800713c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007140:	2e00      	cmp	r6, #0
 8007142:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007146:	ed85 0a01 	vstr	s0, [r5, #4]
 800714a:	dab0      	bge.n	80070ae <__ieee754_rem_pio2f+0x62>
 800714c:	eeb1 7a47 	vneg.f32	s14, s14
 8007150:	eeb1 0a40 	vneg.f32	s0, s0
 8007154:	ed85 7a00 	vstr	s14, [r5]
 8007158:	ed85 0a01 	vstr	s0, [r5, #4]
 800715c:	4240      	negs	r0, r0
 800715e:	e7a6      	b.n	80070ae <__ieee754_rem_pio2f+0x62>
 8007160:	15e4      	asrs	r4, r4, #23
 8007162:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007166:	1aa2      	subs	r2, r4, r2
 8007168:	2a08      	cmp	r2, #8
 800716a:	dde4      	ble.n	8007136 <__ieee754_rem_pio2f+0xea>
 800716c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800727c <__ieee754_rem_pio2f+0x230>
 8007170:	eef0 6a40 	vmov.f32	s13, s0
 8007174:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007178:	ee30 0a66 	vsub.f32	s0, s0, s13
 800717c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007180:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007284 <__ieee754_rem_pio2f+0x238>
 8007184:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007188:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800718c:	eef0 7a40 	vmov.f32	s15, s0
 8007190:	ee15 3a90 	vmov	r3, s11
 8007194:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007198:	1aa4      	subs	r4, r4, r2
 800719a:	2c19      	cmp	r4, #25
 800719c:	dc04      	bgt.n	80071a8 <__ieee754_rem_pio2f+0x15c>
 800719e:	edc5 5a00 	vstr	s11, [r5]
 80071a2:	eeb0 0a66 	vmov.f32	s0, s13
 80071a6:	e7c7      	b.n	8007138 <__ieee754_rem_pio2f+0xec>
 80071a8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007294 <__ieee754_rem_pio2f+0x248>
 80071ac:	eeb0 0a66 	vmov.f32	s0, s13
 80071b0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80071b4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80071b8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80071bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007298 <__ieee754_rem_pio2f+0x24c>
 80071c0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80071c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80071c8:	ed85 7a00 	vstr	s14, [r5]
 80071cc:	e7b4      	b.n	8007138 <__ieee754_rem_pio2f+0xec>
 80071ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071d2:	db06      	blt.n	80071e2 <__ieee754_rem_pio2f+0x196>
 80071d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80071d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80071dc:	edc0 7a00 	vstr	s15, [r0]
 80071e0:	e742      	b.n	8007068 <__ieee754_rem_pio2f+0x1c>
 80071e2:	15e2      	asrs	r2, r4, #23
 80071e4:	3a86      	subs	r2, #134	; 0x86
 80071e6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071f2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800729c <__ieee754_rem_pio2f+0x250>
 80071f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071fe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007206:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800720a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800720e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007212:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007216:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800721a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	edcd 7a05 	vstr	s15, [sp, #20]
 8007226:	d11e      	bne.n	8007266 <__ieee754_rem_pio2f+0x21a>
 8007228:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2302      	movne	r3, #2
 8007236:	491a      	ldr	r1, [pc, #104]	; (80072a0 <__ieee754_rem_pio2f+0x254>)
 8007238:	9101      	str	r1, [sp, #4]
 800723a:	2102      	movs	r1, #2
 800723c:	9100      	str	r1, [sp, #0]
 800723e:	a803      	add	r0, sp, #12
 8007240:	4629      	mov	r1, r5
 8007242:	f000 f88d 	bl	8007360 <__kernel_rem_pio2f>
 8007246:	2e00      	cmp	r6, #0
 8007248:	f6bf af31 	bge.w	80070ae <__ieee754_rem_pio2f+0x62>
 800724c:	edd5 7a00 	vldr	s15, [r5]
 8007250:	eef1 7a67 	vneg.f32	s15, s15
 8007254:	edc5 7a00 	vstr	s15, [r5]
 8007258:	edd5 7a01 	vldr	s15, [r5, #4]
 800725c:	eef1 7a67 	vneg.f32	s15, s15
 8007260:	edc5 7a01 	vstr	s15, [r5, #4]
 8007264:	e77a      	b.n	800715c <__ieee754_rem_pio2f+0x110>
 8007266:	2303      	movs	r3, #3
 8007268:	e7e5      	b.n	8007236 <__ieee754_rem_pio2f+0x1ea>
 800726a:	bf00      	nop
 800726c:	3f490fd8 	.word	0x3f490fd8
 8007270:	4016cbe3 	.word	0x4016cbe3
 8007274:	3fc90f80 	.word	0x3fc90f80
 8007278:	3fc90fd0 	.word	0x3fc90fd0
 800727c:	37354400 	.word	0x37354400
 8007280:	37354443 	.word	0x37354443
 8007284:	2e85a308 	.word	0x2e85a308
 8007288:	43490f80 	.word	0x43490f80
 800728c:	3f22f984 	.word	0x3f22f984
 8007290:	08007ac0 	.word	0x08007ac0
 8007294:	2e85a300 	.word	0x2e85a300
 8007298:	248d3132 	.word	0x248d3132
 800729c:	43800000 	.word	0x43800000
 80072a0:	08007b40 	.word	0x08007b40

080072a4 <__kernel_cosf>:
 80072a4:	ee10 3a10 	vmov	r3, s0
 80072a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80072b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b4:	da05      	bge.n	80072c2 <__kernel_cosf+0x1e>
 80072b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80072ba:	ee17 2a90 	vmov	r2, s15
 80072be:	2a00      	cmp	r2, #0
 80072c0:	d03b      	beq.n	800733a <__kernel_cosf+0x96>
 80072c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80072c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007340 <__kernel_cosf+0x9c>
 80072ce:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <__kernel_cosf+0xa0>)
 80072d0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80072d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007348 <__kernel_cosf+0xa4>
 80072d8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80072dc:	4293      	cmp	r3, r2
 80072de:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800734c <__kernel_cosf+0xa8>
 80072e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80072e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007350 <__kernel_cosf+0xac>
 80072ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 80072ee:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007354 <__kernel_cosf+0xb0>
 80072f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80072f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007358 <__kernel_cosf+0xb4>
 80072fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 80072fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007302:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007306:	eee6 0a07 	vfma.f32	s1, s12, s14
 800730a:	dc04      	bgt.n	8007316 <__kernel_cosf+0x72>
 800730c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007310:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007314:	4770      	bx	lr
 8007316:	4a11      	ldr	r2, [pc, #68]	; (800735c <__kernel_cosf+0xb8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	bfda      	itte	le
 800731c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007320:	ee07 3a10 	vmovle	s14, r3
 8007324:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800732c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007330:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007334:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007338:	4770      	bx	lr
 800733a:	eeb0 0a66 	vmov.f32	s0, s13
 800733e:	4770      	bx	lr
 8007340:	ad47d74e 	.word	0xad47d74e
 8007344:	3e999999 	.word	0x3e999999
 8007348:	310f74f6 	.word	0x310f74f6
 800734c:	b493f27c 	.word	0xb493f27c
 8007350:	37d00d01 	.word	0x37d00d01
 8007354:	bab60b61 	.word	0xbab60b61
 8007358:	3d2aaaab 	.word	0x3d2aaaab
 800735c:	3f480000 	.word	0x3f480000

08007360 <__kernel_rem_pio2f>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	ed2d 8b04 	vpush	{d8-d9}
 8007368:	b0d7      	sub	sp, #348	; 0x15c
 800736a:	469b      	mov	fp, r3
 800736c:	460e      	mov	r6, r1
 800736e:	4bbe      	ldr	r3, [pc, #760]	; (8007668 <__kernel_rem_pio2f+0x308>)
 8007370:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007372:	9002      	str	r0, [sp, #8]
 8007374:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007378:	9865      	ldr	r0, [sp, #404]	; 0x194
 800737a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007678 <__kernel_rem_pio2f+0x318>
 800737e:	1ed1      	subs	r1, r2, #3
 8007380:	2308      	movs	r3, #8
 8007382:	fb91 f1f3 	sdiv	r1, r1, r3
 8007386:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800738a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800738e:	1c4c      	adds	r4, r1, #1
 8007390:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007394:	eba1 050a 	sub.w	r5, r1, sl
 8007398:	aa1a      	add	r2, sp, #104	; 0x68
 800739a:	eb09 070a 	add.w	r7, r9, sl
 800739e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80073a2:	4696      	mov	lr, r2
 80073a4:	2300      	movs	r3, #0
 80073a6:	42bb      	cmp	r3, r7
 80073a8:	dd0f      	ble.n	80073ca <__kernel_rem_pio2f+0x6a>
 80073aa:	af42      	add	r7, sp, #264	; 0x108
 80073ac:	2200      	movs	r2, #0
 80073ae:	454a      	cmp	r2, r9
 80073b0:	dc27      	bgt.n	8007402 <__kernel_rem_pio2f+0xa2>
 80073b2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80073b6:	eb0b 0302 	add.w	r3, fp, r2
 80073ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80073be:	9d02      	ldr	r5, [sp, #8]
 80073c0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007678 <__kernel_rem_pio2f+0x318>
 80073c4:	f04f 0c00 	mov.w	ip, #0
 80073c8:	e015      	b.n	80073f6 <__kernel_rem_pio2f+0x96>
 80073ca:	42dd      	cmn	r5, r3
 80073cc:	bf5d      	ittte	pl
 80073ce:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80073d2:	ee07 2a90 	vmovpl	s15, r2
 80073d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80073da:	eef0 7a47 	vmovmi.f32	s15, s14
 80073de:	ecee 7a01 	vstmia	lr!, {s15}
 80073e2:	3301      	adds	r3, #1
 80073e4:	e7df      	b.n	80073a6 <__kernel_rem_pio2f+0x46>
 80073e6:	ecf5 6a01 	vldmia	r5!, {s13}
 80073ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80073ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073f2:	f10c 0c01 	add.w	ip, ip, #1
 80073f6:	45d4      	cmp	ip, sl
 80073f8:	ddf5      	ble.n	80073e6 <__kernel_rem_pio2f+0x86>
 80073fa:	ece7 7a01 	vstmia	r7!, {s15}
 80073fe:	3201      	adds	r2, #1
 8007400:	e7d5      	b.n	80073ae <__kernel_rem_pio2f+0x4e>
 8007402:	ab06      	add	r3, sp, #24
 8007404:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007674 <__kernel_rem_pio2f+0x314>
 800740e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007670 <__kernel_rem_pio2f+0x310>
 8007412:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	464d      	mov	r5, r9
 800741a:	ab56      	add	r3, sp, #344	; 0x158
 800741c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007420:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007424:	3f01      	subs	r7, #1
 8007426:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800742a:	00bf      	lsls	r7, r7, #2
 800742c:	ab56      	add	r3, sp, #344	; 0x158
 800742e:	19da      	adds	r2, r3, r7
 8007430:	3a4c      	subs	r2, #76	; 0x4c
 8007432:	2300      	movs	r3, #0
 8007434:	1ae9      	subs	r1, r5, r3
 8007436:	2900      	cmp	r1, #0
 8007438:	dc4c      	bgt.n	80074d4 <__kernel_rem_pio2f+0x174>
 800743a:	4620      	mov	r0, r4
 800743c:	f000 faa4 	bl	8007988 <scalbnf>
 8007440:	eeb0 8a40 	vmov.f32	s16, s0
 8007444:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007448:	ee28 0a00 	vmul.f32	s0, s16, s0
 800744c:	f000 fa5a 	bl	8007904 <floorf>
 8007450:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007454:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007458:	2c00      	cmp	r4, #0
 800745a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800745e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007466:	ee38 8a67 	vsub.f32	s16, s16, s15
 800746a:	dd48      	ble.n	80074fe <__kernel_rem_pio2f+0x19e>
 800746c:	1e69      	subs	r1, r5, #1
 800746e:	ab06      	add	r3, sp, #24
 8007470:	f1c4 0008 	rsb	r0, r4, #8
 8007474:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007478:	9a01      	ldr	r2, [sp, #4]
 800747a:	fa4c f300 	asr.w	r3, ip, r0
 800747e:	441a      	add	r2, r3
 8007480:	4083      	lsls	r3, r0
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	ebac 0203 	sub.w	r2, ip, r3
 8007488:	ab06      	add	r3, sp, #24
 800748a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800748e:	f1c4 0307 	rsb	r3, r4, #7
 8007492:	fa42 f803 	asr.w	r8, r2, r3
 8007496:	f1b8 0f00 	cmp.w	r8, #0
 800749a:	dd41      	ble.n	8007520 <__kernel_rem_pio2f+0x1c0>
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	2000      	movs	r0, #0
 80074a0:	3301      	adds	r3, #1
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	4601      	mov	r1, r0
 80074a6:	4285      	cmp	r5, r0
 80074a8:	dc6d      	bgt.n	8007586 <__kernel_rem_pio2f+0x226>
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	dd04      	ble.n	80074b8 <__kernel_rem_pio2f+0x158>
 80074ae:	2c01      	cmp	r4, #1
 80074b0:	d07e      	beq.n	80075b0 <__kernel_rem_pio2f+0x250>
 80074b2:	2c02      	cmp	r4, #2
 80074b4:	f000 8086 	beq.w	80075c4 <__kernel_rem_pio2f+0x264>
 80074b8:	f1b8 0f02 	cmp.w	r8, #2
 80074bc:	d130      	bne.n	8007520 <__kernel_rem_pio2f+0x1c0>
 80074be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80074c6:	b359      	cbz	r1, 8007520 <__kernel_rem_pio2f+0x1c0>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fa5d 	bl	8007988 <scalbnf>
 80074ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80074d2:	e025      	b.n	8007520 <__kernel_rem_pio2f+0x1c0>
 80074d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80074d8:	a806      	add	r0, sp, #24
 80074da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80074e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80074ea:	ee10 1a10 	vmov	r1, s0
 80074ee:	ed32 0a01 	vldmdb	r2!, {s0}
 80074f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80074f6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80074fa:	3301      	adds	r3, #1
 80074fc:	e79a      	b.n	8007434 <__kernel_rem_pio2f+0xd4>
 80074fe:	d106      	bne.n	800750e <__kernel_rem_pio2f+0x1ae>
 8007500:	1e6b      	subs	r3, r5, #1
 8007502:	aa06      	add	r2, sp, #24
 8007504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007508:	ea4f 2822 	mov.w	r8, r2, asr #8
 800750c:	e7c3      	b.n	8007496 <__kernel_rem_pio2f+0x136>
 800750e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007512:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	da31      	bge.n	8007580 <__kernel_rem_pio2f+0x220>
 800751c:	f04f 0800 	mov.w	r8, #0
 8007520:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007528:	f040 80a8 	bne.w	800767c <__kernel_rem_pio2f+0x31c>
 800752c:	1e6b      	subs	r3, r5, #1
 800752e:	4618      	mov	r0, r3
 8007530:	2200      	movs	r2, #0
 8007532:	4548      	cmp	r0, r9
 8007534:	da4d      	bge.n	80075d2 <__kernel_rem_pio2f+0x272>
 8007536:	2a00      	cmp	r2, #0
 8007538:	f000 8087 	beq.w	800764a <__kernel_rem_pio2f+0x2ea>
 800753c:	aa06      	add	r2, sp, #24
 800753e:	3c08      	subs	r4, #8
 8007540:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007544:	2900      	cmp	r1, #0
 8007546:	f000 808d 	beq.w	8007664 <__kernel_rem_pio2f+0x304>
 800754a:	4620      	mov	r0, r4
 800754c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007550:	9302      	str	r3, [sp, #8]
 8007552:	f000 fa19 	bl	8007988 <scalbnf>
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007674 <__kernel_rem_pio2f+0x314>
 800755c:	0099      	lsls	r1, r3, #2
 800755e:	aa42      	add	r2, sp, #264	; 0x108
 8007560:	1850      	adds	r0, r2, r1
 8007562:	1d05      	adds	r5, r0, #4
 8007564:	461c      	mov	r4, r3
 8007566:	2c00      	cmp	r4, #0
 8007568:	f280 80b8 	bge.w	80076dc <__kernel_rem_pio2f+0x37c>
 800756c:	2500      	movs	r5, #0
 800756e:	1b5c      	subs	r4, r3, r5
 8007570:	2c00      	cmp	r4, #0
 8007572:	f2c0 80d8 	blt.w	8007726 <__kernel_rem_pio2f+0x3c6>
 8007576:	4f3d      	ldr	r7, [pc, #244]	; (800766c <__kernel_rem_pio2f+0x30c>)
 8007578:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007678 <__kernel_rem_pio2f+0x318>
 800757c:	2400      	movs	r4, #0
 800757e:	e0c6      	b.n	800770e <__kernel_rem_pio2f+0x3ae>
 8007580:	f04f 0802 	mov.w	r8, #2
 8007584:	e78a      	b.n	800749c <__kernel_rem_pio2f+0x13c>
 8007586:	ab06      	add	r3, sp, #24
 8007588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800758c:	b949      	cbnz	r1, 80075a2 <__kernel_rem_pio2f+0x242>
 800758e:	b12b      	cbz	r3, 800759c <__kernel_rem_pio2f+0x23c>
 8007590:	aa06      	add	r2, sp, #24
 8007592:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007596:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800759a:	2301      	movs	r3, #1
 800759c:	3001      	adds	r0, #1
 800759e:	4619      	mov	r1, r3
 80075a0:	e781      	b.n	80074a6 <__kernel_rem_pio2f+0x146>
 80075a2:	aa06      	add	r2, sp, #24
 80075a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80075a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80075ac:	460b      	mov	r3, r1
 80075ae:	e7f5      	b.n	800759c <__kernel_rem_pio2f+0x23c>
 80075b0:	1e68      	subs	r0, r5, #1
 80075b2:	ab06      	add	r3, sp, #24
 80075b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	aa06      	add	r2, sp, #24
 80075be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80075c2:	e779      	b.n	80074b8 <__kernel_rem_pio2f+0x158>
 80075c4:	1e68      	subs	r0, r5, #1
 80075c6:	ab06      	add	r3, sp, #24
 80075c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d0:	e7f4      	b.n	80075bc <__kernel_rem_pio2f+0x25c>
 80075d2:	a906      	add	r1, sp, #24
 80075d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80075d8:	3801      	subs	r0, #1
 80075da:	430a      	orrs	r2, r1
 80075dc:	e7a9      	b.n	8007532 <__kernel_rem_pio2f+0x1d2>
 80075de:	f10c 0c01 	add.w	ip, ip, #1
 80075e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d0f9      	beq.n	80075de <__kernel_rem_pio2f+0x27e>
 80075ea:	eb0b 0305 	add.w	r3, fp, r5
 80075ee:	aa1a      	add	r2, sp, #104	; 0x68
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	1898      	adds	r0, r3, r2
 80075f4:	3004      	adds	r0, #4
 80075f6:	1c69      	adds	r1, r5, #1
 80075f8:	3704      	adds	r7, #4
 80075fa:	2200      	movs	r2, #0
 80075fc:	4465      	add	r5, ip
 80075fe:	9005      	str	r0, [sp, #20]
 8007600:	428d      	cmp	r5, r1
 8007602:	f6ff af0a 	blt.w	800741a <__kernel_rem_pio2f+0xba>
 8007606:	a81a      	add	r0, sp, #104	; 0x68
 8007608:	eb02 0c03 	add.w	ip, r2, r3
 800760c:	4484      	add	ip, r0
 800760e:	9803      	ldr	r0, [sp, #12]
 8007610:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007614:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007618:	9001      	str	r0, [sp, #4]
 800761a:	ee07 0a90 	vmov	s15, r0
 800761e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007622:	9805      	ldr	r0, [sp, #20]
 8007624:	edcc 7a00 	vstr	s15, [ip]
 8007628:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007678 <__kernel_rem_pio2f+0x318>
 800762c:	eb00 0802 	add.w	r8, r0, r2
 8007630:	f04f 0c00 	mov.w	ip, #0
 8007634:	45d4      	cmp	ip, sl
 8007636:	dd0c      	ble.n	8007652 <__kernel_rem_pio2f+0x2f2>
 8007638:	eb02 0c07 	add.w	ip, r2, r7
 800763c:	a842      	add	r0, sp, #264	; 0x108
 800763e:	4484      	add	ip, r0
 8007640:	edcc 7a01 	vstr	s15, [ip, #4]
 8007644:	3101      	adds	r1, #1
 8007646:	3204      	adds	r2, #4
 8007648:	e7da      	b.n	8007600 <__kernel_rem_pio2f+0x2a0>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	f04f 0c01 	mov.w	ip, #1
 8007650:	e7c7      	b.n	80075e2 <__kernel_rem_pio2f+0x282>
 8007652:	ecfe 6a01 	vldmia	lr!, {s13}
 8007656:	ed38 7a01 	vldmdb	r8!, {s14}
 800765a:	f10c 0c01 	add.w	ip, ip, #1
 800765e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007662:	e7e7      	b.n	8007634 <__kernel_rem_pio2f+0x2d4>
 8007664:	3b01      	subs	r3, #1
 8007666:	e769      	b.n	800753c <__kernel_rem_pio2f+0x1dc>
 8007668:	08007e84 	.word	0x08007e84
 800766c:	08007e58 	.word	0x08007e58
 8007670:	43800000 	.word	0x43800000
 8007674:	3b800000 	.word	0x3b800000
 8007678:	00000000 	.word	0x00000000
 800767c:	4260      	negs	r0, r4
 800767e:	eeb0 0a48 	vmov.f32	s0, s16
 8007682:	f000 f981 	bl	8007988 <scalbnf>
 8007686:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007670 <__kernel_rem_pio2f+0x310>
 800768a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	db1a      	blt.n	80076ca <__kernel_rem_pio2f+0x36a>
 8007694:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007674 <__kernel_rem_pio2f+0x314>
 8007698:	ee60 7a27 	vmul.f32	s15, s0, s15
 800769c:	aa06      	add	r2, sp, #24
 800769e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a2:	a906      	add	r1, sp, #24
 80076a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a8:	3408      	adds	r4, #8
 80076aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80076ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076b6:	ee10 3a10 	vmov	r3, s0
 80076ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80076be:	1c6b      	adds	r3, r5, #1
 80076c0:	ee17 2a90 	vmov	r2, s15
 80076c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80076c8:	e73f      	b.n	800754a <__kernel_rem_pio2f+0x1ea>
 80076ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076ce:	aa06      	add	r2, sp, #24
 80076d0:	ee10 3a10 	vmov	r3, s0
 80076d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80076d8:	462b      	mov	r3, r5
 80076da:	e736      	b.n	800754a <__kernel_rem_pio2f+0x1ea>
 80076dc:	aa06      	add	r2, sp, #24
 80076de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80076e2:	9202      	str	r2, [sp, #8]
 80076e4:	ee07 2a90 	vmov	s15, r2
 80076e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ec:	3c01      	subs	r4, #1
 80076ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80076f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80076f6:	ed65 7a01 	vstmdb	r5!, {s15}
 80076fa:	e734      	b.n	8007566 <__kernel_rem_pio2f+0x206>
 80076fc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007700:	ecf7 6a01 	vldmia	r7!, {s13}
 8007704:	ed9c 7a00 	vldr	s14, [ip]
 8007708:	eee6 7a87 	vfma.f32	s15, s13, s14
 800770c:	3401      	adds	r4, #1
 800770e:	454c      	cmp	r4, r9
 8007710:	dc01      	bgt.n	8007716 <__kernel_rem_pio2f+0x3b6>
 8007712:	42a5      	cmp	r5, r4
 8007714:	daf2      	bge.n	80076fc <__kernel_rem_pio2f+0x39c>
 8007716:	aa56      	add	r2, sp, #344	; 0x158
 8007718:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800771c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007720:	3501      	adds	r5, #1
 8007722:	3804      	subs	r0, #4
 8007724:	e723      	b.n	800756e <__kernel_rem_pio2f+0x20e>
 8007726:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007728:	2a03      	cmp	r2, #3
 800772a:	d84d      	bhi.n	80077c8 <__kernel_rem_pio2f+0x468>
 800772c:	e8df f002 	tbb	[pc, r2]
 8007730:	021f1f3e 	.word	0x021f1f3e
 8007734:	aa56      	add	r2, sp, #344	; 0x158
 8007736:	4411      	add	r1, r2
 8007738:	399c      	subs	r1, #156	; 0x9c
 800773a:	4608      	mov	r0, r1
 800773c:	461c      	mov	r4, r3
 800773e:	2c00      	cmp	r4, #0
 8007740:	dc5f      	bgt.n	8007802 <__kernel_rem_pio2f+0x4a2>
 8007742:	4608      	mov	r0, r1
 8007744:	461c      	mov	r4, r3
 8007746:	2c01      	cmp	r4, #1
 8007748:	dc6b      	bgt.n	8007822 <__kernel_rem_pio2f+0x4c2>
 800774a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007678 <__kernel_rem_pio2f+0x318>
 800774e:	2b01      	cmp	r3, #1
 8007750:	dc77      	bgt.n	8007842 <__kernel_rem_pio2f+0x4e2>
 8007752:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007756:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800775a:	f1b8 0f00 	cmp.w	r8, #0
 800775e:	d176      	bne.n	800784e <__kernel_rem_pio2f+0x4ee>
 8007760:	edc6 6a00 	vstr	s13, [r6]
 8007764:	ed86 7a01 	vstr	s14, [r6, #4]
 8007768:	edc6 7a02 	vstr	s15, [r6, #8]
 800776c:	e02c      	b.n	80077c8 <__kernel_rem_pio2f+0x468>
 800776e:	aa56      	add	r2, sp, #344	; 0x158
 8007770:	4411      	add	r1, r2
 8007772:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007678 <__kernel_rem_pio2f+0x318>
 8007776:	399c      	subs	r1, #156	; 0x9c
 8007778:	4618      	mov	r0, r3
 800777a:	2800      	cmp	r0, #0
 800777c:	da32      	bge.n	80077e4 <__kernel_rem_pio2f+0x484>
 800777e:	f1b8 0f00 	cmp.w	r8, #0
 8007782:	d035      	beq.n	80077f0 <__kernel_rem_pio2f+0x490>
 8007784:	eef1 7a47 	vneg.f32	s15, s14
 8007788:	edc6 7a00 	vstr	s15, [r6]
 800778c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007794:	a82f      	add	r0, sp, #188	; 0xbc
 8007796:	2101      	movs	r1, #1
 8007798:	428b      	cmp	r3, r1
 800779a:	da2c      	bge.n	80077f6 <__kernel_rem_pio2f+0x496>
 800779c:	f1b8 0f00 	cmp.w	r8, #0
 80077a0:	d001      	beq.n	80077a6 <__kernel_rem_pio2f+0x446>
 80077a2:	eef1 7a67 	vneg.f32	s15, s15
 80077a6:	edc6 7a01 	vstr	s15, [r6, #4]
 80077aa:	e00d      	b.n	80077c8 <__kernel_rem_pio2f+0x468>
 80077ac:	aa56      	add	r2, sp, #344	; 0x158
 80077ae:	4411      	add	r1, r2
 80077b0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007678 <__kernel_rem_pio2f+0x318>
 80077b4:	399c      	subs	r1, #156	; 0x9c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da0e      	bge.n	80077d8 <__kernel_rem_pio2f+0x478>
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	d001      	beq.n	80077c4 <__kernel_rem_pio2f+0x464>
 80077c0:	eef1 7a67 	vneg.f32	s15, s15
 80077c4:	edc6 7a00 	vstr	s15, [r6]
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	f003 0007 	and.w	r0, r3, #7
 80077ce:	b057      	add	sp, #348	; 0x15c
 80077d0:	ecbd 8b04 	vpop	{d8-d9}
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	ed31 7a01 	vldmdb	r1!, {s14}
 80077dc:	3b01      	subs	r3, #1
 80077de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e2:	e7e8      	b.n	80077b6 <__kernel_rem_pio2f+0x456>
 80077e4:	ed71 7a01 	vldmdb	r1!, {s15}
 80077e8:	3801      	subs	r0, #1
 80077ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077ee:	e7c4      	b.n	800777a <__kernel_rem_pio2f+0x41a>
 80077f0:	eef0 7a47 	vmov.f32	s15, s14
 80077f4:	e7c8      	b.n	8007788 <__kernel_rem_pio2f+0x428>
 80077f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80077fa:	3101      	adds	r1, #1
 80077fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007800:	e7ca      	b.n	8007798 <__kernel_rem_pio2f+0x438>
 8007802:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007806:	ed70 6a01 	vldmdb	r0!, {s13}
 800780a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800780e:	3c01      	subs	r4, #1
 8007810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007814:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781c:	edc0 7a00 	vstr	s15, [r0]
 8007820:	e78d      	b.n	800773e <__kernel_rem_pio2f+0x3de>
 8007822:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007826:	ed70 6a01 	vldmdb	r0!, {s13}
 800782a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800782e:	3c01      	subs	r4, #1
 8007830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007834:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783c:	edc0 7a00 	vstr	s15, [r0]
 8007840:	e781      	b.n	8007746 <__kernel_rem_pio2f+0x3e6>
 8007842:	ed31 7a01 	vldmdb	r1!, {s14}
 8007846:	3b01      	subs	r3, #1
 8007848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800784c:	e77f      	b.n	800774e <__kernel_rem_pio2f+0x3ee>
 800784e:	eef1 6a66 	vneg.f32	s13, s13
 8007852:	eeb1 7a47 	vneg.f32	s14, s14
 8007856:	edc6 6a00 	vstr	s13, [r6]
 800785a:	ed86 7a01 	vstr	s14, [r6, #4]
 800785e:	eef1 7a67 	vneg.f32	s15, s15
 8007862:	e781      	b.n	8007768 <__kernel_rem_pio2f+0x408>

08007864 <__kernel_sinf>:
 8007864:	ee10 3a10 	vmov	r3, s0
 8007868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800786c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007870:	da04      	bge.n	800787c <__kernel_sinf+0x18>
 8007872:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007876:	ee17 3a90 	vmov	r3, s15
 800787a:	b35b      	cbz	r3, 80078d4 <__kernel_sinf+0x70>
 800787c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007880:	eddf 7a15 	vldr	s15, [pc, #84]	; 80078d8 <__kernel_sinf+0x74>
 8007884:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80078dc <__kernel_sinf+0x78>
 8007888:	eea7 6a27 	vfma.f32	s12, s14, s15
 800788c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80078e0 <__kernel_sinf+0x7c>
 8007890:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007894:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80078e4 <__kernel_sinf+0x80>
 8007898:	eea7 6a87 	vfma.f32	s12, s15, s14
 800789c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80078e8 <__kernel_sinf+0x84>
 80078a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80078a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078a8:	b930      	cbnz	r0, 80078b8 <__kernel_sinf+0x54>
 80078aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80078ec <__kernel_sinf+0x88>
 80078ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80078b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80078b6:	4770      	bx	lr
 80078b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80078bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80078c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80078c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80078c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80078f0 <__kernel_sinf+0x8c>
 80078cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80078d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80078dc:	b2d72f34 	.word	0xb2d72f34
 80078e0:	3638ef1b 	.word	0x3638ef1b
 80078e4:	b9500d01 	.word	0xb9500d01
 80078e8:	3c088889 	.word	0x3c088889
 80078ec:	be2aaaab 	.word	0xbe2aaaab
 80078f0:	3e2aaaab 	.word	0x3e2aaaab

080078f4 <fabsf>:
 80078f4:	ee10 3a10 	vmov	r3, s0
 80078f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078fc:	ee00 3a10 	vmov	s0, r3
 8007900:	4770      	bx	lr
	...

08007904 <floorf>:
 8007904:	ee10 3a10 	vmov	r3, s0
 8007908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800790c:	0dca      	lsrs	r2, r1, #23
 800790e:	3a7f      	subs	r2, #127	; 0x7f
 8007910:	2a16      	cmp	r2, #22
 8007912:	dc2a      	bgt.n	800796a <floorf+0x66>
 8007914:	2a00      	cmp	r2, #0
 8007916:	da11      	bge.n	800793c <floorf+0x38>
 8007918:	eddf 7a18 	vldr	s15, [pc, #96]	; 800797c <floorf+0x78>
 800791c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007920:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007928:	dd05      	ble.n	8007936 <floorf+0x32>
 800792a:	2b00      	cmp	r3, #0
 800792c:	da23      	bge.n	8007976 <floorf+0x72>
 800792e:	4a14      	ldr	r2, [pc, #80]	; (8007980 <floorf+0x7c>)
 8007930:	2900      	cmp	r1, #0
 8007932:	bf18      	it	ne
 8007934:	4613      	movne	r3, r2
 8007936:	ee00 3a10 	vmov	s0, r3
 800793a:	4770      	bx	lr
 800793c:	4911      	ldr	r1, [pc, #68]	; (8007984 <floorf+0x80>)
 800793e:	4111      	asrs	r1, r2
 8007940:	420b      	tst	r3, r1
 8007942:	d0fa      	beq.n	800793a <floorf+0x36>
 8007944:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800797c <floorf+0x78>
 8007948:	ee30 0a27 	vadd.f32	s0, s0, s15
 800794c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	ddef      	ble.n	8007936 <floorf+0x32>
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfbe      	ittt	lt
 800795a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800795e:	fa40 f202 	asrlt.w	r2, r0, r2
 8007962:	189b      	addlt	r3, r3, r2
 8007964:	ea23 0301 	bic.w	r3, r3, r1
 8007968:	e7e5      	b.n	8007936 <floorf+0x32>
 800796a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800796e:	d3e4      	bcc.n	800793a <floorf+0x36>
 8007970:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007974:	4770      	bx	lr
 8007976:	2300      	movs	r3, #0
 8007978:	e7dd      	b.n	8007936 <floorf+0x32>
 800797a:	bf00      	nop
 800797c:	7149f2ca 	.word	0x7149f2ca
 8007980:	bf800000 	.word	0xbf800000
 8007984:	007fffff 	.word	0x007fffff

08007988 <scalbnf>:
 8007988:	b508      	push	{r3, lr}
 800798a:	ee10 2a10 	vmov	r2, s0
 800798e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007992:	ed2d 8b02 	vpush	{d8}
 8007996:	eef0 0a40 	vmov.f32	s1, s0
 800799a:	d004      	beq.n	80079a6 <scalbnf+0x1e>
 800799c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80079a0:	d306      	bcc.n	80079b0 <scalbnf+0x28>
 80079a2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80079a6:	ecbd 8b02 	vpop	{d8}
 80079aa:	eeb0 0a60 	vmov.f32	s0, s1
 80079ae:	bd08      	pop	{r3, pc}
 80079b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079b4:	d21c      	bcs.n	80079f0 <scalbnf+0x68>
 80079b6:	4b1f      	ldr	r3, [pc, #124]	; (8007a34 <scalbnf+0xac>)
 80079b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a38 <scalbnf+0xb0>
 80079bc:	4298      	cmp	r0, r3
 80079be:	ee60 0a27 	vmul.f32	s1, s0, s15
 80079c2:	db10      	blt.n	80079e6 <scalbnf+0x5e>
 80079c4:	ee10 2a90 	vmov	r2, s1
 80079c8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80079cc:	3b19      	subs	r3, #25
 80079ce:	4403      	add	r3, r0
 80079d0:	2bfe      	cmp	r3, #254	; 0xfe
 80079d2:	dd0f      	ble.n	80079f4 <scalbnf+0x6c>
 80079d4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007a3c <scalbnf+0xb4>
 80079d8:	eeb0 0a48 	vmov.f32	s0, s16
 80079dc:	f000 f834 	bl	8007a48 <copysignf>
 80079e0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80079e4:	e7df      	b.n	80079a6 <scalbnf+0x1e>
 80079e6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a40 <scalbnf+0xb8>
 80079ea:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80079ee:	e7da      	b.n	80079a6 <scalbnf+0x1e>
 80079f0:	0ddb      	lsrs	r3, r3, #23
 80079f2:	e7ec      	b.n	80079ce <scalbnf+0x46>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd06      	ble.n	8007a06 <scalbnf+0x7e>
 80079f8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80079fc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007a00:	ee00 3a90 	vmov	s1, r3
 8007a04:	e7cf      	b.n	80079a6 <scalbnf+0x1e>
 8007a06:	f113 0f16 	cmn.w	r3, #22
 8007a0a:	da06      	bge.n	8007a1a <scalbnf+0x92>
 8007a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a10:	4298      	cmp	r0, r3
 8007a12:	dcdf      	bgt.n	80079d4 <scalbnf+0x4c>
 8007a14:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007a40 <scalbnf+0xb8>
 8007a18:	e7de      	b.n	80079d8 <scalbnf+0x50>
 8007a1a:	3319      	adds	r3, #25
 8007a1c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007a20:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007a24:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007a44 <scalbnf+0xbc>
 8007a28:	ee07 3a10 	vmov	s14, r3
 8007a2c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007a30:	e7b9      	b.n	80079a6 <scalbnf+0x1e>
 8007a32:	bf00      	nop
 8007a34:	ffff3cb0 	.word	0xffff3cb0
 8007a38:	4c000000 	.word	0x4c000000
 8007a3c:	7149f2ca 	.word	0x7149f2ca
 8007a40:	0da24260 	.word	0x0da24260
 8007a44:	33000000 	.word	0x33000000

08007a48 <copysignf>:
 8007a48:	ee10 3a10 	vmov	r3, s0
 8007a4c:	ee10 2a90 	vmov	r2, s1
 8007a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	ee00 3a10 	vmov	s0, r3
 8007a5e:	4770      	bx	lr

08007a60 <_init>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr

08007a6c <_fini>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr
