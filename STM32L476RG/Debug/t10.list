
t10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000587c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e1c  08005e1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e24  08005e24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08005e38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005e38  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e59  00000000  00000000  0002f907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00031760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026600  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8a9  00000000  00000000  00059888  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1e77  00000000  00000000  00064131  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  00156024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059ec 	.word	0x080059ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080059ec 	.word	0x080059ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f04f 0200 	mov.w	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f04f 0200 	mov.w	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f04f 0200 	mov.w	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f04f 0200 	mov.w	r2, #0
 8000518:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f04f 0200 	mov.w	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f04f 0200 	mov.w	r2, #0
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4abb      	ldr	r2, [pc, #748]	; (800084c <SVPWM_Update+0x2fc>)
 8000560:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000568:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000570:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8000850 <SVPWM_Update+0x300>
 8000574:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	ed93 7a02 	vldr	s14, [r3, #8]
 800057e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	691a      	ldr	r2, [r3, #16]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	ed93 7a03 	vldr	s14, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800059c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80005ac:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000854 <SVPWM_Update+0x304>
 80005b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b8:	db09      	blt.n	80005ce <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80005c0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8000854 <SVPWM_Update+0x304>
 80005c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80005dc:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8000854 <SVPWM_Update+0x304>
 80005e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005e4:	eeb0 0a67 	vmov.f32	s0, s15
 80005e8:	f004 fcb4 	bl	8004f54 <sinf>
 80005ec:	eeb0 7a40 	vmov.f32	s14, s0
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000610:	eeb0 0a67 	vmov.f32	s0, s15
 8000614:	f004 fc9e 	bl	8004f54 <sinf>
 8000618:	eeb0 7a40 	vmov.f32	s14, s0
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	edd3 7a02 	vldr	s15, [r3, #8]
 800062c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	ed93 7a02 	vldr	s14, [r3, #8]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800064c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000650:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	ed93 7a04 	vldr	s14, [r3, #16]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800066a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800066e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000676:	d518      	bpl.n	80006aa <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	edd3 7a05 	vldr	s15, [r3, #20]
 800067e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000682:	eef4 7a47 	vcmp.f32	s15, s14
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d104      	bne.n	8000696 <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f04f 0200 	mov.w	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	e009      	b.n	80006aa <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	edd3 7a05 	vldr	s15, [r3, #20]
 800069c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80006b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b8:	d11f      	bne.n	80006fa <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80006c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80006d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80006e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	621a      	str	r2, [r3, #32]
 80006f8:	e0d7      	b.n	80008aa <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000704:	eef4 7a47 	vcmp.f32	s15, s14
 8000708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070c:	d11f      	bne.n	800074e <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800071a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800073a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	621a      	str	r2, [r3, #32]
 800074c:	e0ad      	b.n	80008aa <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edd3 7a05 	vldr	s15, [r3, #20]
 8000754:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000758:	eef4 7a47 	vcmp.f32	s15, s14
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d11f      	bne.n	80007a2 <SVPWM_Update+0x252>
    	svm->U = svm->to;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	edc3 7a08 	vstr	s15, [r3, #32]
 80007a0:	e083      	b.n	80008aa <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80007a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80007ac:	eef4 7a47 	vcmp.f32	s15, s14
 80007b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b4:	d11f      	bne.n	80007f6 <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80007ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80007e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80007ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	edc3 7a08 	vstr	s15, [r3, #32]
 80007f4:	e059      	b.n	80008aa <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80007fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000800:	eef4 7a47 	vcmp.f32	s15, s14
 8000804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000808:	d126      	bne.n	8000858 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800083e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	edc3 7a08 	vstr	s15, [r3, #32]
 8000848:	e02f      	b.n	80008aa <SVPWM_Update+0x35a>
 800084a:	bf00      	nop
 800084c:	3f666666 	.word	0x3f666666
 8000850:	40c90fdb 	.word	0x40c90fdb
 8000854:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	edd3 7a05 	vldr	s15, [r3, #20]
 800085e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000862:	eef4 7a47 	vcmp.f32	s15, s14
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d11e      	bne.n	80008aa <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80008a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 6a06 	vldr	s13, [r3, #24]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80008b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <SVPWM_Update+0x3ec>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	3301      	adds	r3, #1
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <SVPWM_Update+0x3ec>)
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	ee17 2a90 	vmov	r2, s15
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	edd3 6a07 	vldr	s13, [r3, #28]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80008e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <SVPWM_Update+0x3ec>)
 80008ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ec:	3301      	adds	r3, #1
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <SVPWM_Update+0x3ec>)
 80008fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000900:	ee17 2a90 	vmov	r2, s15
 8000904:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	edd3 6a08 	vldr	s13, [r3, #32]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <SVPWM_Update+0x3ec>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	3301      	adds	r3, #1
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <SVPWM_Update+0x3ec>)
 800092a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092e:	ee17 2a90 	vmov	r2, s15
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40012c00 	.word	0x40012c00

08000940 <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6178      	str	r0, [r7, #20]
 8000948:	ed87 0a04 	vstr	s0, [r7, #16]
 800094c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000950:	ed87 1a02 	vstr	s2, [r7, #8]
 8000954:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8000970:	ed97 7a01 	vldr	s14, [r7, #4]
 8000974:	edd7 7a02 	vldr	s15, [r7, #8]
 8000978:	ee77 6a67 	vsub.f32	s13, s14, s15
 800097c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000980:	edd7 7a04 	vldr	s15, [r7, #16]
 8000984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	619a      	str	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	371c      	adds	r7, #28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c8:	d804      	bhi.n	80009d4 <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 80009d2:	e03b      	b.n	8000a4c <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e8:	dd20      	ble.n	8000a2c <VHZ_Update+0x80>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80009f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fe:	d815      	bhi.n	8000a2c <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	edd3 6a04 	vldr	s13, [r3, #16]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	ed93 6a06 	vldr	s12, [r3, #24]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000a2a:	e00f      	b.n	8000a4c <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a40:	dc00      	bgt.n	8000a44 <VHZ_Update+0x98>
}
 8000a42:	e003      	b.n	8000a4c <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	615a      	str	r2, [r3, #20]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8000a5c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000acc <main+0x74>
 8000a60:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <main+0x78>)
 8000a62:	f7ff fd31 	bl	80004c8 <SVPWM_Init>
  VHZ_Init(&vhz1, 0.001, 0.01, 10, 100);
 8000a66:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8000ad4 <main+0x7c>
 8000a6a:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000a6e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8000ad8 <main+0x80>
 8000a72:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000adc <main+0x84>
 8000a76:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <main+0x88>)
 8000a78:	f7ff ff62 	bl	8000940 <VHZ_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fc62 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f834 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fa04 	bl	8000e90 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a88:	f000 f8a6 	bl	8000bd8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000a8c:	f000 f97e 	bl	8000d8c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8000a90:	f000 f9ce 	bl	8000e30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a94:	2100      	movs	r1, #0
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0x8c>)
 8000a98:	f002 fb28 	bl	80030ec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <main+0x8c>)
 8000aa0:	f003 fb90 	bl	80041c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <main+0x8c>)
 8000aa8:	f002 fb20 	bl	80030ec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000aac:	2104      	movs	r1, #4
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <main+0x8c>)
 8000ab0:	f003 fb88 	bl	80041c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <main+0x8c>)
 8000ab8:	f002 fb18 	bl	80030ec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000abc:	2108      	movs	r1, #8
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <main+0x8c>)
 8000ac0:	f003 fb80 	bl	80041c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0x90>)
 8000ac6:	f002 fab1 	bl	800302c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <main+0x72>
 8000acc:	461c4000 	.word	0x461c4000
 8000ad0:	2000014c 	.word	0x2000014c
 8000ad4:	42c80000 	.word	0x42c80000
 8000ad8:	3c23d70a 	.word	0x3c23d70a
 8000adc:	3a83126f 	.word	0x3a83126f
 8000ae0:	20000070 	.word	0x20000070
 8000ae4:	2000008c 	.word	0x2000008c
 8000ae8:	20000030 	.word	0x20000030

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af6:	2244      	movs	r2, #68	; 0x44
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fa22 	bl	8004f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2288      	movs	r2, #136	; 0x88
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fa14 	bl	8004f44 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b42:	230a      	movs	r3, #10
 8000b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 ff9e 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b6a:	f000 fa49 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b90:	2104      	movs	r1, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fb6a 	bl	800226c <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b9e:	f000 fa2f 	bl	8001000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fd61 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bb8:	f000 fa22 	bl	8001000 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc0:	f000 ff18 	bl	80019f4 <HAL_PWREx_ControlVoltageScaling>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000bca:	f000 fa19 	bl	8001000 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	37e0      	adds	r7, #224	; 0xe0
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09e      	sub	sp, #120	; 0x78
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	222c      	movs	r2, #44	; 0x2c
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 f98e 	bl	8004f44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <MX_TIM1_Init+0x1b0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000c2e:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c30:	224f      	movs	r2, #79	; 0x4f
 8000c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000c34:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c36:	2260      	movs	r2, #96	; 0x60
 8000c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c3a:	4b52      	ldr	r3, [pc, #328]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c3c:	2263      	movs	r2, #99	; 0x63
 8000c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c46:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c52:	484c      	ldr	r0, [pc, #304]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c54:	f002 f9be 	bl	8002fd4 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c5e:	f000 f9cf 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4845      	ldr	r0, [pc, #276]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c70:	f002 fccc 	bl	800360c <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c7a:	f000 f9c1 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c7e:	4841      	ldr	r0, [pc, #260]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c80:	f002 f9fe 	bl	8003080 <HAL_TIM_PWM_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c8a:	f000 f9b9 	bl	8001000 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000c96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4839      	ldr	r0, [pc, #228]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000c9e:	f002 fd6e 	bl	800377e <HAL_TIM_SlaveConfigSynchro>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ca8:	f000 f9aa 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4831      	ldr	r0, [pc, #196]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000cc0:	f003 fab0 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cca:	f000 f999 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4824      	ldr	r0, [pc, #144]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000cf4:	f002 fb72 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cfe:	f000 f97f 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	2204      	movs	r2, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000d0c:	f002 fb66 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d16:	f000 f973 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1e:	2208      	movs	r2, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000d24:	f002 fb5a 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d2e:	f000 f967 	bl	8001000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 10;
 8000d3e:	230a      	movs	r3, #10
 8000d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000d68:	f003 fae4 	bl	8004334 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000d72:	f000 f945 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM1_Init+0x1ac>)
 8000d78:	f000 f9b0 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3778      	adds	r7, #120	; 0x78
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000008c 	.word	0x2000008c
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <MX_TIM15_Init+0xa0>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000db4:	224f      	movs	r2, #79	; 0x4f
 8000db6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dc0:	2263      	movs	r2, #99	; 0x63
 8000dc2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000dd8:	f002 f8fc 	bl	8002fd4 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000de2:	f000 f90d 	bl	8001000 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000df6:	f002 fcc2 	bl	800377e <HAL_TIM_SlaveConfigSynchro>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000e00:	f000 f8fe 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_TIM15_Init+0x9c>)
 8000e12:	f003 fa07 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000e1c:	f000 f8f0 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000030 	.word	0x20000030
 8000e2c:	40014000 	.word	0x40014000

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART2_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e74:	f003 fb1f 	bl	80044b6 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f8bf 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000cc 	.word	0x200000cc
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_GPIO_Init+0xc4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f000 fd4b 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_GPIO_Init+0xc8>)
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_GPIO_Init+0xcc>)
 8000f28:	f000 fb96 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fb87 	bl	8001658 <HAL_GPIO_Init>

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	10210000 	.word	0x10210000
 8000f5c:	48000800 	.word	0x48000800

08000f60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(a==1000){
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000fec <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000f72:	eef4 7a47 	vcmp.f32	s15, s14
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	d105      	bne.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f000 fd10 	bl	80019a8 <HAL_GPIO_WritePin>
	}
	OldSector = svpwm1.SectorPointer;
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f92:	ee17 2a90 	vmov	r2, s15
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f98:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f9c:	f7ff fd06 	bl	80009ac <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fa2:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fa6:	f7ff fad3 	bl	8000550 <SVPWM_Update>
	if(a==1000){
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000fec <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000fb4:	eef4 7a47 	vcmp.f32	s15, s14
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	d105      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fcef 	bl	80019a8 <HAL_GPIO_WritePin>
	}
	a = a+1;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000184 	.word	0x20000184
 8000fec:	447a0000 	.word	0x447a0000
 8000ff0:	2000014c 	.word	0x2000014c
 8000ff4:	20000028 	.word	0x20000028
 8000ff8:	20000070 	.word	0x20000070
 8000ffc:	2000008c 	.word	0x2000008c

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	; 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	; 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_TIM_Base_MspInit+0x78>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d114      	bne.n	8001094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 8001070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2018      	movs	r0, #24
 8001088:	f000 faaf 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800108c:	2018      	movs	r0, #24
 800108e:	f000 fac8 	bl	8001622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001092:	e018      	b.n	80010c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_TIM_Base_MspInit+0x80>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d113      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6613      	str	r3, [r2, #96]	; 0x60
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x7c>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2018      	movs	r0, #24
 80010bc:	f000 fa95 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80010c0:	2018      	movs	r0, #24
 80010c2:	f000 faae 	bl	8001622 <HAL_NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40012c00 	.word	0x40012c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40014000 	.word	0x40014000

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <HAL_TIM_MspPostInit+0xa0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d13a      	bne.n	8001174 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800112e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0xa8>)
 800114c:	f000 fa84 	bl	8001658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001150:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001162:	2301      	movs	r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 fa72 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d128      	bne.n	80011fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011da:	230c      	movs	r3, #12
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ea:	2307      	movs	r3, #7
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f000 fa2e 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40004400 	.word	0x40004400
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8ca 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800126e:	f001 ff95 	bl	800319c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001274:	f001 ff92 	bl	800319c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000008c 	.word	0x2000008c
 8001280:	20000030 	.word	0x20000030

08001284 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <SystemInit+0x64>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <SystemInit+0x64>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <SystemInit+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <SystemInit+0x68>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <SystemInit+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <SystemInit+0x68>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <SystemInit+0x68>)
 80012b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <SystemInit+0x68>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <SystemInit+0x68>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <SystemInit+0x68>)
 80012c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <SystemInit+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SystemInit+0x64>)
 80012d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012da:	609a      	str	r2, [r3, #8]
#endif
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	40021000 	.word	0x40021000

080012f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012f6:	e003      	b.n	8001300 <LoopCopyDataInit>

080012f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012fe:	3104      	adds	r1, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001304:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001306:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001308:	d3f6      	bcc.n	80012f8 <CopyDataInit>
	ldr	r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopForever+0x12>)
	b	LoopFillZerobss
 800130c:	e002      	b.n	8001314 <LoopFillZerobss>

0800130e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800130e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001310:	f842 3b04 	str.w	r3, [r2], #4

08001314 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <LoopForever+0x16>)
	cmp	r2, r3
 8001316:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001318:	d3f9      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131a:	f7ff ffb3 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 fded 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001322:	f7ff fb99 	bl	8000a58 <main>

08001326 <LoopForever>:

LoopForever:
    b LoopForever
 8001326:	e7fe      	b.n	8001326 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001328:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800132c:	08005e2c 	.word	0x08005e2c
	ldr	r0, =_sdata
 8001330:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001334:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001338:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800133c:	2000018c 	.word	0x2000018c

08001340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC1_2_IRQHandler>
	...

08001344 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_Init+0x3c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x3c>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135a:	2003      	movs	r0, #3
 800135c:	f000 f93a 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001360:	2000      	movs	r0, #0
 8001362:	f000 f80f 	bl	8001384 <HAL_InitTick>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	e001      	b.n	8001376 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001372:	f7ff fe4d 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001376:	79fb      	ldrb	r3, [r7, #7]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_InitTick+0x6c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f946 	bl	800163e <HAL_SYSTICK_Config>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f000 f910 	bl	80015ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x70>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x1c>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000188 	.word	0x20000188
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000188 	.word	0x20000188

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f7ff ff8e 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff29 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015fc:	f7ff ff3e 	bl	800147c <__NVIC_GetPriorityGrouping>
 8001600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7ff ff8e 	bl	8001528 <NVIC_EncodePriority>
 800160c:	4602      	mov	r2, r0
 800160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff5d 	bl	80014d4 <__NVIC_SetPriority>
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff31 	bl	8001498 <__NVIC_EnableIRQ>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffa2 	bl	8001590 <SysTick_Config>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e17f      	b.n	8001968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8171 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d00b      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	2b11      	cmp	r3, #17
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b12      	cmp	r3, #18
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d118      	bne.n	8001740 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x128>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	6939      	ldr	r1, [r7, #16]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ac 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_GPIO_Init+0x32c>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_GPIO_Init+0x32c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_GPIO_Init+0x32c>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001822:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x242>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_GPIO_Init+0x334>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x23e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x338>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x23a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <HAL_GPIO_Init+0x33c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x236>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_GPIO_Init+0x340>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x232>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x344>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x22e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x348>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x22a>
 800187e:	2306      	movs	r3, #6
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001882:	2307      	movs	r3, #7
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x244>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_GPIO_Init+0x330>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae78 	bne.w	8001668 <HAL_GPIO_Init+0x10>
  }
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	48001000 	.word	0x48001000
 800199c:	48001400 	.word	0x48001400
 80019a0:	48001800 	.word	0x48001800
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40007000 	.word	0x40007000

080019f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a02:	d130      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a10:	d038      	beq.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2232      	movs	r2, #50	; 0x32
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	3301      	adds	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a38:	e002      	b.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d102      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f2      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d110      	bne.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e00f      	b.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d007      	beq.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3d4      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab2:	4ba1      	ldr	r3, [pc, #644]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001abc:	4b9e      	ldr	r3, [pc, #632]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80e4 	beq.w	8001c9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_RCC_OscConfig+0x4a>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	f040 808b 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	f040 8087 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aea:	4b93      	ldr	r3, [pc, #588]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3ac      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_RCC_OscConfig+0x7c>
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1a:	e005      	b.n	8001b28 <HAL_RCC_OscConfig+0x88>
 8001b1c:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d223      	bcs.n	8001b74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fd3f 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e38d      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	4b7d      	ldr	r3, [pc, #500]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7c      	ldr	r2, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4977      	ldr	r1, [pc, #476]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	4972      	ldr	r1, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
 8001b72:	e025      	b.n	8001bc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b74:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	496a      	ldr	r1, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b92:	4b69      	ldr	r3, [pc, #420]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4965      	ldr	r1, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fcff 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e34d      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc0:	f000 fc36 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x29c>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa21 f303 	lsr.w	r3, r1, r3
 8001bdc:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <HAL_RCC_OscConfig+0x2a0>)
 8001bde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x2a4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fbcd 	bl	8001384 <HAL_InitTick>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d052      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	e331      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d032      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc06 	bl	800141c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c14:	f7ff fc02 	bl	800141c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e31a      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	493b      	ldr	r1, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e01a      	b.n	8001c9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fbd3 	bl	800141c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fbcf 	bl	800141c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e2e7      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1da>
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d074      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x21a>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b0c      	cmp	r3, #12
 8001cb2:	d10e      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d064      	beq.n	8001d90 <HAL_RCC_OscConfig+0x2f0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d160      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e2c4      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x24a>
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e01d      	b.n	8001d26 <HAL_RCC_OscConfig+0x286>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf2:	d10c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x26e>
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e00b      	b.n	8001d26 <HAL_RCC_OscConfig+0x286>
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_RCC_OscConfig+0x298>)
 8001d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb75 	bl	800141c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d34:	e011      	b.n	8001d5a <HAL_RCC_OscConfig+0x2ba>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08005a04 	.word	0x08005a04
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fb68 	bl	800141c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e280      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	4baf      	ldr	r3, [pc, #700]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x2a8>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fb58 	bl	800141c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb54 	bl	800141c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e26c      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	4ba5      	ldr	r3, [pc, #660]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2d0>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d060      	beq.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x310>
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d119      	bne.n	8001dde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d116      	bne.n	8001dde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x328>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e249      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b93      	ldr	r3, [pc, #588]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	4990      	ldr	r1, [pc, #576]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ddc:	e040      	b.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d023      	beq.n	8001e2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de6:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a8b      	ldr	r2, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff fb13 	bl	800141c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb0f 	bl	800141c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e227      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	497c      	ldr	r1, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e018      	b.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a79      	ldr	r2, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff faef 	bl	800141c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff faeb 	bl	800141c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e203      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff faca 	bl	800141c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fac6 	bl	800141c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1de      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3ec>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eae:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff faad 	bl	800141c <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7ff faa9 	bl	800141c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1c1      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a6 	beq.w	8002040 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10d      	bne.n	8001f20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a43      	ldr	r2, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_OscConfig+0x57c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d118      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_RCC_OscConfig+0x57c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a3a      	ldr	r2, [pc, #232]	; (800201c <HAL_RCC_OscConfig+0x57c>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fa70 	bl	800141c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7ff fa6c 	bl	800141c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e184      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_RCC_OscConfig+0x57c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4d8>
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f76:	e024      	b.n	8001fc2 <HAL_RCC_OscConfig+0x522>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d110      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x502>
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a24      	ldr	r2, [pc, #144]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa0:	e00f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x522>
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa27 	bl	800141c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa23 	bl	800141c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e139      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x578>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ed      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x532>
 8001ff6:	e01a      	b.n	800202e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fa10 	bl	800141c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff fa0c 	bl	800141c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d906      	bls.n	8002020 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e122      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002020:	4b90      	ldr	r3, [pc, #576]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e8      	bne.n	8002000 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800202e:	7ffb      	ldrb	r3, [r7, #31]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002034:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 800203a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8108 	beq.w	800225a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	2b02      	cmp	r3, #2
 8002050:	f040 80d0 	bne.w	80021f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	429a      	cmp	r2, r3
 8002066:	d130      	bne.n	80020ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	3b01      	subs	r3, #1
 8002074:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d127      	bne.n	80020ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d11f      	bne.n	80020ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002094:	2a07      	cmp	r2, #7
 8002096:	bf14      	ite	ne
 8002098:	2201      	movne	r2, #1
 800209a:	2200      	moveq	r2, #0
 800209c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	4293      	cmp	r3, r2
 80020a0:	d113      	bne.n	80020ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	3b01      	subs	r3, #1
 80020b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d06e      	beq.n	80021a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d069      	beq.n	80021a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020d0:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b7      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020ec:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f8:	f7ff f990 	bl	800141c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff f98c 	bl	800141c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0a4      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	4b54      	ldr	r3, [pc, #336]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x7c8>)
 8002124:	4013      	ands	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800212e:	3a01      	subs	r2, #1
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002138:	0212      	lsls	r2, r2, #8
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002140:	0852      	lsrs	r2, r2, #1
 8002142:	3a01      	subs	r2, #1
 8002144:	0552      	lsls	r2, r2, #21
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800214c:	0852      	lsrs	r2, r2, #1
 800214e:	3a01      	subs	r2, #1
 8002150:	0652      	lsls	r2, r2, #25
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002158:	0912      	lsrs	r2, r2, #4
 800215a:	0452      	lsls	r2, r2, #17
 800215c:	430a      	orrs	r2, r1
 800215e:	4941      	ldr	r1, [pc, #260]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3e      	ldr	r2, [pc, #248]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800217c:	f7ff f94e 	bl	800141c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f94a 	bl	800141c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e062      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a2:	e05a      	b.n	800225a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e059      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d152      	bne.n	800225a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021cc:	f7ff f926 	bl	800141c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff f922 	bl	800141c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e03a      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x734>
 80021f2:	e032      	b.n	800225a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d02d      	beq.n	8002256 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002204:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 8002224:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f8f5 	bl	800141c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff f8f1 	bl	800141c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e009      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x7c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x796>
 8002254:	e001      	b.n	800225a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	f99d808c 	.word	0xf99d808c

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0c8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4961      	ldr	r1, [pc, #388]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b0      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d04c      	beq.n	8002356 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d121      	bne.n	8002314 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e09e      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d115      	bne.n	8002314 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e092      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e086      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e07e      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 0203 	bic.w	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	493f      	ldr	r1, [pc, #252]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002326:	f7ff f879 	bl	800141c <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232c:	e00a      	b.n	8002344 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7ff f875 	bl	800141c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e066      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 020c 	and.w	r2, r3, #12
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	429a      	cmp	r2, r3
 8002354:	d1eb      	bne.n	800232e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	492c      	ldr	r1, [pc, #176]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d210      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 0207 	bic.w	r2, r3, #7
 800238a:	4924      	ldr	r1, [pc, #144]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_RCC_ClockConfig+0x1b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e036      	b.n	8002412 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4918      	ldr	r1, [pc, #96]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4910      	ldr	r1, [pc, #64]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 f825 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa21 f303 	lsr.w	r3, r1, r3
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ffbc 	bl	8001384 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
 800240e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002410:	7afb      	ldrb	r3, [r7, #11]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
 8002424:	08005a04 	.word	0x08005a04
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e005      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e004      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d133      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0xaa>
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024d6:	617b      	str	r3, [r7, #20]
      break;
 80024d8:	e005      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024dc:	617b      	str	r3, [r7, #20]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	617b      	str	r3, [r7, #20]
      break;
 80024e4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	3301      	adds	r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	fb02 f203 	mul.w	r2, r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0e5b      	lsrs	r3, r3, #25
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002526:	69bb      	ldr	r3, [r7, #24]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	08005a1c 	.word	0x08005a1c
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4601      	mov	r1, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	08005a14 	.word	0x08005a14

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258c:	f7ff ffda 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002590:	4601      	mov	r1, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08005a14 	.word	0x08005a14

080025b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025cc:	f7ff fa04 	bl	80019d8 <HAL_PWREx_GetVoltageRange>
 80025d0:	6178      	str	r0, [r7, #20]
 80025d2:	e014      	b.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
 80025e0:	4b22      	ldr	r3, [pc, #136]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ec:	f7ff f9f4 	bl	80019d8 <HAL_PWREx_GetVoltageRange>
 80025f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002604:	d10b      	bne.n	800261e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d919      	bls.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2ba0      	cmp	r3, #160	; 0xa0
 8002610:	d902      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002612:	2302      	movs	r3, #2
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e013      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002618:	2301      	movs	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e010      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d902      	bls.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002624:	2303      	movs	r3, #3
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e00a      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d102      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e004      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b70      	cmp	r3, #112	; 0x70
 800263a:	d101      	bne.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	4909      	ldr	r1, [pc, #36]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002680:	2300      	movs	r3, #0
 8002682:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002698:	d01c      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d802      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026a4:	e01f      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026aa:	d003      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b0:	d01c      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026b2:	e018      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b4:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a84      	ldr	r2, [pc, #528]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c0:	e015      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fab9 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d2:	e00c      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3320      	adds	r3, #32
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fba0 	bl	8002e20 <RCCEx_PLLSAI2_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e4:	e003      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ea:	e000      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002702:	4972      	ldr	r1, [pc, #456]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800270a:	e001      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03f      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002724:	d01c      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272a:	d802      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00e      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002730:	e01f      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002736:	d003      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800273c:	d01c      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800273e:	e018      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002740:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274c:	e015      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa73 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800275e:	e00c      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3320      	adds	r3, #32
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fb5a 	bl	8002e20 <RCCEx_PLLSAI2_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002770:	e003      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	74fb      	strb	r3, [r7, #19]
      break;
 8002776:	e000      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278e:	494f      	ldr	r1, [pc, #316]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002796:	e001      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a0 	beq.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fe16 	bl	800141c <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f2:	e009      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fe fe12 	bl	800141c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	74fb      	strb	r3, [r7, #19]
        break;
 8002806:	e005      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d15c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002824:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d019      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fdd1 	bl	800141c <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e00b      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fdcd 	bl	800141c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d902      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	74fb      	strb	r3, [r7, #19]
            break;
 8002894:	e006      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ec      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ba:	4904      	ldr	r1, [pc, #16]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c2:	e009      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d8:	7c7b      	ldrb	r3, [r7, #17]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a9d      	ldr	r2, [pc, #628]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f6:	4b98      	ldr	r3, [pc, #608]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 0203 	bic.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	4994      	ldr	r1, [pc, #592]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002918:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 020c 	bic.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	498c      	ldr	r1, [pc, #560]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4983      	ldr	r1, [pc, #524]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800295c:	4b7e      	ldr	r3, [pc, #504]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	497b      	ldr	r1, [pc, #492]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	4972      	ldr	r1, [pc, #456]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	496a      	ldr	r1, [pc, #424]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	4961      	ldr	r1, [pc, #388]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e4:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	4959      	ldr	r1, [pc, #356]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	4950      	ldr	r1, [pc, #320]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	4948      	ldr	r1, [pc, #288]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	493f      	ldr	r1, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d028      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	4937      	ldr	r1, [pc, #220]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a31      	ldr	r2, [pc, #196]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
 8002a98:	e011      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f8c8 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	491f      	ldr	r1, [pc, #124]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af4:	60d3      	str	r3, [r2, #12]
 8002af6:	e011      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	2101      	movs	r1, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f899 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02b      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b46:	d109      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a02      	ldr	r2, [pc, #8]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b52:	60d3      	str	r3, [r2, #12]
 8002b54:	e014      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f867 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02f      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	4928      	ldr	r1, [pc, #160]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f844 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d014      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	74bb      	strb	r3, [r7, #18]
 8002bc6:	e011      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f921 	bl	8002e20 <RCCEx_PLLSAI2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2a:	4904      	ldr	r1, [pc, #16]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c32:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000

08002c40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d018      	beq.n	8002c8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c5a:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d10d      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
       ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d044      	beq.n	8002d10 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e041      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d00c      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x6e>
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d013      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x80>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d120      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c9c:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11d      	bne.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e01a      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e013      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cc0:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cdc:	e006      	b.n	8002cec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce2:	e004      	b.n	8002cee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cec:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cf4:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	4944      	ldr	r1, [pc, #272]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d17d      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a40      	ldr	r2, [pc, #256]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe fb7b 	bl	800141c <HAL_GetTick>
 8002d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d28:	e009      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d2a:	f7fe fb77 	bl	800141c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d902      	bls.n	8002d3e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	73fb      	strb	r3, [r7, #15]
        break;
 8002d3c:	e005      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d160      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d111      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	0211      	lsls	r1, r2, #8
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68d2      	ldr	r2, [r2, #12]
 8002d6c:	0912      	lsrs	r2, r2, #4
 8002d6e:	0452      	lsls	r2, r2, #17
 8002d70:	430a      	orrs	r2, r1
 8002d72:	492a      	ldr	r1, [pc, #168]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
 8002d78:	e027      	b.n	8002dca <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d112      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6892      	ldr	r2, [r2, #8]
 8002d90:	0211      	lsls	r1, r2, #8
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6912      	ldr	r2, [r2, #16]
 8002d96:	0852      	lsrs	r2, r2, #1
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0552      	lsls	r2, r2, #21
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	491f      	ldr	r1, [pc, #124]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	610b      	str	r3, [r1, #16]
 8002da4:	e011      	b.n	8002dca <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	0211      	lsls	r1, r2, #8
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6952      	ldr	r2, [r2, #20]
 8002dbc:	0852      	lsrs	r2, r2, #1
 8002dbe:	3a01      	subs	r2, #1
 8002dc0:	0652      	lsls	r2, r2, #25
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	4915      	ldr	r1, [pc, #84]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fb21 	bl	800141c <HAL_GetTick>
 8002dda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ddc:	e009      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dde:	f7fe fb1d 	bl	800141c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d902      	bls.n	8002df2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	73fb      	strb	r3, [r7, #15]
          break;
 8002df0:	e005      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ef      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2e:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d018      	beq.n	8002e6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d10d      	bne.n	8002e66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
       ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d044      	beq.n	8002ef0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e041      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d00c      	beq.n	8002e8e <RCCEx_PLLSAI2_Config+0x6e>
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d013      	beq.n	8002ea0 <RCCEx_PLLSAI2_Config+0x80>
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d120      	bne.n	8002ebe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7c:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11d      	bne.n	8002ec4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e01a      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e8e:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9e:	e013      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eac:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebc:	e006      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec2:	e004      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec4:	bf00      	nop
 8002ec6:	e002      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ec8:	bf00      	nop
 8002eca:	e000      	b.n	8002ece <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ecc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	4939      	ldr	r1, [pc, #228]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d167      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f02:	f7fe fa8b 	bl	800141c <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f08:	e009      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0a:	f7fe fa87 	bl	800141c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d902      	bls.n	8002f1e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1c:	e005      	b.n	8002f2a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ef      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d14a      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d111      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6892      	ldr	r2, [r2, #8]
 8002f46:	0211      	lsls	r1, r2, #8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68d2      	ldr	r2, [r2, #12]
 8002f4c:	0912      	lsrs	r2, r2, #4
 8002f4e:	0452      	lsls	r2, r2, #17
 8002f50:	430a      	orrs	r2, r1
 8002f52:	491f      	ldr	r1, [pc, #124]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	614b      	str	r3, [r1, #20]
 8002f58:	e011      	b.n	8002f7e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6892      	ldr	r2, [r2, #8]
 8002f6a:	0211      	lsls	r1, r2, #8
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6912      	ldr	r2, [r2, #16]
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0652      	lsls	r2, r2, #25
 8002f76:	430a      	orrs	r2, r1
 8002f78:	4915      	ldr	r1, [pc, #84]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fa47 	bl	800141c <HAL_GetTick>
 8002f8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f90:	e009      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f92:	f7fe fa43 	bl	800141c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d902      	bls.n	8002fa6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa4:	e005      	b.n	8002fb2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ef      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4903      	ldr	r1, [pc, #12]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01d      	b.n	8003022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f82c 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 fc1e 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_TIM_Base_Start_IT+0x50>)
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b06      	cmp	r3, #6
 8003054:	d00b      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x42>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d007      	beq.n	800306e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	00010007 	.word	0x00010007

08003080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e01d      	b.n	80030ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f815 	bl	80030d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fbc8 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f83a 	bl	8004178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_TIM_PWM_Start+0x98>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_TIM_PWM_Start+0x4a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_TIM_PWM_Start+0x9c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIM_PWM_Start+0x4a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_TIM_PWM_Start+0xa0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_TIM_PWM_Start+0x4a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <HAL_TIM_PWM_Start+0xa4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIM_PWM_Start+0x4a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_PWM_Start+0xa8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_Start+0x4e>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_TIM_PWM_Start+0x50>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_TIM_PWM_Start+0xac>)
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b06      	cmp	r3, #6
 8003160:	d00b      	beq.n	800317a <HAL_TIM_PWM_Start+0x8e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d007      	beq.n	800317a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40013400 	.word	0x40013400
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800
 8003198:	00010007 	.word	0x00010007

0800319c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0202 	mvn.w	r2, #2
 80031c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb19 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fb0b 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb1c 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 faef 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fae1 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 faf2 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0208 	mvn.w	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fac5 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fab7 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fac8 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa9b 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa8d 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fa9e 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fe20 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f001 f87c 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335a:	d10e      	bne.n	800337a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d107      	bne.n	800337a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 f86f 	bl	8004458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d10e      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800339e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa4c 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d10e      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d107      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f06f 0220 	mvn.w	r2, #32
 80033ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f001 f82f 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e105      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x226>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b14      	cmp	r3, #20
 800340a:	f200 80f0 	bhi.w	80035ee <HAL_TIM_PWM_ConfigChannel+0x212>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003469 	.word	0x08003469
 8003418:	080035ef 	.word	0x080035ef
 800341c:	080035ef 	.word	0x080035ef
 8003420:	080035ef 	.word	0x080035ef
 8003424:	080034a9 	.word	0x080034a9
 8003428:	080035ef 	.word	0x080035ef
 800342c:	080035ef 	.word	0x080035ef
 8003430:	080035ef 	.word	0x080035ef
 8003434:	080034eb 	.word	0x080034eb
 8003438:	080035ef 	.word	0x080035ef
 800343c:	080035ef 	.word	0x080035ef
 8003440:	080035ef 	.word	0x080035ef
 8003444:	0800352b 	.word	0x0800352b
 8003448:	080035ef 	.word	0x080035ef
 800344c:	080035ef 	.word	0x080035ef
 8003450:	080035ef 	.word	0x080035ef
 8003454:	0800356d 	.word	0x0800356d
 8003458:	080035ef 	.word	0x080035ef
 800345c:	080035ef 	.word	0x080035ef
 8003460:	080035ef 	.word	0x080035ef
 8003464:	080035ad 	.word	0x080035ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa8a 	bl	8003988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0204 	bic.w	r2, r2, #4
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	619a      	str	r2, [r3, #24]
      break;
 80034a6:	e0a3      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fafa 	bl	8003aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
      break;
 80034e8:	e082      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb63 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0208 	orr.w	r2, r2, #8
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0204 	bic.w	r2, r2, #4
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	61da      	str	r2, [r3, #28]
      break;
 8003528:	e062      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fbcb 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	61da      	str	r2, [r3, #28]
      break;
 800356a:	e041      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc14 	bl	8003da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035aa:	e021      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc58 	bl	8003e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035ec:	e000      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80035ee:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIM_ConfigClockSource+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e0a8      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x16a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d067      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x124>
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d80b      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x70>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d073      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x144>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d802      	bhi.n	8003672 <HAL_TIM_ConfigClockSource+0x66>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06f      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003670:	e078      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003672:	2b20      	cmp	r3, #32
 8003674:	d06c      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x144>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d06a      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800367a:	e073      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d00d      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x90>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d804      	bhi.n	800368e <HAL_TIM_ConfigClockSource+0x82>
 8003684:	2b50      	cmp	r3, #80	; 0x50
 8003686:	d033      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xe4>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d041      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800368c:	e06a      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d066      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x156>
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d017      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800369a:	e063      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 fd44 	bl	8004138 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]
      break;
 80036c8:	e04c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f000 fd2d 	bl	8004138 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e039      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 fca1 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2150      	movs	r1, #80	; 0x50
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fcfa 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 800370e:	e029      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	461a      	mov	r2, r3
 800371e:	f000 fcc0 	bl	80040a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2160      	movs	r1, #96	; 0x60
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fcea 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 800372e:	e019      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 fc81 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fcda 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 800374e:	e009      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fcd1 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003792:	2302      	movs	r3, #2
 8003794:	e031      	b.n	80037fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fbc3 	bl	8003f34 <TIM_SlaveTimer_SetConfig>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e018      	b.n	80037fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a40      	ldr	r2, [pc, #256]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <TIM_Base_SetConfig+0x118>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <TIM_Base_SetConfig+0x120>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_Base_SetConfig+0x114>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d01b      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	; (800396c <TIM_Base_SetConfig+0x118>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d017      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2b      	ldr	r2, [pc, #172]	; (8003970 <TIM_Base_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0x124>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <TIM_Base_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a11      	ldr	r2, [pc, #68]	; (800397c <TIM_Base_SetConfig+0x128>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <TIM_Base_SetConfig+0x12c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <TIM_Base_SetConfig+0x130>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800

08003988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 0302 	bic.w	r3, r3, #2
 80039d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <TIM_OC1_SetConfig+0x10c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00f      	beq.n	8003a08 <TIM_OC1_SetConfig+0x80>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <TIM_OC1_SetConfig+0x110>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_OC1_SetConfig+0x80>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <TIM_OC1_SetConfig+0x114>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_OC1_SetConfig+0x80>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <TIM_OC1_SetConfig+0x118>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC1_SetConfig+0x80>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <TIM_OC1_SetConfig+0x11c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0308 	bic.w	r3, r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <TIM_OC1_SetConfig+0x10c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00f      	beq.n	8003a4a <TIM_OC1_SetConfig+0xc2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <TIM_OC1_SetConfig+0x110>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_OC1_SetConfig+0xc2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_OC1_SetConfig+0x114>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_OC1_SetConfig+0xc2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <TIM_OC1_SetConfig+0x118>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC1_SetConfig+0xc2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <TIM_OC1_SetConfig+0x11c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	621a      	str	r2, [r3, #32]
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0210 	bic.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0320 	bic.w	r3, r3, #32
 8003af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <TIM_OC2_SetConfig+0x100>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC2_SetConfig+0x6c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a27      	ldr	r2, [pc, #156]	; (8003bac <TIM_OC2_SetConfig+0x104>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10d      	bne.n	8003b30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <TIM_OC2_SetConfig+0x100>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_OC2_SetConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <TIM_OC2_SetConfig+0x104>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_OC2_SetConfig+0xb0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <TIM_OC2_SetConfig+0x108>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_OC2_SetConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <TIM_OC2_SetConfig+0x10c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC2_SetConfig+0xb0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <TIM_OC2_SetConfig+0x110>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d113      	bne.n	8003b80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <TIM_OC3_SetConfig+0xfc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC3_SetConfig+0x6a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <TIM_OC3_SetConfig+0x100>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <TIM_OC3_SetConfig+0xfc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00f      	beq.n	8003c6a <TIM_OC3_SetConfig+0xae>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <TIM_OC3_SetConfig+0x100>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_OC3_SetConfig+0xae>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <TIM_OC3_SetConfig+0x104>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_OC3_SetConfig+0xae>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <TIM_OC3_SetConfig+0x108>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC3_SetConfig+0xae>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <TIM_OC3_SetConfig+0x10c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d113      	bne.n	8003c92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <TIM_OC4_SetConfig+0xc0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_OC4_SetConfig+0x84>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <TIM_OC4_SetConfig+0xc4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_OC4_SetConfig+0x84>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <TIM_OC4_SetConfig+0xc8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC4_SetConfig+0x84>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <TIM_OC4_SetConfig+0xcc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC4_SetConfig+0x84>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <TIM_OC4_SetConfig+0xd0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40013400 	.word	0x40013400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800

08003da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <TIM_OC5_SetConfig+0xb4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_OC5_SetConfig+0x7a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <TIM_OC5_SetConfig+0xb8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_OC5_SetConfig+0x7a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <TIM_OC5_SetConfig+0xbc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_OC5_SetConfig+0x7a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <TIM_OC5_SetConfig+0xc0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_OC5_SetConfig+0x7a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <TIM_OC5_SetConfig+0xc4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d109      	bne.n	8003e2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40013400 	.word	0x40013400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800

08003e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	051b      	lsls	r3, r3, #20
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <TIM_OC6_SetConfig+0xb8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_OC6_SetConfig+0x7c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <TIM_OC6_SetConfig+0xbc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC6_SetConfig+0x7c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <TIM_OC6_SetConfig+0xc0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC6_SetConfig+0x7c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <TIM_OC6_SetConfig+0xc4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC6_SetConfig+0x7c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <TIM_OC6_SetConfig+0xc8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d109      	bne.n	8003ef8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	029b      	lsls	r3, r3, #10
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b30      	cmp	r3, #48	; 0x30
 8003f7c:	d05c      	beq.n	8004038 <TIM_SlaveTimer_SetConfig+0x104>
 8003f7e:	2b30      	cmp	r3, #48	; 0x30
 8003f80:	d806      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x5c>
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d058      	beq.n	8004038 <TIM_SlaveTimer_SetConfig+0x104>
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d056      	beq.n	8004038 <TIM_SlaveTimer_SetConfig+0x104>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d054      	beq.n	8004038 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003f8e:	e054      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003f90:	2b50      	cmp	r3, #80	; 0x50
 8003f92:	d03d      	beq.n	8004010 <TIM_SlaveTimer_SetConfig+0xdc>
 8003f94:	2b50      	cmp	r3, #80	; 0x50
 8003f96:	d802      	bhi.n	8003f9e <TIM_SlaveTimer_SetConfig+0x6a>
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d010      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8003f9c:	e04d      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003f9e:	2b60      	cmp	r3, #96	; 0x60
 8003fa0:	d040      	beq.n	8004024 <TIM_SlaveTimer_SetConfig+0xf0>
 8003fa2:	2b70      	cmp	r3, #112	; 0x70
 8003fa4:	d000      	beq.n	8003fa8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8003fa6:	e048      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68d9      	ldr	r1, [r3, #12]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f000 f8be 	bl	8004138 <TIM_ETR_SetConfig>
      break;
 8003fbc:	e03d      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d101      	bne.n	8003fca <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e038      	b.n	800403c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
      break;
 800400e:	e014      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6899      	ldr	r1, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	461a      	mov	r2, r3
 800401e:	f000 f811 	bl	8004044 <TIM_TI1_ConfigInputStage>
      break;
 8004022:	e00a      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f836 	bl	80040a2 <TIM_TI2_ConfigInputStage>
      break;
 8004036:	e000      	b.n	800403a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8004038:	bf00      	nop
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 030a 	bic.w	r3, r3, #10
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0210 	bic.w	r2, r3, #16
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	f043 0307 	orr.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2201      	movs	r2, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1a      	ldr	r2, [r3, #32]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	43db      	mvns	r3, r3
 800419a:	401a      	ands	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2204      	movs	r2, #4
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f948 	bl	800446c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_TIMEx_PWMN_Start+0x5c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d00b      	beq.n	8004216 <HAL_TIMEx_PWMN_Start+0x52>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d007      	beq.n	8004216 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010007 	.word	0x00010007

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e068      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2d      	ldr	r2, [pc, #180]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d018      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40014000 	.word	0x40014000

08004334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e065      	b.n	800441c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	; (8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d115      	bne.n	800440a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	051b      	lsls	r3, r3, #20
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2204      	movs	r2, #4
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1a      	ldr	r2, [r3, #32]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e040      	b.n	800454a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fc fe55 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2224      	movs	r2, #36	; 0x24
 80044e2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f82d 	bl	8004554 <UART_SetConfig>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e022      	b.n	800454a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fb93 	bl	8004c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004530:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fc1a 	bl	8004d7c <UART_CheckIdleState>
 8004548:	4603      	mov	r3, r0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004558:	b08a      	sub	sp, #40	; 0x28
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4313      	orrs	r3, r2
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4bb8      	ldr	r3, [pc, #736]	; (800486c <UART_SetConfig+0x318>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004592:	430b      	orrs	r3, r1
 8004594:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4aae      	ldr	r2, [pc, #696]	; (8004870 <UART_SetConfig+0x31c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	4313      	orrs	r3, r2
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4aa5      	ldr	r2, [pc, #660]	; (8004874 <UART_SetConfig+0x320>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d126      	bne.n	8004632 <UART_SetConfig+0xde>
 80045e4:	4ba4      	ldr	r3, [pc, #656]	; (8004878 <UART_SetConfig+0x324>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d81a      	bhi.n	8004628 <UART_SetConfig+0xd4>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0xa4>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004611 	.word	0x08004611
 8004604:	08004621 	.word	0x08004621
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e105      	b.n	800481c <UART_SetConfig+0x2c8>
 8004610:	2302      	movs	r3, #2
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e101      	b.n	800481c <UART_SetConfig+0x2c8>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e0fd      	b.n	800481c <UART_SetConfig+0x2c8>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e0f9      	b.n	800481c <UART_SetConfig+0x2c8>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	bf00      	nop
 8004630:	e0f4      	b.n	800481c <UART_SetConfig+0x2c8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a91      	ldr	r2, [pc, #580]	; (800487c <UART_SetConfig+0x328>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d138      	bne.n	80046ae <UART_SetConfig+0x15a>
 800463c:	4b8e      	ldr	r3, [pc, #568]	; (8004878 <UART_SetConfig+0x324>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d82c      	bhi.n	80046a4 <UART_SetConfig+0x150>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0xfc>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004685 	.word	0x08004685
 8004654:	080046a5 	.word	0x080046a5
 8004658:	080046a5 	.word	0x080046a5
 800465c:	080046a5 	.word	0x080046a5
 8004660:	08004695 	.word	0x08004695
 8004664:	080046a5 	.word	0x080046a5
 8004668:	080046a5 	.word	0x080046a5
 800466c:	080046a5 	.word	0x080046a5
 8004670:	0800468d 	.word	0x0800468d
 8004674:	080046a5 	.word	0x080046a5
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046a5 	.word	0x080046a5
 8004680:	0800469d 	.word	0x0800469d
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e0c7      	b.n	800481c <UART_SetConfig+0x2c8>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e0c3      	b.n	800481c <UART_SetConfig+0x2c8>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e0bf      	b.n	800481c <UART_SetConfig+0x2c8>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e0bb      	b.n	800481c <UART_SetConfig+0x2c8>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	bf00      	nop
 80046ac:	e0b6      	b.n	800481c <UART_SetConfig+0x2c8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a73      	ldr	r2, [pc, #460]	; (8004880 <UART_SetConfig+0x32c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d125      	bne.n	8004704 <UART_SetConfig+0x1b0>
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <UART_SetConfig+0x324>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d011      	beq.n	80046ea <UART_SetConfig+0x196>
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d802      	bhi.n	80046d0 <UART_SetConfig+0x17c>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <UART_SetConfig+0x186>
 80046ce:	e014      	b.n	80046fa <UART_SetConfig+0x1a6>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d006      	beq.n	80046e2 <UART_SetConfig+0x18e>
 80046d4:	2b30      	cmp	r3, #48	; 0x30
 80046d6:	d00c      	beq.n	80046f2 <UART_SetConfig+0x19e>
 80046d8:	e00f      	b.n	80046fa <UART_SetConfig+0x1a6>
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e0:	e09c      	b.n	800481c <UART_SetConfig+0x2c8>
 80046e2:	2302      	movs	r3, #2
 80046e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e8:	e098      	b.n	800481c <UART_SetConfig+0x2c8>
 80046ea:	2304      	movs	r3, #4
 80046ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f0:	e094      	b.n	800481c <UART_SetConfig+0x2c8>
 80046f2:	2308      	movs	r3, #8
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f8:	e090      	b.n	800481c <UART_SetConfig+0x2c8>
 80046fa:	2310      	movs	r3, #16
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004700:	bf00      	nop
 8004702:	e08b      	b.n	800481c <UART_SetConfig+0x2c8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5e      	ldr	r2, [pc, #376]	; (8004884 <UART_SetConfig+0x330>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d125      	bne.n	800475a <UART_SetConfig+0x206>
 800470e:	4b5a      	ldr	r3, [pc, #360]	; (8004878 <UART_SetConfig+0x324>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d011      	beq.n	8004740 <UART_SetConfig+0x1ec>
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d802      	bhi.n	8004726 <UART_SetConfig+0x1d2>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <UART_SetConfig+0x1dc>
 8004724:	e014      	b.n	8004750 <UART_SetConfig+0x1fc>
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d006      	beq.n	8004738 <UART_SetConfig+0x1e4>
 800472a:	2bc0      	cmp	r3, #192	; 0xc0
 800472c:	d00c      	beq.n	8004748 <UART_SetConfig+0x1f4>
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x1fc>
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e071      	b.n	800481c <UART_SetConfig+0x2c8>
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e06d      	b.n	800481c <UART_SetConfig+0x2c8>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e069      	b.n	800481c <UART_SetConfig+0x2c8>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e065      	b.n	800481c <UART_SetConfig+0x2c8>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	bf00      	nop
 8004758:	e060      	b.n	800481c <UART_SetConfig+0x2c8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4a      	ldr	r2, [pc, #296]	; (8004888 <UART_SetConfig+0x334>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d129      	bne.n	80047b8 <UART_SetConfig+0x264>
 8004764:	4b44      	ldr	r3, [pc, #272]	; (8004878 <UART_SetConfig+0x324>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004772:	d014      	beq.n	800479e <UART_SetConfig+0x24a>
 8004774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004778:	d802      	bhi.n	8004780 <UART_SetConfig+0x22c>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <UART_SetConfig+0x23a>
 800477e:	e016      	b.n	80047ae <UART_SetConfig+0x25a>
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d007      	beq.n	8004796 <UART_SetConfig+0x242>
 8004786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478a:	d00c      	beq.n	80047a6 <UART_SetConfig+0x252>
 800478c:	e00f      	b.n	80047ae <UART_SetConfig+0x25a>
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004794:	e042      	b.n	800481c <UART_SetConfig+0x2c8>
 8004796:	2302      	movs	r3, #2
 8004798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479c:	e03e      	b.n	800481c <UART_SetConfig+0x2c8>
 800479e:	2304      	movs	r3, #4
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a4:	e03a      	b.n	800481c <UART_SetConfig+0x2c8>
 80047a6:	2308      	movs	r3, #8
 80047a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ac:	e036      	b.n	800481c <UART_SetConfig+0x2c8>
 80047ae:	2310      	movs	r3, #16
 80047b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b4:	bf00      	nop
 80047b6:	e031      	b.n	800481c <UART_SetConfig+0x2c8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <UART_SetConfig+0x31c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d129      	bne.n	8004816 <UART_SetConfig+0x2c2>
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <UART_SetConfig+0x324>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d014      	beq.n	80047fc <UART_SetConfig+0x2a8>
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d802      	bhi.n	80047de <UART_SetConfig+0x28a>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <UART_SetConfig+0x298>
 80047dc:	e016      	b.n	800480c <UART_SetConfig+0x2b8>
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e2:	d007      	beq.n	80047f4 <UART_SetConfig+0x2a0>
 80047e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047e8:	d00c      	beq.n	8004804 <UART_SetConfig+0x2b0>
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x2b8>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e013      	b.n	800481c <UART_SetConfig+0x2c8>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e00f      	b.n	800481c <UART_SetConfig+0x2c8>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x2c8>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e007      	b.n	800481c <UART_SetConfig+0x2c8>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <UART_SetConfig+0x2c8>
 8004816:	2310      	movs	r3, #16
 8004818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <UART_SetConfig+0x31c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f040 80fe 	bne.w	8004a24 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800482c:	2b08      	cmp	r3, #8
 800482e:	d837      	bhi.n	80048a0 <UART_SetConfig+0x34c>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x2e4>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	080048a1 	.word	0x080048a1
 8004840:	08004865 	.word	0x08004865
 8004844:	080048a1 	.word	0x080048a1
 8004848:	08004891 	.word	0x08004891
 800484c:	080048a1 	.word	0x080048a1
 8004850:	080048a1 	.word	0x080048a1
 8004854:	080048a1 	.word	0x080048a1
 8004858:	08004899 	.word	0x08004899
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fd fe7e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004860:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004862:	e020      	b.n	80048a6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <UART_SetConfig+0x338>)
 8004866:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004868:	e01d      	b.n	80048a6 <UART_SetConfig+0x352>
 800486a:	bf00      	nop
 800486c:	efff69f3 	.word	0xefff69f3
 8004870:	40008000 	.word	0x40008000
 8004874:	40013800 	.word	0x40013800
 8004878:	40021000 	.word	0x40021000
 800487c:	40004400 	.word	0x40004400
 8004880:	40004800 	.word	0x40004800
 8004884:	40004c00 	.word	0x40004c00
 8004888:	40005000 	.word	0x40005000
 800488c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004890:	f7fd fdce 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004894:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004896:	e006      	b.n	80048a6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800489e:	e002      	b.n	80048a6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	76fb      	strb	r3, [r7, #27]
        break;
 80048a4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 81b9 	beq.w	8004c20 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d305      	bcc.n	80048ca <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d902      	bls.n	80048d0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	76fb      	strb	r3, [r7, #27]
 80048ce:	e1a7      	b.n	8004c20 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80048d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	f200 8092 	bhi.w	80049fe <UART_SetConfig+0x4aa>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x38c>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004905 	.word	0x08004905
 80048e4:	080049ff 	.word	0x080049ff
 80048e8:	08004953 	.word	0x08004953
 80048ec:	080049ff 	.word	0x080049ff
 80048f0:	08004987 	.word	0x08004987
 80048f4:	080049ff 	.word	0x080049ff
 80048f8:	080049ff 	.word	0x080049ff
 80048fc:	080049ff 	.word	0x080049ff
 8004900:	080049d5 	.word	0x080049d5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fd fe2a 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004908:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	0214      	lsls	r4, r2, #8
 800491c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004920:	020b      	lsls	r3, r1, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	4611      	mov	r1, r2
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	eb13 0b01 	adds.w	fp, r3, r1
 8004932:	eb44 0c02 	adc.w	ip, r4, r2
 8004936:	4658      	mov	r0, fp
 8004938:	4661      	mov	r1, ip
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fb fc3f 	bl	80001c8 <__aeabi_uldivmod>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004950:	e058      	b.n	8004a04 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	49ae      	ldr	r1, [pc, #696]	; (8004c18 <UART_SetConfig+0x6c4>)
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	eb13 0b01 	adds.w	fp, r3, r1
 8004966:	eb44 0c02 	adc.w	ip, r4, r2
 800496a:	4658      	mov	r0, fp
 800496c:	4661      	mov	r1, ip
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f04f 0400 	mov.w	r4, #0
 8004976:	461a      	mov	r2, r3
 8004978:	4623      	mov	r3, r4
 800497a:	f7fb fc25 	bl	80001c8 <__aeabi_uldivmod>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004984:	e03e      	b.n	8004a04 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7fd fd53 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 800498a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	0214      	lsls	r4, r2, #8
 800499e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80049a2:	020b      	lsls	r3, r1, #8
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	0852      	lsrs	r2, r2, #1
 80049aa:	4611      	mov	r1, r2
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	eb13 0b01 	adds.w	fp, r3, r1
 80049b4:	eb44 0c02 	adc.w	ip, r4, r2
 80049b8:	4658      	mov	r0, fp
 80049ba:	4661      	mov	r1, ip
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	f7fb fbfe 	bl	80001c8 <__aeabi_uldivmod>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049d2:	e017      	b.n	8004a04 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	f04f 0400 	mov.w	r4, #0
 80049de:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80049e2:	f144 0100 	adc.w	r1, r4, #0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4623      	mov	r3, r4
 80049f2:	f7fb fbe9 	bl	80001c8 <__aeabi_uldivmod>
 80049f6:	4603      	mov	r3, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049fc:	e002      	b.n	8004a04 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	76fb      	strb	r3, [r7, #27]
            break;
 8004a02:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0a:	d308      	bcc.n	8004a1e <UART_SetConfig+0x4ca>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a12:	d204      	bcs.n	8004a1e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	60da      	str	r2, [r3, #12]
 8004a1c:	e100      	b.n	8004c20 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	76fb      	strb	r3, [r7, #27]
 8004a22:	e0fd      	b.n	8004c20 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	f040 8084 	bne.w	8004b38 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d85f      	bhi.n	8004af8 <UART_SetConfig+0x5a4>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x4ec>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a85 	.word	0x08004a85
 8004a48:	08004aa5 	.word	0x08004aa5
 8004a4c:	08004af9 	.word	0x08004af9
 8004a50:	08004ac1 	.word	0x08004ac1
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004af9 	.word	0x08004af9
 8004a60:	08004ae1 	.word	0x08004ae1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fd fd7a 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004a68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	005a      	lsls	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a82:	e03c      	b.n	8004afe <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7fd fd80 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004a88:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	005a      	lsls	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aa2:	e02c      	b.n	8004afe <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004aae:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6852      	ldr	r2, [r2, #4]
 8004ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004abe:	e01e      	b.n	8004afe <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac0:	f7fd fcb6 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004ac4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	005a      	lsls	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	441a      	add	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ade:	e00e      	b.n	8004afe <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004af6:	e002      	b.n	8004afe <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	76fb      	strb	r3, [r7, #27]
        break;
 8004afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d916      	bls.n	8004b32 <UART_SetConfig+0x5de>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d212      	bcs.n	8004b32 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f023 030f 	bic.w	r3, r3, #15
 8004b14:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	89fb      	ldrh	r3, [r7, #14]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	89fa      	ldrh	r2, [r7, #14]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	e076      	b.n	8004c20 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	76fb      	strb	r3, [r7, #27]
 8004b36:	e073      	b.n	8004c20 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d85c      	bhi.n	8004bfa <UART_SetConfig+0x6a6>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x5f4>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004ba9 	.word	0x08004ba9
 8004b54:	08004bfb 	.word	0x08004bfb
 8004b58:	08004bc5 	.word	0x08004bc5
 8004b5c:	08004bfb 	.word	0x08004bfb
 8004b60:	08004bfb 	.word	0x08004bfb
 8004b64:	08004bfb 	.word	0x08004bfb
 8004b68:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fd fcf6 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004b70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	085a      	lsrs	r2, r3, #1
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b88:	e03a      	b.n	8004c00 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8a:	f7fd fcfd 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004b8e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085a      	lsrs	r2, r3, #1
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ba6:	e02b      	b.n	8004c00 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004bb2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bc2:	e01d      	b.n	8004c00 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc4:	f7fd fc34 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8004bc8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	085a      	lsrs	r2, r3, #1
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004be0:	e00e      	b.n	8004c00 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bf8:	e002      	b.n	8004c00 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	76fb      	strb	r3, [r7, #27]
        break;
 8004bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d90a      	bls.n	8004c1c <UART_SetConfig+0x6c8>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d206      	bcs.n	8004c1c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e003      	b.n	8004c20 <UART_SetConfig+0x6cc>
 8004c18:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c2c:	7efb      	ldrb	r3, [r7, #27]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3728      	adds	r7, #40	; 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d36:	d10a      	bne.n	8004d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d8a:	f7fc fb47 	bl	800141c <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d10e      	bne.n	8004dbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f82a 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e020      	b.n	8004dfe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d10e      	bne.n	8004de8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f814 	bl	8004e06 <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e00a      	b.n	8004dfe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	e05d      	b.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d059      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e20:	f7fc fafc 	bl	800141c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11b      	bne.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0201 	bic.w	r2, r2, #1
 8004e54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e042      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02b      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d123      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e94:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e00f      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d092      	beq.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4e0d      	ldr	r6, [pc, #52]	; (8004f34 <__libc_init_array+0x38>)
 8004f00:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f02:	1ba4      	subs	r4, r4, r6
 8004f04:	10a4      	asrs	r4, r4, #2
 8004f06:	2500      	movs	r5, #0
 8004f08:	42a5      	cmp	r5, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	4e0b      	ldr	r6, [pc, #44]	; (8004f3c <__libc_init_array+0x40>)
 8004f0e:	4c0c      	ldr	r4, [pc, #48]	; (8004f40 <__libc_init_array+0x44>)
 8004f10:	f000 fd6c 	bl	80059ec <_init>
 8004f14:	1ba4      	subs	r4, r4, r6
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	2500      	movs	r5, #0
 8004f1a:	42a5      	cmp	r5, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f24:	4798      	blx	r3
 8004f26:	3501      	adds	r5, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f2e:	4798      	blx	r3
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	08005e24 	.word	0x08005e24
 8004f38:	08005e24 	.word	0x08005e24
 8004f3c:	08005e24 	.word	0x08005e24
 8004f40:	08005e28 	.word	0x08005e28

08004f44 <memset>:
 8004f44:	4402      	add	r2, r0
 8004f46:	4603      	mov	r3, r0
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <sinf>:
 8004f54:	ee10 3a10 	vmov	r3, s0
 8004f58:	b507      	push	{r0, r1, r2, lr}
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <sinf+0x7c>)
 8004f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	4293      	cmp	r3, r2
 8004f62:	dc05      	bgt.n	8004f70 <sinf+0x1c>
 8004f64:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004fd4 <sinf+0x80>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f000 fc41 	bl	80057f0 <__kernel_sinf>
 8004f6e:	e004      	b.n	8004f7a <sinf+0x26>
 8004f70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f74:	db04      	blt.n	8004f80 <sinf+0x2c>
 8004f76:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004f7a:	b003      	add	sp, #12
 8004f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f80:	4668      	mov	r0, sp
 8004f82:	f000 f829 	bl	8004fd8 <__ieee754_rem_pio2f>
 8004f86:	f000 0003 	and.w	r0, r0, #3
 8004f8a:	2801      	cmp	r0, #1
 8004f8c:	d008      	beq.n	8004fa0 <sinf+0x4c>
 8004f8e:	2802      	cmp	r0, #2
 8004f90:	d00d      	beq.n	8004fae <sinf+0x5a>
 8004f92:	b9b0      	cbnz	r0, 8004fc2 <sinf+0x6e>
 8004f94:	2001      	movs	r0, #1
 8004f96:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f9a:	ed9d 0a00 	vldr	s0, [sp]
 8004f9e:	e7e4      	b.n	8004f6a <sinf+0x16>
 8004fa0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fa4:	ed9d 0a00 	vldr	s0, [sp]
 8004fa8:	f000 f942 	bl	8005230 <__kernel_cosf>
 8004fac:	e7e5      	b.n	8004f7a <sinf+0x26>
 8004fae:	2001      	movs	r0, #1
 8004fb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fb4:	ed9d 0a00 	vldr	s0, [sp]
 8004fb8:	f000 fc1a 	bl	80057f0 <__kernel_sinf>
 8004fbc:	eeb1 0a40 	vneg.f32	s0, s0
 8004fc0:	e7db      	b.n	8004f7a <sinf+0x26>
 8004fc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fc6:	ed9d 0a00 	vldr	s0, [sp]
 8004fca:	f000 f931 	bl	8005230 <__kernel_cosf>
 8004fce:	e7f5      	b.n	8004fbc <sinf+0x68>
 8004fd0:	3f490fd8 	.word	0x3f490fd8
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <__ieee754_rem_pio2f>:
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	ee10 6a10 	vmov	r6, s0
 8004fde:	4b86      	ldr	r3, [pc, #536]	; (80051f8 <__ieee754_rem_pio2f+0x220>)
 8004fe0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	4605      	mov	r5, r0
 8004fea:	dc05      	bgt.n	8004ff8 <__ieee754_rem_pio2f+0x20>
 8004fec:	2300      	movs	r3, #0
 8004fee:	ed85 0a00 	vstr	s0, [r5]
 8004ff2:	6043      	str	r3, [r0, #4]
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	e020      	b.n	800503a <__ieee754_rem_pio2f+0x62>
 8004ff8:	4b80      	ldr	r3, [pc, #512]	; (80051fc <__ieee754_rem_pio2f+0x224>)
 8004ffa:	429c      	cmp	r4, r3
 8004ffc:	dc38      	bgt.n	8005070 <__ieee754_rem_pio2f+0x98>
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	f024 040f 	bic.w	r4, r4, #15
 8005004:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005200 <__ieee754_rem_pio2f+0x228>
 8005008:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <__ieee754_rem_pio2f+0x22c>)
 800500a:	dd18      	ble.n	800503e <__ieee754_rem_pio2f+0x66>
 800500c:	429c      	cmp	r4, r3
 800500e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005012:	bf09      	itett	eq
 8005014:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005208 <__ieee754_rem_pio2f+0x230>
 8005018:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800520c <__ieee754_rem_pio2f+0x234>
 800501c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005020:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005210 <__ieee754_rem_pio2f+0x238>
 8005024:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800502c:	edc0 6a00 	vstr	s13, [r0]
 8005030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005034:	edc0 7a01 	vstr	s15, [r0, #4]
 8005038:	2001      	movs	r0, #1
 800503a:	b007      	add	sp, #28
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	429c      	cmp	r4, r3
 8005040:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005044:	bf09      	itett	eq
 8005046:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005208 <__ieee754_rem_pio2f+0x230>
 800504a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800520c <__ieee754_rem_pio2f+0x234>
 800504e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005052:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005210 <__ieee754_rem_pio2f+0x238>
 8005056:	ee77 6a87 	vadd.f32	s13, s15, s14
 800505a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800505e:	edc0 6a00 	vstr	s13, [r0]
 8005062:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005066:	edc0 7a01 	vstr	s15, [r0, #4]
 800506a:	f04f 30ff 	mov.w	r0, #4294967295
 800506e:	e7e4      	b.n	800503a <__ieee754_rem_pio2f+0x62>
 8005070:	4b68      	ldr	r3, [pc, #416]	; (8005214 <__ieee754_rem_pio2f+0x23c>)
 8005072:	429c      	cmp	r4, r3
 8005074:	dc71      	bgt.n	800515a <__ieee754_rem_pio2f+0x182>
 8005076:	f000 fc03 	bl	8005880 <fabsf>
 800507a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005218 <__ieee754_rem_pio2f+0x240>
 800507e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005082:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800508e:	ee17 0a90 	vmov	r0, s15
 8005092:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005200 <__ieee754_rem_pio2f+0x228>
 8005096:	eeb1 7a46 	vneg.f32	s14, s12
 800509a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800509e:	281f      	cmp	r0, #31
 80050a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800520c <__ieee754_rem_pio2f+0x234>
 80050a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80050a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80050ac:	ee16 3a90 	vmov	r3, s13
 80050b0:	dc1c      	bgt.n	80050ec <__ieee754_rem_pio2f+0x114>
 80050b2:	1e47      	subs	r7, r0, #1
 80050b4:	4959      	ldr	r1, [pc, #356]	; (800521c <__ieee754_rem_pio2f+0x244>)
 80050b6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80050ba:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80050be:	428a      	cmp	r2, r1
 80050c0:	d014      	beq.n	80050ec <__ieee754_rem_pio2f+0x114>
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	ed95 7a00 	vldr	s14, [r5]
 80050c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050d2:	ed85 0a01 	vstr	s0, [r5, #4]
 80050d6:	dab0      	bge.n	800503a <__ieee754_rem_pio2f+0x62>
 80050d8:	eeb1 7a47 	vneg.f32	s14, s14
 80050dc:	eeb1 0a40 	vneg.f32	s0, s0
 80050e0:	ed85 7a00 	vstr	s14, [r5]
 80050e4:	ed85 0a01 	vstr	s0, [r5, #4]
 80050e8:	4240      	negs	r0, r0
 80050ea:	e7a6      	b.n	800503a <__ieee754_rem_pio2f+0x62>
 80050ec:	15e4      	asrs	r4, r4, #23
 80050ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80050f2:	1aa2      	subs	r2, r4, r2
 80050f4:	2a08      	cmp	r2, #8
 80050f6:	dde4      	ble.n	80050c2 <__ieee754_rem_pio2f+0xea>
 80050f8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005208 <__ieee754_rem_pio2f+0x230>
 80050fc:	eef0 6a40 	vmov.f32	s13, s0
 8005100:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005104:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005108:	eea7 0a27 	vfma.f32	s0, s14, s15
 800510c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005210 <__ieee754_rem_pio2f+0x238>
 8005110:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005114:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005118:	eef0 7a40 	vmov.f32	s15, s0
 800511c:	ee15 3a90 	vmov	r3, s11
 8005120:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005124:	1aa4      	subs	r4, r4, r2
 8005126:	2c19      	cmp	r4, #25
 8005128:	dc04      	bgt.n	8005134 <__ieee754_rem_pio2f+0x15c>
 800512a:	edc5 5a00 	vstr	s11, [r5]
 800512e:	eeb0 0a66 	vmov.f32	s0, s13
 8005132:	e7c7      	b.n	80050c4 <__ieee754_rem_pio2f+0xec>
 8005134:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005220 <__ieee754_rem_pio2f+0x248>
 8005138:	eeb0 0a66 	vmov.f32	s0, s13
 800513c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005140:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005144:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005148:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005224 <__ieee754_rem_pio2f+0x24c>
 800514c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005150:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005154:	ed85 7a00 	vstr	s14, [r5]
 8005158:	e7b4      	b.n	80050c4 <__ieee754_rem_pio2f+0xec>
 800515a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800515e:	db06      	blt.n	800516e <__ieee754_rem_pio2f+0x196>
 8005160:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005164:	edc0 7a01 	vstr	s15, [r0, #4]
 8005168:	edc0 7a00 	vstr	s15, [r0]
 800516c:	e742      	b.n	8004ff4 <__ieee754_rem_pio2f+0x1c>
 800516e:	15e2      	asrs	r2, r4, #23
 8005170:	3a86      	subs	r2, #134	; 0x86
 8005172:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800517e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005228 <__ieee754_rem_pio2f+0x250>
 8005182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800518a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800518e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005192:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800519a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800519e:	ed8d 7a04 	vstr	s14, [sp, #16]
 80051a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80051b2:	d11e      	bne.n	80051f2 <__ieee754_rem_pio2f+0x21a>
 80051b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2302      	movne	r3, #2
 80051c2:	491a      	ldr	r1, [pc, #104]	; (800522c <__ieee754_rem_pio2f+0x254>)
 80051c4:	9101      	str	r1, [sp, #4]
 80051c6:	2102      	movs	r1, #2
 80051c8:	9100      	str	r1, [sp, #0]
 80051ca:	a803      	add	r0, sp, #12
 80051cc:	4629      	mov	r1, r5
 80051ce:	f000 f88d 	bl	80052ec <__kernel_rem_pio2f>
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	f6bf af31 	bge.w	800503a <__ieee754_rem_pio2f+0x62>
 80051d8:	edd5 7a00 	vldr	s15, [r5]
 80051dc:	eef1 7a67 	vneg.f32	s15, s15
 80051e0:	edc5 7a00 	vstr	s15, [r5]
 80051e4:	edd5 7a01 	vldr	s15, [r5, #4]
 80051e8:	eef1 7a67 	vneg.f32	s15, s15
 80051ec:	edc5 7a01 	vstr	s15, [r5, #4]
 80051f0:	e77a      	b.n	80050e8 <__ieee754_rem_pio2f+0x110>
 80051f2:	2303      	movs	r3, #3
 80051f4:	e7e5      	b.n	80051c2 <__ieee754_rem_pio2f+0x1ea>
 80051f6:	bf00      	nop
 80051f8:	3f490fd8 	.word	0x3f490fd8
 80051fc:	4016cbe3 	.word	0x4016cbe3
 8005200:	3fc90f80 	.word	0x3fc90f80
 8005204:	3fc90fd0 	.word	0x3fc90fd0
 8005208:	37354400 	.word	0x37354400
 800520c:	37354443 	.word	0x37354443
 8005210:	2e85a308 	.word	0x2e85a308
 8005214:	43490f80 	.word	0x43490f80
 8005218:	3f22f984 	.word	0x3f22f984
 800521c:	08005a4c 	.word	0x08005a4c
 8005220:	2e85a300 	.word	0x2e85a300
 8005224:	248d3132 	.word	0x248d3132
 8005228:	43800000 	.word	0x43800000
 800522c:	08005acc 	.word	0x08005acc

08005230 <__kernel_cosf>:
 8005230:	ee10 3a10 	vmov	r3, s0
 8005234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005238:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800523c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005240:	da05      	bge.n	800524e <__kernel_cosf+0x1e>
 8005242:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005246:	ee17 2a90 	vmov	r2, s15
 800524a:	2a00      	cmp	r2, #0
 800524c:	d03b      	beq.n	80052c6 <__kernel_cosf+0x96>
 800524e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005252:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005256:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052cc <__kernel_cosf+0x9c>
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <__kernel_cosf+0xa0>)
 800525c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8005260:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80052d4 <__kernel_cosf+0xa4>
 8005264:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005268:	4293      	cmp	r3, r2
 800526a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80052d8 <__kernel_cosf+0xa8>
 800526e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005272:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80052dc <__kernel_cosf+0xac>
 8005276:	eea5 7a86 	vfma.f32	s14, s11, s12
 800527a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80052e0 <__kernel_cosf+0xb0>
 800527e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005282:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80052e4 <__kernel_cosf+0xb4>
 8005286:	eea5 7a86 	vfma.f32	s14, s11, s12
 800528a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800528e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005292:	eee6 0a07 	vfma.f32	s1, s12, s14
 8005296:	dc04      	bgt.n	80052a2 <__kernel_cosf+0x72>
 8005298:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800529c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80052a0:	4770      	bx	lr
 80052a2:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <__kernel_cosf+0xb8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfda      	itte	le
 80052a8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	ee07 3a10 	vmovle	s14, r3
 80052b0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80052b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052b8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80052bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80052c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052c4:	4770      	bx	lr
 80052c6:	eeb0 0a66 	vmov.f32	s0, s13
 80052ca:	4770      	bx	lr
 80052cc:	ad47d74e 	.word	0xad47d74e
 80052d0:	3e999999 	.word	0x3e999999
 80052d4:	310f74f6 	.word	0x310f74f6
 80052d8:	b493f27c 	.word	0xb493f27c
 80052dc:	37d00d01 	.word	0x37d00d01
 80052e0:	bab60b61 	.word	0xbab60b61
 80052e4:	3d2aaaab 	.word	0x3d2aaaab
 80052e8:	3f480000 	.word	0x3f480000

080052ec <__kernel_rem_pio2f>:
 80052ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	ed2d 8b04 	vpush	{d8-d9}
 80052f4:	b0d7      	sub	sp, #348	; 0x15c
 80052f6:	469b      	mov	fp, r3
 80052f8:	460e      	mov	r6, r1
 80052fa:	4bbe      	ldr	r3, [pc, #760]	; (80055f4 <__kernel_rem_pio2f+0x308>)
 80052fc:	9964      	ldr	r1, [sp, #400]	; 0x190
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005304:	9865      	ldr	r0, [sp, #404]	; 0x194
 8005306:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8005604 <__kernel_rem_pio2f+0x318>
 800530a:	1ed1      	subs	r1, r2, #3
 800530c:	2308      	movs	r3, #8
 800530e:	fb91 f1f3 	sdiv	r1, r1, r3
 8005312:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005316:	f10b 3aff 	add.w	sl, fp, #4294967295
 800531a:	1c4c      	adds	r4, r1, #1
 800531c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005320:	eba1 050a 	sub.w	r5, r1, sl
 8005324:	aa1a      	add	r2, sp, #104	; 0x68
 8005326:	eb09 070a 	add.w	r7, r9, sl
 800532a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800532e:	4696      	mov	lr, r2
 8005330:	2300      	movs	r3, #0
 8005332:	42bb      	cmp	r3, r7
 8005334:	dd0f      	ble.n	8005356 <__kernel_rem_pio2f+0x6a>
 8005336:	af42      	add	r7, sp, #264	; 0x108
 8005338:	2200      	movs	r2, #0
 800533a:	454a      	cmp	r2, r9
 800533c:	dc27      	bgt.n	800538e <__kernel_rem_pio2f+0xa2>
 800533e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005342:	eb0b 0302 	add.w	r3, fp, r2
 8005346:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800534a:	9d02      	ldr	r5, [sp, #8]
 800534c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8005604 <__kernel_rem_pio2f+0x318>
 8005350:	f04f 0c00 	mov.w	ip, #0
 8005354:	e015      	b.n	8005382 <__kernel_rem_pio2f+0x96>
 8005356:	42dd      	cmn	r5, r3
 8005358:	bf5d      	ittte	pl
 800535a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800535e:	ee07 2a90 	vmovpl	s15, r2
 8005362:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005366:	eef0 7a47 	vmovmi.f32	s15, s14
 800536a:	ecee 7a01 	vstmia	lr!, {s15}
 800536e:	3301      	adds	r3, #1
 8005370:	e7df      	b.n	8005332 <__kernel_rem_pio2f+0x46>
 8005372:	ecf5 6a01 	vldmia	r5!, {s13}
 8005376:	ed33 7a01 	vldmdb	r3!, {s14}
 800537a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800537e:	f10c 0c01 	add.w	ip, ip, #1
 8005382:	45d4      	cmp	ip, sl
 8005384:	ddf5      	ble.n	8005372 <__kernel_rem_pio2f+0x86>
 8005386:	ece7 7a01 	vstmia	r7!, {s15}
 800538a:	3201      	adds	r2, #1
 800538c:	e7d5      	b.n	800533a <__kernel_rem_pio2f+0x4e>
 800538e:	ab06      	add	r3, sp, #24
 8005390:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8005600 <__kernel_rem_pio2f+0x314>
 800539a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80055fc <__kernel_rem_pio2f+0x310>
 800539e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	464d      	mov	r5, r9
 80053a6:	ab56      	add	r3, sp, #344	; 0x158
 80053a8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80053ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80053b0:	3f01      	subs	r7, #1
 80053b2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80053b6:	00bf      	lsls	r7, r7, #2
 80053b8:	ab56      	add	r3, sp, #344	; 0x158
 80053ba:	19da      	adds	r2, r3, r7
 80053bc:	3a4c      	subs	r2, #76	; 0x4c
 80053be:	2300      	movs	r3, #0
 80053c0:	1ae9      	subs	r1, r5, r3
 80053c2:	2900      	cmp	r1, #0
 80053c4:	dc4c      	bgt.n	8005460 <__kernel_rem_pio2f+0x174>
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 faa4 	bl	8005914 <scalbnf>
 80053cc:	eeb0 8a40 	vmov.f32	s16, s0
 80053d0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80053d4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80053d8:	f000 fa5a 	bl	8005890 <floorf>
 80053dc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80053e0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80053e4:	2c00      	cmp	r4, #0
 80053e6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80053ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80053ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80053f6:	dd48      	ble.n	800548a <__kernel_rem_pio2f+0x19e>
 80053f8:	1e69      	subs	r1, r5, #1
 80053fa:	ab06      	add	r3, sp, #24
 80053fc:	f1c4 0008 	rsb	r0, r4, #8
 8005400:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8005404:	9a01      	ldr	r2, [sp, #4]
 8005406:	fa4c f300 	asr.w	r3, ip, r0
 800540a:	441a      	add	r2, r3
 800540c:	4083      	lsls	r3, r0
 800540e:	9201      	str	r2, [sp, #4]
 8005410:	ebac 0203 	sub.w	r2, ip, r3
 8005414:	ab06      	add	r3, sp, #24
 8005416:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800541a:	f1c4 0307 	rsb	r3, r4, #7
 800541e:	fa42 f803 	asr.w	r8, r2, r3
 8005422:	f1b8 0f00 	cmp.w	r8, #0
 8005426:	dd41      	ble.n	80054ac <__kernel_rem_pio2f+0x1c0>
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	2000      	movs	r0, #0
 800542c:	3301      	adds	r3, #1
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	4601      	mov	r1, r0
 8005432:	4285      	cmp	r5, r0
 8005434:	dc6d      	bgt.n	8005512 <__kernel_rem_pio2f+0x226>
 8005436:	2c00      	cmp	r4, #0
 8005438:	dd04      	ble.n	8005444 <__kernel_rem_pio2f+0x158>
 800543a:	2c01      	cmp	r4, #1
 800543c:	d07e      	beq.n	800553c <__kernel_rem_pio2f+0x250>
 800543e:	2c02      	cmp	r4, #2
 8005440:	f000 8086 	beq.w	8005550 <__kernel_rem_pio2f+0x264>
 8005444:	f1b8 0f02 	cmp.w	r8, #2
 8005448:	d130      	bne.n	80054ac <__kernel_rem_pio2f+0x1c0>
 800544a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800544e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005452:	b359      	cbz	r1, 80054ac <__kernel_rem_pio2f+0x1c0>
 8005454:	4620      	mov	r0, r4
 8005456:	f000 fa5d 	bl	8005914 <scalbnf>
 800545a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800545e:	e025      	b.n	80054ac <__kernel_rem_pio2f+0x1c0>
 8005460:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005464:	a806      	add	r0, sp, #24
 8005466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800546a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800546e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005472:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005476:	ee10 1a10 	vmov	r1, s0
 800547a:	ed32 0a01 	vldmdb	r2!, {s0}
 800547e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005482:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005486:	3301      	adds	r3, #1
 8005488:	e79a      	b.n	80053c0 <__kernel_rem_pio2f+0xd4>
 800548a:	d106      	bne.n	800549a <__kernel_rem_pio2f+0x1ae>
 800548c:	1e6b      	subs	r3, r5, #1
 800548e:	aa06      	add	r2, sp, #24
 8005490:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005494:	ea4f 2822 	mov.w	r8, r2, asr #8
 8005498:	e7c3      	b.n	8005422 <__kernel_rem_pio2f+0x136>
 800549a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800549e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	da31      	bge.n	800550c <__kernel_rem_pio2f+0x220>
 80054a8:	f04f 0800 	mov.w	r8, #0
 80054ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	f040 80a8 	bne.w	8005608 <__kernel_rem_pio2f+0x31c>
 80054b8:	1e6b      	subs	r3, r5, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	4548      	cmp	r0, r9
 80054c0:	da4d      	bge.n	800555e <__kernel_rem_pio2f+0x272>
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	f000 8087 	beq.w	80055d6 <__kernel_rem_pio2f+0x2ea>
 80054c8:	aa06      	add	r2, sp, #24
 80054ca:	3c08      	subs	r4, #8
 80054cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054d0:	2900      	cmp	r1, #0
 80054d2:	f000 808d 	beq.w	80055f0 <__kernel_rem_pio2f+0x304>
 80054d6:	4620      	mov	r0, r4
 80054d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054dc:	9302      	str	r3, [sp, #8]
 80054de:	f000 fa19 	bl	8005914 <scalbnf>
 80054e2:	9b02      	ldr	r3, [sp, #8]
 80054e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005600 <__kernel_rem_pio2f+0x314>
 80054e8:	0099      	lsls	r1, r3, #2
 80054ea:	aa42      	add	r2, sp, #264	; 0x108
 80054ec:	1850      	adds	r0, r2, r1
 80054ee:	1d05      	adds	r5, r0, #4
 80054f0:	461c      	mov	r4, r3
 80054f2:	2c00      	cmp	r4, #0
 80054f4:	f280 80b8 	bge.w	8005668 <__kernel_rem_pio2f+0x37c>
 80054f8:	2500      	movs	r5, #0
 80054fa:	1b5c      	subs	r4, r3, r5
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	f2c0 80d8 	blt.w	80056b2 <__kernel_rem_pio2f+0x3c6>
 8005502:	4f3d      	ldr	r7, [pc, #244]	; (80055f8 <__kernel_rem_pio2f+0x30c>)
 8005504:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8005604 <__kernel_rem_pio2f+0x318>
 8005508:	2400      	movs	r4, #0
 800550a:	e0c6      	b.n	800569a <__kernel_rem_pio2f+0x3ae>
 800550c:	f04f 0802 	mov.w	r8, #2
 8005510:	e78a      	b.n	8005428 <__kernel_rem_pio2f+0x13c>
 8005512:	ab06      	add	r3, sp, #24
 8005514:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005518:	b949      	cbnz	r1, 800552e <__kernel_rem_pio2f+0x242>
 800551a:	b12b      	cbz	r3, 8005528 <__kernel_rem_pio2f+0x23c>
 800551c:	aa06      	add	r2, sp, #24
 800551e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005522:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005526:	2301      	movs	r3, #1
 8005528:	3001      	adds	r0, #1
 800552a:	4619      	mov	r1, r3
 800552c:	e781      	b.n	8005432 <__kernel_rem_pio2f+0x146>
 800552e:	aa06      	add	r2, sp, #24
 8005530:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005534:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005538:	460b      	mov	r3, r1
 800553a:	e7f5      	b.n	8005528 <__kernel_rem_pio2f+0x23c>
 800553c:	1e68      	subs	r0, r5, #1
 800553e:	ab06      	add	r3, sp, #24
 8005540:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	aa06      	add	r2, sp, #24
 800554a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800554e:	e779      	b.n	8005444 <__kernel_rem_pio2f+0x158>
 8005550:	1e68      	subs	r0, r5, #1
 8005552:	ab06      	add	r3, sp, #24
 8005554:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	e7f4      	b.n	8005548 <__kernel_rem_pio2f+0x25c>
 800555e:	a906      	add	r1, sp, #24
 8005560:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005564:	3801      	subs	r0, #1
 8005566:	430a      	orrs	r2, r1
 8005568:	e7a9      	b.n	80054be <__kernel_rem_pio2f+0x1d2>
 800556a:	f10c 0c01 	add.w	ip, ip, #1
 800556e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005572:	2a00      	cmp	r2, #0
 8005574:	d0f9      	beq.n	800556a <__kernel_rem_pio2f+0x27e>
 8005576:	eb0b 0305 	add.w	r3, fp, r5
 800557a:	aa1a      	add	r2, sp, #104	; 0x68
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	1898      	adds	r0, r3, r2
 8005580:	3004      	adds	r0, #4
 8005582:	1c69      	adds	r1, r5, #1
 8005584:	3704      	adds	r7, #4
 8005586:	2200      	movs	r2, #0
 8005588:	4465      	add	r5, ip
 800558a:	9005      	str	r0, [sp, #20]
 800558c:	428d      	cmp	r5, r1
 800558e:	f6ff af0a 	blt.w	80053a6 <__kernel_rem_pio2f+0xba>
 8005592:	a81a      	add	r0, sp, #104	; 0x68
 8005594:	eb02 0c03 	add.w	ip, r2, r3
 8005598:	4484      	add	ip, r0
 800559a:	9803      	ldr	r0, [sp, #12]
 800559c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80055a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80055a4:	9001      	str	r0, [sp, #4]
 80055a6:	ee07 0a90 	vmov	s15, r0
 80055aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ae:	9805      	ldr	r0, [sp, #20]
 80055b0:	edcc 7a00 	vstr	s15, [ip]
 80055b4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005604 <__kernel_rem_pio2f+0x318>
 80055b8:	eb00 0802 	add.w	r8, r0, r2
 80055bc:	f04f 0c00 	mov.w	ip, #0
 80055c0:	45d4      	cmp	ip, sl
 80055c2:	dd0c      	ble.n	80055de <__kernel_rem_pio2f+0x2f2>
 80055c4:	eb02 0c07 	add.w	ip, r2, r7
 80055c8:	a842      	add	r0, sp, #264	; 0x108
 80055ca:	4484      	add	ip, r0
 80055cc:	edcc 7a01 	vstr	s15, [ip, #4]
 80055d0:	3101      	adds	r1, #1
 80055d2:	3204      	adds	r2, #4
 80055d4:	e7da      	b.n	800558c <__kernel_rem_pio2f+0x2a0>
 80055d6:	9b04      	ldr	r3, [sp, #16]
 80055d8:	f04f 0c01 	mov.w	ip, #1
 80055dc:	e7c7      	b.n	800556e <__kernel_rem_pio2f+0x282>
 80055de:	ecfe 6a01 	vldmia	lr!, {s13}
 80055e2:	ed38 7a01 	vldmdb	r8!, {s14}
 80055e6:	f10c 0c01 	add.w	ip, ip, #1
 80055ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055ee:	e7e7      	b.n	80055c0 <__kernel_rem_pio2f+0x2d4>
 80055f0:	3b01      	subs	r3, #1
 80055f2:	e769      	b.n	80054c8 <__kernel_rem_pio2f+0x1dc>
 80055f4:	08005e10 	.word	0x08005e10
 80055f8:	08005de4 	.word	0x08005de4
 80055fc:	43800000 	.word	0x43800000
 8005600:	3b800000 	.word	0x3b800000
 8005604:	00000000 	.word	0x00000000
 8005608:	4260      	negs	r0, r4
 800560a:	eeb0 0a48 	vmov.f32	s0, s16
 800560e:	f000 f981 	bl	8005914 <scalbnf>
 8005612:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80055fc <__kernel_rem_pio2f+0x310>
 8005616:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	db1a      	blt.n	8005656 <__kernel_rem_pio2f+0x36a>
 8005620:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005600 <__kernel_rem_pio2f+0x314>
 8005624:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005628:	aa06      	add	r2, sp, #24
 800562a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800562e:	a906      	add	r1, sp, #24
 8005630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005634:	3408      	adds	r4, #8
 8005636:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800563a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005642:	ee10 3a10 	vmov	r3, s0
 8005646:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800564a:	1c6b      	adds	r3, r5, #1
 800564c:	ee17 2a90 	vmov	r2, s15
 8005650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005654:	e73f      	b.n	80054d6 <__kernel_rem_pio2f+0x1ea>
 8005656:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800565a:	aa06      	add	r2, sp, #24
 800565c:	ee10 3a10 	vmov	r3, s0
 8005660:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005664:	462b      	mov	r3, r5
 8005666:	e736      	b.n	80054d6 <__kernel_rem_pio2f+0x1ea>
 8005668:	aa06      	add	r2, sp, #24
 800566a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	ee07 2a90 	vmov	s15, r2
 8005674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005678:	3c01      	subs	r4, #1
 800567a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800567e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005682:	ed65 7a01 	vstmdb	r5!, {s15}
 8005686:	e734      	b.n	80054f2 <__kernel_rem_pio2f+0x206>
 8005688:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800568c:	ecf7 6a01 	vldmia	r7!, {s13}
 8005690:	ed9c 7a00 	vldr	s14, [ip]
 8005694:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005698:	3401      	adds	r4, #1
 800569a:	454c      	cmp	r4, r9
 800569c:	dc01      	bgt.n	80056a2 <__kernel_rem_pio2f+0x3b6>
 800569e:	42a5      	cmp	r5, r4
 80056a0:	daf2      	bge.n	8005688 <__kernel_rem_pio2f+0x39c>
 80056a2:	aa56      	add	r2, sp, #344	; 0x158
 80056a4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80056a8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80056ac:	3501      	adds	r5, #1
 80056ae:	3804      	subs	r0, #4
 80056b0:	e723      	b.n	80054fa <__kernel_rem_pio2f+0x20e>
 80056b2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80056b4:	2a03      	cmp	r2, #3
 80056b6:	d84d      	bhi.n	8005754 <__kernel_rem_pio2f+0x468>
 80056b8:	e8df f002 	tbb	[pc, r2]
 80056bc:	021f1f3e 	.word	0x021f1f3e
 80056c0:	aa56      	add	r2, sp, #344	; 0x158
 80056c2:	4411      	add	r1, r2
 80056c4:	399c      	subs	r1, #156	; 0x9c
 80056c6:	4608      	mov	r0, r1
 80056c8:	461c      	mov	r4, r3
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	dc5f      	bgt.n	800578e <__kernel_rem_pio2f+0x4a2>
 80056ce:	4608      	mov	r0, r1
 80056d0:	461c      	mov	r4, r3
 80056d2:	2c01      	cmp	r4, #1
 80056d4:	dc6b      	bgt.n	80057ae <__kernel_rem_pio2f+0x4c2>
 80056d6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8005604 <__kernel_rem_pio2f+0x318>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	dc77      	bgt.n	80057ce <__kernel_rem_pio2f+0x4e2>
 80056de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80056e2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80056e6:	f1b8 0f00 	cmp.w	r8, #0
 80056ea:	d176      	bne.n	80057da <__kernel_rem_pio2f+0x4ee>
 80056ec:	edc6 6a00 	vstr	s13, [r6]
 80056f0:	ed86 7a01 	vstr	s14, [r6, #4]
 80056f4:	edc6 7a02 	vstr	s15, [r6, #8]
 80056f8:	e02c      	b.n	8005754 <__kernel_rem_pio2f+0x468>
 80056fa:	aa56      	add	r2, sp, #344	; 0x158
 80056fc:	4411      	add	r1, r2
 80056fe:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8005604 <__kernel_rem_pio2f+0x318>
 8005702:	399c      	subs	r1, #156	; 0x9c
 8005704:	4618      	mov	r0, r3
 8005706:	2800      	cmp	r0, #0
 8005708:	da32      	bge.n	8005770 <__kernel_rem_pio2f+0x484>
 800570a:	f1b8 0f00 	cmp.w	r8, #0
 800570e:	d035      	beq.n	800577c <__kernel_rem_pio2f+0x490>
 8005710:	eef1 7a47 	vneg.f32	s15, s14
 8005714:	edc6 7a00 	vstr	s15, [r6]
 8005718:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800571c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005720:	a82f      	add	r0, sp, #188	; 0xbc
 8005722:	2101      	movs	r1, #1
 8005724:	428b      	cmp	r3, r1
 8005726:	da2c      	bge.n	8005782 <__kernel_rem_pio2f+0x496>
 8005728:	f1b8 0f00 	cmp.w	r8, #0
 800572c:	d001      	beq.n	8005732 <__kernel_rem_pio2f+0x446>
 800572e:	eef1 7a67 	vneg.f32	s15, s15
 8005732:	edc6 7a01 	vstr	s15, [r6, #4]
 8005736:	e00d      	b.n	8005754 <__kernel_rem_pio2f+0x468>
 8005738:	aa56      	add	r2, sp, #344	; 0x158
 800573a:	4411      	add	r1, r2
 800573c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005604 <__kernel_rem_pio2f+0x318>
 8005740:	399c      	subs	r1, #156	; 0x9c
 8005742:	2b00      	cmp	r3, #0
 8005744:	da0e      	bge.n	8005764 <__kernel_rem_pio2f+0x478>
 8005746:	f1b8 0f00 	cmp.w	r8, #0
 800574a:	d001      	beq.n	8005750 <__kernel_rem_pio2f+0x464>
 800574c:	eef1 7a67 	vneg.f32	s15, s15
 8005750:	edc6 7a00 	vstr	s15, [r6]
 8005754:	9b01      	ldr	r3, [sp, #4]
 8005756:	f003 0007 	and.w	r0, r3, #7
 800575a:	b057      	add	sp, #348	; 0x15c
 800575c:	ecbd 8b04 	vpop	{d8-d9}
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	ed31 7a01 	vldmdb	r1!, {s14}
 8005768:	3b01      	subs	r3, #1
 800576a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800576e:	e7e8      	b.n	8005742 <__kernel_rem_pio2f+0x456>
 8005770:	ed71 7a01 	vldmdb	r1!, {s15}
 8005774:	3801      	subs	r0, #1
 8005776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800577a:	e7c4      	b.n	8005706 <__kernel_rem_pio2f+0x41a>
 800577c:	eef0 7a47 	vmov.f32	s15, s14
 8005780:	e7c8      	b.n	8005714 <__kernel_rem_pio2f+0x428>
 8005782:	ecb0 7a01 	vldmia	r0!, {s14}
 8005786:	3101      	adds	r1, #1
 8005788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800578c:	e7ca      	b.n	8005724 <__kernel_rem_pio2f+0x438>
 800578e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005792:	ed70 6a01 	vldmdb	r0!, {s13}
 8005796:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800579a:	3c01      	subs	r4, #1
 800579c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057a0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a8:	edc0 7a00 	vstr	s15, [r0]
 80057ac:	e78d      	b.n	80056ca <__kernel_rem_pio2f+0x3de>
 80057ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 80057b2:	ed70 6a01 	vldmdb	r0!, {s13}
 80057b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057ba:	3c01      	subs	r4, #1
 80057bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057c0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c8:	edc0 7a00 	vstr	s15, [r0]
 80057cc:	e781      	b.n	80056d2 <__kernel_rem_pio2f+0x3e6>
 80057ce:	ed31 7a01 	vldmdb	r1!, {s14}
 80057d2:	3b01      	subs	r3, #1
 80057d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d8:	e77f      	b.n	80056da <__kernel_rem_pio2f+0x3ee>
 80057da:	eef1 6a66 	vneg.f32	s13, s13
 80057de:	eeb1 7a47 	vneg.f32	s14, s14
 80057e2:	edc6 6a00 	vstr	s13, [r6]
 80057e6:	ed86 7a01 	vstr	s14, [r6, #4]
 80057ea:	eef1 7a67 	vneg.f32	s15, s15
 80057ee:	e781      	b.n	80056f4 <__kernel_rem_pio2f+0x408>

080057f0 <__kernel_sinf>:
 80057f0:	ee10 3a10 	vmov	r3, s0
 80057f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80057fc:	da04      	bge.n	8005808 <__kernel_sinf+0x18>
 80057fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005802:	ee17 3a90 	vmov	r3, s15
 8005806:	b35b      	cbz	r3, 8005860 <__kernel_sinf+0x70>
 8005808:	ee20 7a00 	vmul.f32	s14, s0, s0
 800580c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005864 <__kernel_sinf+0x74>
 8005810:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005868 <__kernel_sinf+0x78>
 8005814:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005818:	eddf 7a14 	vldr	s15, [pc, #80]	; 800586c <__kernel_sinf+0x7c>
 800581c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005820:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005870 <__kernel_sinf+0x80>
 8005824:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005828:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005874 <__kernel_sinf+0x84>
 800582c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005830:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005834:	b930      	cbnz	r0, 8005844 <__kernel_sinf+0x54>
 8005836:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005878 <__kernel_sinf+0x88>
 800583a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800583e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005842:	4770      	bx	lr
 8005844:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005848:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800584c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005850:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005854:	eddf 7a09 	vldr	s15, [pc, #36]	; 800587c <__kernel_sinf+0x8c>
 8005858:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800585c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2f2ec9d3 	.word	0x2f2ec9d3
 8005868:	b2d72f34 	.word	0xb2d72f34
 800586c:	3638ef1b 	.word	0x3638ef1b
 8005870:	b9500d01 	.word	0xb9500d01
 8005874:	3c088889 	.word	0x3c088889
 8005878:	be2aaaab 	.word	0xbe2aaaab
 800587c:	3e2aaaab 	.word	0x3e2aaaab

08005880 <fabsf>:
 8005880:	ee10 3a10 	vmov	r3, s0
 8005884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005888:	ee00 3a10 	vmov	s0, r3
 800588c:	4770      	bx	lr
	...

08005890 <floorf>:
 8005890:	ee10 3a10 	vmov	r3, s0
 8005894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005898:	0dca      	lsrs	r2, r1, #23
 800589a:	3a7f      	subs	r2, #127	; 0x7f
 800589c:	2a16      	cmp	r2, #22
 800589e:	dc2a      	bgt.n	80058f6 <floorf+0x66>
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	da11      	bge.n	80058c8 <floorf+0x38>
 80058a4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005908 <floorf+0x78>
 80058a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b4:	dd05      	ble.n	80058c2 <floorf+0x32>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da23      	bge.n	8005902 <floorf+0x72>
 80058ba:	4a14      	ldr	r2, [pc, #80]	; (800590c <floorf+0x7c>)
 80058bc:	2900      	cmp	r1, #0
 80058be:	bf18      	it	ne
 80058c0:	4613      	movne	r3, r2
 80058c2:	ee00 3a10 	vmov	s0, r3
 80058c6:	4770      	bx	lr
 80058c8:	4911      	ldr	r1, [pc, #68]	; (8005910 <floorf+0x80>)
 80058ca:	4111      	asrs	r1, r2
 80058cc:	420b      	tst	r3, r1
 80058ce:	d0fa      	beq.n	80058c6 <floorf+0x36>
 80058d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005908 <floorf+0x78>
 80058d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e0:	ddef      	ble.n	80058c2 <floorf+0x32>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bfbe      	ittt	lt
 80058e6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80058ea:	fa40 f202 	asrlt.w	r2, r0, r2
 80058ee:	189b      	addlt	r3, r3, r2
 80058f0:	ea23 0301 	bic.w	r3, r3, r1
 80058f4:	e7e5      	b.n	80058c2 <floorf+0x32>
 80058f6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80058fa:	d3e4      	bcc.n	80058c6 <floorf+0x36>
 80058fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005900:	4770      	bx	lr
 8005902:	2300      	movs	r3, #0
 8005904:	e7dd      	b.n	80058c2 <floorf+0x32>
 8005906:	bf00      	nop
 8005908:	7149f2ca 	.word	0x7149f2ca
 800590c:	bf800000 	.word	0xbf800000
 8005910:	007fffff 	.word	0x007fffff

08005914 <scalbnf>:
 8005914:	b508      	push	{r3, lr}
 8005916:	ee10 2a10 	vmov	r2, s0
 800591a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800591e:	ed2d 8b02 	vpush	{d8}
 8005922:	eef0 0a40 	vmov.f32	s1, s0
 8005926:	d004      	beq.n	8005932 <scalbnf+0x1e>
 8005928:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800592c:	d306      	bcc.n	800593c <scalbnf+0x28>
 800592e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005932:	ecbd 8b02 	vpop	{d8}
 8005936:	eeb0 0a60 	vmov.f32	s0, s1
 800593a:	bd08      	pop	{r3, pc}
 800593c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005940:	d21c      	bcs.n	800597c <scalbnf+0x68>
 8005942:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <scalbnf+0xac>)
 8005944:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80059c4 <scalbnf+0xb0>
 8005948:	4298      	cmp	r0, r3
 800594a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800594e:	db10      	blt.n	8005972 <scalbnf+0x5e>
 8005950:	ee10 2a90 	vmov	r2, s1
 8005954:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005958:	3b19      	subs	r3, #25
 800595a:	4403      	add	r3, r0
 800595c:	2bfe      	cmp	r3, #254	; 0xfe
 800595e:	dd0f      	ble.n	8005980 <scalbnf+0x6c>
 8005960:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80059c8 <scalbnf+0xb4>
 8005964:	eeb0 0a48 	vmov.f32	s0, s16
 8005968:	f000 f834 	bl	80059d4 <copysignf>
 800596c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005970:	e7df      	b.n	8005932 <scalbnf+0x1e>
 8005972:	eddf 7a16 	vldr	s15, [pc, #88]	; 80059cc <scalbnf+0xb8>
 8005976:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800597a:	e7da      	b.n	8005932 <scalbnf+0x1e>
 800597c:	0ddb      	lsrs	r3, r3, #23
 800597e:	e7ec      	b.n	800595a <scalbnf+0x46>
 8005980:	2b00      	cmp	r3, #0
 8005982:	dd06      	ble.n	8005992 <scalbnf+0x7e>
 8005984:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005988:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800598c:	ee00 3a90 	vmov	s1, r3
 8005990:	e7cf      	b.n	8005932 <scalbnf+0x1e>
 8005992:	f113 0f16 	cmn.w	r3, #22
 8005996:	da06      	bge.n	80059a6 <scalbnf+0x92>
 8005998:	f24c 3350 	movw	r3, #50000	; 0xc350
 800599c:	4298      	cmp	r0, r3
 800599e:	dcdf      	bgt.n	8005960 <scalbnf+0x4c>
 80059a0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80059cc <scalbnf+0xb8>
 80059a4:	e7de      	b.n	8005964 <scalbnf+0x50>
 80059a6:	3319      	adds	r3, #25
 80059a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80059ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80059b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80059d0 <scalbnf+0xbc>
 80059b4:	ee07 3a10 	vmov	s14, r3
 80059b8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80059bc:	e7b9      	b.n	8005932 <scalbnf+0x1e>
 80059be:	bf00      	nop
 80059c0:	ffff3cb0 	.word	0xffff3cb0
 80059c4:	4c000000 	.word	0x4c000000
 80059c8:	7149f2ca 	.word	0x7149f2ca
 80059cc:	0da24260 	.word	0x0da24260
 80059d0:	33000000 	.word	0x33000000

080059d4 <copysignf>:
 80059d4:	ee10 3a10 	vmov	r3, s0
 80059d8:	ee10 2a90 	vmov	r2, s1
 80059dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80059e4:	4313      	orrs	r3, r2
 80059e6:	ee00 3a10 	vmov	s0, r3
 80059ea:	4770      	bx	lr

080059ec <_init>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr

080059f8 <_fini>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr
