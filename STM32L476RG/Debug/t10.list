
t10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  08009234  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08009234  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017488  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000290a  00000000  00000000  00037528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003b348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002931e  00000000  00000000  0003c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010234  00000000  00000000  00065a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001079c9  00000000  00000000  00075c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d62b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000608c  00000000  00000000  0017d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d30 	.word	0x08008d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008d30 	.word	0x08008d30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4abb      	ldr	r2, [pc, #748]	; (8001140 <SVPWM_Update+0x2fc>)
 8000e54:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e5c:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e64:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001144 <SVPWM_Update+0x300>
 8000e68:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ea0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001148 <SVPWM_Update+0x304>
 8000ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	db09      	blt.n	8000ec2 <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eb4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001148 <SVPWM_Update+0x304>
 8000eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ed0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001148 <SVPWM_Update+0x304>
 8000ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8000edc:	f007 f9dc 	bl	8008298 <sinf>
 8000ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f04:	eeb0 0a67 	vmov.f32	s0, s15
 8000f08:	f007 f9c6 	bl	8008298 <sinf>
 8000f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	d518      	bpl.n	8000f9e <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f72:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f76:	eef4 7a47 	vcmp.f32	s15, s14
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d104      	bne.n	8000f8a <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	e009      	b.n	8000f9e <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	d11f      	bne.n	8000fee <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	621a      	str	r2, [r3, #32]
 8000fec:	e0d7      	b.n	800119e <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ff8:	eef4 7a47 	vcmp.f32	s15, s14
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	d11f      	bne.n	8001042 <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	621a      	str	r2, [r3, #32]
 8001040:	e0ad      	b.n	800119e <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	edd3 7a05 	vldr	s15, [r3, #20]
 8001048:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800104c:	eef4 7a47 	vcmp.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	d11f      	bne.n	8001096 <SVPWM_Update+0x252>
    	svm->U = svm->to;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800106a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	edc3 7a08 	vstr	s15, [r3, #32]
 8001094:	e083      	b.n	800119e <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a05 	vldr	s15, [r3, #20]
 800109c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010a0:	eef4 7a47 	vcmp.f32	s15, s14
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d11f      	bne.n	80010ea <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edc3 7a08 	vstr	s15, [r3, #32]
 80010e8:	e059      	b.n	800119e <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80010f4:	eef4 7a47 	vcmp.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d126      	bne.n	800114c <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	edc3 7a08 	vstr	s15, [r3, #32]
 800113c:	e02f      	b.n	800119e <SVPWM_Update+0x35a>
 800113e:	bf00      	nop
 8001140:	3f666666 	.word	0x3f666666
 8001144:	40c90fdb 	.word	0x40c90fdb
 8001148:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001152:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001156:	eef4 7a47 	vcmp.f32	s15, s14
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d11e      	bne.n	800119e <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800116c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <SVPWM_Update+0x3ec>)
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	3301      	adds	r3, #1
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <SVPWM_Update+0x3ec>)
 80011c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c6:	ee17 2a90 	vmov	r2, s15
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <SVPWM_Update+0x3ec>)
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	3301      	adds	r3, #1
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <SVPWM_Update+0x3ec>)
 80011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f4:	ee17 2a90 	vmov	r2, s15
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	edd3 6a08 	vldr	s13, [r3, #32]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	edd3 7a02 	vldr	s15, [r3, #8]
 8001206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <SVPWM_Update+0x3ec>)
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	3301      	adds	r3, #1
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SVPWM_Update+0x3ec>)
 800121e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001222:	ee17 2a90 	vmov	r2, s15
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40012c00 	.word	0x40012c00

08001234 <VHZ_Init>:
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6178      	str	r0, [r7, #20]
 800123c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001240:	edc7 0a03 	vstr	s1, [r7, #12]
 8001244:	ed87 1a02 	vstr	s2, [r7, #8]
 8001248:	edc7 1a01 	vstr	s3, [r7, #4]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	ed97 7a01 	vldr	s14, [r7, #4]
 8001268:	edd7 7a02 	vldr	s15, [r7, #8]
 800126c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001270:	ed97 7a03 	vldr	s14, [r7, #12]
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800127c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	edc3 7a04 	vstr	s15, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <VHZ_Update>:
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d804      	bhi.n	80012c8 <VHZ_Update+0x28>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	e03b      	b.n	8001340 <VHZ_Update+0xa0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	dd20      	ble.n	8001320 <VHZ_Update+0x80>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	d815      	bhi.n	8001320 <VHZ_Update+0x80>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 6a04 	vldr	s13, [r3, #16]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	ed93 6a06 	vldr	s12, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edc3 7a05 	vstr	s15, [r3, #20]
 800131e:	e00f      	b.n	8001340 <VHZ_Update+0xa0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a06 	vldr	s14, [r3, #24]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 7a01 	vldr	s15, [r3, #4]
 800132c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dc00      	bgt.n	8001338 <VHZ_Update+0x98>
 8001336:	e003      	b.n	8001340 <VHZ_Update+0xa0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08d      	sub	sp, #52	; 0x34
 8001350:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8001352:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8001530 <main+0x1e4>
 8001356:	4877      	ldr	r0, [pc, #476]	; (8001534 <main+0x1e8>)
 8001358:	f7ff fd30 	bl	8000dbc <SVPWM_Init>
  VHZ_Init(&vhz1, 0.001, 0.01, 10, 100);
 800135c:	eddf 1a76 	vldr	s3, [pc, #472]	; 8001538 <main+0x1ec>
 8001360:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001364:	eddf 0a75 	vldr	s1, [pc, #468]	; 800153c <main+0x1f0>
 8001368:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8001540 <main+0x1f4>
 800136c:	4875      	ldr	r0, [pc, #468]	; (8001544 <main+0x1f8>)
 800136e:	f7ff ff61 	bl	8001234 <VHZ_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f000 fea7 	bl	80020c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f8fb 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 fb99 	bl	8001ab0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800137e:	f000 fa3b 	bl	80017f8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001382:	f000 fb13 	bl	80019ac <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001386:	f000 fb63 	bl	8001a50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800138a:	f000 f9f5 	bl	8001778 <MX_I2C1_Init>
  MX_ADC1_Init();
 800138e:	f000 f979 	bl	8001684 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001392:	2100      	movs	r1, #0
 8001394:	486c      	ldr	r0, [pc, #432]	; (8001548 <main+0x1fc>)
 8001396:	f004 fbad 	bl	8005af4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800139a:	2100      	movs	r1, #0
 800139c:	486a      	ldr	r0, [pc, #424]	; (8001548 <main+0x1fc>)
 800139e:	f005 fc15 	bl	8006bcc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013a2:	2104      	movs	r1, #4
 80013a4:	4868      	ldr	r0, [pc, #416]	; (8001548 <main+0x1fc>)
 80013a6:	f004 fba5 	bl	8005af4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80013aa:	2104      	movs	r1, #4
 80013ac:	4866      	ldr	r0, [pc, #408]	; (8001548 <main+0x1fc>)
 80013ae:	f005 fc0d 	bl	8006bcc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013b2:	2108      	movs	r1, #8
 80013b4:	4864      	ldr	r0, [pc, #400]	; (8001548 <main+0x1fc>)
 80013b6:	f004 fb9d 	bl	8005af4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80013ba:	2108      	movs	r1, #8
 80013bc:	4862      	ldr	r0, [pc, #392]	; (8001548 <main+0x1fc>)
 80013be:	f005 fc05 	bl	8006bcc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 80013c2:	4862      	ldr	r0, [pc, #392]	; (800154c <main+0x200>)
 80013c4:	f004 fb36 	bl	8005a34 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80013c8:	4861      	ldr	r0, [pc, #388]	; (8001550 <main+0x204>)
 80013ca:	f001 fa1d 	bl	8002808 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d2:	485f      	ldr	r0, [pc, #380]	; (8001550 <main+0x204>)
 80013d4:	f001 fad2 	bl	800297c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80013d8:	485d      	ldr	r0, [pc, #372]	; (8001550 <main+0x204>)
 80013da:	f001 fb9f 	bl	8002b1c <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	84bb      	strh	r3, [r7, #36]	; 0x24

		buf [0] = REG_TEMP;//REQUEST TO READ
 80013e2:	2300      	movs	r3, #0
 80013e4:	743b      	strb	r3, [r7, #16]
			  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80013e6:	2390      	movs	r3, #144	; 0x90
 80013e8:	b299      	uxth	r1, r3
 80013ea:	f107 0210 	add.w	r2, r7, #16
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	4857      	ldr	r0, [pc, #348]	; (8001554 <main+0x208>)
 80013f8:	f002 fb90 	bl	8003b1c <HAL_I2C_Master_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  if (ret != HAL_OK)
 8001402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <main+0xd2>
			  {
				  	 strcpy ((char*)buf, "Error Tx\r\n");
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4a52      	ldr	r2, [pc, #328]	; (8001558 <main+0x20c>)
 8001410:	ca07      	ldmia	r2, {r0, r1, r2}
 8001412:	c303      	stmia	r3!, {r0, r1}
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	3302      	adds	r3, #2
 8001418:	0c12      	lsrs	r2, r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e067      	b.n	80014ee <main+0x1a2>
			  }
			  else
			  {
				  //READ 2 bytes from the temperature register
			      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 800141e:	2390      	movs	r3, #144	; 0x90
 8001420:	b299      	uxth	r1, r3
 8001422:	f107 0210 	add.w	r2, r7, #16
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2302      	movs	r3, #2
 800142e:	4849      	ldr	r0, [pc, #292]	; (8001554 <main+0x208>)
 8001430:	f002 fc68 	bl	8003d04 <HAL_I2C_Master_Receive>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  if (ret != HAL_OK)
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <main+0x10a>
				  {
					  	 strcpy ((char*)buf, "Error Tx\r\n");
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4a44      	ldr	r2, [pc, #272]	; (8001558 <main+0x20c>)
 8001448:	ca07      	ldmia	r2, {r0, r1, r2}
 800144a:	c303      	stmia	r3!, {r0, r1}
 800144c:	801a      	strh	r2, [r3, #0]
 800144e:	3302      	adds	r3, #2
 8001450:	0c12      	lsrs	r2, r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e04b      	b.n	80014ee <main+0x1a2>
				  }
				  else
				  {
					  //combine the bytes
					  val = ((int16_t)buf[0]<<4) | (buf[1] >> 4);
 8001456:	7c3b      	ldrb	r3, [r7, #16]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	b21a      	sxth	r2, r3
 800145c:	7c7b      	ldrb	r3, [r7, #17]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	b2db      	uxtb	r3, r3
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	84fb      	strh	r3, [r7, #38]	; 0x26
					  //convert to 2's complement, since temperature can be negative
					  if  (val > 0x7FF)
 8001468:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800146c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001470:	db05      	blt.n	800147e <main+0x132>
					  {
						  val |= 0xF000;
 8001472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001474:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001478:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800147c:	84fb      	strh	r3, [r7, #38]	; 0x26
					  }
					  // Convert to float temperature value (Celsius)
					  temp_c = val * 0.0625;
 800147e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f84e 	bl	8000524 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <main+0x210>)
 800148e:	f7ff f8b3 	bl	80005f8 <__aeabi_dmul>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	4618      	mov	r0, r3
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff fabf 	bl	8000a1c <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	61fb      	str	r3, [r7, #28]
					  // Convert temperature to decimal format
					  temp_c *= 100;
 80014a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001538 <main+0x1ec>
 80014aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ae:	edc7 7a07 	vstr	s15, [r7, #28]
					  sprintf ((char*)buf,
				              "%u.%u C\r\n",
							  ((unsigned int)temp_c/100),
 80014b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ba:	ee17 2a90 	vmov	r2, s15
					  sprintf ((char*)buf,
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <main+0x214>)
 80014c0:	fba3 2302 	umull	r2, r3, r3, r2
 80014c4:	095c      	lsrs	r4, r3, #5
							  ((unsigned int)temp_c %100));
 80014c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ce:	ee17 2a90 	vmov	r2, s15
					  sprintf ((char*)buf,
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <main+0x214>)
 80014d4:	fba3 1302 	umull	r1, r3, r3, r2
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	2164      	movs	r1, #100	; 0x64
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f107 0010 	add.w	r0, r7, #16
 80014e6:	4622      	mov	r2, r4
 80014e8:	491e      	ldr	r1, [pc, #120]	; (8001564 <main+0x218>)
 80014ea:	f006 facf 	bl	8007a8c <siprintf>
				  }
			  }
		// Send out buffer (temperature or error message)
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fe6c 	bl	80001d0 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f107 0110 	add.w	r1, r7, #16
 8001500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <main+0x21c>)
 8001506:	f005 fd28 	bl	8006f5a <HAL_UART_Transmit>

		sprintf(msg, "%hu\r\n", raw);
 800150a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4917      	ldr	r1, [pc, #92]	; (800156c <main+0x220>)
 8001510:	4618      	mov	r0, r3
 8001512:	f006 fabb 	bl	8007a8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe59 	bl	80001d0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	1d39      	adds	r1, r7, #4
 8001524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <main+0x21c>)
 800152a:	f005 fd16 	bl	8006f5a <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 800152e:	e74b      	b.n	80013c8 <main+0x7c>
 8001530:	461c4000 	.word	0x461c4000
 8001534:	2000026c 	.word	0x2000026c
 8001538:	42c80000 	.word	0x42c80000
 800153c:	3c23d70a 	.word	0x3c23d70a
 8001540:	3a83126f 	.word	0x3a83126f
 8001544:	20000190 	.word	0x20000190
 8001548:	200001ac 	.word	0x200001ac
 800154c:	200000ec 	.word	0x200000ec
 8001550:	2000012c 	.word	0x2000012c
 8001554:	200000a0 	.word	0x200000a0
 8001558:	08008d48 	.word	0x08008d48
 800155c:	3fb00000 	.word	0x3fb00000
 8001560:	51eb851f 	.word	0x51eb851f
 8001564:	08008d54 	.word	0x08008d54
 8001568:	200001ec 	.word	0x200001ec
 800156c:	08008d60 	.word	0x08008d60

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0b8      	sub	sp, #224	; 0xe0
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157a:	2244      	movs	r2, #68	; 0x44
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f006 fa7c 	bl	8007a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2288      	movs	r2, #136	; 0x88
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fa6e 	bl	8007a7c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015c6:	230a      	movs	r3, #10
 80015c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 ff60 	bl	80044a8 <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ee:	f000 fb17 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001610:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001614:	2104      	movs	r1, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fb2c 	bl	8004c74 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001622:	f000 fafd 	bl	8001c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001626:	f244 0342 	movw	r3, #16450	; 0x4042
 800162a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001634:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001638:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800163a:	2302      	movs	r3, #2
 800163c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001642:	2308      	movs	r3, #8
 8001644:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001646:	2307      	movs	r3, #7
 8001648:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001652:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001656:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fd0e 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001666:	f000 fadb 	bl	8001c20 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800166e:	f002 fec5 	bl	80043fc <HAL_PWREx_ControlVoltageScaling>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001678:	f000 fad2 	bl	8001c20 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	37e0      	adds	r7, #224	; 0xe0
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <MX_ADC1_Init+0xe8>)
 80016a8:	4a31      	ldr	r2, [pc, #196]	; (8001770 <MX_ADC1_Init+0xec>)
 80016aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_ADC1_Init+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_ADC1_Init+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_ADC1_Init+0xe8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_ADC1_Init+0xe8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_ADC1_Init+0xe8>)
 80016c6:	2204      	movs	r2, #4
 80016c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_ADC1_Init+0xe8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_ADC1_Init+0xe8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_ADC1_Init+0xe8>)
 80016d8:	2201      	movs	r2, #1
 80016da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_ADC1_Init+0xe8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC1_Init+0xe8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_ADC1_Init+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_ADC1_Init+0xe8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_ADC1_Init+0xe8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_ADC1_Init+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_ADC1_Init+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <MX_ADC1_Init+0xe8>)
 800170e:	f000 ff27 	bl	8002560 <HAL_ADC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001718:	f000 fa82 	bl	8001c20 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <MX_ADC1_Init+0xe8>)
 8001728:	f001 fdea 	bl	8003300 <HAL_ADCEx_MultiModeConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001732:	f000 fa75 	bl	8001c20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_ADC1_Init+0xf0>)
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800173a:	2306      	movs	r3, #6
 800173c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001742:	237f      	movs	r3, #127	; 0x7f
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001746:	2304      	movs	r3, #4
 8001748:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_ADC1_Init+0xe8>)
 8001754:	f001 f9f0 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800175e:	f000 fa5f 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000012c 	.word	0x2000012c
 8001770:	50040000 	.word	0x50040000
 8001774:	08600004 	.word	0x08600004

08001778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_I2C1_Init+0x74>)
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <MX_I2C1_Init+0x78>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_I2C1_Init+0x74>)
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <MX_I2C1_Init+0x7c>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_I2C1_Init+0x74>)
 8001790:	2201      	movs	r2, #1
 8001792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C1_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <MX_I2C1_Init+0x74>)
 80017b4:	f002 f922 	bl	80039fc <HAL_I2C_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017be:	f000 fa2f 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <MX_I2C1_Init+0x74>)
 80017c6:	f002 fd73 	bl	80042b0 <HAL_I2CEx_ConfigAnalogFilter>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017d0:	f000 fa26 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_I2C1_Init+0x74>)
 80017d8:	f002 fdb5 	bl	8004346 <HAL_I2CEx_ConfigDigitalFilter>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f000 fa1d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000a0 	.word	0x200000a0
 80017f0:	40005400 	.word	0x40005400
 80017f4:	10909cec 	.word	0x10909cec

080017f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b09e      	sub	sp, #120	; 0x78
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800180c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	222c      	movs	r2, #44	; 0x2c
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f006 f91a 	bl	8007a7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 800184a:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <MX_TIM1_Init+0x1b0>)
 800184c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800184e:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001850:	224f      	movs	r2, #79	; 0x4f
 8001852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001856:	2260      	movs	r2, #96	; 0x60
 8001858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 800185c:	2263      	movs	r2, #99	; 0x63
 800185e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001872:	484c      	ldr	r0, [pc, #304]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001874:	f004 f8b2 	bl	80059dc <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800187e:	f000 f9cf 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001886:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800188c:	4619      	mov	r1, r3
 800188e:	4845      	ldr	r0, [pc, #276]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001890:	f004 fbc0 	bl	8006014 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800189a:	f000 f9c1 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189e:	4841      	ldr	r0, [pc, #260]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 80018a0:	f004 f8f2 	bl	8005a88 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80018aa:	f000 f9b9 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80018b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ba:	4619      	mov	r1, r3
 80018bc:	4839      	ldr	r0, [pc, #228]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 80018be:	f004 fc62 	bl	8006186 <HAL_TIM_SlaveConfigSynchro>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80018c8:	f000 f9aa 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018dc:	4619      	mov	r1, r3
 80018de:	4831      	ldr	r0, [pc, #196]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 80018e0:	f005 f9a4 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80018ea:	f000 f999 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ee:	2360      	movs	r3, #96	; 0x60
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001914:	f004 fa66 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800191e:	f000 f97f 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	2204      	movs	r2, #4
 8001928:	4619      	mov	r1, r3
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 800192c:	f004 fa5a 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001936:	f000 f973 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	2208      	movs	r2, #8
 8001940:	4619      	mov	r1, r3
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001944:	f004 fa4e 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800194e:	f000 f967 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001978:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001988:	f005 f9d8 	bl	8006d3c <HAL_TIMEx_ConfigBreakDeadTime>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8001992:	f000 f945 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM1_Init+0x1ac>)
 8001998:	f000 fa34 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 800199c:	bf00      	nop
 800199e:	3778      	adds	r7, #120	; 0x78
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200001ac 	.word	0x200001ac
 80019a8:	40012c00 	.word	0x40012c00

080019ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <MX_TIM15_Init+0xa0>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019d4:	224f      	movs	r2, #79	; 0x4f
 80019d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019e0:	2263      	movs	r2, #99	; 0x63
 80019e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <MX_TIM15_Init+0x9c>)
 80019f8:	f003 fff0 	bl	80059dc <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001a02:	f000 f90d 	bl	8001c20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MX_TIM15_Init+0x9c>)
 8001a16:	f004 fbb6 	bl	8006186 <HAL_TIM_SlaveConfigSynchro>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001a20:	f000 f8fe 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM15_Init+0x9c>)
 8001a32:	f005 f8fb 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001a3c:	f000 f8f0 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200000ec 	.word	0x200000ec
 8001a4c:	40014000 	.word	0x40014000

08001a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <MX_USART2_UART_Init+0x5c>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART2_UART_Init+0x58>)
 8001a94:	f005 fa13 	bl	8006ebe <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f000 f8bf 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200001ec 	.word	0x200001ec
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2120      	movs	r1, #32
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f001 ff4d 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_GPIO_Init+0xc8>)
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001b48:	f001 fd98 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f001 fd89 	bl	800367c <HAL_GPIO_Init>

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	48000800 	.word	0x48000800

08001b80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	if(a==1000){
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001c0c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001b92:	eef4 7a47 	vcmp.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d105      	bne.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba4:	f001 ff12 	bl	80039cc <HAL_GPIO_WritePin>
	}
	OldSector = svpwm1.SectorPointer;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001baa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 2a90 	vmov	r2, s15
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8001bba:	4817      	ldr	r0, [pc, #92]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bbc:	f7ff fb70 	bl	80012a0 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001bc0:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001bc2:	4915      	ldr	r1, [pc, #84]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001bc6:	f7ff f93d 	bl	8000e44 <SVPWM_Update>
	if(a==1000){
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001c0c <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001bd4:	eef4 7a47 	vcmp.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d105      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f001 fef1 	bl	80039cc <HAL_GPIO_WritePin>
	}
	a = a+1;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200002a4 	.word	0x200002a4
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	2000026c 	.word	0x2000026c
 8001c14:	20000098 	.word	0x20000098
 8001c18:	20000190 	.word	0x20000190
 8001c1c:	200001ac 	.word	0x200001ac

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_MspInit+0x44>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_MspInit+0x44>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_MspInit+0x44>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_MspInit+0x44>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_MspInit+0x44>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_MspInit+0x44>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_ADC_MspInit+0x74>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d123      	bne.n	8001ce2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_ADC_MspInit+0x78>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cce:	230b      	movs	r3, #11
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_ADC_MspInit+0x7c>)
 8001cde:	f001 fccd 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	50040000 	.word	0x50040000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_I2C_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d128      	bne.n	8001d6c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d38:	2312      	movs	r3, #18
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d44:	2304      	movs	r3, #4
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_I2C_MspInit+0x84>)
 8001d50:	f001 fc94 	bl	800367c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_TIM_Base_MspInit+0x78>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d114      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	2018      	movs	r0, #24
 8001db0:	f001 fc2d 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001db4:	2018      	movs	r0, #24
 8001db6:	f001 fc46 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001dba:	e018      	b.n	8001dee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_TIM_Base_MspInit+0x80>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d113      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_TIM_Base_MspInit+0x7c>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2018      	movs	r0, #24
 8001de4:	f001 fc13 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001de8:	2018      	movs	r0, #24
 8001dea:	f001 fc2c 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40014000 	.word	0x40014000

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <HAL_TIM_MspPostInit+0xa0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d13a      	bne.n	8001e9c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_TIM_MspPostInit+0xa4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	480e      	ldr	r0, [pc, #56]	; (8001eac <HAL_TIM_MspPostInit+0xa8>)
 8001e74:	f001 fc02 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f001 fbf0 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x7c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d128      	bne.n	8001f24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_UART_MspInit+0x80>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f02:	230c      	movs	r3, #12
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f12:	2307      	movs	r3, #7
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f001 fbac 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	40021000 	.word	0x40021000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f8f6 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001f96:	f003 fe05 	bl	8005ba4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001f9c:	f003 fe02 	bl	8005ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200001ac 	.word	0x200001ac
 8001fa8:	200000ec 	.word	0x200000ec

08001fac <_sbrk>:
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x50>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x16>
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <_sbrk+0x50>)
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <_sbrk+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <_sbrk+0x50>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <_sbrk+0x50>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	466a      	mov	r2, sp
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d907      	bls.n	8001fe6 <_sbrk+0x3a>
 8001fd6:	f005 fd27 	bl	8007a28 <__errno>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	230c      	movs	r3, #12
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	e006      	b.n	8001ff4 <_sbrk+0x48>
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <_sbrk+0x50>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <_sbrk+0x50>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000008c 	.word	0x2000008c
 8002000:	200002b0 	.word	0x200002b0

08002004 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <SystemInit+0x64>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <SystemInit+0x64>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <SystemInit+0x68>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <SystemInit+0x68>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <SystemInit+0x68>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <SystemInit+0x68>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <SystemInit+0x68>)
 8002030:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002034:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002038:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <SystemInit+0x68>)
 800203c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002040:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <SystemInit+0x68>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <SystemInit+0x68>)
 8002048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <SystemInit+0x68>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SystemInit+0x64>)
 8002056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205a:	609a      	str	r2, [r3, #8]
#endif
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00
 800206c:	40021000 	.word	0x40021000

08002070 <Reset_Handler>:
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopForever+0x2>
 8002074:	2100      	movs	r1, #0
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopForever+0x6>)
 800207a:	585b      	ldr	r3, [r3, r1]
 800207c:	5043      	str	r3, [r0, r1]
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <LoopForever+0xa>)
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <LoopForever+0xe>)
 8002084:	1842      	adds	r2, r0, r1
 8002086:	429a      	cmp	r2, r3
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopForever+0x12>)
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
 800208e:	2300      	movs	r3, #0
 8002090:	f842 3b04 	str.w	r3, [r2], #4

08002094 <LoopFillZerobss>:
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <LoopForever+0x16>)
 8002096:	429a      	cmp	r2, r3
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>
 800209a:	f7ff ffb3 	bl	8002004 <SystemInit>
 800209e:	f005 fcc9 	bl	8007a34 <__libc_init_array>
 80020a2:	f7ff f953 	bl	800134c <main>

080020a6 <LoopForever>:
 80020a6:	e7fe      	b.n	80020a6 <LoopForever>
 80020a8:	20018000 	.word	0x20018000
 80020ac:	080091c4 	.word	0x080091c4
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000070 	.word	0x20000070
 80020b8:	20000070 	.word	0x20000070
 80020bc:	200002b0 	.word	0x200002b0

080020c0 <ADC1_2_IRQHandler>:
 80020c0:	e7fe      	b.n	80020c0 <ADC1_2_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_Init+0x3c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_Init+0x3c>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020da:	2003      	movs	r0, #3
 80020dc:	f001 fa8c 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 f80f 	bl	8002104 <HAL_InitTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	e001      	b.n	80020f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020f2:	f7ff fd9d 	bl	8001c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f6:	79fb      	ldrb	r3, [r7, #7]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_InitTick+0x68>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d022      	beq.n	800215e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_InitTick+0x6c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_InitTick+0x68>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fa98 	bl	8003662 <HAL_SYSTICK_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	d809      	bhi.n	8002152 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213e:	2200      	movs	r2, #0
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002146:	f001 fa62 	bl	800360e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_InitTick+0x70>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e007      	b.n	8002162 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e004      	b.n	8002162 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e001      	b.n	8002162 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000008 	.word	0x20000008
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_IncTick+0x1c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_IncTick+0x20>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4413      	add	r3, r2
 8002186:	4a03      	ldr	r2, [pc, #12]	; (8002194 <HAL_IncTick+0x1c>)
 8002188:	6013      	str	r3, [r2, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200002a8 	.word	0x200002a8
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200002a8 	.word	0x200002a8

080021b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800221c:	b490      	push	{r4, r7}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3360      	adds	r3, #96	; 0x60
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002238:	6822      	ldr	r2, [r4, #0]
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <LL_ADC_SetOffset+0x40>)
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	4313      	orrs	r3, r2
 800224a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800224e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bc90      	pop	{r4, r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	03fff000 	.word	0x03fff000

08002260 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002260:	b490      	push	{r4, r7}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	461a      	mov	r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bc90      	pop	{r4, r7}
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002288:	b490      	push	{r4, r7}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc90      	pop	{r4, r7}
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022de:	b490      	push	{r4, r7}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3330      	adds	r3, #48	; 0x30
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	4413      	add	r3, r2
 80022fc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	211f      	movs	r1, #31
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	f003 011f 	and.w	r1, r3, #31
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bc90      	pop	{r4, r7}
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002330:	b490      	push	{r4, r7}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3314      	adds	r3, #20
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	0d1b      	lsrs	r3, r3, #20
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2107      	movs	r1, #7
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0d1b      	lsrs	r3, r3, #20
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bc90      	pop	{r4, r7}
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0318 	and.w	r3, r3, #24
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023a4:	40d9      	lsrs	r1, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	400b      	ands	r3, r1
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	0007ffff 	.word	0x0007ffff

080023c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 031f 	and.w	r3, r3, #31
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6093      	str	r3, [r2, #8]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002438:	d101      	bne.n	800243e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002460:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002488:	d101      	bne.n	800248e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <LL_ADC_IsEnabled+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_IsEnabled+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024fe:	f043 0204 	orr.w	r2, r3, #4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d101      	bne.n	800252a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b08      	cmp	r3, #8
 800254a:	d101      	bne.n	8002550 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e134      	b.n	80027e4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fb75 	bl	8001c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff3f 	bl	8002424 <LL_ADC_IsDeepPowerDownEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff25 	bl	8002400 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff5a 	bl	8002474 <LL_ADC_IsInternalRegulatorEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff3e 	bl	800244c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <HAL_ADC_Init+0x28c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	4a86      	ldr	r2, [pc, #536]	; (80027f0 <HAL_ADC_Init+0x290>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff3e 	bl	8002474 <LL_ADC_IsInternalRegulatorEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff77 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 8002624:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 80cf 	bne.w	80027d2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80cb 	bne.w	80027d2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002644:	f043 0202 	orr.w	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff37 	bl	80024c4 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d115      	bne.n	8002688 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800265c:	4865      	ldr	r0, [pc, #404]	; (80027f4 <HAL_ADC_Init+0x294>)
 800265e:	f7ff ff31 	bl	80024c4 <LL_ADC_IsEnabled>
 8002662:	4604      	mov	r4, r0
 8002664:	4864      	ldr	r0, [pc, #400]	; (80027f8 <HAL_ADC_Init+0x298>)
 8002666:	f7ff ff2d 	bl	80024c4 <LL_ADC_IsEnabled>
 800266a:	4603      	mov	r3, r0
 800266c:	431c      	orrs	r4, r3
 800266e:	4863      	ldr	r0, [pc, #396]	; (80027fc <HAL_ADC_Init+0x29c>)
 8002670:	f7ff ff28 	bl	80024c4 <LL_ADC_IsEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	4323      	orrs	r3, r4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	485f      	ldr	r0, [pc, #380]	; (8002800 <HAL_ADC_Init+0x2a0>)
 8002684:	f7ff fd96 	bl	80021b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e5b      	ldrb	r3, [r3, #25]
 800268c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002692:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002698:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800269e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	3b01      	subs	r3, #1
 80026bc:	045b      	lsls	r3, r3, #17
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_ADC_Init+0x2a4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff0a 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 80026fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff17 	bl	8002538 <LL_ADC_INJ_IsConversionOngoing>
 800270a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13d      	bne.n	800278e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d13a      	bne.n	800278e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800271c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002724:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002748:	2b01      	cmp	r3, #1
 800274a:	d118      	bne.n	800277e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800276e:	430a      	orrs	r2, r1
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	e007      	b.n	800278e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10c      	bne.n	80027b0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f023 010f 	bic.w	r1, r3, #15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
 80027ae:	e007      	b.n	80027c0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020f 	bic.w	r2, r2, #15
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f023 0303 	bic.w	r3, r3, #3
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
 80027d0:	e007      	b.n	80027e2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0210 	orr.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3724      	adds	r7, #36	; 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	20000000 	.word	0x20000000
 80027f0:	053e2d63 	.word	0x053e2d63
 80027f4:	50040000 	.word	0x50040000
 80027f8:	50040100 	.word	0x50040100
 80027fc:	50040200 	.word	0x50040200
 8002800:	50040300 	.word	0x50040300
 8002804:	fff0c007 	.word	0xfff0c007

08002808 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002810:	4857      	ldr	r0, [pc, #348]	; (8002970 <HAL_ADC_Start+0x168>)
 8002812:	f7ff fdd9 	bl	80023c8 <LL_ADC_GetMultimode>
 8002816:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fe78 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 809c 	bne.w	8002962 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ADC_Start+0x30>
 8002834:	2302      	movs	r3, #2
 8002836:	e097      	b.n	8002968 <HAL_ADC_Start+0x160>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fcdd 	bl	8003200 <ADC_Enable>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8083 	bne.w	8002958 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_ADC_Start+0x16c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d002      	beq.n	8002876 <HAL_ADC_Start+0x6e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e000      	b.n	8002878 <HAL_ADC_Start+0x70>
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_ADC_Start+0x170>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4293      	cmp	r3, r2
 800287e:	d002      	beq.n	8002886 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	d106      	bne.n	80028ae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f023 0206 	bic.w	r2, r3, #6
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58
 80028ac:	e002      	b.n	80028b4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	221c      	movs	r2, #28
 80028ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <HAL_ADC_Start+0x16c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d002      	beq.n	80028d4 <HAL_ADC_Start+0xcc>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_Start+0xce>
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_ADC_Start+0x170>)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	4293      	cmp	r3, r2
 80028dc:	d008      	beq.n	80028f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d002      	beq.n	80028f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d114      	bne.n	800291a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fde9 	bl	80024ea <LL_ADC_REG_StartConversion>
 8002918:	e025      	b.n	8002966 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_ADC_Start+0x16c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_Start+0x12e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e000      	b.n	8002938 <HAL_ADC_Start+0x130>
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_ADC_Start+0x170>)
 8002938:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00f      	beq.n	8002966 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800294e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
 8002956:	e006      	b.n	8002966 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002960:	e001      	b.n	8002966 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	50040300 	.word	0x50040300
 8002974:	50040100 	.word	0x50040100
 8002978:	50040000 	.word	0x50040000

0800297c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002986:	4862      	ldr	r0, [pc, #392]	; (8002b10 <HAL_ADC_PollForConversion+0x194>)
 8002988:	f7ff fd1e 	bl	80023c8 <LL_ADC_GetMultimode>
 800298c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d102      	bne.n	800299c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002996:	2308      	movs	r3, #8
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e02a      	b.n	80029f2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e09d      	b.n	8002b08 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029cc:	2304      	movs	r3, #4
 80029ce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029d0:	e00f      	b.n	80029f2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029d2:	484f      	ldr	r0, [pc, #316]	; (8002b10 <HAL_ADC_PollForConversion+0x194>)
 80029d4:	f7ff fd06 	bl	80023e4 <LL_ADC_GetMultiDMATransfer>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e08c      	b.n	8002b08 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029ee:	2304      	movs	r3, #4
 80029f0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029f2:	f7ff fbd3 	bl	800219c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029f8:	e01a      	b.n	8002a30 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d016      	beq.n	8002a30 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a02:	f7ff fbcb 	bl	800219c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <HAL_ADC_PollForConversion+0x9c>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e06b      	b.n	8002b08 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0dd      	beq.n	80029fa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fc32 	bl	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01c      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e5b      	ldrb	r3, [r3, #25]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d111      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_ADC_PollForConversion+0x198>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d002      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0x128>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e000      	b.n	8002aa6 <HAL_ADC_PollForConversion+0x12a>
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_ADC_PollForConversion+0x19c>)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d008      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d002      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d104      	bne.n	8002aca <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	e00c      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <HAL_ADC_PollForConversion+0x198>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d002      	beq.n	8002ada <HAL_ADC_PollForConversion+0x15e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e000      	b.n	8002adc <HAL_ADC_PollForConversion+0x160>
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_ADC_PollForConversion+0x19c>)
 8002adc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d104      	bne.n	8002af4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e008      	b.n	8002b06 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	50040300 	.word	0x50040300
 8002b14:	50040100 	.word	0x50040100
 8002b18:	50040000 	.word	0x50040000

08002b1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0a6      	sub	sp, #152	; 0x98
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x22>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e348      	b.n	80031ec <HAL_ADC_ConfigChannel+0x6b4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fcd3 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8329 	bne.w	80031c6 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d824      	bhi.n	8002bc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	3b02      	subs	r3, #2
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d81b      	bhi.n	8002bbe <HAL_ADC_ConfigChannel+0x86>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_ADC_ConfigChannel+0x54>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002ba5 	.word	0x08002ba5
 8002b94:	08002bad 	.word	0x08002bad
 8002b98:	08002bb5 	.word	0x08002bb5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	e011      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2212      	movs	r2, #18
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	e00d      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2218      	movs	r2, #24
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e009      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2206      	movs	r2, #6
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002bc6:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fb82 	bl	80022de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc97 	bl	8002512 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fca3 	bl	8002538 <LL_ADC_INJ_IsConversionOngoing>
 8002bf2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8148 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 8143 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f7ff fb8a 	bl	8002330 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00a      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4e:	f7ff fae5 	bl	800221c <LL_ADC_SetOffset>
 8002c52:	e11d      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fb00 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x148>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff faf5 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	e012      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x16e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff faea 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x186>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e00a      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x19c>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fad1 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fab7 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x1da>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff faac 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	e010      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x1fc>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff faa1 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x214>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	e00a      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x22a>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d106      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fa8a 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fa70 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x268>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2102      	movs	r1, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fa65 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	f003 021f 	and.w	r2, r3, #31
 8002d9e:	e010      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x28a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fa5a 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x2a2>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	e00a      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x2b8>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fa43 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fa29 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x2f6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa1e 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	e010      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x318>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2103      	movs	r1, #3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fa13 	bl	8002260 <LL_ADC_GetOffsetChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x330>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	e00a      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x346>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d106      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2103      	movs	r1, #3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f9fc 	bl	8002288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fb15 	bl	80024c4 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 810c 	bne.w	80030ba <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7ff fa66 	bl	8002380 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4aad      	ldr	r2, [pc, #692]	; (8003170 <HAL_ADC_ConfigChannel+0x638>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f040 80fd 	bne.w	80030ba <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x3b0>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e012      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x3d6>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d064      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x3f6>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	e00e      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x414>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x434>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	e010      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x456>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x47c>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	e011      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x4a0>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	e069      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x4c0>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff6:	e00e      	b.n	8003016 <HAL_ADC_ConfigChannel+0x4de>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	61fb      	str	r3, [r7, #28]
  return result;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x4fe>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	e010      	b.n	8003058 <HAL_ADC_ConfigChannel+0x520>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	617b      	str	r3, [r7, #20]
  return result;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	ea42 0103 	orr.w	r1, r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x54c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	3301      	adds	r3, #1
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003082:	e014      	b.n	80030ae <HAL_ADC_ConfigChannel+0x576>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	60fb      	str	r3, [r7, #12]
  return result;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	3b1e      	subs	r3, #30
 80030a8:	051b      	lsls	r3, r3, #20
 80030aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ae:	430b      	orrs	r3, r1
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7ff f93b 	bl	8002330 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_ADC_ConfigChannel+0x63c>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 808c 	beq.w	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	482b      	ldr	r0, [pc, #172]	; (8003178 <HAL_ADC_ConfigChannel+0x640>)
 80030ca:	f7ff f899 	bl	8002200 <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_ADC_ConfigChannel+0x644>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d12b      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x5fc>
 80030dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d125      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <HAL_ADC_ConfigChannel+0x648>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x5c4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a23      	ldr	r2, [pc, #140]	; (8003184 <HAL_ADC_ConfigChannel+0x64c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d16e      	bne.n	80031da <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003104:	4619      	mov	r1, r3
 8003106:	481c      	ldr	r0, [pc, #112]	; (8003178 <HAL_ADC_ConfigChannel+0x640>)
 8003108:	f7ff f867 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_ADC_ConfigChannel+0x650>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a1e      	ldr	r2, [pc, #120]	; (800318c <HAL_ADC_ConfigChannel+0x654>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099a      	lsrs	r2, r3, #6
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003124:	e002      	b.n	800312c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003132:	e052      	b.n	80031da <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_ADC_ConfigChannel+0x658>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d12a      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x65c>
 800313e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d124      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_ADC_ConfigChannel+0x648>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_ADC_ConfigChannel+0x626>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_ADC_ConfigChannel+0x64c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d13f      	bne.n	80031de <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	4619      	mov	r1, r3
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <HAL_ADC_ConfigChannel+0x640>)
 800316a:	f7ff f836 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316e:	e036      	b.n	80031de <HAL_ADC_ConfigChannel+0x6a6>
 8003170:	407f0000 	.word	0x407f0000
 8003174:	80080000 	.word	0x80080000
 8003178:	50040300 	.word	0x50040300
 800317c:	c7520000 	.word	0xc7520000
 8003180:	50040000 	.word	0x50040000
 8003184:	50040200 	.word	0x50040200
 8003188:	20000000 	.word	0x20000000
 800318c:	053e2d63 	.word	0x053e2d63
 8003190:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_ADC_ConfigChannel+0x6bc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d120      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800319e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11a      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_ADC_ConfigChannel+0x6c0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d115      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031bc:	4619      	mov	r1, r3
 80031be:	480f      	ldr	r0, [pc, #60]	; (80031fc <HAL_ADC_ConfigChannel+0x6c4>)
 80031c0:	f7ff f80b 	bl	80021da <LL_ADC_SetCommonPathInternalCh>
 80031c4:	e00c      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3798      	adds	r7, #152	; 0x98
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	80000001 	.word	0x80000001
 80031f8:	50040000 	.word	0x50040000
 80031fc:	50040300 	.word	0x50040300

08003200 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f959 	bl	80024c4 <LL_ADC_IsEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d146      	bne.n	80032a6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <ADC_Enable+0xb0>)
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e032      	b.n	80032a8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f928 	bl	800249c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800324c:	f7fe ffa6 	bl	800219c <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003252:	e021      	b.n	8003298 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f933 	bl	80024c4 <LL_ADC_IsEnabled>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f917 	bl	800249c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800326e:	f7fe ff95 	bl	800219c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d90d      	bls.n	8003298 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d1d6      	bne.n	8003254 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	8000003f 	.word	0x8000003f

080032b4 <LL_ADC_IsEnabled>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <LL_ADC_IsEnabled+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_IsEnabled+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_REG_IsConversionOngoing>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d101      	bne.n	80032f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b09f      	sub	sp, #124	; 0x7c
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800331a:	2302      	movs	r3, #2
 800331c:	e08f      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003330:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e001      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e072      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffbd 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 8003360:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffb7 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d154      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	2b00      	cmp	r3, #0
 8003376:	d151      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800337a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02c      	beq.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003396:	035b      	lsls	r3, r3, #13
 8003398:	430b      	orrs	r3, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a0:	4829      	ldr	r0, [pc, #164]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033a2:	f7ff ff87 	bl	80032b4 <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4828      	ldr	r0, [pc, #160]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033aa:	f7ff ff83 	bl	80032b4 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	4828      	ldr	r0, [pc, #160]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033b4:	f7ff ff7e 	bl	80032b4 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d137      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	6811      	ldr	r1, [r2, #0]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	431a      	orrs	r2, r3
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	e028      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ea:	4817      	ldr	r0, [pc, #92]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033ec:	f7ff ff62 	bl	80032b4 <LL_ADC_IsEnabled>
 80033f0:	4604      	mov	r4, r0
 80033f2:	4816      	ldr	r0, [pc, #88]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033f4:	f7ff ff5e 	bl	80032b4 <LL_ADC_IsEnabled>
 80033f8:	4603      	mov	r3, r0
 80033fa:	431c      	orrs	r4, r3
 80033fc:	4815      	ldr	r0, [pc, #84]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033fe:	f7ff ff59 	bl	80032b4 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	4323      	orrs	r3, r4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d112      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003412:	f023 030f 	bic.w	r3, r3, #15
 8003416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003418:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800341a:	e009      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800342e:	e000      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003430:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800343a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800343e:	4618      	mov	r0, r3
 8003440:	377c      	adds	r7, #124	; 0x7c
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop
 8003448:	50040000 	.word	0x50040000
 800344c:	50040100 	.word	0x50040100
 8003450:	50040300 	.word	0x50040300
 8003454:	50040200 	.word	0x50040200

08003458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <__NVIC_GetPriorityGrouping+0x18>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 0307 	and.w	r3, r3, #7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db0b      	blt.n	80034e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <__NVIC_EnableIRQ+0x38>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	; (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c4:	d301      	bcc.n	80035ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00f      	b.n	80035ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <SysTick_Config+0x40>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d2:	210f      	movs	r1, #15
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d8:	f7ff ff8e 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <SysTick_Config+0x40>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <SysTick_Config+0x40>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	e000e010 	.word	0xe000e010

080035f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff29 	bl	8003458 <__NVIC_SetPriorityGrouping>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003620:	f7ff ff3e 	bl	80034a0 <__NVIC_GetPriorityGrouping>
 8003624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff8e 	bl	800354c <NVIC_EncodePriority>
 8003630:	4602      	mov	r2, r0
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff31 	bl	80034bc <__NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffa2 	bl	80035b4 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368a:	e17f      	b.n	800398c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8171 	beq.w	8003986 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d00b      	beq.n	80036c4 <HAL_GPIO_Init+0x48>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d007      	beq.n	80036c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036b8:	2b11      	cmp	r3, #17
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b12      	cmp	r3, #18
 80036c2:	d130      	bne.n	8003726 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036fa:	2201      	movs	r2, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0201 	and.w	r2, r3, #1
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d118      	bne.n	8003764 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	08db      	lsrs	r3, r3, #3
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x128>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d123      	bne.n	80037ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	220f      	movs	r2, #15
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	6939      	ldr	r1, [r7, #16]
 80037e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80ac 	beq.w	8003986 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_GPIO_Init+0x32c>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_GPIO_Init+0x32c>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6613      	str	r3, [r2, #96]	; 0x60
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_GPIO_Init+0x32c>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003846:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_GPIO_Init+0x330>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003870:	d025      	beq.n	80038be <HAL_GPIO_Init+0x242>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4e      	ldr	r2, [pc, #312]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <HAL_GPIO_Init+0x23e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <HAL_GPIO_Init+0x338>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x23a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4c      	ldr	r2, [pc, #304]	; (80039b8 <HAL_GPIO_Init+0x33c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x236>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <HAL_GPIO_Init+0x340>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x232>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <HAL_GPIO_Init+0x344>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x22e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <HAL_GPIO_Init+0x348>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x22a>
 80038a2:	2306      	movs	r3, #6
 80038a4:	e00c      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038a6:	2307      	movs	r3, #7
 80038a8:	e00a      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038aa:	2305      	movs	r3, #5
 80038ac:	e008      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e006      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e004      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038be:	2300      	movs	r3, #0
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	4093      	lsls	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038d0:	4936      	ldr	r1, [pc, #216]	; (80039ac <HAL_GPIO_Init+0x330>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038de:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003902:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003980:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f ae78 	bne.w	800368c <HAL_GPIO_Init+0x10>
  }
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010000 	.word	0x40010000
 80039b0:	48000400 	.word	0x48000400
 80039b4:	48000800 	.word	0x48000800
 80039b8:	48000c00 	.word	0x48000c00
 80039bc:	48001000 	.word	0x48001000
 80039c0:	48001400 	.word	0x48001400
 80039c4:	48001800 	.word	0x48001800
 80039c8:	40010400 	.word	0x40010400

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039e8:	e002      	b.n	80039f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e081      	b.n	8003b12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe f968 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	e006      	b.n	8003a84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d104      	bne.n	8003a96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	ea42 0103 	orr.w	r1, r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	461a      	mov	r2, r3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	f040 80da 	bne.w	8003cf2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_I2C_Master_Transmit+0x30>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e0d3      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b54:	f7fe fb22 	bl	800219c <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2319      	movs	r3, #25
 8003b60:	2201      	movs	r2, #1
 8003b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f9e6 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0be      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2221      	movs	r2, #33	; 0x21
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2210      	movs	r2, #16
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2bff      	cmp	r3, #255	; 0xff
 8003ba6:	d90e      	bls.n	8003bc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	22ff      	movs	r2, #255	; 0xff
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	8979      	ldrh	r1, [r7, #10]
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_I2C_Master_Transmit+0x1e0>)
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb48 	bl	8004254 <I2C_TransferConfig>
 8003bc4:	e06c      	b.n	8003ca0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	8979      	ldrh	r1, [r7, #10]
 8003bd8:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_I2C_Master_Transmit+0x1e0>)
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fb37 	bl	8004254 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003be6:	e05b      	b.n	8003ca0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6a39      	ldr	r1, [r7, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f9e3 	bl	8003fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e07b      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d034      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x184>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d130      	bne.n	8003ca0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f975 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e04d      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2bff      	cmp	r3, #255	; 0xff
 8003c60:	d90e      	bls.n	8003c80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 faeb 	bl	8004254 <I2C_TransferConfig>
 8003c7e:	e00f      	b.n	8003ca0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fada 	bl	8004254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d19e      	bne.n	8003be8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	6a39      	ldr	r1, [r7, #32]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9c2 	bl	8004038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e01a      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_I2C_Master_Transmit+0x1e4>)
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	80002000 	.word	0x80002000
 8003d00:	fe00e800 	.word	0xfe00e800

08003d04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
 8003d14:	4613      	mov	r3, r2
 8003d16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	f040 80db 	bne.w	8003edc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2C_Master_Receive+0x30>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e0d4      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fa2e 	bl	800219c <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2319      	movs	r3, #25
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f8f2 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0bf      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2222      	movs	r2, #34	; 0x22
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	893a      	ldrh	r2, [r7, #8]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d90e      	bls.n	8003dae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	8979      	ldrh	r1, [r7, #10]
 8003d9e:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_I2C_Master_Receive+0x1e4>)
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa54 	bl	8004254 <I2C_TransferConfig>
 8003dac:	e06d      	b.n	8003e8a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <HAL_I2C_Master_Receive+0x1e4>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fa43 	bl	8004254 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003dce:	e05c      	b.n	8003e8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f96b 	bl	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e07c      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d034      	beq.n	8003e8a <HAL_I2C_Master_Receive+0x186>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d130      	bne.n	8003e8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f880 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e04d      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2bff      	cmp	r3, #255	; 0xff
 8003e4a:	d90e      	bls.n	8003e6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f9f6 	bl	8004254 <I2C_TransferConfig>
 8003e68:	e00f      	b.n	8003e8a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	8979      	ldrh	r1, [r7, #10]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f9e5 	bl	8004254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d19d      	bne.n	8003dd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6a39      	ldr	r1, [r7, #32]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8cd 	bl	8004038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e01a      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2220      	movs	r2, #32
 8003eae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_I2C_Master_Receive+0x1e8>)
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	80002400 	.word	0x80002400
 8003eec:	fe00e800 	.word	0xfe00e800

08003ef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	619a      	str	r2, [r3, #24]
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e022      	b.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f50:	d01e      	beq.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe f923 	bl	800219c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d113      	bne.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e00f      	b.n	8003fb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d0cd      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fc4:	e02c      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8dc 	bl	8004188 <I2C_IsAcknowledgeFailed>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e02a      	b.n	8004030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe0:	d01e      	beq.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fe f8db 	bl	800219c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e007      	b.n	8004030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d1cb      	bne.n	8003fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004044:	e028      	b.n	8004098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f89c 	bl	8004188 <I2C_IsAcknowledgeFailed>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e026      	b.n	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fe f89f 	bl	800219c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e007      	b.n	80040a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d1cf      	bne.n	8004046 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040bc:	e055      	b.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f860 	bl	8004188 <I2C_IsAcknowledgeFailed>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e053      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d129      	bne.n	8004134 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d105      	bne.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e03f      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2220      	movs	r2, #32
 8004100:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800410e:	400b      	ands	r3, r1
 8004110:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e022      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fe f832 	bl	800219c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e007      	b.n	800417a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d1a2      	bne.n	80040be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	fe00e800 	.word	0xfe00e800

08004188 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d151      	bne.n	8004246 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a2:	e022      	b.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041aa:	d01e      	beq.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fd fff6 	bl	800219c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_IsAcknowledgeFailed+0x3a>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e02e      	b.n	8004248 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d1d5      	bne.n	80041a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2220      	movs	r2, #32
 8004206:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fe71 	bl	8003ef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <I2C_IsAcknowledgeFailed+0xc8>)
 800421a:	400b      	ands	r3, r1
 800421c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fe00e800 	.word	0xfe00e800

08004254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	817b      	strh	r3, [r7, #10]
 8004262:	4613      	mov	r3, r2
 8004264:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <I2C_TransferConfig+0x58>)
 8004276:	430b      	orrs	r3, r1
 8004278:	43db      	mvns	r3, r3
 800427a:	ea02 0103 	and.w	r1, r2, r3
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004284:	7a7b      	ldrb	r3, [r7, #9]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	431a      	orrs	r2, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	03ff63ff 	.word	0x03ff63ff

080042b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d138      	bne.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e032      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	d139      	bne.n	80043d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004366:	2302      	movs	r3, #2
 8004368:	e033      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	; 0x24
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40007000 	.word	0x40007000

080043fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440a:	d130      	bne.n	800446e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d038      	beq.n	800448c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2232      	movs	r2, #50	; 0x32
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9b      	lsrs	r3, r3, #18
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004440:	e002      	b.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b01      	subs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d102      	bne.n	800445c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f2      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d110      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d007      	beq.n	800448c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004484:	4a05      	ldr	r2, [pc, #20]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800448a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40007000 	.word	0x40007000
 80044a0:	20000000 	.word	0x20000000
 80044a4:	431bde83 	.word	0x431bde83

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e3d4      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ba:	4ba1      	ldr	r3, [pc, #644]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c4:	4b9e      	ldr	r3, [pc, #632]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80e4 	beq.w	80046a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_RCC_OscConfig+0x4a>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	f040 808b 	bne.w	8004600 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 8087 	bne.w	8004600 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f2:	4b93      	ldr	r3, [pc, #588]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e3ac      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	4b8c      	ldr	r3, [pc, #560]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_RCC_OscConfig+0x7c>
 800451a:	4b89      	ldr	r3, [pc, #548]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004522:	e005      	b.n	8004530 <HAL_RCC_OscConfig+0x88>
 8004524:	4b86      	ldr	r3, [pc, #536]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	4293      	cmp	r3, r2
 8004532:	d223      	bcs.n	800457c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fd3f 	bl	8004fbc <RCC_SetFlashLatencyFromMSIRange>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e38d      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004548:	4b7d      	ldr	r3, [pc, #500]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a7c      	ldr	r2, [pc, #496]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800454e:	f043 0308 	orr.w	r3, r3, #8
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b7a      	ldr	r3, [pc, #488]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4977      	ldr	r1, [pc, #476]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004566:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	4972      	ldr	r1, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
 800457a:	e025      	b.n	80045c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457c:	4b70      	ldr	r3, [pc, #448]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6f      	ldr	r2, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004582:	f043 0308 	orr.w	r3, r3, #8
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b6d      	ldr	r3, [pc, #436]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	496a      	ldr	r1, [pc, #424]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459a:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4965      	ldr	r1, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fcff 	bl	8004fbc <RCC_SetFlashLatencyFromMSIRange>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e34d      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c8:	f000 fc36 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	4a5a      	ldr	r2, [pc, #360]	; (8004744 <HAL_RCC_OscConfig+0x29c>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa21 f303 	lsr.w	r3, r1, r3
 80045e4:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_RCC_OscConfig+0x2a0>)
 80045e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045e8:	4b58      	ldr	r3, [pc, #352]	; (800474c <HAL_RCC_OscConfig+0x2a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fd89 	bl	8002104 <HAL_InitTick>
 80045f2:	4603      	mov	r3, r0
 80045f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d052      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	e331      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d032      	beq.n	800466e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004608:	4b4d      	ldr	r3, [pc, #308]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a4c      	ldr	r2, [pc, #304]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004614:	f7fd fdc2 	bl	800219c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800461c:	f7fd fdbe 	bl	800219c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e31a      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800462e:	4b44      	ldr	r3, [pc, #272]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800463a:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a40      	ldr	r2, [pc, #256]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b3e      	ldr	r3, [pc, #248]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	493b      	ldr	r1, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004658:	4b39      	ldr	r3, [pc, #228]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4936      	ldr	r1, [pc, #216]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e01a      	b.n	80046a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800466e:	4b34      	ldr	r3, [pc, #208]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a33      	ldr	r2, [pc, #204]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800467a:	f7fd fd8f 	bl	800219c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004682:	f7fd fd8b 	bl	800219c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e2e7      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x1da>
 80046a0:	e000      	b.n	80046a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d074      	beq.n	800479a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x21a>
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d10e      	bne.n	80046da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d10b      	bne.n	80046da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c2:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d064      	beq.n	8004798 <HAL_RCC_OscConfig+0x2f0>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d160      	bne.n	8004798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e2c4      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x24a>
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e01d      	b.n	800472e <HAL_RCC_OscConfig+0x286>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_OscConfig+0x26e>
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e00b      	b.n	800472e <HAL_RCC_OscConfig+0x286>
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 800471c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a06      	ldr	r2, [pc, #24]	; (8004740 <HAL_RCC_OscConfig+0x298>)
 8004728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01c      	beq.n	8004770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd fd31 	bl	800219c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473c:	e011      	b.n	8004762 <HAL_RCC_OscConfig+0x2ba>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	08008d68 	.word	0x08008d68
 8004748:	20000000 	.word	0x20000000
 800474c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd fd24 	bl	800219c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e280      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004762:	4baf      	ldr	r3, [pc, #700]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x2a8>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fd fd14 	bl	800219c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7fd fd10 	bl	800219c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e26c      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478a:	4ba5      	ldr	r3, [pc, #660]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x2d0>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d060      	beq.n	8004868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_OscConfig+0x310>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d119      	bne.n	80047e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d116      	bne.n	80047e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b8:	4b99      	ldr	r3, [pc, #612]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_OscConfig+0x328>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e249      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b93      	ldr	r3, [pc, #588]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	4990      	ldr	r1, [pc, #576]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e4:	e040      	b.n	8004868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d023      	beq.n	8004836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ee:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a8b      	ldr	r2, [pc, #556]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fccf 	bl	800219c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fd fccb 	bl	800219c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e227      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004814:	4b82      	ldr	r3, [pc, #520]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004820:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	497c      	ldr	r1, [pc, #496]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	e018      	b.n	8004868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004836:	4b7a      	ldr	r3, [pc, #488]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a79      	ldr	r2, [pc, #484]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd fcab 	bl	800219c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fd fca7 	bl	800219c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e203      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800485c:	4b70      	ldr	r3, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03c      	beq.n	80048ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800487e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004882:	4a67      	ldr	r2, [pc, #412]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd fc86 	bl	800219c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7fd fc82 	bl	800219c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1de      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a6:	4b5e      	ldr	r3, [pc, #376]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80048a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ef      	beq.n	8004894 <HAL_RCC_OscConfig+0x3ec>
 80048b4:	e01b      	b.n	80048ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b6:	4b5a      	ldr	r3, [pc, #360]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c6:	f7fd fc69 	bl	800219c <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fd fc65 	bl	800219c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1c1      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ef      	bne.n	80048ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80a6 	beq.w	8004a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fc:	2300      	movs	r3, #0
 80048fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004900:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10d      	bne.n	8004928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490c:	4b44      	ldr	r3, [pc, #272]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	4a43      	ldr	r2, [pc, #268]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	6593      	str	r3, [r2, #88]	; 0x58
 8004918:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004924:	2301      	movs	r3, #1
 8004926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCC_OscConfig+0x57c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d118      	bne.n	8004966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_OscConfig+0x57c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3a      	ldr	r2, [pc, #232]	; (8004a24 <HAL_RCC_OscConfig+0x57c>)
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004940:	f7fd fc2c 	bl	800219c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004948:	f7fd fc28 	bl	800219c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e184      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCC_OscConfig+0x57c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d108      	bne.n	8004980 <HAL_RCC_OscConfig+0x4d8>
 800496e:	4b2c      	ldr	r3, [pc, #176]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497e:	e024      	b.n	80049ca <HAL_RCC_OscConfig+0x522>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d110      	bne.n	80049aa <HAL_RCC_OscConfig+0x502>
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a8:	e00f      	b.n	80049ca <HAL_RCC_OscConfig+0x522>
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ba:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fd fbe3 	bl	800219c <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d8:	e00a      	b.n	80049f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fd fbdf 	bl	800219c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e139      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_OscConfig+0x578>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ed      	beq.n	80049da <HAL_RCC_OscConfig+0x532>
 80049fe:	e01a      	b.n	8004a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd fbcc 	bl	800219c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fd fbc8 	bl	800219c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d906      	bls.n	8004a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e122      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a28:	4b90      	ldr	r3, [pc, #576]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e8      	bne.n	8004a08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a36:	7ffb      	ldrb	r3, [r7, #31]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a8a      	ldr	r2, [pc, #552]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8108 	beq.w	8004c62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	f040 80d0 	bne.w	8004bfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a5c:	4b83      	ldr	r3, [pc, #524]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0203 	and.w	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d130      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d127      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d11f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a9c:	2a07      	cmp	r2, #7
 8004a9e:	bf14      	ite	ne
 8004aa0:	2201      	movne	r2, #1
 8004aa2:	2200      	moveq	r2, #0
 8004aa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d113      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	3b01      	subs	r3, #1
 8004acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d06e      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d069      	beq.n	8004bac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ad8:	4b64      	ldr	r3, [pc, #400]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ae4:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0b7      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004af4:	4b5d      	ldr	r3, [pc, #372]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b00:	f7fd fb4c 	bl	800219c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fd fb48 	bl	800219c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0a4      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1a:	4b54      	ldr	r3, [pc, #336]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b26:	4b51      	ldr	r3, [pc, #324]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	4b51      	ldr	r3, [pc, #324]	; (8004c70 <HAL_RCC_OscConfig+0x7c8>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b36:	3a01      	subs	r2, #1
 8004b38:	0112      	lsls	r2, r2, #4
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b40:	0212      	lsls	r2, r2, #8
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b48:	0852      	lsrs	r2, r2, #1
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	0552      	lsls	r2, r2, #21
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b54:	0852      	lsrs	r2, r2, #1
 8004b56:	3a01      	subs	r2, #1
 8004b58:	0652      	lsls	r2, r2, #25
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	0912      	lsrs	r2, r2, #4
 8004b62:	0452      	lsls	r2, r2, #17
 8004b64:	430a      	orrs	r2, r1
 8004b66:	4941      	ldr	r1, [pc, #260]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3e      	ldr	r2, [pc, #248]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b78:	4b3c      	ldr	r3, [pc, #240]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b84:	f7fd fb0a 	bl	800219c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fd fb06 	bl	800219c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e062      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004baa:	e05a      	b.n	8004c62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e059      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d152      	bne.n	8004c62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc8:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bd4:	f7fd fae2 	bl	800219c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fd fade 	bl	800219c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e03a      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x734>
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	d02d      	beq.n	8004c5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c0e:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fd fab1 	bl	800219c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd faad 	bl	800219c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e009      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_OscConfig+0x7c4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x796>
 8004c5c:	e001      	b.n	8004c62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	f99d808c 	.word	0xf99d808c

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0c8      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0b0      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d04c      	beq.n	8004d5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ccc:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d121      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e09e      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e092      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e086      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0c:	4b46      	ldr	r3, [pc, #280]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e07e      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1c:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	493f      	ldr	r1, [pc, #252]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2e:	f7fd fa35 	bl	800219c <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d36:	f7fd fa31 	bl	800219c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e066      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 020c 	and.w	r2, r3, #12
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d1eb      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6a:	4b2f      	ldr	r3, [pc, #188]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	492c      	ldr	r1, [pc, #176]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d210      	bcs.n	8004dac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0207 	bic.w	r2, r3, #7
 8004d92:	4924      	ldr	r1, [pc, #144]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e036      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4918      	ldr	r1, [pc, #96]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4910      	ldr	r1, [pc, #64]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dea:	f000 f825 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004dee:	4601      	mov	r1, r0
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_ClockConfig+0x1b4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	fa21 f303 	lsr.w	r3, r1, r3
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd f978 	bl	8002104 <HAL_InitTick>
 8004e14:	4603      	mov	r3, r0
 8004e16:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e18:	7afb      	ldrb	r3, [r7, #11]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	08008d68 	.word	0x08008d68
 8004e30:	20000000 	.word	0x20000000
 8004e34:	20000004 	.word	0x20000004

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x34>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d121      	bne.n	8004eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11e      	bne.n	8004eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e005      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e88:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d133      	bne.n	8004f2e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d002      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0xa4>
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0xaa>
 8004eda:	e005      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ede:	617b      	str	r3, [r7, #20]
      break;
 8004ee0:	e005      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ee2:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ee4:	617b      	str	r3, [r7, #20]
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	617b      	str	r3, [r7, #20]
      break;
 8004eec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	3301      	adds	r3, #1
 8004efa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	0a1b      	lsrs	r3, r3, #8
 8004f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	fb02 f203 	mul.w	r2, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0e5b      	lsrs	r3, r3, #25
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3724      	adds	r7, #36	; 0x24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	08008d80 	.word	0x08008d80
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000000 	.word	0x20000000

08004f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f68:	f7ff fff0 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7a:	5cd3      	ldrb	r3, [r2, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	08008d78 	.word	0x08008d78

08004f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f94:	f7ff ffda 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f98:	4601      	mov	r1, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0adb      	lsrs	r3, r3, #11
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08008d78 	.word	0x08008d78

08004fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fd4:	f7ff fa04 	bl	80043e0 <HAL_PWREx_GetVoltageRange>
 8004fd8:	6178      	str	r0, [r7, #20]
 8004fda:	e014      	b.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	4a24      	ldr	r2, [pc, #144]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe8:	4b22      	ldr	r3, [pc, #136]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ff4:	f7ff f9f4 	bl	80043e0 <HAL_PWREx_GetVoltageRange>
 8004ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500c:	d10b      	bne.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d919      	bls.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2ba0      	cmp	r3, #160	; 0xa0
 8005018:	d902      	bls.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800501a:	2302      	movs	r3, #2
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e013      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e010      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b80      	cmp	r3, #128	; 0x80
 800502a:	d902      	bls.n	8005032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800502c:	2303      	movs	r3, #3
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	e00a      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d102      	bne.n	800503e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005038:	2302      	movs	r3, #2
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e004      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d101      	bne.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005044:	2301      	movs	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f023 0207 	bic.w	r2, r3, #7
 8005050:	4909      	ldr	r1, [pc, #36]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d001      	beq.n	800506a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	40022000 	.word	0x40022000

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005084:	2300      	movs	r3, #0
 8005086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005088:	2300      	movs	r3, #0
 800508a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03f      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800509c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a0:	d01c      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80050a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a6:	d802      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050ac:	e01f      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b8:	d01c      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050ba:	e018      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050bc:	4b85      	ldr	r3, [pc, #532]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a84      	ldr	r2, [pc, #528]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c8:	e015      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fab9 	bl	8005648 <RCCEx_PLLSAI1_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050da:	e00c      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3320      	adds	r3, #32
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fba0 	bl	8005828 <RCCEx_PLLSAI2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	74fb      	strb	r3, [r7, #19]
      break;
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050fc:	4b75      	ldr	r3, [pc, #468]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510a:	4972      	ldr	r1, [pc, #456]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d03f      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800512c:	d01c      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800512e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005132:	d802      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005138:	e01f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800513a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800513e:	d003      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005144:	d01c      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005146:	e018      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005148:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a61      	ldr	r2, [pc, #388]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005154:	e015      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fa73 	bl	8005648 <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005166:	e00c      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3320      	adds	r3, #32
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb5a 	bl	8005828 <RCCEx_PLLSAI2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	74fb      	strb	r3, [r7, #19]
      break;
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005188:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005196:	494f      	ldr	r1, [pc, #316]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800519e:	e001      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a0 	beq.w	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b2:	2300      	movs	r3, #0
 80051b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051b6:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a40      	ldr	r2, [pc, #256]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e4:	2301      	movs	r3, #1
 80051e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f4:	f7fc ffd2 	bl	800219c <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051fa:	e009      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fc:	f7fc ffce 	bl	800219c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	74fb      	strb	r3, [r7, #19]
        break;
 800520e:	e005      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005210:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ef      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d15c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005222:	4b2c      	ldr	r3, [pc, #176]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	429a      	cmp	r2, r3
 800523e:	d019      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005240:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524c:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800525c:	4b1d      	ldr	r3, [pc, #116]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fc ff8d 	bl	800219c <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005284:	e00b      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fc ff89 	bl	800219c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d902      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	74fb      	strb	r3, [r7, #19]
            break;
 800529c:	e006      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ec      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c2:	4904      	ldr	r1, [pc, #16]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052ca:	e009      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	74bb      	strb	r3, [r7, #18]
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e0:	7c7b      	ldrb	r3, [r7, #17]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d105      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e6:	4b9e      	ldr	r3, [pc, #632]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	4a9d      	ldr	r2, [pc, #628]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052fe:	4b98      	ldr	r3, [pc, #608]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	4994      	ldr	r1, [pc, #592]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005320:	4b8f      	ldr	r3, [pc, #572]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f023 020c 	bic.w	r2, r3, #12
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	498c      	ldr	r1, [pc, #560]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005342:	4b87      	ldr	r3, [pc, #540]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	4983      	ldr	r1, [pc, #524]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	497b      	ldr	r1, [pc, #492]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005386:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005394:	4972      	ldr	r1, [pc, #456]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053a8:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b6:	496a      	ldr	r1, [pc, #424]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ca:	4b65      	ldr	r3, [pc, #404]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	4961      	ldr	r1, [pc, #388]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ec:	4b5c      	ldr	r3, [pc, #368]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	4959      	ldr	r1, [pc, #356]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800540e:	4b54      	ldr	r3, [pc, #336]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	4950      	ldr	r1, [pc, #320]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005430:	4b4b      	ldr	r3, [pc, #300]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	4948      	ldr	r1, [pc, #288]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005452:	4b43      	ldr	r3, [pc, #268]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	493f      	ldr	r1, [pc, #252]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d028      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005474:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005482:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005492:	d106      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005494:	4b32      	ldr	r3, [pc, #200]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800549a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800549e:	60d3      	str	r3, [r2, #12]
 80054a0:	e011      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054aa:	d10c      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f8c8 	bl	8005648 <RCCEx_PLLSAI1_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d028      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054d2:	4b23      	ldr	r3, [pc, #140]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	491f      	ldr	r1, [pc, #124]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f0:	d106      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054fc:	60d3      	str	r3, [r2, #12]
 80054fe:	e011      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005508:	d10c      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f899 	bl	8005648 <RCCEx_PLLSAI1_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	4908      	ldr	r1, [pc, #32]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554e:	d109      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4a02      	ldr	r2, [pc, #8]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555a:	60d3      	str	r3, [r2, #12]
 800555c:	e014      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f867 	bl	8005648 <RCCEx_PLLSAI1_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005594:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a2:	4928      	ldr	r1, [pc, #160]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b2:	d10d      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2102      	movs	r1, #2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f844 	bl	8005648 <RCCEx_PLLSAI1_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d014      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	74bb      	strb	r3, [r7, #18]
 80055ce:	e011      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3320      	adds	r3, #32
 80055de:	2102      	movs	r1, #2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f921 	bl	8005828 <RCCEx_PLLSAI2_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800560e:	490d      	ldr	r1, [pc, #52]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005632:	4904      	ldr	r1, [pc, #16]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800563a:	7cbb      	ldrb	r3, [r7, #18]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000

08005648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005656:	4b73      	ldr	r3, [pc, #460]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d018      	beq.n	8005694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005662:	4b70      	ldr	r3, [pc, #448]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d10d      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
       ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
       ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d044      	beq.n	8005718 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
 8005692:	e041      	b.n	8005718 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d00c      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x6e>
 800569c:	2b03      	cmp	r3, #3
 800569e:	d013      	beq.n	80056c8 <RCCEx_PLLSAI1_Config+0x80>
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d120      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056a4:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11d      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b4:	e01a      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b6:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d116      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c6:	e013      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c8:	4b56      	ldr	r3, [pc, #344]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10f      	bne.n	80056f4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056d4:	4b53      	ldr	r3, [pc, #332]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056e4:	e006      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ea:	e004      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6819      	ldr	r1, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	3b01      	subs	r3, #1
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	430b      	orrs	r3, r1
 8005712:	4944      	ldr	r1, [pc, #272]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d17d      	bne.n	800581a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800571e:	4b41      	ldr	r3, [pc, #260]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a40      	ldr	r2, [pc, #256]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572a:	f7fc fd37 	bl	800219c <HAL_GetTick>
 800572e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005730:	e009      	b.n	8005746 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005732:	f7fc fd33 	bl	800219c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d902      	bls.n	8005746 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	73fb      	strb	r3, [r7, #15]
        break;
 8005744:	e005      	b.n	8005752 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ef      	bne.n	8005732 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d160      	bne.n	800581a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d111      	bne.n	8005782 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800575e:	4b31      	ldr	r3, [pc, #196]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	0211      	lsls	r1, r2, #8
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68d2      	ldr	r2, [r2, #12]
 8005774:	0912      	lsrs	r2, r2, #4
 8005776:	0452      	lsls	r2, r2, #17
 8005778:	430a      	orrs	r2, r1
 800577a:	492a      	ldr	r1, [pc, #168]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
 8005780:	e027      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d112      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005788:	4b26      	ldr	r3, [pc, #152]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6892      	ldr	r2, [r2, #8]
 8005798:	0211      	lsls	r1, r2, #8
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6912      	ldr	r2, [r2, #16]
 800579e:	0852      	lsrs	r2, r2, #1
 80057a0:	3a01      	subs	r2, #1
 80057a2:	0552      	lsls	r2, r2, #21
 80057a4:	430a      	orrs	r2, r1
 80057a6:	491f      	ldr	r1, [pc, #124]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	610b      	str	r3, [r1, #16]
 80057ac:	e011      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ae:	4b1d      	ldr	r3, [pc, #116]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6892      	ldr	r2, [r2, #8]
 80057be:	0211      	lsls	r1, r2, #8
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6952      	ldr	r2, [r2, #20]
 80057c4:	0852      	lsrs	r2, r2, #1
 80057c6:	3a01      	subs	r2, #1
 80057c8:	0652      	lsls	r2, r2, #25
 80057ca:	430a      	orrs	r2, r1
 80057cc:	4915      	ldr	r1, [pc, #84]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fc fcdd 	bl	800219c <HAL_GetTick>
 80057e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e4:	e009      	b.n	80057fa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057e6:	f7fc fcd9 	bl	800219c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d902      	bls.n	80057fa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	73fb      	strb	r3, [r7, #15]
          break;
 80057f8:	e005      	b.n	8005806 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ef      	beq.n	80057e6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40021000 	.word	0x40021000

08005828 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005836:	4b68      	ldr	r3, [pc, #416]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d018      	beq.n	8005874 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005842:	4b65      	ldr	r3, [pc, #404]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d10d      	bne.n	800586e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
       ||
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800585a:	4b5f      	ldr	r3, [pc, #380]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
       ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d044      	beq.n	80058f8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
 8005872:	e041      	b.n	80058f8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d00c      	beq.n	8005896 <RCCEx_PLLSAI2_Config+0x6e>
 800587c:	2b03      	cmp	r3, #3
 800587e:	d013      	beq.n	80058a8 <RCCEx_PLLSAI2_Config+0x80>
 8005880:	2b01      	cmp	r3, #1
 8005882:	d120      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005884:	4b54      	ldr	r3, [pc, #336]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005894:	e01a      	b.n	80058cc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005896:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a6:	e013      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058a8:	4b4b      	ldr	r3, [pc, #300]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10f      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058b4:	4b48      	ldr	r3, [pc, #288]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058c4:	e006      	b.n	80058d4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ca:	e004      	b.n	80058d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058cc:	bf00      	nop
 80058ce:	e002      	b.n	80058d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058dc:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	430b      	orrs	r3, r1
 80058f2:	4939      	ldr	r1, [pc, #228]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d167      	bne.n	80059ce <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058fe:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a35      	ldr	r2, [pc, #212]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590a:	f7fc fc47 	bl	800219c <HAL_GetTick>
 800590e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005910:	e009      	b.n	8005926 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005912:	f7fc fc43 	bl	800219c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d902      	bls.n	8005926 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	73fb      	strb	r3, [r7, #15]
        break;
 8005924:	e005      	b.n	8005932 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005926:	4b2c      	ldr	r3, [pc, #176]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1ef      	bne.n	8005912 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d14a      	bne.n	80059ce <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d111      	bne.n	8005962 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800593e:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6892      	ldr	r2, [r2, #8]
 800594e:	0211      	lsls	r1, r2, #8
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68d2      	ldr	r2, [r2, #12]
 8005954:	0912      	lsrs	r2, r2, #4
 8005956:	0452      	lsls	r2, r2, #17
 8005958:	430a      	orrs	r2, r1
 800595a:	491f      	ldr	r1, [pc, #124]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	614b      	str	r3, [r1, #20]
 8005960:	e011      	b.n	8005986 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800596a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	0211      	lsls	r1, r2, #8
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6912      	ldr	r2, [r2, #16]
 8005978:	0852      	lsrs	r2, r2, #1
 800597a:	3a01      	subs	r2, #1
 800597c:	0652      	lsls	r2, r2, #25
 800597e:	430a      	orrs	r2, r1
 8005980:	4915      	ldr	r1, [pc, #84]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800598c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005990:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fc fc03 	bl	800219c <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005998:	e009      	b.n	80059ae <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800599a:	f7fc fbff 	bl	800219c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d902      	bls.n	80059ae <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	73fb      	strb	r3, [r7, #15]
          break;
 80059ac:	e005      	b.n	80059ba <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0ef      	beq.n	800599a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4903      	ldr	r1, [pc, #12]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000

080059dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e01d      	b.n	8005a2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fc f9bc 	bl	8001d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f000 fc1e 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <HAL_TIM_Base_Start_IT+0x50>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d00b      	beq.n	8005a76 <HAL_TIM_Base_Start_IT+0x42>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	00010007 	.word	0x00010007

08005a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e01d      	b.n	8005ad6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f815 	bl	8005ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f000 fbc8 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f83a 	bl	8006b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <HAL_TIM_PWM_Start+0x98>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x4a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <HAL_TIM_PWM_Start+0x9c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x4a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <HAL_TIM_PWM_Start+0xa0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x4a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <HAL_TIM_PWM_Start+0xa4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x4a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <HAL_TIM_PWM_Start+0xa8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_Start+0x4e>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_PWM_Start+0x50>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_TIM_PWM_Start+0xac>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d00b      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x8e>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d007      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800
 8005ba0:	00010007 	.word	0x00010007

08005ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d122      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0202 	mvn.w	r2, #2
 8005bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb19 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb0b 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb1c 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d122      	bne.n	8005c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d11b      	bne.n	8005c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0204 	mvn.w	r2, #4
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 faef 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fae1 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 faf2 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d122      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0208 	mvn.w	r2, #8
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fac5 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fab7 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fac8 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0210 	mvn.w	r2, #16
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa9b 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa8d 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa9e 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d10e      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0201 	mvn.w	r2, #1
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb ff2c 	bl	8001b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 f87c 	bl	8006e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f86f 	bl	8006e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b40      	cmp	r3, #64	; 0x40
 8005d8e:	d10e      	bne.n	8005dae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d107      	bne.n	8005dae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa4c 	bl	8006246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d10e      	bne.n	8005dda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d107      	bne.n	8005dda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f06f 0220 	mvn.w	r2, #32
 8005dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 f82f 	bl	8006e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e105      	b.n	800600a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b14      	cmp	r3, #20
 8005e12:	f200 80f0 	bhi.w	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ff7 	.word	0x08005ff7
 8005e24:	08005ff7 	.word	0x08005ff7
 8005e28:	08005ff7 	.word	0x08005ff7
 8005e2c:	08005eb1 	.word	0x08005eb1
 8005e30:	08005ff7 	.word	0x08005ff7
 8005e34:	08005ff7 	.word	0x08005ff7
 8005e38:	08005ff7 	.word	0x08005ff7
 8005e3c:	08005ef3 	.word	0x08005ef3
 8005e40:	08005ff7 	.word	0x08005ff7
 8005e44:	08005ff7 	.word	0x08005ff7
 8005e48:	08005ff7 	.word	0x08005ff7
 8005e4c:	08005f33 	.word	0x08005f33
 8005e50:	08005ff7 	.word	0x08005ff7
 8005e54:	08005ff7 	.word	0x08005ff7
 8005e58:	08005ff7 	.word	0x08005ff7
 8005e5c:	08005f75 	.word	0x08005f75
 8005e60:	08005ff7 	.word	0x08005ff7
 8005e64:	08005ff7 	.word	0x08005ff7
 8005e68:	08005ff7 	.word	0x08005ff7
 8005e6c:	08005fb5 	.word	0x08005fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa8a 	bl	8006390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0208 	orr.w	r2, r2, #8
 8005e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0204 	bic.w	r2, r2, #4
 8005e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	619a      	str	r2, [r3, #24]
      break;
 8005eae:	e0a3      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fafa 	bl	80064b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6999      	ldr	r1, [r3, #24]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	021a      	lsls	r2, r3, #8
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]
      break;
 8005ef0:	e082      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fb63 	bl	80065c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0208 	orr.w	r2, r2, #8
 8005f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0204 	bic.w	r2, r2, #4
 8005f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69d9      	ldr	r1, [r3, #28]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	61da      	str	r2, [r3, #28]
      break;
 8005f30:	e062      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fbcb 	bl	80066d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69d9      	ldr	r1, [r3, #28]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	021a      	lsls	r2, r3, #8
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	61da      	str	r2, [r3, #28]
      break;
 8005f72:	e041      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fc14 	bl	80067a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0204 	bic.w	r2, r2, #4
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fb2:	e021      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fc58 	bl	8006870 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	021a      	lsls	r2, r3, #8
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005ff6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_TIM_ConfigClockSource+0x18>
 8006028:	2302      	movs	r3, #2
 800602a:	e0a8      	b.n	800617e <HAL_TIM_ConfigClockSource+0x16a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800604e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d067      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x124>
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d80b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x70>
 800606c:	2b10      	cmp	r3, #16
 800606e:	d073      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x144>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d802      	bhi.n	800607a <HAL_TIM_ConfigClockSource+0x66>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d06f      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006078:	e078      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800607a:	2b20      	cmp	r3, #32
 800607c:	d06c      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x144>
 800607e:	2b30      	cmp	r3, #48	; 0x30
 8006080:	d06a      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006082:	e073      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006084:	2b70      	cmp	r3, #112	; 0x70
 8006086:	d00d      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x90>
 8006088:	2b70      	cmp	r3, #112	; 0x70
 800608a:	d804      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x82>
 800608c:	2b50      	cmp	r3, #80	; 0x50
 800608e:	d033      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0xe4>
 8006090:	2b60      	cmp	r3, #96	; 0x60
 8006092:	d041      	beq.n	8006118 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006094:	e06a      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d066      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x156>
 800609c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a0:	d017      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80060a2:	e063      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 fd44 	bl	8006b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
      break;
 80060d0:	e04c      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f000 fd2d 	bl	8006b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f4:	609a      	str	r2, [r3, #8]
      break;
 80060f6:	e039      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	461a      	mov	r2, r3
 8006106:	f000 fca1 	bl	8006a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2150      	movs	r1, #80	; 0x50
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fcfa 	bl	8006b0a <TIM_ITRx_SetConfig>
      break;
 8006116:	e029      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6859      	ldr	r1, [r3, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	461a      	mov	r2, r3
 8006126:	f000 fcc0 	bl	8006aaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2160      	movs	r1, #96	; 0x60
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fcea 	bl	8006b0a <TIM_ITRx_SetConfig>
      break;
 8006136:	e019      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	461a      	mov	r2, r3
 8006146:	f000 fc81 	bl	8006a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2140      	movs	r1, #64	; 0x40
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fcda 	bl	8006b0a <TIM_ITRx_SetConfig>
      break;
 8006156:	e009      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fcd1 	bl	8006b0a <TIM_ITRx_SetConfig>
      break;
 8006168:	e000      	b.n	800616c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800616a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_TIM_SlaveConfigSynchro+0x18>
 800619a:	2302      	movs	r3, #2
 800619c:	e031      	b.n	8006202 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fbc3 	bl	800693c <TIM_SlaveTimer_SetConfig>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e018      	b.n	8006202 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a40      	ldr	r2, [pc, #256]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3d      	ldr	r2, [pc, #244]	; (8006374 <TIM_Base_SetConfig+0x118>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3c      	ldr	r2, [pc, #240]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <TIM_Base_SetConfig+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <TIM_Base_SetConfig+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <TIM_Base_SetConfig+0x118>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2a      	ldr	r2, [pc, #168]	; (800637c <TIM_Base_SetConfig+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a29      	ldr	r2, [pc, #164]	; (8006380 <TIM_Base_SetConfig+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <TIM_Base_SetConfig+0x128>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a26      	ldr	r2, [pc, #152]	; (800638c <TIM_Base_SetConfig+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a11      	ldr	r2, [pc, #68]	; (8006384 <TIM_Base_SetConfig+0x128>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <TIM_Base_SetConfig+0x130>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40013400 	.word	0x40013400
 8006384:	40014000 	.word	0x40014000
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0302 	bic.w	r3, r3, #2
 80063dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a2c      	ldr	r2, [pc, #176]	; (800649c <TIM_OC1_SetConfig+0x10c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <TIM_OC1_SetConfig+0x110>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <TIM_OC1_SetConfig+0x114>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <TIM_OC1_SetConfig+0x118>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_OC1_SetConfig+0x11c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10c      	bne.n	800642a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0308 	bic.w	r3, r3, #8
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0304 	bic.w	r3, r3, #4
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <TIM_OC1_SetConfig+0x10c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <TIM_OC1_SetConfig+0x110>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <TIM_OC1_SetConfig+0x114>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <TIM_OC1_SetConfig+0x118>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <TIM_OC1_SetConfig+0x11c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d111      	bne.n	8006476 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0210 	bic.w	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0320 	bic.w	r3, r3, #32
 80064fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <TIM_OC2_SetConfig+0x100>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x6c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <TIM_OC2_SetConfig+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <TIM_OC2_SetConfig+0x100>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <TIM_OC2_SetConfig+0x104>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <TIM_OC2_SetConfig+0x108>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <TIM_OC2_SetConfig+0x10c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <TIM_OC2_SetConfig+0x110>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d113      	bne.n	8006588 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a27      	ldr	r2, [pc, #156]	; (80066c0 <TIM_OC3_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC3_SetConfig+0x6a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a26      	ldr	r2, [pc, #152]	; (80066c4 <TIM_OC3_SetConfig+0x100>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10d      	bne.n	800664a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <TIM_OC3_SetConfig+0xfc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <TIM_OC3_SetConfig+0x100>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <TIM_OC3_SetConfig+0x104>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <TIM_OC3_SetConfig+0x108>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <TIM_OC3_SetConfig+0x10c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a18      	ldr	r2, [pc, #96]	; (8006794 <TIM_OC4_SetConfig+0xc0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC4_SetConfig+0xc4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC4_SetConfig+0xc8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <TIM_OC4_SetConfig+0xcc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <TIM_OC4_SetConfig+0xd0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d109      	bne.n	800676c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800

080067a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a17      	ldr	r2, [pc, #92]	; (800685c <TIM_OC5_SetConfig+0xb4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00f      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a16      	ldr	r2, [pc, #88]	; (8006860 <TIM_OC5_SetConfig+0xb8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00b      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <TIM_OC5_SetConfig+0xbc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a14      	ldr	r2, [pc, #80]	; (8006868 <TIM_OC5_SetConfig+0xc0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a13      	ldr	r2, [pc, #76]	; (800686c <TIM_OC5_SetConfig+0xc4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d109      	bne.n	8006836 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800

08006870 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <TIM_OC6_SetConfig+0xb8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <TIM_OC6_SetConfig+0xbc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00b      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a16      	ldr	r2, [pc, #88]	; (8006930 <TIM_OC6_SetConfig+0xc0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a15      	ldr	r2, [pc, #84]	; (8006934 <TIM_OC6_SetConfig+0xc4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <TIM_OC6_SetConfig+0xc8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d109      	bne.n	8006900 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	029b      	lsls	r3, r3, #10
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006954:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b30      	cmp	r3, #48	; 0x30
 8006984:	d05c      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0x104>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d806      	bhi.n	8006998 <TIM_SlaveTimer_SetConfig+0x5c>
 800698a:	2b10      	cmp	r3, #16
 800698c:	d058      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0x104>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d056      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0x104>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d054      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006996:	e054      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03d      	beq.n	8006a18 <TIM_SlaveTimer_SetConfig+0xdc>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d802      	bhi.n	80069a6 <TIM_SlaveTimer_SetConfig+0x6a>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d010      	beq.n	80069c6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80069a4:	e04d      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80069a6:	2b60      	cmp	r3, #96	; 0x60
 80069a8:	d040      	beq.n	8006a2c <TIM_SlaveTimer_SetConfig+0xf0>
 80069aa:	2b70      	cmp	r3, #112	; 0x70
 80069ac:	d000      	beq.n	80069b0 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80069ae:	e048      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68d9      	ldr	r1, [r3, #12]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f000 f8be 	bl	8006b40 <TIM_ETR_SetConfig>
      break;
 80069c4:	e03d      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d101      	bne.n	80069d2 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e038      	b.n	8006a44 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
      break;
 8006a16:	e014      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	461a      	mov	r2, r3
 8006a26:	f000 f811 	bl	8006a4c <TIM_TI1_ConfigInputStage>
      break;
 8006a2a:	e00a      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6899      	ldr	r1, [r3, #8]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f000 f836 	bl	8006aaa <TIM_TI2_ConfigInputStage>
      break;
 8006a3e:	e000      	b.n	8006a42 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8006a40:	bf00      	nop
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f023 0201 	bic.w	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 030a 	bic.w	r3, r3, #10
 8006a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b087      	sub	sp, #28
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0210 	bic.w	r2, r3, #16
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	031b      	lsls	r3, r3, #12
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f043 0307 	orr.w	r3, r3, #7
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	609a      	str	r2, [r3, #8]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	021a      	lsls	r2, r3, #8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	2201      	movs	r2, #1
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1a      	ldr	r2, [r3, #32]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f948 	bl	8006e74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <HAL_TIMEx_PWMN_Start+0x5c>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d00b      	beq.n	8006c1e <HAL_TIMEx_PWMN_Start+0x52>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0c:	d007      	beq.n	8006c1e <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	00010007 	.word	0x00010007

08006c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e068      	b.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2e      	ldr	r2, [pc, #184]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2d      	ldr	r2, [pc, #180]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d108      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d018      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1a      	ldr	r2, [pc, #104]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a18      	ldr	r2, [pc, #96]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d10c      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40013400 	.word	0x40013400
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00
 8006d38:	40014000 	.word	0x40014000

08006d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e065      	b.n	8006e24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d115      	bne.n	8006e12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	051b      	lsls	r3, r3, #20
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40013400 	.word	0x40013400

08006e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	2204      	movs	r2, #4
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	401a      	ands	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e040      	b.n	8006f52 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fa ffe5 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2224      	movs	r2, #36	; 0x24
 8006eea:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8bf 	bl	8007080 <UART_SetConfig>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e022      	b.n	8006f52 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc25 	bl	8007764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fcac 	bl	80078a8 <UART_CheckIdleState>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b08a      	sub	sp, #40	; 0x28
 8006f5e:	af02      	add	r7, sp, #8
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	f040 8081 	bne.w	8007076 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_UART_Transmit+0x26>
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e079      	b.n	8007078 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Transmit+0x38>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e072      	b.n	8007078 <HAL_UART_Transmit+0x11e>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2221      	movs	r2, #33	; 0x21
 8006fa4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006fa6:	f7fb f8f9 	bl	800219c <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d108      	bne.n	8006fd8 <HAL_UART_Transmit+0x7e>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e003      	b.n	8006fe0 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006fe8:	e02d      	b.n	8007046 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2180      	movs	r1, #128	; 0x80
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fc9c 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e039      	b.n	8007078 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007016:	b292      	uxth	r2, r2
 8007018:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3302      	adds	r3, #2
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e008      	b.n	8007034 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	b292      	uxth	r2, r2
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	3301      	adds	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1cb      	bne.n	8006fea <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	2140      	movs	r1, #64	; 0x40
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fc68 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e005      	b.n	8007078 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e000      	b.n	8007078 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007080:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007084:	b08a      	sub	sp, #40	; 0x28
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4bb8      	ldr	r3, [pc, #736]	; (8007398 <UART_SetConfig+0x318>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070be:	430b      	orrs	r3, r1
 80070c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4aae      	ldr	r2, [pc, #696]	; (800739c <UART_SetConfig+0x31c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	4313      	orrs	r3, r2
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4aa5      	ldr	r2, [pc, #660]	; (80073a0 <UART_SetConfig+0x320>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d126      	bne.n	800715e <UART_SetConfig+0xde>
 8007110:	4ba4      	ldr	r3, [pc, #656]	; (80073a4 <UART_SetConfig+0x324>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d81a      	bhi.n	8007154 <UART_SetConfig+0xd4>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0xa4>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007135 	.word	0x08007135
 8007128:	08007145 	.word	0x08007145
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800714d 	.word	0x0800714d
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800713a:	e105      	b.n	8007348 <UART_SetConfig+0x2c8>
 800713c:	2302      	movs	r3, #2
 800713e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007142:	e101      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714a:	e0fd      	b.n	8007348 <UART_SetConfig+0x2c8>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007152:	e0f9      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715a:	bf00      	nop
 800715c:	e0f4      	b.n	8007348 <UART_SetConfig+0x2c8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a91      	ldr	r2, [pc, #580]	; (80073a8 <UART_SetConfig+0x328>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d138      	bne.n	80071da <UART_SetConfig+0x15a>
 8007168:	4b8e      	ldr	r3, [pc, #568]	; (80073a4 <UART_SetConfig+0x324>)
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716e:	f003 030c 	and.w	r3, r3, #12
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d82c      	bhi.n	80071d0 <UART_SetConfig+0x150>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0xfc>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071d1 	.word	0x080071d1
 8007184:	080071d1 	.word	0x080071d1
 8007188:	080071d1 	.word	0x080071d1
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071d1 	.word	0x080071d1
 8007194:	080071d1 	.word	0x080071d1
 8007198:	080071d1 	.word	0x080071d1
 800719c:	080071b9 	.word	0x080071b9
 80071a0:	080071d1 	.word	0x080071d1
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	080071d1 	.word	0x080071d1
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b6:	e0c7      	b.n	8007348 <UART_SetConfig+0x2c8>
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071be:	e0c3      	b.n	8007348 <UART_SetConfig+0x2c8>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c6:	e0bf      	b.n	8007348 <UART_SetConfig+0x2c8>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e0bb      	b.n	8007348 <UART_SetConfig+0x2c8>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	bf00      	nop
 80071d8:	e0b6      	b.n	8007348 <UART_SetConfig+0x2c8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a73      	ldr	r2, [pc, #460]	; (80073ac <UART_SetConfig+0x32c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d125      	bne.n	8007230 <UART_SetConfig+0x1b0>
 80071e4:	4b6f      	ldr	r3, [pc, #444]	; (80073a4 <UART_SetConfig+0x324>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d011      	beq.n	8007216 <UART_SetConfig+0x196>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d802      	bhi.n	80071fc <UART_SetConfig+0x17c>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <UART_SetConfig+0x186>
 80071fa:	e014      	b.n	8007226 <UART_SetConfig+0x1a6>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d006      	beq.n	800720e <UART_SetConfig+0x18e>
 8007200:	2b30      	cmp	r3, #48	; 0x30
 8007202:	d00c      	beq.n	800721e <UART_SetConfig+0x19e>
 8007204:	e00f      	b.n	8007226 <UART_SetConfig+0x1a6>
 8007206:	2300      	movs	r3, #0
 8007208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720c:	e09c      	b.n	8007348 <UART_SetConfig+0x2c8>
 800720e:	2302      	movs	r3, #2
 8007210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007214:	e098      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007216:	2304      	movs	r3, #4
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721c:	e094      	b.n	8007348 <UART_SetConfig+0x2c8>
 800721e:	2308      	movs	r3, #8
 8007220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007224:	e090      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007226:	2310      	movs	r3, #16
 8007228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722c:	bf00      	nop
 800722e:	e08b      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a5e      	ldr	r2, [pc, #376]	; (80073b0 <UART_SetConfig+0x330>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d125      	bne.n	8007286 <UART_SetConfig+0x206>
 800723a:	4b5a      	ldr	r3, [pc, #360]	; (80073a4 <UART_SetConfig+0x324>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d011      	beq.n	800726c <UART_SetConfig+0x1ec>
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d802      	bhi.n	8007252 <UART_SetConfig+0x1d2>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <UART_SetConfig+0x1dc>
 8007250:	e014      	b.n	800727c <UART_SetConfig+0x1fc>
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d006      	beq.n	8007264 <UART_SetConfig+0x1e4>
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d00c      	beq.n	8007274 <UART_SetConfig+0x1f4>
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x1fc>
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007262:	e071      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e06d      	b.n	8007348 <UART_SetConfig+0x2c8>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007272:	e069      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727a:	e065      	b.n	8007348 <UART_SetConfig+0x2c8>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007282:	bf00      	nop
 8007284:	e060      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a4a      	ldr	r2, [pc, #296]	; (80073b4 <UART_SetConfig+0x334>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d129      	bne.n	80072e4 <UART_SetConfig+0x264>
 8007290:	4b44      	ldr	r3, [pc, #272]	; (80073a4 <UART_SetConfig+0x324>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729e:	d014      	beq.n	80072ca <UART_SetConfig+0x24a>
 80072a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a4:	d802      	bhi.n	80072ac <UART_SetConfig+0x22c>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <UART_SetConfig+0x23a>
 80072aa:	e016      	b.n	80072da <UART_SetConfig+0x25a>
 80072ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b0:	d007      	beq.n	80072c2 <UART_SetConfig+0x242>
 80072b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b6:	d00c      	beq.n	80072d2 <UART_SetConfig+0x252>
 80072b8:	e00f      	b.n	80072da <UART_SetConfig+0x25a>
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c0:	e042      	b.n	8007348 <UART_SetConfig+0x2c8>
 80072c2:	2302      	movs	r3, #2
 80072c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c8:	e03e      	b.n	8007348 <UART_SetConfig+0x2c8>
 80072ca:	2304      	movs	r3, #4
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d0:	e03a      	b.n	8007348 <UART_SetConfig+0x2c8>
 80072d2:	2308      	movs	r3, #8
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d8:	e036      	b.n	8007348 <UART_SetConfig+0x2c8>
 80072da:	2310      	movs	r3, #16
 80072dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e0:	bf00      	nop
 80072e2:	e031      	b.n	8007348 <UART_SetConfig+0x2c8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	; (800739c <UART_SetConfig+0x31c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d129      	bne.n	8007342 <UART_SetConfig+0x2c2>
 80072ee:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <UART_SetConfig+0x324>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072fc:	d014      	beq.n	8007328 <UART_SetConfig+0x2a8>
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007302:	d802      	bhi.n	800730a <UART_SetConfig+0x28a>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <UART_SetConfig+0x298>
 8007308:	e016      	b.n	8007338 <UART_SetConfig+0x2b8>
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d007      	beq.n	8007320 <UART_SetConfig+0x2a0>
 8007310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007314:	d00c      	beq.n	8007330 <UART_SetConfig+0x2b0>
 8007316:	e00f      	b.n	8007338 <UART_SetConfig+0x2b8>
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731e:	e013      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007326:	e00f      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732e:	e00b      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e007      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <UART_SetConfig+0x2c8>
 8007342:	2310      	movs	r3, #16
 8007344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <UART_SetConfig+0x31c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	f040 80fe 	bne.w	8007550 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007358:	2b08      	cmp	r3, #8
 800735a:	d837      	bhi.n	80073cc <UART_SetConfig+0x34c>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x2e4>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007389 	.word	0x08007389
 8007368:	080073cd 	.word	0x080073cd
 800736c:	08007391 	.word	0x08007391
 8007370:	080073cd 	.word	0x080073cd
 8007374:	080073bd 	.word	0x080073bd
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073cd 	.word	0x080073cd
 8007380:	080073cd 	.word	0x080073cd
 8007384:	080073c5 	.word	0x080073c5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fd fdec 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 800738c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800738e:	e020      	b.n	80073d2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <UART_SetConfig+0x338>)
 8007392:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007394:	e01d      	b.n	80073d2 <UART_SetConfig+0x352>
 8007396:	bf00      	nop
 8007398:	efff69f3 	.word	0xefff69f3
 800739c:	40008000 	.word	0x40008000
 80073a0:	40013800 	.word	0x40013800
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40004400 	.word	0x40004400
 80073ac:	40004800 	.word	0x40004800
 80073b0:	40004c00 	.word	0x40004c00
 80073b4:	40005000 	.word	0x40005000
 80073b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80073bc:	f7fd fd3c 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80073c0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80073c2:	e006      	b.n	80073d2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80073c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80073ca:	e002      	b.n	80073d2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	76fb      	strb	r3, [r7, #27]
        break;
 80073d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 81b9 	beq.w	800774c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d305      	bcc.n	80073f6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d902      	bls.n	80073fc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	76fb      	strb	r3, [r7, #27]
 80073fa:	e1a7      	b.n	800774c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80073fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007400:	2b08      	cmp	r3, #8
 8007402:	f200 8092 	bhi.w	800752a <UART_SetConfig+0x4aa>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x38c>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007431 	.word	0x08007431
 8007410:	0800752b 	.word	0x0800752b
 8007414:	0800747f 	.word	0x0800747f
 8007418:	0800752b 	.word	0x0800752b
 800741c:	080074b3 	.word	0x080074b3
 8007420:	0800752b 	.word	0x0800752b
 8007424:	0800752b 	.word	0x0800752b
 8007428:	0800752b 	.word	0x0800752b
 800742c:	08007501 	.word	0x08007501
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007430:	f7fd fd98 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8007434:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	4619      	mov	r1, r3
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	0214      	lsls	r4, r2, #8
 8007448:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800744c:	020b      	lsls	r3, r1, #8
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6852      	ldr	r2, [r2, #4]
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	4611      	mov	r1, r2
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	eb13 0b01 	adds.w	fp, r3, r1
 800745e:	eb44 0c02 	adc.w	ip, r4, r2
 8007462:	4658      	mov	r0, fp
 8007464:	4661      	mov	r1, ip
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f04f 0400 	mov.w	r4, #0
 800746e:	461a      	mov	r2, r3
 8007470:	4623      	mov	r3, r4
 8007472:	f7f9 fb23 	bl	8000abc <__aeabi_uldivmod>
 8007476:	4603      	mov	r3, r0
 8007478:	460c      	mov	r4, r1
 800747a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800747c:	e058      	b.n	8007530 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	f04f 0400 	mov.w	r4, #0
 8007488:	49ae      	ldr	r1, [pc, #696]	; (8007744 <UART_SetConfig+0x6c4>)
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	eb13 0b01 	adds.w	fp, r3, r1
 8007492:	eb44 0c02 	adc.w	ip, r4, r2
 8007496:	4658      	mov	r0, fp
 8007498:	4661      	mov	r1, ip
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f04f 0400 	mov.w	r4, #0
 80074a2:	461a      	mov	r2, r3
 80074a4:	4623      	mov	r3, r4
 80074a6:	f7f9 fb09 	bl	8000abc <__aeabi_uldivmod>
 80074aa:	4603      	mov	r3, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80074b0:	e03e      	b.n	8007530 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80074b2:	f7fd fcc1 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80074b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4619      	mov	r1, r3
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	f04f 0400 	mov.w	r4, #0
 80074c8:	0214      	lsls	r4, r2, #8
 80074ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074ce:	020b      	lsls	r3, r1, #8
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6852      	ldr	r2, [r2, #4]
 80074d4:	0852      	lsrs	r2, r2, #1
 80074d6:	4611      	mov	r1, r2
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	eb13 0b01 	adds.w	fp, r3, r1
 80074e0:	eb44 0c02 	adc.w	ip, r4, r2
 80074e4:	4658      	mov	r0, fp
 80074e6:	4661      	mov	r1, ip
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f04f 0400 	mov.w	r4, #0
 80074f0:	461a      	mov	r2, r3
 80074f2:	4623      	mov	r3, r4
 80074f4:	f7f9 fae2 	bl	8000abc <__aeabi_uldivmod>
 80074f8:	4603      	mov	r3, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80074fe:	e017      	b.n	8007530 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	f04f 0400 	mov.w	r4, #0
 800750a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800750e:	f144 0100 	adc.w	r1, r4, #0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	461a      	mov	r2, r3
 800751c:	4623      	mov	r3, r4
 800751e:	f7f9 facd 	bl	8000abc <__aeabi_uldivmod>
 8007522:	4603      	mov	r3, r0
 8007524:	460c      	mov	r4, r1
 8007526:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007528:	e002      	b.n	8007530 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	76fb      	strb	r3, [r7, #27]
            break;
 800752e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007536:	d308      	bcc.n	800754a <UART_SetConfig+0x4ca>
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753e:	d204      	bcs.n	800754a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e100      	b.n	800774c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	76fb      	strb	r3, [r7, #27]
 800754e:	e0fd      	b.n	800774c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007558:	f040 8084 	bne.w	8007664 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800755c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007560:	2b08      	cmp	r3, #8
 8007562:	d85f      	bhi.n	8007624 <UART_SetConfig+0x5a4>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x4ec>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	08007591 	.word	0x08007591
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075d1 	.word	0x080075d1
 8007578:	08007625 	.word	0x08007625
 800757c:	080075ed 	.word	0x080075ed
 8007580:	08007625 	.word	0x08007625
 8007584:	08007625 	.word	0x08007625
 8007588:	08007625 	.word	0x08007625
 800758c:	0800760d 	.word	0x0800760d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fd fce8 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8007594:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	005a      	lsls	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	441a      	add	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075ae:	e03c      	b.n	800762a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b0:	f7fd fcee 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 80075b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	005a      	lsls	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	441a      	add	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075ce:	e02c      	b.n	800762a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80075da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6852      	ldr	r2, [r2, #4]
 80075e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075ea:	e01e      	b.n	800762a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ec:	f7fd fc24 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80075f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	005a      	lsls	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	fbb2 f3f3 	udiv	r3, r2, r3
 8007606:	b29b      	uxth	r3, r3
 8007608:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800760a:	e00e      	b.n	800762a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	fbb2 f3f3 	udiv	r3, r2, r3
 800761e:	b29b      	uxth	r3, r3
 8007620:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007622:	e002      	b.n	800762a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	76fb      	strb	r3, [r7, #27]
        break;
 8007628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d916      	bls.n	800765e <UART_SetConfig+0x5de>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d212      	bcs.n	800765e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f023 030f 	bic.w	r3, r3, #15
 8007640:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	b29b      	uxth	r3, r3
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	b29a      	uxth	r2, r3
 800764e:	89fb      	ldrh	r3, [r7, #14]
 8007650:	4313      	orrs	r3, r2
 8007652:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	89fa      	ldrh	r2, [r7, #14]
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	e076      	b.n	800774c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	76fb      	strb	r3, [r7, #27]
 8007662:	e073      	b.n	800774c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8007664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007668:	2b08      	cmp	r3, #8
 800766a:	d85c      	bhi.n	8007726 <UART_SetConfig+0x6a6>
 800766c:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <UART_SetConfig+0x5f4>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	08007699 	.word	0x08007699
 8007678:	080076b7 	.word	0x080076b7
 800767c:	080076d5 	.word	0x080076d5
 8007680:	08007727 	.word	0x08007727
 8007684:	080076f1 	.word	0x080076f1
 8007688:	08007727 	.word	0x08007727
 800768c:	08007727 	.word	0x08007727
 8007690:	08007727 	.word	0x08007727
 8007694:	0800770f 	.word	0x0800770f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fd fc64 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 800769c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	085a      	lsrs	r2, r3, #1
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	441a      	add	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076b4:	e03a      	b.n	800772c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076b6:	f7fd fc6b 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 80076ba:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	085a      	lsrs	r2, r3, #1
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076d2:	e02b      	b.n	800772c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80076de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076ee:	e01d      	b.n	800772c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f0:	f7fd fba2 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80076f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	085a      	lsrs	r2, r3, #1
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	441a      	add	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	fbb2 f3f3 	udiv	r3, r2, r3
 8007708:	b29b      	uxth	r3, r3
 800770a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800770c:	e00e      	b.n	800772c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007724:	e002      	b.n	800772c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	76fb      	strb	r3, [r7, #27]
        break;
 800772a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b0f      	cmp	r3, #15
 8007730:	d90a      	bls.n	8007748 <UART_SetConfig+0x6c8>
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007738:	d206      	bcs.n	8007748 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	e003      	b.n	800774c <UART_SetConfig+0x6cc>
 8007744:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007758:	7efb      	ldrb	r3, [r7, #27]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01a      	beq.n	800787a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007862:	d10a      	bne.n	800787a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80078b6:	f7fa fc71 	bl	800219c <HAL_GetTick>
 80078ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d10e      	bne.n	80078e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f82a 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e020      	b.n	800792a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d10e      	bne.n	8007914 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f814 	bl	8007932 <UART_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e00a      	b.n	800792a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	603b      	str	r3, [r7, #0]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007942:	e05d      	b.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794a:	d059      	beq.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794c:	f7fa fc26 	bl	800219c <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	429a      	cmp	r2, r3
 800795a:	d302      	bcc.n	8007962 <UART_WaitOnFlagUntilTimeout+0x30>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d11b      	bne.n	800799a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007970:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2220      	movs	r2, #32
 8007986:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2220      	movs	r2, #32
 800798c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e042      	b.n	8007a20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02b      	beq.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d123      	bne.n	8007a00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e00f      	b.n	8007a20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69da      	ldr	r2, [r3, #28]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bf0c      	ite	eq
 8007a10:	2301      	moveq	r3, #1
 8007a12:	2300      	movne	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d092      	beq.n	8007944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <__errno>:
 8007a28:	4b01      	ldr	r3, [pc, #4]	; (8007a30 <__errno+0x8>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2000000c 	.word	0x2000000c

08007a34 <__libc_init_array>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4e0d      	ldr	r6, [pc, #52]	; (8007a6c <__libc_init_array+0x38>)
 8007a38:	4c0d      	ldr	r4, [pc, #52]	; (8007a70 <__libc_init_array+0x3c>)
 8007a3a:	1ba4      	subs	r4, r4, r6
 8007a3c:	10a4      	asrs	r4, r4, #2
 8007a3e:	2500      	movs	r5, #0
 8007a40:	42a5      	cmp	r5, r4
 8007a42:	d109      	bne.n	8007a58 <__libc_init_array+0x24>
 8007a44:	4e0b      	ldr	r6, [pc, #44]	; (8007a74 <__libc_init_array+0x40>)
 8007a46:	4c0c      	ldr	r4, [pc, #48]	; (8007a78 <__libc_init_array+0x44>)
 8007a48:	f001 f972 	bl	8008d30 <_init>
 8007a4c:	1ba4      	subs	r4, r4, r6
 8007a4e:	10a4      	asrs	r4, r4, #2
 8007a50:	2500      	movs	r5, #0
 8007a52:	42a5      	cmp	r5, r4
 8007a54:	d105      	bne.n	8007a62 <__libc_init_array+0x2e>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a5c:	4798      	blx	r3
 8007a5e:	3501      	adds	r5, #1
 8007a60:	e7ee      	b.n	8007a40 <__libc_init_array+0xc>
 8007a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a66:	4798      	blx	r3
 8007a68:	3501      	adds	r5, #1
 8007a6a:	e7f2      	b.n	8007a52 <__libc_init_array+0x1e>
 8007a6c:	080091bc 	.word	0x080091bc
 8007a70:	080091bc 	.word	0x080091bc
 8007a74:	080091bc 	.word	0x080091bc
 8007a78:	080091c0 	.word	0x080091c0

08007a7c <memset>:
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <memset+0xa>
 8007a84:	4770      	bx	lr
 8007a86:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8a:	e7f9      	b.n	8007a80 <memset+0x4>

08007a8c <siprintf>:
 8007a8c:	b40e      	push	{r1, r2, r3}
 8007a8e:	b500      	push	{lr}
 8007a90:	b09c      	sub	sp, #112	; 0x70
 8007a92:	ab1d      	add	r3, sp, #116	; 0x74
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	9006      	str	r0, [sp, #24]
 8007a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a9c:	4809      	ldr	r0, [pc, #36]	; (8007ac4 <siprintf+0x38>)
 8007a9e:	9107      	str	r1, [sp, #28]
 8007aa0:	9104      	str	r1, [sp, #16]
 8007aa2:	4909      	ldr	r1, [pc, #36]	; (8007ac8 <siprintf+0x3c>)
 8007aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa8:	9105      	str	r1, [sp, #20]
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	a902      	add	r1, sp, #8
 8007ab0:	f000 f866 	bl	8007b80 <_svfiprintf_r>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	b01c      	add	sp, #112	; 0x70
 8007abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac0:	b003      	add	sp, #12
 8007ac2:	4770      	bx	lr
 8007ac4:	2000000c 	.word	0x2000000c
 8007ac8:	ffff0208 	.word	0xffff0208

08007acc <__ssputs_r>:
 8007acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	688e      	ldr	r6, [r1, #8]
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	4690      	mov	r8, r2
 8007ada:	4699      	mov	r9, r3
 8007adc:	d837      	bhi.n	8007b4e <__ssputs_r+0x82>
 8007ade:	898a      	ldrh	r2, [r1, #12]
 8007ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae4:	d031      	beq.n	8007b4a <__ssputs_r+0x7e>
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	6909      	ldr	r1, [r1, #16]
 8007aea:	1a6f      	subs	r7, r5, r1
 8007aec:	6965      	ldr	r5, [r4, #20]
 8007aee:	2302      	movs	r3, #2
 8007af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007af8:	f109 0301 	add.w	r3, r9, #1
 8007afc:	443b      	add	r3, r7
 8007afe:	429d      	cmp	r5, r3
 8007b00:	bf38      	it	cc
 8007b02:	461d      	movcc	r5, r3
 8007b04:	0553      	lsls	r3, r2, #21
 8007b06:	d530      	bpl.n	8007b6a <__ssputs_r+0x9e>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f000 fb2b 	bl	8008164 <_malloc_r>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	b950      	cbnz	r0, 8007b28 <__ssputs_r+0x5c>
 8007b12:	230c      	movs	r3, #12
 8007b14:	f8ca 3000 	str.w	r3, [sl]
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b28:	463a      	mov	r2, r7
 8007b2a:	6921      	ldr	r1, [r4, #16]
 8007b2c:	f000 faa8 	bl	8008080 <memcpy>
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	6126      	str	r6, [r4, #16]
 8007b3e:	6165      	str	r5, [r4, #20]
 8007b40:	443e      	add	r6, r7
 8007b42:	1bed      	subs	r5, r5, r7
 8007b44:	6026      	str	r6, [r4, #0]
 8007b46:	60a5      	str	r5, [r4, #8]
 8007b48:	464e      	mov	r6, r9
 8007b4a:	454e      	cmp	r6, r9
 8007b4c:	d900      	bls.n	8007b50 <__ssputs_r+0x84>
 8007b4e:	464e      	mov	r6, r9
 8007b50:	4632      	mov	r2, r6
 8007b52:	4641      	mov	r1, r8
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	f000 fa9e 	bl	8008096 <memmove>
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	441e      	add	r6, r3
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	2000      	movs	r0, #0
 8007b68:	e7dc      	b.n	8007b24 <__ssputs_r+0x58>
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	f000 fb54 	bl	8008218 <_realloc_r>
 8007b70:	4606      	mov	r6, r0
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d1e2      	bne.n	8007b3c <__ssputs_r+0x70>
 8007b76:	6921      	ldr	r1, [r4, #16]
 8007b78:	4650      	mov	r0, sl
 8007b7a:	f000 faa5 	bl	80080c8 <_free_r>
 8007b7e:	e7c8      	b.n	8007b12 <__ssputs_r+0x46>

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	461d      	mov	r5, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	061f      	lsls	r7, r3, #24
 8007b8a:	b09d      	sub	sp, #116	; 0x74
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4616      	mov	r6, r2
 8007b92:	d50f      	bpl.n	8007bb4 <_svfiprintf_r+0x34>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b96b      	cbnz	r3, 8007bb4 <_svfiprintf_r+0x34>
 8007b98:	2140      	movs	r1, #64	; 0x40
 8007b9a:	f000 fae3 	bl	8008164 <_malloc_r>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	6120      	str	r0, [r4, #16]
 8007ba2:	b928      	cbnz	r0, 8007bb0 <_svfiprintf_r+0x30>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	f8c8 3000 	str.w	r3, [r8]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bae:	e0c8      	b.n	8007d42 <_svfiprintf_r+0x1c2>
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	6163      	str	r3, [r4, #20]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bbe:	2330      	movs	r3, #48	; 0x30
 8007bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc4:	9503      	str	r5, [sp, #12]
 8007bc6:	f04f 0b01 	mov.w	fp, #1
 8007bca:	4637      	mov	r7, r6
 8007bcc:	463d      	mov	r5, r7
 8007bce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bd2:	b10b      	cbz	r3, 8007bd8 <_svfiprintf_r+0x58>
 8007bd4:	2b25      	cmp	r3, #37	; 0x25
 8007bd6:	d13e      	bne.n	8007c56 <_svfiprintf_r+0xd6>
 8007bd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bdc:	d00b      	beq.n	8007bf6 <_svfiprintf_r+0x76>
 8007bde:	4653      	mov	r3, sl
 8007be0:	4632      	mov	r2, r6
 8007be2:	4621      	mov	r1, r4
 8007be4:	4640      	mov	r0, r8
 8007be6:	f7ff ff71 	bl	8007acc <__ssputs_r>
 8007bea:	3001      	adds	r0, #1
 8007bec:	f000 80a4 	beq.w	8007d38 <_svfiprintf_r+0x1b8>
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	4453      	add	r3, sl
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	783b      	ldrb	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 809d 	beq.w	8007d38 <_svfiprintf_r+0x1b8>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c10:	931a      	str	r3, [sp, #104]	; 0x68
 8007c12:	462f      	mov	r7, r5
 8007c14:	2205      	movs	r2, #5
 8007c16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c1a:	4850      	ldr	r0, [pc, #320]	; (8007d5c <_svfiprintf_r+0x1dc>)
 8007c1c:	f7f8 fae0 	bl	80001e0 <memchr>
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	b9d0      	cbnz	r0, 8007c5a <_svfiprintf_r+0xda>
 8007c24:	06d9      	lsls	r1, r3, #27
 8007c26:	bf44      	itt	mi
 8007c28:	2220      	movmi	r2, #32
 8007c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c2e:	071a      	lsls	r2, r3, #28
 8007c30:	bf44      	itt	mi
 8007c32:	222b      	movmi	r2, #43	; 0x2b
 8007c34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c38:	782a      	ldrb	r2, [r5, #0]
 8007c3a:	2a2a      	cmp	r2, #42	; 0x2a
 8007c3c:	d015      	beq.n	8007c6a <_svfiprintf_r+0xea>
 8007c3e:	9a07      	ldr	r2, [sp, #28]
 8007c40:	462f      	mov	r7, r5
 8007c42:	2000      	movs	r0, #0
 8007c44:	250a      	movs	r5, #10
 8007c46:	4639      	mov	r1, r7
 8007c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c4c:	3b30      	subs	r3, #48	; 0x30
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d94d      	bls.n	8007cee <_svfiprintf_r+0x16e>
 8007c52:	b1b8      	cbz	r0, 8007c84 <_svfiprintf_r+0x104>
 8007c54:	e00f      	b.n	8007c76 <_svfiprintf_r+0xf6>
 8007c56:	462f      	mov	r7, r5
 8007c58:	e7b8      	b.n	8007bcc <_svfiprintf_r+0x4c>
 8007c5a:	4a40      	ldr	r2, [pc, #256]	; (8007d5c <_svfiprintf_r+0x1dc>)
 8007c5c:	1a80      	subs	r0, r0, r2
 8007c5e:	fa0b f000 	lsl.w	r0, fp, r0
 8007c62:	4318      	orrs	r0, r3
 8007c64:	9004      	str	r0, [sp, #16]
 8007c66:	463d      	mov	r5, r7
 8007c68:	e7d3      	b.n	8007c12 <_svfiprintf_r+0x92>
 8007c6a:	9a03      	ldr	r2, [sp, #12]
 8007c6c:	1d11      	adds	r1, r2, #4
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	9103      	str	r1, [sp, #12]
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	db01      	blt.n	8007c7a <_svfiprintf_r+0xfa>
 8007c76:	9207      	str	r2, [sp, #28]
 8007c78:	e004      	b.n	8007c84 <_svfiprintf_r+0x104>
 8007c7a:	4252      	negs	r2, r2
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	9207      	str	r2, [sp, #28]
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	783b      	ldrb	r3, [r7, #0]
 8007c86:	2b2e      	cmp	r3, #46	; 0x2e
 8007c88:	d10c      	bne.n	8007ca4 <_svfiprintf_r+0x124>
 8007c8a:	787b      	ldrb	r3, [r7, #1]
 8007c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8e:	d133      	bne.n	8007cf8 <_svfiprintf_r+0x178>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	1d1a      	adds	r2, r3, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	9203      	str	r2, [sp, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bfb8      	it	lt
 8007c9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ca0:	3702      	adds	r7, #2
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	4d2e      	ldr	r5, [pc, #184]	; (8007d60 <_svfiprintf_r+0x1e0>)
 8007ca6:	7839      	ldrb	r1, [r7, #0]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7f8 fa98 	bl	80001e0 <memchr>
 8007cb0:	b138      	cbz	r0, 8007cc2 <_svfiprintf_r+0x142>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	1b40      	subs	r0, r0, r5
 8007cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	4303      	orrs	r3, r0
 8007cbe:	3701      	adds	r7, #1
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	7839      	ldrb	r1, [r7, #0]
 8007cc4:	4827      	ldr	r0, [pc, #156]	; (8007d64 <_svfiprintf_r+0x1e4>)
 8007cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cca:	2206      	movs	r2, #6
 8007ccc:	1c7e      	adds	r6, r7, #1
 8007cce:	f7f8 fa87 	bl	80001e0 <memchr>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d038      	beq.n	8007d48 <_svfiprintf_r+0x1c8>
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <_svfiprintf_r+0x1e8>)
 8007cd8:	bb13      	cbnz	r3, 8007d20 <_svfiprintf_r+0x1a0>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	3307      	adds	r3, #7
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	444b      	add	r3, r9
 8007cea:	9309      	str	r3, [sp, #36]	; 0x24
 8007cec:	e76d      	b.n	8007bca <_svfiprintf_r+0x4a>
 8007cee:	fb05 3202 	mla	r2, r5, r2, r3
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	e7a6      	b.n	8007c46 <_svfiprintf_r+0xc6>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	3701      	adds	r7, #1
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	250a      	movs	r5, #10
 8007d02:	4638      	mov	r0, r7
 8007d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d08:	3a30      	subs	r2, #48	; 0x30
 8007d0a:	2a09      	cmp	r2, #9
 8007d0c:	d903      	bls.n	8007d16 <_svfiprintf_r+0x196>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0c8      	beq.n	8007ca4 <_svfiprintf_r+0x124>
 8007d12:	9105      	str	r1, [sp, #20]
 8007d14:	e7c6      	b.n	8007ca4 <_svfiprintf_r+0x124>
 8007d16:	fb05 2101 	mla	r1, r5, r1, r2
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	e7f0      	b.n	8007d02 <_svfiprintf_r+0x182>
 8007d20:	ab03      	add	r3, sp, #12
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4622      	mov	r2, r4
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007d28:	a904      	add	r1, sp, #16
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	f3af 8000 	nop.w
 8007d30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007d34:	4681      	mov	r9, r0
 8007d36:	d1d6      	bne.n	8007ce6 <_svfiprintf_r+0x166>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	065b      	lsls	r3, r3, #25
 8007d3c:	f53f af35 	bmi.w	8007baa <_svfiprintf_r+0x2a>
 8007d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d42:	b01d      	add	sp, #116	; 0x74
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007d50:	a904      	add	r1, sp, #16
 8007d52:	4640      	mov	r0, r8
 8007d54:	f000 f882 	bl	8007e5c <_printf_i>
 8007d58:	e7ea      	b.n	8007d30 <_svfiprintf_r+0x1b0>
 8007d5a:	bf00      	nop
 8007d5c:	08008db0 	.word	0x08008db0
 8007d60:	08008db6 	.word	0x08008db6
 8007d64:	08008dba 	.word	0x08008dba
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	08007acd 	.word	0x08007acd

08007d70 <_printf_common>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	4691      	mov	r9, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	688a      	ldr	r2, [r1, #8]
 8007d7a:	690b      	ldr	r3, [r1, #16]
 8007d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	bfb8      	it	lt
 8007d84:	4613      	movlt	r3, r2
 8007d86:	f8c9 3000 	str.w	r3, [r9]
 8007d8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	b112      	cbz	r2, 8007d9a <_printf_common+0x2a>
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8c9 3000 	str.w	r3, [r9]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0699      	lsls	r1, r3, #26
 8007d9e:	bf42      	ittt	mi
 8007da0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007da4:	3302      	addmi	r3, #2
 8007da6:	f8c9 3000 	strmi.w	r3, [r9]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d107      	bne.n	8007dc2 <_printf_common+0x52>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	f8d9 2000 	ldr.w	r2, [r9]
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	42ab      	cmp	r3, r5
 8007dc0:	dc28      	bgt.n	8007e14 <_printf_common+0xa4>
 8007dc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	3300      	adds	r3, #0
 8007dca:	bf18      	it	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	0692      	lsls	r2, r2, #26
 8007dd0:	d42d      	bmi.n	8007e2e <_printf_common+0xbe>
 8007dd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4630      	mov	r0, r6
 8007dda:	47c0      	blx	r8
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d020      	beq.n	8007e22 <_printf_common+0xb2>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	68e5      	ldr	r5, [r4, #12]
 8007de4:	f8d9 2000 	ldr.w	r2, [r9]
 8007de8:	f003 0306 	and.w	r3, r3, #6
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	bf08      	it	eq
 8007df0:	1aad      	subeq	r5, r5, r2
 8007df2:	68a3      	ldr	r3, [r4, #8]
 8007df4:	6922      	ldr	r2, [r4, #16]
 8007df6:	bf0c      	ite	eq
 8007df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dfc:	2500      	movne	r5, #0
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	bfc4      	itt	gt
 8007e02:	1a9b      	subgt	r3, r3, r2
 8007e04:	18ed      	addgt	r5, r5, r3
 8007e06:	f04f 0900 	mov.w	r9, #0
 8007e0a:	341a      	adds	r4, #26
 8007e0c:	454d      	cmp	r5, r9
 8007e0e:	d11a      	bne.n	8007e46 <_printf_common+0xd6>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e008      	b.n	8007e26 <_printf_common+0xb6>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4652      	mov	r2, sl
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d103      	bne.n	8007e2a <_printf_common+0xba>
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	3501      	adds	r5, #1
 8007e2c:	e7c3      	b.n	8007db6 <_printf_common+0x46>
 8007e2e:	18e1      	adds	r1, r4, r3
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	2030      	movs	r0, #48	; 0x30
 8007e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e38:	4422      	add	r2, r4
 8007e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e42:	3302      	adds	r3, #2
 8007e44:	e7c5      	b.n	8007dd2 <_printf_common+0x62>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	47c0      	blx	r8
 8007e50:	3001      	adds	r0, #1
 8007e52:	d0e6      	beq.n	8007e22 <_printf_common+0xb2>
 8007e54:	f109 0901 	add.w	r9, r9, #1
 8007e58:	e7d8      	b.n	8007e0c <_printf_common+0x9c>
	...

08007e5c <_printf_i>:
 8007e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e64:	460c      	mov	r4, r1
 8007e66:	7e09      	ldrb	r1, [r1, #24]
 8007e68:	b085      	sub	sp, #20
 8007e6a:	296e      	cmp	r1, #110	; 0x6e
 8007e6c:	4617      	mov	r7, r2
 8007e6e:	4606      	mov	r6, r0
 8007e70:	4698      	mov	r8, r3
 8007e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e74:	f000 80b3 	beq.w	8007fde <_printf_i+0x182>
 8007e78:	d822      	bhi.n	8007ec0 <_printf_i+0x64>
 8007e7a:	2963      	cmp	r1, #99	; 0x63
 8007e7c:	d036      	beq.n	8007eec <_printf_i+0x90>
 8007e7e:	d80a      	bhi.n	8007e96 <_printf_i+0x3a>
 8007e80:	2900      	cmp	r1, #0
 8007e82:	f000 80b9 	beq.w	8007ff8 <_printf_i+0x19c>
 8007e86:	2958      	cmp	r1, #88	; 0x58
 8007e88:	f000 8083 	beq.w	8007f92 <_printf_i+0x136>
 8007e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e94:	e032      	b.n	8007efc <_printf_i+0xa0>
 8007e96:	2964      	cmp	r1, #100	; 0x64
 8007e98:	d001      	beq.n	8007e9e <_printf_i+0x42>
 8007e9a:	2969      	cmp	r1, #105	; 0x69
 8007e9c:	d1f6      	bne.n	8007e8c <_printf_i+0x30>
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	0605      	lsls	r5, r0, #24
 8007ea4:	f103 0104 	add.w	r1, r3, #4
 8007ea8:	d52a      	bpl.n	8007f00 <_printf_i+0xa4>
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da03      	bge.n	8007eba <_printf_i+0x5e>
 8007eb2:	222d      	movs	r2, #45	; 0x2d
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eba:	486f      	ldr	r0, [pc, #444]	; (8008078 <_printf_i+0x21c>)
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	e039      	b.n	8007f34 <_printf_i+0xd8>
 8007ec0:	2973      	cmp	r1, #115	; 0x73
 8007ec2:	f000 809d 	beq.w	8008000 <_printf_i+0x1a4>
 8007ec6:	d808      	bhi.n	8007eda <_printf_i+0x7e>
 8007ec8:	296f      	cmp	r1, #111	; 0x6f
 8007eca:	d020      	beq.n	8007f0e <_printf_i+0xb2>
 8007ecc:	2970      	cmp	r1, #112	; 0x70
 8007ece:	d1dd      	bne.n	8007e8c <_printf_i+0x30>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	f043 0320 	orr.w	r3, r3, #32
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	e003      	b.n	8007ee2 <_printf_i+0x86>
 8007eda:	2975      	cmp	r1, #117	; 0x75
 8007edc:	d017      	beq.n	8007f0e <_printf_i+0xb2>
 8007ede:	2978      	cmp	r1, #120	; 0x78
 8007ee0:	d1d4      	bne.n	8007e8c <_printf_i+0x30>
 8007ee2:	2378      	movs	r3, #120	; 0x78
 8007ee4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee8:	4864      	ldr	r0, [pc, #400]	; (800807c <_printf_i+0x220>)
 8007eea:	e055      	b.n	8007f98 <_printf_i+0x13c>
 8007eec:	6813      	ldr	r3, [r2, #0]
 8007eee:	1d19      	adds	r1, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6011      	str	r1, [r2, #0]
 8007ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007efc:	2301      	movs	r3, #1
 8007efe:	e08c      	b.n	800801a <_printf_i+0x1be>
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6011      	str	r1, [r2, #0]
 8007f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f08:	bf18      	it	ne
 8007f0a:	b21b      	sxthne	r3, r3
 8007f0c:	e7cf      	b.n	8007eae <_printf_i+0x52>
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	6825      	ldr	r5, [r4, #0]
 8007f12:	1d18      	adds	r0, r3, #4
 8007f14:	6010      	str	r0, [r2, #0]
 8007f16:	0628      	lsls	r0, r5, #24
 8007f18:	d501      	bpl.n	8007f1e <_printf_i+0xc2>
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	e002      	b.n	8007f24 <_printf_i+0xc8>
 8007f1e:	0668      	lsls	r0, r5, #25
 8007f20:	d5fb      	bpl.n	8007f1a <_printf_i+0xbe>
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	4854      	ldr	r0, [pc, #336]	; (8008078 <_printf_i+0x21c>)
 8007f26:	296f      	cmp	r1, #111	; 0x6f
 8007f28:	bf14      	ite	ne
 8007f2a:	220a      	movne	r2, #10
 8007f2c:	2208      	moveq	r2, #8
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f34:	6865      	ldr	r5, [r4, #4]
 8007f36:	60a5      	str	r5, [r4, #8]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	f2c0 8095 	blt.w	8008068 <_printf_i+0x20c>
 8007f3e:	6821      	ldr	r1, [r4, #0]
 8007f40:	f021 0104 	bic.w	r1, r1, #4
 8007f44:	6021      	str	r1, [r4, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d13d      	bne.n	8007fc6 <_printf_i+0x16a>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	f040 808e 	bne.w	800806c <_printf_i+0x210>
 8007f50:	4665      	mov	r5, ip
 8007f52:	2a08      	cmp	r2, #8
 8007f54:	d10b      	bne.n	8007f6e <_printf_i+0x112>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	07db      	lsls	r3, r3, #31
 8007f5a:	d508      	bpl.n	8007f6e <_printf_i+0x112>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	bfde      	ittt	le
 8007f64:	2330      	movle	r3, #48	; 0x30
 8007f66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f6e:	ebac 0305 	sub.w	r3, ip, r5
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	f8cd 8000 	str.w	r8, [sp]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	aa03      	add	r2, sp, #12
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff fef6 	bl	8007d70 <_printf_common>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d14d      	bne.n	8008024 <_printf_i+0x1c8>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8c:	b005      	add	sp, #20
 8007f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f92:	4839      	ldr	r0, [pc, #228]	; (8008078 <_printf_i+0x21c>)
 8007f94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	1d1d      	adds	r5, r3, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6015      	str	r5, [r2, #0]
 8007fa2:	060a      	lsls	r2, r1, #24
 8007fa4:	d50b      	bpl.n	8007fbe <_printf_i+0x162>
 8007fa6:	07ca      	lsls	r2, r1, #31
 8007fa8:	bf44      	itt	mi
 8007faa:	f041 0120 	orrmi.w	r1, r1, #32
 8007fae:	6021      	strmi	r1, [r4, #0]
 8007fb0:	b91b      	cbnz	r3, 8007fba <_printf_i+0x15e>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	f022 0220 	bic.w	r2, r2, #32
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	2210      	movs	r2, #16
 8007fbc:	e7b7      	b.n	8007f2e <_printf_i+0xd2>
 8007fbe:	064d      	lsls	r5, r1, #25
 8007fc0:	bf48      	it	mi
 8007fc2:	b29b      	uxthmi	r3, r3
 8007fc4:	e7ef      	b.n	8007fa6 <_printf_i+0x14a>
 8007fc6:	4665      	mov	r5, ip
 8007fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fcc:	fb02 3311 	mls	r3, r2, r1, r3
 8007fd0:	5cc3      	ldrb	r3, [r0, r3]
 8007fd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d1f5      	bne.n	8007fc8 <_printf_i+0x16c>
 8007fdc:	e7b9      	b.n	8007f52 <_printf_i+0xf6>
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	6825      	ldr	r5, [r4, #0]
 8007fe2:	6961      	ldr	r1, [r4, #20]
 8007fe4:	1d18      	adds	r0, r3, #4
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	0628      	lsls	r0, r5, #24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	d501      	bpl.n	8007ff2 <_printf_i+0x196>
 8007fee:	6019      	str	r1, [r3, #0]
 8007ff0:	e002      	b.n	8007ff8 <_printf_i+0x19c>
 8007ff2:	066a      	lsls	r2, r5, #25
 8007ff4:	d5fb      	bpl.n	8007fee <_printf_i+0x192>
 8007ff6:	8019      	strh	r1, [r3, #0]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	4665      	mov	r5, ip
 8007ffe:	e7b9      	b.n	8007f74 <_printf_i+0x118>
 8008000:	6813      	ldr	r3, [r2, #0]
 8008002:	1d19      	adds	r1, r3, #4
 8008004:	6011      	str	r1, [r2, #0]
 8008006:	681d      	ldr	r5, [r3, #0]
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	2100      	movs	r1, #0
 800800c:	4628      	mov	r0, r5
 800800e:	f7f8 f8e7 	bl	80001e0 <memchr>
 8008012:	b108      	cbz	r0, 8008018 <_printf_i+0x1bc>
 8008014:	1b40      	subs	r0, r0, r5
 8008016:	6060      	str	r0, [r4, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2300      	movs	r3, #0
 800801e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008022:	e7a7      	b.n	8007f74 <_printf_i+0x118>
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	462a      	mov	r2, r5
 8008028:	4639      	mov	r1, r7
 800802a:	4630      	mov	r0, r6
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d0aa      	beq.n	8007f88 <_printf_i+0x12c>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	079b      	lsls	r3, r3, #30
 8008036:	d413      	bmi.n	8008060 <_printf_i+0x204>
 8008038:	68e0      	ldr	r0, [r4, #12]
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	4298      	cmp	r0, r3
 800803e:	bfb8      	it	lt
 8008040:	4618      	movlt	r0, r3
 8008042:	e7a3      	b.n	8007f8c <_printf_i+0x130>
 8008044:	2301      	movs	r3, #1
 8008046:	464a      	mov	r2, r9
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d09a      	beq.n	8007f88 <_printf_i+0x12c>
 8008052:	3501      	adds	r5, #1
 8008054:	68e3      	ldr	r3, [r4, #12]
 8008056:	9a03      	ldr	r2, [sp, #12]
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	42ab      	cmp	r3, r5
 800805c:	dcf2      	bgt.n	8008044 <_printf_i+0x1e8>
 800805e:	e7eb      	b.n	8008038 <_printf_i+0x1dc>
 8008060:	2500      	movs	r5, #0
 8008062:	f104 0919 	add.w	r9, r4, #25
 8008066:	e7f5      	b.n	8008054 <_printf_i+0x1f8>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1ac      	bne.n	8007fc6 <_printf_i+0x16a>
 800806c:	7803      	ldrb	r3, [r0, #0]
 800806e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008072:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008076:	e76c      	b.n	8007f52 <_printf_i+0xf6>
 8008078:	08008dc1 	.word	0x08008dc1
 800807c:	08008dd2 	.word	0x08008dd2

08008080 <memcpy>:
 8008080:	b510      	push	{r4, lr}
 8008082:	1e43      	subs	r3, r0, #1
 8008084:	440a      	add	r2, r1
 8008086:	4291      	cmp	r1, r2
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	bd10      	pop	{r4, pc}
 800808c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008094:	e7f7      	b.n	8008086 <memcpy+0x6>

08008096 <memmove>:
 8008096:	4288      	cmp	r0, r1
 8008098:	b510      	push	{r4, lr}
 800809a:	eb01 0302 	add.w	r3, r1, r2
 800809e:	d807      	bhi.n	80080b0 <memmove+0x1a>
 80080a0:	1e42      	subs	r2, r0, #1
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d00a      	beq.n	80080bc <memmove+0x26>
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080ae:	e7f8      	b.n	80080a2 <memmove+0xc>
 80080b0:	4283      	cmp	r3, r0
 80080b2:	d9f5      	bls.n	80080a0 <memmove+0xa>
 80080b4:	1881      	adds	r1, r0, r2
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	42d3      	cmn	r3, r2
 80080ba:	d100      	bne.n	80080be <memmove+0x28>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080c6:	e7f7      	b.n	80080b8 <memmove+0x22>

080080c8 <_free_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4605      	mov	r5, r0
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d045      	beq.n	800815c <_free_r+0x94>
 80080d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d4:	1f0c      	subs	r4, r1, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb8      	it	lt
 80080da:	18e4      	addlt	r4, r4, r3
 80080dc:	f000 f8d2 	bl	8008284 <__malloc_lock>
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <_free_r+0x98>)
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	4610      	mov	r0, r2
 80080e6:	b933      	cbnz	r3, 80080f6 <_free_r+0x2e>
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6014      	str	r4, [r2, #0]
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f2:	f000 b8c8 	b.w	8008286 <__malloc_unlock>
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	d90c      	bls.n	8008114 <_free_r+0x4c>
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	1862      	adds	r2, r4, r1
 80080fe:	4293      	cmp	r3, r2
 8008100:	bf04      	itt	eq
 8008102:	681a      	ldreq	r2, [r3, #0]
 8008104:	685b      	ldreq	r3, [r3, #4]
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	bf04      	itt	eq
 800810a:	1852      	addeq	r2, r2, r1
 800810c:	6022      	streq	r2, [r4, #0]
 800810e:	6004      	str	r4, [r0, #0]
 8008110:	e7ec      	b.n	80080ec <_free_r+0x24>
 8008112:	4613      	mov	r3, r2
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	b10a      	cbz	r2, 800811c <_free_r+0x54>
 8008118:	42a2      	cmp	r2, r4
 800811a:	d9fa      	bls.n	8008112 <_free_r+0x4a>
 800811c:	6819      	ldr	r1, [r3, #0]
 800811e:	1858      	adds	r0, r3, r1
 8008120:	42a0      	cmp	r0, r4
 8008122:	d10b      	bne.n	800813c <_free_r+0x74>
 8008124:	6820      	ldr	r0, [r4, #0]
 8008126:	4401      	add	r1, r0
 8008128:	1858      	adds	r0, r3, r1
 800812a:	4282      	cmp	r2, r0
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	d1dd      	bne.n	80080ec <_free_r+0x24>
 8008130:	6810      	ldr	r0, [r2, #0]
 8008132:	6852      	ldr	r2, [r2, #4]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	4401      	add	r1, r0
 8008138:	6019      	str	r1, [r3, #0]
 800813a:	e7d7      	b.n	80080ec <_free_r+0x24>
 800813c:	d902      	bls.n	8008144 <_free_r+0x7c>
 800813e:	230c      	movs	r3, #12
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	e7d3      	b.n	80080ec <_free_r+0x24>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	1821      	adds	r1, r4, r0
 8008148:	428a      	cmp	r2, r1
 800814a:	bf04      	itt	eq
 800814c:	6811      	ldreq	r1, [r2, #0]
 800814e:	6852      	ldreq	r2, [r2, #4]
 8008150:	6062      	str	r2, [r4, #4]
 8008152:	bf04      	itt	eq
 8008154:	1809      	addeq	r1, r1, r0
 8008156:	6021      	streq	r1, [r4, #0]
 8008158:	605c      	str	r4, [r3, #4]
 800815a:	e7c7      	b.n	80080ec <_free_r+0x24>
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20000090 	.word	0x20000090

08008164 <_malloc_r>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	1ccd      	adds	r5, r1, #3
 8008168:	f025 0503 	bic.w	r5, r5, #3
 800816c:	3508      	adds	r5, #8
 800816e:	2d0c      	cmp	r5, #12
 8008170:	bf38      	it	cc
 8008172:	250c      	movcc	r5, #12
 8008174:	2d00      	cmp	r5, #0
 8008176:	4606      	mov	r6, r0
 8008178:	db01      	blt.n	800817e <_malloc_r+0x1a>
 800817a:	42a9      	cmp	r1, r5
 800817c:	d903      	bls.n	8008186 <_malloc_r+0x22>
 800817e:	230c      	movs	r3, #12
 8008180:	6033      	str	r3, [r6, #0]
 8008182:	2000      	movs	r0, #0
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	f000 f87d 	bl	8008284 <__malloc_lock>
 800818a:	4a21      	ldr	r2, [pc, #132]	; (8008210 <_malloc_r+0xac>)
 800818c:	6814      	ldr	r4, [r2, #0]
 800818e:	4621      	mov	r1, r4
 8008190:	b991      	cbnz	r1, 80081b8 <_malloc_r+0x54>
 8008192:	4c20      	ldr	r4, [pc, #128]	; (8008214 <_malloc_r+0xb0>)
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	b91b      	cbnz	r3, 80081a0 <_malloc_r+0x3c>
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f863 	bl	8008264 <_sbrk_r>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	4629      	mov	r1, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 f85e 	bl	8008264 <_sbrk_r>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d124      	bne.n	80081f6 <_malloc_r+0x92>
 80081ac:	230c      	movs	r3, #12
 80081ae:	6033      	str	r3, [r6, #0]
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f868 	bl	8008286 <__malloc_unlock>
 80081b6:	e7e4      	b.n	8008182 <_malloc_r+0x1e>
 80081b8:	680b      	ldr	r3, [r1, #0]
 80081ba:	1b5b      	subs	r3, r3, r5
 80081bc:	d418      	bmi.n	80081f0 <_malloc_r+0x8c>
 80081be:	2b0b      	cmp	r3, #11
 80081c0:	d90f      	bls.n	80081e2 <_malloc_r+0x7e>
 80081c2:	600b      	str	r3, [r1, #0]
 80081c4:	50cd      	str	r5, [r1, r3]
 80081c6:	18cc      	adds	r4, r1, r3
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 f85c 	bl	8008286 <__malloc_unlock>
 80081ce:	f104 000b 	add.w	r0, r4, #11
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	f020 0007 	bic.w	r0, r0, #7
 80081d8:	1ac3      	subs	r3, r0, r3
 80081da:	d0d3      	beq.n	8008184 <_malloc_r+0x20>
 80081dc:	425a      	negs	r2, r3
 80081de:	50e2      	str	r2, [r4, r3]
 80081e0:	e7d0      	b.n	8008184 <_malloc_r+0x20>
 80081e2:	428c      	cmp	r4, r1
 80081e4:	684b      	ldr	r3, [r1, #4]
 80081e6:	bf16      	itet	ne
 80081e8:	6063      	strne	r3, [r4, #4]
 80081ea:	6013      	streq	r3, [r2, #0]
 80081ec:	460c      	movne	r4, r1
 80081ee:	e7eb      	b.n	80081c8 <_malloc_r+0x64>
 80081f0:	460c      	mov	r4, r1
 80081f2:	6849      	ldr	r1, [r1, #4]
 80081f4:	e7cc      	b.n	8008190 <_malloc_r+0x2c>
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	f024 0403 	bic.w	r4, r4, #3
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d005      	beq.n	800820c <_malloc_r+0xa8>
 8008200:	1a21      	subs	r1, r4, r0
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f82e 	bl	8008264 <_sbrk_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d0cf      	beq.n	80081ac <_malloc_r+0x48>
 800820c:	6025      	str	r5, [r4, #0]
 800820e:	e7db      	b.n	80081c8 <_malloc_r+0x64>
 8008210:	20000090 	.word	0x20000090
 8008214:	20000094 	.word	0x20000094

08008218 <_realloc_r>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	4607      	mov	r7, r0
 800821c:	4614      	mov	r4, r2
 800821e:	460e      	mov	r6, r1
 8008220:	b921      	cbnz	r1, 800822c <_realloc_r+0x14>
 8008222:	4611      	mov	r1, r2
 8008224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008228:	f7ff bf9c 	b.w	8008164 <_malloc_r>
 800822c:	b922      	cbnz	r2, 8008238 <_realloc_r+0x20>
 800822e:	f7ff ff4b 	bl	80080c8 <_free_r>
 8008232:	4625      	mov	r5, r4
 8008234:	4628      	mov	r0, r5
 8008236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008238:	f000 f826 	bl	8008288 <_malloc_usable_size_r>
 800823c:	42a0      	cmp	r0, r4
 800823e:	d20f      	bcs.n	8008260 <_realloc_r+0x48>
 8008240:	4621      	mov	r1, r4
 8008242:	4638      	mov	r0, r7
 8008244:	f7ff ff8e 	bl	8008164 <_malloc_r>
 8008248:	4605      	mov	r5, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	d0f2      	beq.n	8008234 <_realloc_r+0x1c>
 800824e:	4631      	mov	r1, r6
 8008250:	4622      	mov	r2, r4
 8008252:	f7ff ff15 	bl	8008080 <memcpy>
 8008256:	4631      	mov	r1, r6
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ff35 	bl	80080c8 <_free_r>
 800825e:	e7e9      	b.n	8008234 <_realloc_r+0x1c>
 8008260:	4635      	mov	r5, r6
 8008262:	e7e7      	b.n	8008234 <_realloc_r+0x1c>

08008264 <_sbrk_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4c06      	ldr	r4, [pc, #24]	; (8008280 <_sbrk_r+0x1c>)
 8008268:	2300      	movs	r3, #0
 800826a:	4605      	mov	r5, r0
 800826c:	4608      	mov	r0, r1
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	f7f9 fe9c 	bl	8001fac <_sbrk>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_sbrk_r+0x1a>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	b103      	cbz	r3, 800827e <_sbrk_r+0x1a>
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200002ac 	.word	0x200002ac

08008284 <__malloc_lock>:
 8008284:	4770      	bx	lr

08008286 <__malloc_unlock>:
 8008286:	4770      	bx	lr

08008288 <_malloc_usable_size_r>:
 8008288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828c:	1f18      	subs	r0, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfbc      	itt	lt
 8008292:	580b      	ldrlt	r3, [r1, r0]
 8008294:	18c0      	addlt	r0, r0, r3
 8008296:	4770      	bx	lr

08008298 <sinf>:
 8008298:	ee10 3a10 	vmov	r3, s0
 800829c:	b507      	push	{r0, r1, r2, lr}
 800829e:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <sinf+0x7c>)
 80082a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082a4:	4293      	cmp	r3, r2
 80082a6:	dc05      	bgt.n	80082b4 <sinf+0x1c>
 80082a8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008318 <sinf+0x80>
 80082ac:	2000      	movs	r0, #0
 80082ae:	f000 fc41 	bl	8008b34 <__kernel_sinf>
 80082b2:	e004      	b.n	80082be <sinf+0x26>
 80082b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80082b8:	db04      	blt.n	80082c4 <sinf+0x2c>
 80082ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 80082be:	b003      	add	sp, #12
 80082c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80082c4:	4668      	mov	r0, sp
 80082c6:	f000 f829 	bl	800831c <__ieee754_rem_pio2f>
 80082ca:	f000 0003 	and.w	r0, r0, #3
 80082ce:	2801      	cmp	r0, #1
 80082d0:	d008      	beq.n	80082e4 <sinf+0x4c>
 80082d2:	2802      	cmp	r0, #2
 80082d4:	d00d      	beq.n	80082f2 <sinf+0x5a>
 80082d6:	b9b0      	cbnz	r0, 8008306 <sinf+0x6e>
 80082d8:	2001      	movs	r0, #1
 80082da:	eddd 0a01 	vldr	s1, [sp, #4]
 80082de:	ed9d 0a00 	vldr	s0, [sp]
 80082e2:	e7e4      	b.n	80082ae <sinf+0x16>
 80082e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80082e8:	ed9d 0a00 	vldr	s0, [sp]
 80082ec:	f000 f942 	bl	8008574 <__kernel_cosf>
 80082f0:	e7e5      	b.n	80082be <sinf+0x26>
 80082f2:	2001      	movs	r0, #1
 80082f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80082f8:	ed9d 0a00 	vldr	s0, [sp]
 80082fc:	f000 fc1a 	bl	8008b34 <__kernel_sinf>
 8008300:	eeb1 0a40 	vneg.f32	s0, s0
 8008304:	e7db      	b.n	80082be <sinf+0x26>
 8008306:	eddd 0a01 	vldr	s1, [sp, #4]
 800830a:	ed9d 0a00 	vldr	s0, [sp]
 800830e:	f000 f931 	bl	8008574 <__kernel_cosf>
 8008312:	e7f5      	b.n	8008300 <sinf+0x68>
 8008314:	3f490fd8 	.word	0x3f490fd8
 8008318:	00000000 	.word	0x00000000

0800831c <__ieee754_rem_pio2f>:
 800831c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831e:	ee10 6a10 	vmov	r6, s0
 8008322:	4b86      	ldr	r3, [pc, #536]	; (800853c <__ieee754_rem_pio2f+0x220>)
 8008324:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008328:	429c      	cmp	r4, r3
 800832a:	b087      	sub	sp, #28
 800832c:	4605      	mov	r5, r0
 800832e:	dc05      	bgt.n	800833c <__ieee754_rem_pio2f+0x20>
 8008330:	2300      	movs	r3, #0
 8008332:	ed85 0a00 	vstr	s0, [r5]
 8008336:	6043      	str	r3, [r0, #4]
 8008338:	2000      	movs	r0, #0
 800833a:	e020      	b.n	800837e <__ieee754_rem_pio2f+0x62>
 800833c:	4b80      	ldr	r3, [pc, #512]	; (8008540 <__ieee754_rem_pio2f+0x224>)
 800833e:	429c      	cmp	r4, r3
 8008340:	dc38      	bgt.n	80083b4 <__ieee754_rem_pio2f+0x98>
 8008342:	2e00      	cmp	r6, #0
 8008344:	f024 040f 	bic.w	r4, r4, #15
 8008348:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008544 <__ieee754_rem_pio2f+0x228>
 800834c:	4b7e      	ldr	r3, [pc, #504]	; (8008548 <__ieee754_rem_pio2f+0x22c>)
 800834e:	dd18      	ble.n	8008382 <__ieee754_rem_pio2f+0x66>
 8008350:	429c      	cmp	r4, r3
 8008352:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008356:	bf09      	itett	eq
 8008358:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800854c <__ieee754_rem_pio2f+0x230>
 800835c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008550 <__ieee754_rem_pio2f+0x234>
 8008360:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008364:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008554 <__ieee754_rem_pio2f+0x238>
 8008368:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800836c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008370:	edc0 6a00 	vstr	s13, [r0]
 8008374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008378:	edc0 7a01 	vstr	s15, [r0, #4]
 800837c:	2001      	movs	r0, #1
 800837e:	b007      	add	sp, #28
 8008380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008382:	429c      	cmp	r4, r3
 8008384:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008388:	bf09      	itett	eq
 800838a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800854c <__ieee754_rem_pio2f+0x230>
 800838e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008550 <__ieee754_rem_pio2f+0x234>
 8008392:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008396:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008554 <__ieee754_rem_pio2f+0x238>
 800839a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800839e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083a2:	edc0 6a00 	vstr	s13, [r0]
 80083a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80083ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b2:	e7e4      	b.n	800837e <__ieee754_rem_pio2f+0x62>
 80083b4:	4b68      	ldr	r3, [pc, #416]	; (8008558 <__ieee754_rem_pio2f+0x23c>)
 80083b6:	429c      	cmp	r4, r3
 80083b8:	dc71      	bgt.n	800849e <__ieee754_rem_pio2f+0x182>
 80083ba:	f000 fc03 	bl	8008bc4 <fabsf>
 80083be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800855c <__ieee754_rem_pio2f+0x240>
 80083c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80083c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80083ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083ce:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80083d2:	ee17 0a90 	vmov	r0, s15
 80083d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008544 <__ieee754_rem_pio2f+0x228>
 80083da:	eeb1 7a46 	vneg.f32	s14, s12
 80083de:	eea7 0a27 	vfma.f32	s0, s14, s15
 80083e2:	281f      	cmp	r0, #31
 80083e4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008550 <__ieee754_rem_pio2f+0x234>
 80083e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80083f0:	ee16 3a90 	vmov	r3, s13
 80083f4:	dc1c      	bgt.n	8008430 <__ieee754_rem_pio2f+0x114>
 80083f6:	1e47      	subs	r7, r0, #1
 80083f8:	4959      	ldr	r1, [pc, #356]	; (8008560 <__ieee754_rem_pio2f+0x244>)
 80083fa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80083fe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008402:	428a      	cmp	r2, r1
 8008404:	d014      	beq.n	8008430 <__ieee754_rem_pio2f+0x114>
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	ed95 7a00 	vldr	s14, [r5]
 800840c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008410:	2e00      	cmp	r6, #0
 8008412:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008416:	ed85 0a01 	vstr	s0, [r5, #4]
 800841a:	dab0      	bge.n	800837e <__ieee754_rem_pio2f+0x62>
 800841c:	eeb1 7a47 	vneg.f32	s14, s14
 8008420:	eeb1 0a40 	vneg.f32	s0, s0
 8008424:	ed85 7a00 	vstr	s14, [r5]
 8008428:	ed85 0a01 	vstr	s0, [r5, #4]
 800842c:	4240      	negs	r0, r0
 800842e:	e7a6      	b.n	800837e <__ieee754_rem_pio2f+0x62>
 8008430:	15e4      	asrs	r4, r4, #23
 8008432:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008436:	1aa2      	subs	r2, r4, r2
 8008438:	2a08      	cmp	r2, #8
 800843a:	dde4      	ble.n	8008406 <__ieee754_rem_pio2f+0xea>
 800843c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800854c <__ieee754_rem_pio2f+0x230>
 8008440:	eef0 6a40 	vmov.f32	s13, s0
 8008444:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008448:	ee30 0a66 	vsub.f32	s0, s0, s13
 800844c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008450:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008554 <__ieee754_rem_pio2f+0x238>
 8008454:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008458:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800845c:	eef0 7a40 	vmov.f32	s15, s0
 8008460:	ee15 3a90 	vmov	r3, s11
 8008464:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008468:	1aa4      	subs	r4, r4, r2
 800846a:	2c19      	cmp	r4, #25
 800846c:	dc04      	bgt.n	8008478 <__ieee754_rem_pio2f+0x15c>
 800846e:	edc5 5a00 	vstr	s11, [r5]
 8008472:	eeb0 0a66 	vmov.f32	s0, s13
 8008476:	e7c7      	b.n	8008408 <__ieee754_rem_pio2f+0xec>
 8008478:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008564 <__ieee754_rem_pio2f+0x248>
 800847c:	eeb0 0a66 	vmov.f32	s0, s13
 8008480:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008484:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008488:	eee7 7a25 	vfma.f32	s15, s14, s11
 800848c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008568 <__ieee754_rem_pio2f+0x24c>
 8008490:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008494:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008498:	ed85 7a00 	vstr	s14, [r5]
 800849c:	e7b4      	b.n	8008408 <__ieee754_rem_pio2f+0xec>
 800849e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80084a2:	db06      	blt.n	80084b2 <__ieee754_rem_pio2f+0x196>
 80084a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80084a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80084ac:	edc0 7a00 	vstr	s15, [r0]
 80084b0:	e742      	b.n	8008338 <__ieee754_rem_pio2f+0x1c>
 80084b2:	15e2      	asrs	r2, r4, #23
 80084b4:	3a86      	subs	r2, #134	; 0x86
 80084b6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084c2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800856c <__ieee754_rem_pio2f+0x250>
 80084c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 80084d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084e2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80084e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	edcd 7a05 	vstr	s15, [sp, #20]
 80084f6:	d11e      	bne.n	8008536 <__ieee754_rem_pio2f+0x21a>
 80084f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2302      	movne	r3, #2
 8008506:	491a      	ldr	r1, [pc, #104]	; (8008570 <__ieee754_rem_pio2f+0x254>)
 8008508:	9101      	str	r1, [sp, #4]
 800850a:	2102      	movs	r1, #2
 800850c:	9100      	str	r1, [sp, #0]
 800850e:	a803      	add	r0, sp, #12
 8008510:	4629      	mov	r1, r5
 8008512:	f000 f88d 	bl	8008630 <__kernel_rem_pio2f>
 8008516:	2e00      	cmp	r6, #0
 8008518:	f6bf af31 	bge.w	800837e <__ieee754_rem_pio2f+0x62>
 800851c:	edd5 7a00 	vldr	s15, [r5]
 8008520:	eef1 7a67 	vneg.f32	s15, s15
 8008524:	edc5 7a00 	vstr	s15, [r5]
 8008528:	edd5 7a01 	vldr	s15, [r5, #4]
 800852c:	eef1 7a67 	vneg.f32	s15, s15
 8008530:	edc5 7a01 	vstr	s15, [r5, #4]
 8008534:	e77a      	b.n	800842c <__ieee754_rem_pio2f+0x110>
 8008536:	2303      	movs	r3, #3
 8008538:	e7e5      	b.n	8008506 <__ieee754_rem_pio2f+0x1ea>
 800853a:	bf00      	nop
 800853c:	3f490fd8 	.word	0x3f490fd8
 8008540:	4016cbe3 	.word	0x4016cbe3
 8008544:	3fc90f80 	.word	0x3fc90f80
 8008548:	3fc90fd0 	.word	0x3fc90fd0
 800854c:	37354400 	.word	0x37354400
 8008550:	37354443 	.word	0x37354443
 8008554:	2e85a308 	.word	0x2e85a308
 8008558:	43490f80 	.word	0x43490f80
 800855c:	3f22f984 	.word	0x3f22f984
 8008560:	08008de4 	.word	0x08008de4
 8008564:	2e85a300 	.word	0x2e85a300
 8008568:	248d3132 	.word	0x248d3132
 800856c:	43800000 	.word	0x43800000
 8008570:	08008e64 	.word	0x08008e64

08008574 <__kernel_cosf>:
 8008574:	ee10 3a10 	vmov	r3, s0
 8008578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008584:	da05      	bge.n	8008592 <__kernel_cosf+0x1e>
 8008586:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800858a:	ee17 2a90 	vmov	r2, s15
 800858e:	2a00      	cmp	r2, #0
 8008590:	d03b      	beq.n	800860a <__kernel_cosf+0x96>
 8008592:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008596:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800859a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008610 <__kernel_cosf+0x9c>
 800859e:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <__kernel_cosf+0xa0>)
 80085a0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80085a4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008618 <__kernel_cosf+0xa4>
 80085a8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80085ac:	4293      	cmp	r3, r2
 80085ae:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800861c <__kernel_cosf+0xa8>
 80085b2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80085b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008620 <__kernel_cosf+0xac>
 80085ba:	eea5 7a86 	vfma.f32	s14, s11, s12
 80085be:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008624 <__kernel_cosf+0xb0>
 80085c2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80085c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008628 <__kernel_cosf+0xb4>
 80085ca:	eea5 7a86 	vfma.f32	s14, s11, s12
 80085ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80085d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80085d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80085da:	dc04      	bgt.n	80085e6 <__kernel_cosf+0x72>
 80085dc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80085e0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80085e4:	4770      	bx	lr
 80085e6:	4a11      	ldr	r2, [pc, #68]	; (800862c <__kernel_cosf+0xb8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	bfda      	itte	le
 80085ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80085f0:	ee07 3a10 	vmovle	s14, r3
 80085f4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80085f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085fc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008600:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008604:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008608:	4770      	bx	lr
 800860a:	eeb0 0a66 	vmov.f32	s0, s13
 800860e:	4770      	bx	lr
 8008610:	ad47d74e 	.word	0xad47d74e
 8008614:	3e999999 	.word	0x3e999999
 8008618:	310f74f6 	.word	0x310f74f6
 800861c:	b493f27c 	.word	0xb493f27c
 8008620:	37d00d01 	.word	0x37d00d01
 8008624:	bab60b61 	.word	0xbab60b61
 8008628:	3d2aaaab 	.word	0x3d2aaaab
 800862c:	3f480000 	.word	0x3f480000

08008630 <__kernel_rem_pio2f>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	ed2d 8b04 	vpush	{d8-d9}
 8008638:	b0d7      	sub	sp, #348	; 0x15c
 800863a:	469b      	mov	fp, r3
 800863c:	460e      	mov	r6, r1
 800863e:	4bbe      	ldr	r3, [pc, #760]	; (8008938 <__kernel_rem_pio2f+0x308>)
 8008640:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008642:	9002      	str	r0, [sp, #8]
 8008644:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008648:	9865      	ldr	r0, [sp, #404]	; 0x194
 800864a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008948 <__kernel_rem_pio2f+0x318>
 800864e:	1ed1      	subs	r1, r2, #3
 8008650:	2308      	movs	r3, #8
 8008652:	fb91 f1f3 	sdiv	r1, r1, r3
 8008656:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800865a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800865e:	1c4c      	adds	r4, r1, #1
 8008660:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008664:	eba1 050a 	sub.w	r5, r1, sl
 8008668:	aa1a      	add	r2, sp, #104	; 0x68
 800866a:	eb09 070a 	add.w	r7, r9, sl
 800866e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008672:	4696      	mov	lr, r2
 8008674:	2300      	movs	r3, #0
 8008676:	42bb      	cmp	r3, r7
 8008678:	dd0f      	ble.n	800869a <__kernel_rem_pio2f+0x6a>
 800867a:	af42      	add	r7, sp, #264	; 0x108
 800867c:	2200      	movs	r2, #0
 800867e:	454a      	cmp	r2, r9
 8008680:	dc27      	bgt.n	80086d2 <__kernel_rem_pio2f+0xa2>
 8008682:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008686:	eb0b 0302 	add.w	r3, fp, r2
 800868a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800868e:	9d02      	ldr	r5, [sp, #8]
 8008690:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008948 <__kernel_rem_pio2f+0x318>
 8008694:	f04f 0c00 	mov.w	ip, #0
 8008698:	e015      	b.n	80086c6 <__kernel_rem_pio2f+0x96>
 800869a:	42dd      	cmn	r5, r3
 800869c:	bf5d      	ittte	pl
 800869e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80086a2:	ee07 2a90 	vmovpl	s15, r2
 80086a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80086aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80086ae:	ecee 7a01 	vstmia	lr!, {s15}
 80086b2:	3301      	adds	r3, #1
 80086b4:	e7df      	b.n	8008676 <__kernel_rem_pio2f+0x46>
 80086b6:	ecf5 6a01 	vldmia	r5!, {s13}
 80086ba:	ed33 7a01 	vldmdb	r3!, {s14}
 80086be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80086c2:	f10c 0c01 	add.w	ip, ip, #1
 80086c6:	45d4      	cmp	ip, sl
 80086c8:	ddf5      	ble.n	80086b6 <__kernel_rem_pio2f+0x86>
 80086ca:	ece7 7a01 	vstmia	r7!, {s15}
 80086ce:	3201      	adds	r2, #1
 80086d0:	e7d5      	b.n	800867e <__kernel_rem_pio2f+0x4e>
 80086d2:	ab06      	add	r3, sp, #24
 80086d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008944 <__kernel_rem_pio2f+0x314>
 80086de:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008940 <__kernel_rem_pio2f+0x310>
 80086e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	464d      	mov	r5, r9
 80086ea:	ab56      	add	r3, sp, #344	; 0x158
 80086ec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80086f0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80086f4:	3f01      	subs	r7, #1
 80086f6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80086fa:	00bf      	lsls	r7, r7, #2
 80086fc:	ab56      	add	r3, sp, #344	; 0x158
 80086fe:	19da      	adds	r2, r3, r7
 8008700:	3a4c      	subs	r2, #76	; 0x4c
 8008702:	2300      	movs	r3, #0
 8008704:	1ae9      	subs	r1, r5, r3
 8008706:	2900      	cmp	r1, #0
 8008708:	dc4c      	bgt.n	80087a4 <__kernel_rem_pio2f+0x174>
 800870a:	4620      	mov	r0, r4
 800870c:	f000 faa4 	bl	8008c58 <scalbnf>
 8008710:	eeb0 8a40 	vmov.f32	s16, s0
 8008714:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008718:	ee28 0a00 	vmul.f32	s0, s16, s0
 800871c:	f000 fa5a 	bl	8008bd4 <floorf>
 8008720:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008724:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008728:	2c00      	cmp	r4, #0
 800872a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800872e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008736:	ee38 8a67 	vsub.f32	s16, s16, s15
 800873a:	dd48      	ble.n	80087ce <__kernel_rem_pio2f+0x19e>
 800873c:	1e69      	subs	r1, r5, #1
 800873e:	ab06      	add	r3, sp, #24
 8008740:	f1c4 0008 	rsb	r0, r4, #8
 8008744:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	fa4c f300 	asr.w	r3, ip, r0
 800874e:	441a      	add	r2, r3
 8008750:	4083      	lsls	r3, r0
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	ebac 0203 	sub.w	r2, ip, r3
 8008758:	ab06      	add	r3, sp, #24
 800875a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800875e:	f1c4 0307 	rsb	r3, r4, #7
 8008762:	fa42 f803 	asr.w	r8, r2, r3
 8008766:	f1b8 0f00 	cmp.w	r8, #0
 800876a:	dd41      	ble.n	80087f0 <__kernel_rem_pio2f+0x1c0>
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	2000      	movs	r0, #0
 8008770:	3301      	adds	r3, #1
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	4601      	mov	r1, r0
 8008776:	4285      	cmp	r5, r0
 8008778:	dc6d      	bgt.n	8008856 <__kernel_rem_pio2f+0x226>
 800877a:	2c00      	cmp	r4, #0
 800877c:	dd04      	ble.n	8008788 <__kernel_rem_pio2f+0x158>
 800877e:	2c01      	cmp	r4, #1
 8008780:	d07e      	beq.n	8008880 <__kernel_rem_pio2f+0x250>
 8008782:	2c02      	cmp	r4, #2
 8008784:	f000 8086 	beq.w	8008894 <__kernel_rem_pio2f+0x264>
 8008788:	f1b8 0f02 	cmp.w	r8, #2
 800878c:	d130      	bne.n	80087f0 <__kernel_rem_pio2f+0x1c0>
 800878e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008792:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008796:	b359      	cbz	r1, 80087f0 <__kernel_rem_pio2f+0x1c0>
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fa5d 	bl	8008c58 <scalbnf>
 800879e:	ee38 8a40 	vsub.f32	s16, s16, s0
 80087a2:	e025      	b.n	80087f0 <__kernel_rem_pio2f+0x1c0>
 80087a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80087a8:	a806      	add	r0, sp, #24
 80087aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80087b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80087ba:	ee10 1a10 	vmov	r1, s0
 80087be:	ed32 0a01 	vldmdb	r2!, {s0}
 80087c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80087c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80087ca:	3301      	adds	r3, #1
 80087cc:	e79a      	b.n	8008704 <__kernel_rem_pio2f+0xd4>
 80087ce:	d106      	bne.n	80087de <__kernel_rem_pio2f+0x1ae>
 80087d0:	1e6b      	subs	r3, r5, #1
 80087d2:	aa06      	add	r2, sp, #24
 80087d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087d8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80087dc:	e7c3      	b.n	8008766 <__kernel_rem_pio2f+0x136>
 80087de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80087e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80087e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ea:	da31      	bge.n	8008850 <__kernel_rem_pio2f+0x220>
 80087ec:	f04f 0800 	mov.w	r8, #0
 80087f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80087f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f8:	f040 80a8 	bne.w	800894c <__kernel_rem_pio2f+0x31c>
 80087fc:	1e6b      	subs	r3, r5, #1
 80087fe:	4618      	mov	r0, r3
 8008800:	2200      	movs	r2, #0
 8008802:	4548      	cmp	r0, r9
 8008804:	da4d      	bge.n	80088a2 <__kernel_rem_pio2f+0x272>
 8008806:	2a00      	cmp	r2, #0
 8008808:	f000 8087 	beq.w	800891a <__kernel_rem_pio2f+0x2ea>
 800880c:	aa06      	add	r2, sp, #24
 800880e:	3c08      	subs	r4, #8
 8008810:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008814:	2900      	cmp	r1, #0
 8008816:	f000 808d 	beq.w	8008934 <__kernel_rem_pio2f+0x304>
 800881a:	4620      	mov	r0, r4
 800881c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	f000 fa19 	bl	8008c58 <scalbnf>
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008944 <__kernel_rem_pio2f+0x314>
 800882c:	0099      	lsls	r1, r3, #2
 800882e:	aa42      	add	r2, sp, #264	; 0x108
 8008830:	1850      	adds	r0, r2, r1
 8008832:	1d05      	adds	r5, r0, #4
 8008834:	461c      	mov	r4, r3
 8008836:	2c00      	cmp	r4, #0
 8008838:	f280 80b8 	bge.w	80089ac <__kernel_rem_pio2f+0x37c>
 800883c:	2500      	movs	r5, #0
 800883e:	1b5c      	subs	r4, r3, r5
 8008840:	2c00      	cmp	r4, #0
 8008842:	f2c0 80d8 	blt.w	80089f6 <__kernel_rem_pio2f+0x3c6>
 8008846:	4f3d      	ldr	r7, [pc, #244]	; (800893c <__kernel_rem_pio2f+0x30c>)
 8008848:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008948 <__kernel_rem_pio2f+0x318>
 800884c:	2400      	movs	r4, #0
 800884e:	e0c6      	b.n	80089de <__kernel_rem_pio2f+0x3ae>
 8008850:	f04f 0802 	mov.w	r8, #2
 8008854:	e78a      	b.n	800876c <__kernel_rem_pio2f+0x13c>
 8008856:	ab06      	add	r3, sp, #24
 8008858:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800885c:	b949      	cbnz	r1, 8008872 <__kernel_rem_pio2f+0x242>
 800885e:	b12b      	cbz	r3, 800886c <__kernel_rem_pio2f+0x23c>
 8008860:	aa06      	add	r2, sp, #24
 8008862:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008866:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800886a:	2301      	movs	r3, #1
 800886c:	3001      	adds	r0, #1
 800886e:	4619      	mov	r1, r3
 8008870:	e781      	b.n	8008776 <__kernel_rem_pio2f+0x146>
 8008872:	aa06      	add	r2, sp, #24
 8008874:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008878:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800887c:	460b      	mov	r3, r1
 800887e:	e7f5      	b.n	800886c <__kernel_rem_pio2f+0x23c>
 8008880:	1e68      	subs	r0, r5, #1
 8008882:	ab06      	add	r3, sp, #24
 8008884:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888c:	aa06      	add	r2, sp, #24
 800888e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008892:	e779      	b.n	8008788 <__kernel_rem_pio2f+0x158>
 8008894:	1e68      	subs	r0, r5, #1
 8008896:	ab06      	add	r3, sp, #24
 8008898:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800889c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088a0:	e7f4      	b.n	800888c <__kernel_rem_pio2f+0x25c>
 80088a2:	a906      	add	r1, sp, #24
 80088a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80088a8:	3801      	subs	r0, #1
 80088aa:	430a      	orrs	r2, r1
 80088ac:	e7a9      	b.n	8008802 <__kernel_rem_pio2f+0x1d2>
 80088ae:	f10c 0c01 	add.w	ip, ip, #1
 80088b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d0f9      	beq.n	80088ae <__kernel_rem_pio2f+0x27e>
 80088ba:	eb0b 0305 	add.w	r3, fp, r5
 80088be:	aa1a      	add	r2, sp, #104	; 0x68
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	1898      	adds	r0, r3, r2
 80088c4:	3004      	adds	r0, #4
 80088c6:	1c69      	adds	r1, r5, #1
 80088c8:	3704      	adds	r7, #4
 80088ca:	2200      	movs	r2, #0
 80088cc:	4465      	add	r5, ip
 80088ce:	9005      	str	r0, [sp, #20]
 80088d0:	428d      	cmp	r5, r1
 80088d2:	f6ff af0a 	blt.w	80086ea <__kernel_rem_pio2f+0xba>
 80088d6:	a81a      	add	r0, sp, #104	; 0x68
 80088d8:	eb02 0c03 	add.w	ip, r2, r3
 80088dc:	4484      	add	ip, r0
 80088de:	9803      	ldr	r0, [sp, #12]
 80088e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80088e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80088e8:	9001      	str	r0, [sp, #4]
 80088ea:	ee07 0a90 	vmov	s15, r0
 80088ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f2:	9805      	ldr	r0, [sp, #20]
 80088f4:	edcc 7a00 	vstr	s15, [ip]
 80088f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008948 <__kernel_rem_pio2f+0x318>
 80088fc:	eb00 0802 	add.w	r8, r0, r2
 8008900:	f04f 0c00 	mov.w	ip, #0
 8008904:	45d4      	cmp	ip, sl
 8008906:	dd0c      	ble.n	8008922 <__kernel_rem_pio2f+0x2f2>
 8008908:	eb02 0c07 	add.w	ip, r2, r7
 800890c:	a842      	add	r0, sp, #264	; 0x108
 800890e:	4484      	add	ip, r0
 8008910:	edcc 7a01 	vstr	s15, [ip, #4]
 8008914:	3101      	adds	r1, #1
 8008916:	3204      	adds	r2, #4
 8008918:	e7da      	b.n	80088d0 <__kernel_rem_pio2f+0x2a0>
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	f04f 0c01 	mov.w	ip, #1
 8008920:	e7c7      	b.n	80088b2 <__kernel_rem_pio2f+0x282>
 8008922:	ecfe 6a01 	vldmia	lr!, {s13}
 8008926:	ed38 7a01 	vldmdb	r8!, {s14}
 800892a:	f10c 0c01 	add.w	ip, ip, #1
 800892e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008932:	e7e7      	b.n	8008904 <__kernel_rem_pio2f+0x2d4>
 8008934:	3b01      	subs	r3, #1
 8008936:	e769      	b.n	800880c <__kernel_rem_pio2f+0x1dc>
 8008938:	080091a8 	.word	0x080091a8
 800893c:	0800917c 	.word	0x0800917c
 8008940:	43800000 	.word	0x43800000
 8008944:	3b800000 	.word	0x3b800000
 8008948:	00000000 	.word	0x00000000
 800894c:	4260      	negs	r0, r4
 800894e:	eeb0 0a48 	vmov.f32	s0, s16
 8008952:	f000 f981 	bl	8008c58 <scalbnf>
 8008956:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008940 <__kernel_rem_pio2f+0x310>
 800895a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	db1a      	blt.n	800899a <__kernel_rem_pio2f+0x36a>
 8008964:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008944 <__kernel_rem_pio2f+0x314>
 8008968:	ee60 7a27 	vmul.f32	s15, s0, s15
 800896c:	aa06      	add	r2, sp, #24
 800896e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008972:	a906      	add	r1, sp, #24
 8008974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008978:	3408      	adds	r4, #8
 800897a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800897e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008982:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008986:	ee10 3a10 	vmov	r3, s0
 800898a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800898e:	1c6b      	adds	r3, r5, #1
 8008990:	ee17 2a90 	vmov	r2, s15
 8008994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008998:	e73f      	b.n	800881a <__kernel_rem_pio2f+0x1ea>
 800899a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800899e:	aa06      	add	r2, sp, #24
 80089a0:	ee10 3a10 	vmov	r3, s0
 80089a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80089a8:	462b      	mov	r3, r5
 80089aa:	e736      	b.n	800881a <__kernel_rem_pio2f+0x1ea>
 80089ac:	aa06      	add	r2, sp, #24
 80089ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	ee07 2a90 	vmov	s15, r2
 80089b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089bc:	3c01      	subs	r4, #1
 80089be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80089c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80089c6:	ed65 7a01 	vstmdb	r5!, {s15}
 80089ca:	e734      	b.n	8008836 <__kernel_rem_pio2f+0x206>
 80089cc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80089d0:	ecf7 6a01 	vldmia	r7!, {s13}
 80089d4:	ed9c 7a00 	vldr	s14, [ip]
 80089d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80089dc:	3401      	adds	r4, #1
 80089de:	454c      	cmp	r4, r9
 80089e0:	dc01      	bgt.n	80089e6 <__kernel_rem_pio2f+0x3b6>
 80089e2:	42a5      	cmp	r5, r4
 80089e4:	daf2      	bge.n	80089cc <__kernel_rem_pio2f+0x39c>
 80089e6:	aa56      	add	r2, sp, #344	; 0x158
 80089e8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80089ec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80089f0:	3501      	adds	r5, #1
 80089f2:	3804      	subs	r0, #4
 80089f4:	e723      	b.n	800883e <__kernel_rem_pio2f+0x20e>
 80089f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80089f8:	2a03      	cmp	r2, #3
 80089fa:	d84d      	bhi.n	8008a98 <__kernel_rem_pio2f+0x468>
 80089fc:	e8df f002 	tbb	[pc, r2]
 8008a00:	021f1f3e 	.word	0x021f1f3e
 8008a04:	aa56      	add	r2, sp, #344	; 0x158
 8008a06:	4411      	add	r1, r2
 8008a08:	399c      	subs	r1, #156	; 0x9c
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	461c      	mov	r4, r3
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	dc5f      	bgt.n	8008ad2 <__kernel_rem_pio2f+0x4a2>
 8008a12:	4608      	mov	r0, r1
 8008a14:	461c      	mov	r4, r3
 8008a16:	2c01      	cmp	r4, #1
 8008a18:	dc6b      	bgt.n	8008af2 <__kernel_rem_pio2f+0x4c2>
 8008a1a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008948 <__kernel_rem_pio2f+0x318>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	dc77      	bgt.n	8008b12 <__kernel_rem_pio2f+0x4e2>
 8008a22:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008a26:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008a2a:	f1b8 0f00 	cmp.w	r8, #0
 8008a2e:	d176      	bne.n	8008b1e <__kernel_rem_pio2f+0x4ee>
 8008a30:	edc6 6a00 	vstr	s13, [r6]
 8008a34:	ed86 7a01 	vstr	s14, [r6, #4]
 8008a38:	edc6 7a02 	vstr	s15, [r6, #8]
 8008a3c:	e02c      	b.n	8008a98 <__kernel_rem_pio2f+0x468>
 8008a3e:	aa56      	add	r2, sp, #344	; 0x158
 8008a40:	4411      	add	r1, r2
 8008a42:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008948 <__kernel_rem_pio2f+0x318>
 8008a46:	399c      	subs	r1, #156	; 0x9c
 8008a48:	4618      	mov	r0, r3
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	da32      	bge.n	8008ab4 <__kernel_rem_pio2f+0x484>
 8008a4e:	f1b8 0f00 	cmp.w	r8, #0
 8008a52:	d035      	beq.n	8008ac0 <__kernel_rem_pio2f+0x490>
 8008a54:	eef1 7a47 	vneg.f32	s15, s14
 8008a58:	edc6 7a00 	vstr	s15, [r6]
 8008a5c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a64:	a82f      	add	r0, sp, #188	; 0xbc
 8008a66:	2101      	movs	r1, #1
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	da2c      	bge.n	8008ac6 <__kernel_rem_pio2f+0x496>
 8008a6c:	f1b8 0f00 	cmp.w	r8, #0
 8008a70:	d001      	beq.n	8008a76 <__kernel_rem_pio2f+0x446>
 8008a72:	eef1 7a67 	vneg.f32	s15, s15
 8008a76:	edc6 7a01 	vstr	s15, [r6, #4]
 8008a7a:	e00d      	b.n	8008a98 <__kernel_rem_pio2f+0x468>
 8008a7c:	aa56      	add	r2, sp, #344	; 0x158
 8008a7e:	4411      	add	r1, r2
 8008a80:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008948 <__kernel_rem_pio2f+0x318>
 8008a84:	399c      	subs	r1, #156	; 0x9c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da0e      	bge.n	8008aa8 <__kernel_rem_pio2f+0x478>
 8008a8a:	f1b8 0f00 	cmp.w	r8, #0
 8008a8e:	d001      	beq.n	8008a94 <__kernel_rem_pio2f+0x464>
 8008a90:	eef1 7a67 	vneg.f32	s15, s15
 8008a94:	edc6 7a00 	vstr	s15, [r6]
 8008a98:	9b01      	ldr	r3, [sp, #4]
 8008a9a:	f003 0007 	and.w	r0, r3, #7
 8008a9e:	b057      	add	sp, #348	; 0x15c
 8008aa0:	ecbd 8b04 	vpop	{d8-d9}
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	ed31 7a01 	vldmdb	r1!, {s14}
 8008aac:	3b01      	subs	r3, #1
 8008aae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ab2:	e7e8      	b.n	8008a86 <__kernel_rem_pio2f+0x456>
 8008ab4:	ed71 7a01 	vldmdb	r1!, {s15}
 8008ab8:	3801      	subs	r0, #1
 8008aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008abe:	e7c4      	b.n	8008a4a <__kernel_rem_pio2f+0x41a>
 8008ac0:	eef0 7a47 	vmov.f32	s15, s14
 8008ac4:	e7c8      	b.n	8008a58 <__kernel_rem_pio2f+0x428>
 8008ac6:	ecb0 7a01 	vldmia	r0!, {s14}
 8008aca:	3101      	adds	r1, #1
 8008acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ad0:	e7ca      	b.n	8008a68 <__kernel_rem_pio2f+0x438>
 8008ad2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008ad6:	ed70 6a01 	vldmdb	r0!, {s13}
 8008ada:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ade:	3c01      	subs	r4, #1
 8008ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aec:	edc0 7a00 	vstr	s15, [r0]
 8008af0:	e78d      	b.n	8008a0e <__kernel_rem_pio2f+0x3de>
 8008af2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008af6:	ed70 6a01 	vldmdb	r0!, {s13}
 8008afa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008afe:	3c01      	subs	r4, #1
 8008b00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b04:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0c:	edc0 7a00 	vstr	s15, [r0]
 8008b10:	e781      	b.n	8008a16 <__kernel_rem_pio2f+0x3e6>
 8008b12:	ed31 7a01 	vldmdb	r1!, {s14}
 8008b16:	3b01      	subs	r3, #1
 8008b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b1c:	e77f      	b.n	8008a1e <__kernel_rem_pio2f+0x3ee>
 8008b1e:	eef1 6a66 	vneg.f32	s13, s13
 8008b22:	eeb1 7a47 	vneg.f32	s14, s14
 8008b26:	edc6 6a00 	vstr	s13, [r6]
 8008b2a:	ed86 7a01 	vstr	s14, [r6, #4]
 8008b2e:	eef1 7a67 	vneg.f32	s15, s15
 8008b32:	e781      	b.n	8008a38 <__kernel_rem_pio2f+0x408>

08008b34 <__kernel_sinf>:
 8008b34:	ee10 3a10 	vmov	r3, s0
 8008b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008b40:	da04      	bge.n	8008b4c <__kernel_sinf+0x18>
 8008b42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b46:	ee17 3a90 	vmov	r3, s15
 8008b4a:	b35b      	cbz	r3, 8008ba4 <__kernel_sinf+0x70>
 8008b4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008b50:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008ba8 <__kernel_sinf+0x74>
 8008b54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008bac <__kernel_sinf+0x78>
 8008b58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008bb0 <__kernel_sinf+0x7c>
 8008b60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008bb4 <__kernel_sinf+0x80>
 8008b68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008b6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008bb8 <__kernel_sinf+0x84>
 8008b70:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008b74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b78:	b930      	cbnz	r0, 8008b88 <__kernel_sinf+0x54>
 8008b7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008bbc <__kernel_sinf+0x88>
 8008b7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b82:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008b86:	4770      	bx	lr
 8008b88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008b8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008b90:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008b94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008b98:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008bc0 <__kernel_sinf+0x8c>
 8008b9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008ba0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	2f2ec9d3 	.word	0x2f2ec9d3
 8008bac:	b2d72f34 	.word	0xb2d72f34
 8008bb0:	3638ef1b 	.word	0x3638ef1b
 8008bb4:	b9500d01 	.word	0xb9500d01
 8008bb8:	3c088889 	.word	0x3c088889
 8008bbc:	be2aaaab 	.word	0xbe2aaaab
 8008bc0:	3e2aaaab 	.word	0x3e2aaaab

08008bc4 <fabsf>:
 8008bc4:	ee10 3a10 	vmov	r3, s0
 8008bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	ee00 3a10 	vmov	s0, r3
 8008bd0:	4770      	bx	lr
	...

08008bd4 <floorf>:
 8008bd4:	ee10 3a10 	vmov	r3, s0
 8008bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bdc:	0dca      	lsrs	r2, r1, #23
 8008bde:	3a7f      	subs	r2, #127	; 0x7f
 8008be0:	2a16      	cmp	r2, #22
 8008be2:	dc2a      	bgt.n	8008c3a <floorf+0x66>
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	da11      	bge.n	8008c0c <floorf+0x38>
 8008be8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008c4c <floorf+0x78>
 8008bec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008bf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	dd05      	ble.n	8008c06 <floorf+0x32>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da23      	bge.n	8008c46 <floorf+0x72>
 8008bfe:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <floorf+0x7c>)
 8008c00:	2900      	cmp	r1, #0
 8008c02:	bf18      	it	ne
 8008c04:	4613      	movne	r3, r2
 8008c06:	ee00 3a10 	vmov	s0, r3
 8008c0a:	4770      	bx	lr
 8008c0c:	4911      	ldr	r1, [pc, #68]	; (8008c54 <floorf+0x80>)
 8008c0e:	4111      	asrs	r1, r2
 8008c10:	420b      	tst	r3, r1
 8008c12:	d0fa      	beq.n	8008c0a <floorf+0x36>
 8008c14:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008c4c <floorf+0x78>
 8008c18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	ddef      	ble.n	8008c06 <floorf+0x32>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfbe      	ittt	lt
 8008c2a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008c2e:	fa40 f202 	asrlt.w	r2, r0, r2
 8008c32:	189b      	addlt	r3, r3, r2
 8008c34:	ea23 0301 	bic.w	r3, r3, r1
 8008c38:	e7e5      	b.n	8008c06 <floorf+0x32>
 8008c3a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008c3e:	d3e4      	bcc.n	8008c0a <floorf+0x36>
 8008c40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008c44:	4770      	bx	lr
 8008c46:	2300      	movs	r3, #0
 8008c48:	e7dd      	b.n	8008c06 <floorf+0x32>
 8008c4a:	bf00      	nop
 8008c4c:	7149f2ca 	.word	0x7149f2ca
 8008c50:	bf800000 	.word	0xbf800000
 8008c54:	007fffff 	.word	0x007fffff

08008c58 <scalbnf>:
 8008c58:	b508      	push	{r3, lr}
 8008c5a:	ee10 2a10 	vmov	r2, s0
 8008c5e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008c62:	ed2d 8b02 	vpush	{d8}
 8008c66:	eef0 0a40 	vmov.f32	s1, s0
 8008c6a:	d004      	beq.n	8008c76 <scalbnf+0x1e>
 8008c6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c70:	d306      	bcc.n	8008c80 <scalbnf+0x28>
 8008c72:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008c76:	ecbd 8b02 	vpop	{d8}
 8008c7a:	eeb0 0a60 	vmov.f32	s0, s1
 8008c7e:	bd08      	pop	{r3, pc}
 8008c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c84:	d21c      	bcs.n	8008cc0 <scalbnf+0x68>
 8008c86:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <scalbnf+0xac>)
 8008c88:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008d08 <scalbnf+0xb0>
 8008c8c:	4298      	cmp	r0, r3
 8008c8e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008c92:	db10      	blt.n	8008cb6 <scalbnf+0x5e>
 8008c94:	ee10 2a90 	vmov	r2, s1
 8008c98:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008c9c:	3b19      	subs	r3, #25
 8008c9e:	4403      	add	r3, r0
 8008ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8008ca2:	dd0f      	ble.n	8008cc4 <scalbnf+0x6c>
 8008ca4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008d0c <scalbnf+0xb4>
 8008ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8008cac:	f000 f834 	bl	8008d18 <copysignf>
 8008cb0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008cb4:	e7df      	b.n	8008c76 <scalbnf+0x1e>
 8008cb6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008d10 <scalbnf+0xb8>
 8008cba:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008cbe:	e7da      	b.n	8008c76 <scalbnf+0x1e>
 8008cc0:	0ddb      	lsrs	r3, r3, #23
 8008cc2:	e7ec      	b.n	8008c9e <scalbnf+0x46>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd06      	ble.n	8008cd6 <scalbnf+0x7e>
 8008cc8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008ccc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008cd0:	ee00 3a90 	vmov	s1, r3
 8008cd4:	e7cf      	b.n	8008c76 <scalbnf+0x1e>
 8008cd6:	f113 0f16 	cmn.w	r3, #22
 8008cda:	da06      	bge.n	8008cea <scalbnf+0x92>
 8008cdc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008ce0:	4298      	cmp	r0, r3
 8008ce2:	dcdf      	bgt.n	8008ca4 <scalbnf+0x4c>
 8008ce4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008d10 <scalbnf+0xb8>
 8008ce8:	e7de      	b.n	8008ca8 <scalbnf+0x50>
 8008cea:	3319      	adds	r3, #25
 8008cec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008cf0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008cf4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008d14 <scalbnf+0xbc>
 8008cf8:	ee07 3a10 	vmov	s14, r3
 8008cfc:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008d00:	e7b9      	b.n	8008c76 <scalbnf+0x1e>
 8008d02:	bf00      	nop
 8008d04:	ffff3cb0 	.word	0xffff3cb0
 8008d08:	4c000000 	.word	0x4c000000
 8008d0c:	7149f2ca 	.word	0x7149f2ca
 8008d10:	0da24260 	.word	0x0da24260
 8008d14:	33000000 	.word	0x33000000

08008d18 <copysignf>:
 8008d18:	ee10 3a10 	vmov	r3, s0
 8008d1c:	ee10 2a90 	vmov	r2, s1
 8008d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	ee00 3a10 	vmov	s0, r3
 8008d2e:	4770      	bx	lr

08008d30 <_init>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr

08008d3c <_fini>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	bf00      	nop
 8008d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	469e      	mov	lr, r3
 8008d46:	4770      	bx	lr
