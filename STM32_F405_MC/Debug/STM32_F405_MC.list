
STM32_F405_MC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800409c  0800409c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a4  080040a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080040b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080040b8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ac  00000000  00000000  0002b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002cae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee05  00000000  00000000  0002dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab8e  00000000  00000000  0004cb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcd56  00000000  00000000  00057713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  001144bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ca4 	.word	0x08003ca4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ca4 	.word	0x08003ca4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f04f 0200 	mov.w	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f04f 0200 	mov.w	r2, #0
 8000510:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f04f 0200 	mov.w	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f04f 0200 	mov.w	r2, #0
 8000530:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f04f 0200 	mov.w	r2, #0
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4abb      	ldr	r2, [pc, #748]	; (8000844 <SVPWM_Update+0x2fc>)
 8000558:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000560:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	edd3 7a01 	vldr	s15, [r3, #4]
 8000568:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8000848 <SVPWM_Update+0x300>
 800056c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	ed93 7a02 	vldr	s14, [r3, #8]
 8000576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	691a      	ldr	r2, [r3, #16]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	ed93 7a03 	vldr	s14, [r3, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80005a4:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800084c <SVPWM_Update+0x304>
 80005a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	db09      	blt.n	80005c6 <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80005b8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800084c <SVPWM_Update+0x304>
 80005bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80005d4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800084c <SVPWM_Update+0x304>
 80005d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005dc:	eeb0 0a67 	vmov.f32	s0, s15
 80005e0:	f002 fdf4 	bl	80031cc <sinf>
 80005e4:	eeb0 7a40 	vmov.f32	s14, s0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	edd3 7a00 	vldr	s15, [r3]
 80005ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80005f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	edd3 7a04 	vldr	s15, [r3, #16]
 8000608:	eeb0 0a67 	vmov.f32	s0, s15
 800060c:	f002 fdde 	bl	80031cc <sinf>
 8000610:	eeb0 7a40 	vmov.f32	s14, s0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	edd3 7a02 	vldr	s15, [r3, #8]
 8000624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	ed93 7a02 	vldr	s14, [r3, #8]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800063a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000648:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800064c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	ed93 7a04 	vldr	s14, [r3, #16]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d518      	bpl.n	80006a2 <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	edd3 7a05 	vldr	s15, [r3, #20]
 8000676:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800067a:	eef4 7a47 	vcmp.f32	s15, s14
 800067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000682:	d104      	bne.n	800068e <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	e009      	b.n	80006a2 <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	edd3 7a05 	vldr	s15, [r3, #20]
 8000694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80006a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b0:	d11f      	bne.n	80006f2 <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80006be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80006c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80006de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	621a      	str	r2, [r3, #32]
 80006f0:	e0d7      	b.n	80008a2 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80006f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006fc:	eef4 7a47 	vcmp.f32	s15, s14
 8000700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000704:	d11f      	bne.n	8000746 <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	621a      	str	r2, [r3, #32]
 8000744:	e0ad      	b.n	80008a2 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	edd3 7a05 	vldr	s15, [r3, #20]
 800074c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000750:	eef4 7a47 	vcmp.f32	s15, s14
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	d11f      	bne.n	800079a <SVPWM_Update+0x252>
    	svm->U = svm->to;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800076e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800078e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	edc3 7a08 	vstr	s15, [r3, #32]
 8000798:	e083      	b.n	80008a2 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	edd3 7a05 	vldr	s15, [r3, #20]
 80007a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80007a4:	eef4 7a47 	vcmp.f32	s15, s14
 80007a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ac:	d11f      	bne.n	80007ee <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80007c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80007d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80007e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	edc3 7a08 	vstr	s15, [r3, #32]
 80007ec:	e059      	b.n	80008a2 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80007f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80007f8:	eef4 7a47 	vcmp.f32	s15, s14
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	d126      	bne.n	8000850 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800080e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800082c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	edc3 7a08 	vstr	s15, [r3, #32]
 8000840:	e02f      	b.n	80008a2 <SVPWM_Update+0x35a>
 8000842:	bf00      	nop
 8000844:	3f666666 	.word	0x3f666666
 8000848:	40c90fdb 	.word	0x40c90fdb
 800084c:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	edd3 7a05 	vldr	s15, [r3, #20]
 8000856:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800085a:	eef4 7a47 	vcmp.f32	s15, s14
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d11e      	bne.n	80008a2 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80008ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <SVPWM_Update+0x3ec>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	3301      	adds	r3, #1
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <SVPWM_Update+0x3ec>)
 80008c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ca:	ee17 2a90 	vmov	r2, s15
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	edd3 6a07 	vldr	s13, [r3, #28]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80008dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <SVPWM_Update+0x3ec>)
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	3301      	adds	r3, #1
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <SVPWM_Update+0x3ec>)
 80008f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f8:	ee17 2a90 	vmov	r2, s15
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	edd3 6a08 	vldr	s13, [r3, #32]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	edd3 7a02 	vldr	s15, [r3, #8]
 800090a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <SVPWM_Update+0x3ec>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	3301      	adds	r3, #1
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SVPWM_Update+0x3ec>)
 8000922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000926:	ee17 2a90 	vmov	r2, s15
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010000 	.word	0x40010000

08000938 <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6178      	str	r0, [r7, #20]
 8000940:	ed87 0a04 	vstr	s0, [r7, #16]
 8000944:	edc7 0a03 	vstr	s1, [r7, #12]
 8000948:	ed87 1a02 	vstr	s2, [r7, #8]
 800094c:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8000968:	ed97 7a01 	vldr	s14, [r7, #4]
 800096c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000970:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000974:	ed97 7a03 	vldr	s14, [r7, #12]
 8000978:	edd7 7a04 	vldr	s15, [r7, #16]
 800097c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	619a      	str	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fb5a 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f83e 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f99c 	bl	8000cec <MX_GPIO_Init>
  MX_TIM8_Init();
 80009b4:	f000 f8a4 	bl	8000b00 <MX_TIM8_Init>
  MX_TIM12_Init();
 80009b8:	f000 f95c 	bl	8000c74 <MX_TIM12_Init>

  /* USER CODE BEGIN 2 */
  // intitialize the pwm timers
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009bc:	2100      	movs	r1, #0
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <main+0x70>)
 80009c0:	f001 fb9c 	bl	80020fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80009c4:	2104      	movs	r1, #4
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <main+0x70>)
 80009c8:	f001 fb98 	bl	80020fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009cc:	2108      	movs	r1, #8
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <main+0x70>)
 80009d0:	f001 fb94 	bl	80020fc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80009d4:	2100      	movs	r1, #0
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0x70>)
 80009d8:	f002 fa0a 	bl	8002df0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80009dc:	2104      	movs	r1, #4
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <main+0x70>)
 80009e0:	f002 fa06 	bl	8002df0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80009e4:	2108      	movs	r1, #8
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <main+0x70>)
 80009e8:	f002 fa02 	bl	8002df0 <HAL_TIMEx_PWMN_Start>

  // intitialize the SVPWM
  SVPWM_Init(&svpwm1, 10000);
 80009ec:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000a18 <main+0x74>
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <main+0x78>)
 80009f2:	f7ff fd65 	bl	80004c0 <SVPWM_Init>
  // initialize the VHz
  // VHZ_Init(vhz1, float FreqMin, float FreqRated, float VoltMin, float VoltRated);
  VHZ_Init(&vhz1, 10, 60, 10, 60);
 80009f6:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8000a20 <main+0x7c>
 80009fa:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80009fe:	eddf 0a08 	vldr	s1, [pc, #32]	; 8000a20 <main+0x7c>
 8000a02:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <main+0x80>)
 8000a08:	f7ff ff96 	bl	8000938 <VHZ_Init>

  // initialize the interrupt
  HAL_TIM_Base_Start_IT(&htim12);
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <main+0x84>)
 8000a0e:	f001 faab 	bl	8001f68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <main+0x6e>
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	461c4000 	.word	0x461c4000
 8000a1c:	20000090 	.word	0x20000090
 8000a20:	42700000 	.word	0x42700000
 8000a24:	20000074 	.word	0x20000074
 8000a28:	200000c8 	.word	0x200000c8

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fbbe 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa0:	23a8      	movs	r3, #168	; 0xa8
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fdf5 	bl	80016a0 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000abc:	f000 f96c 	bl	8000d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000acc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2105      	movs	r1, #5
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f856 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f955 	bl	8000d98 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2220      	movs	r2, #32
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb3e 	bl	80031bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b42:	4a4b      	ldr	r2, [pc, #300]	; (8000c70 <MX_TIM8_Init+0x170>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b4e:	2260      	movs	r2, #96	; 0x60
 8000b50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16800-1;
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b54:	f244 129f 	movw	r2, #16799	; 0x419f
 8000b58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b6c:	483f      	ldr	r0, [pc, #252]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b6e:	f001 f9ab 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f90e 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b7c:	483b      	ldr	r0, [pc, #236]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b7e:	f001 fa63 	bl	8002048 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f906 	bl	8000d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4834      	ldr	r0, [pc, #208]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000b9c:	f001 fd3c 	bl	8002618 <HAL_TIM_SlaveConfigSynchro>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000ba6:	f000 f8f7 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482c      	ldr	r0, [pc, #176]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000bba:	f002 f9d3 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000bc4:	f000 f8e8 	bl	8000d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	; 0x60
 8000bca:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	481f      	ldr	r0, [pc, #124]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000bee:	f001 fc55 	bl	800249c <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8000bf8:	f000 f8ce 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	2204      	movs	r2, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4819      	ldr	r0, [pc, #100]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000c06:	f001 fc49 	bl	800249c <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000c10:	f000 f8c2 	bl	8000d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000c1e:	f001 fc3d 	bl	800249c <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000c28:	f000 f8b6 	bl	8000d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000c50:	f002 fa04 	bl	800305c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM8_Init+0x15e>
  {
    Error_Handler();
 8000c5a:	f000 f89d 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM8_Init+0x16c>)
 8000c60:	f000 f90e 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3758      	adds	r7, #88	; 0x58
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	40010400 	.word	0x40010400

08000c74 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <MX_TIM12_Init+0x74>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1-1;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 16800-1;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000c9c:	f244 129f 	movw	r2, #16799	; 0x419f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000cb0:	f001 f90a 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 f86d 	bl	8000d98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM12_Init+0x70>)
 8000ccc:	f001 fca4 	bl	8002618 <HAL_TIM_SlaveConfigSynchro>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8000cd6:	f000 f85f 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000c8 	.word	0x200000c8
 8000ce8:	40001800 	.word	0x40001800

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_GPIO_Init+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim8) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	oldsector = svpwm1.SectorPointer;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d62:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d6a:	edc7 7a00 	vstr	s15, [r7]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d74:	701a      	strb	r2, [r3, #0]
	SVPWM_Update(&svpwm1, &vhz1, &htim8);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4906      	ldr	r1, [pc, #24]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d7e:	f7ff fbe3 	bl	8000548 <SVPWM_Update>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	20000028 	.word	0x20000028
 8000d94:	20000074 	.word	0x20000074

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_TIM_Base_MspInit+0x80>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d116      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	202b      	movs	r0, #43	; 0x2b
 8000e28:	f000 fa67 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000e2c:	202b      	movs	r0, #43	; 0x2b
 8000e2e:	f000 fa80 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000e32:	e01a      	b.n	8000e6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM12)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_TIM_Base_MspInit+0x88>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d115      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_TIM_Base_MspInit+0x84>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	202b      	movs	r0, #43	; 0x2b
 8000e60:	f000 fa4b 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000e64:	202b      	movs	r0, #43	; 0x2b
 8000e66:	f000 fa64 	bl	8001332 <HAL_NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010400 	.word	0x40010400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40001800 	.word	0x40001800

08000e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <HAL_TIM_MspPostInit+0xe4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d15b      	bne.n	8000f5a <HAL_TIM_MspPostInit+0xda>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <HAL_TIM_MspPostInit+0xe8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f06:	2303      	movs	r3, #3
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <HAL_TIM_MspPostInit+0xec>)
 8000f12:	f000 fa29 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <HAL_TIM_MspPostInit+0xf0>)
 8000f34:	f000 fa18 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000f38:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f56:	f000 fa07 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40010400 	.word	0x40010400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f89e 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000fd2:	f001 f95b 	bl	800228c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000fd8:	f001 f958 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000002c 	.word	0x2000002c
 8000fe4:	200000c8 	.word	0x200000c8

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd7 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f002 f89b 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fcb1 	bl	80009a4 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001050:	080040ac 	.word	0x080040ac
  ldr r2, =_sbss
 8001054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001058:	20000114 	.word	0x20000114

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f92b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fe86 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f943 	bl	800134e <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f90b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000110 	.word	0x20000110

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000110 	.word	0x20000110

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e16b      	b.n	800165c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 815a 	bne.w	8001656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80b4 	beq.w	8001656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x310>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x324>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x328>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x330>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20a>
 800156e:	2307      	movs	r3, #7
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001572:	2308      	movs	r3, #8
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x310>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_GPIO_Init+0x334>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_GPIO_Init+0x334>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_GPIO_Init+0x334>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_GPIO_Init+0x334>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_GPIO_Init+0x334>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_GPIO_Init+0x334>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_GPIO_Init+0x334>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_GPIO_Init+0x334>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae90 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e264      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d075      	beq.n	80017aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016be:	4ba3      	ldr	r3, [pc, #652]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d00c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4ba0      	ldr	r3, [pc, #640]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d112      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b9d      	ldr	r3, [pc, #628]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4b99      	ldr	r3, [pc, #612]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d05b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x108>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d157      	bne.n	80017a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e23f      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x74>
 8001706:	4b91      	ldr	r3, [pc, #580]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a90      	ldr	r2, [pc, #576]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a8a      	ldr	r2, [pc, #552]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a87      	ldr	r2, [pc, #540]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a83      	ldr	r2, [pc, #524]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fce8 	bl	800112c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fce4 	bl	800112c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e204      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0xc0>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fcd4 	bl	800112c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fcd0 	bl	800112c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1f0      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xe8>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b62      	ldr	r3, [pc, #392]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	4b5c      	ldr	r3, [pc, #368]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1c4      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4952      	ldr	r1, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	e03a      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_OscConfig+0x2b0>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fc89 	bl	800112c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fc85 	bl	800112c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1a5      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4940      	ldr	r1, [pc, #256]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_OscConfig+0x2b0>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fc68 	bl	800112c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff fc64 	bl	800112c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e184      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d030      	beq.n	80018ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x2b4>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fc48 	bl	800112c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fc44 	bl	800112c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e164      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x200>
 80018be:	e015      	b.n	80018ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x2b4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fc31 	bl	800112c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fc2d 	bl	800112c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e14d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a0 	beq.w	8001a3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d121      	bne.n	800197a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fbf3 	bl	800112c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e011      	b.n	800196e <HAL_RCC_OscConfig+0x2ce>
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
 8001958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff fbe6 	bl	800112c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e106      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x4e4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x2f0>
 8001982:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a80      	ldr	r2, [pc, #512]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x32a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x32a>
 80019b2:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a74      	ldr	r2, [pc, #464]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a71      	ldr	r2, [pc, #452]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fbab 	bl	800112c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fba7 	bl	800112c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0c5      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x33a>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb95 	bl	800112c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb91 	bl	800112c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0af      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 809b 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d05c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d141      	bne.n	8001adc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <HAL_RCC_OscConfig+0x4ec>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb65 	bl	800112c <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fb61 	bl	800112c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e081      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a78:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	019b      	lsls	r3, r3, #6
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	4937      	ldr	r1, [pc, #220]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x4ec>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb3a 	bl	800112c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fb36 	bl	800112c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e056      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001ada:	e04e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x4ec>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fb23 	bl	800112c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fb1f 	bl	800112c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e03f      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afc:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x44a>
 8001b08:	e037      	b.n	8001b7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e032      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_RCC_OscConfig+0x4e8>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d028      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d11a      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d111      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40007000 	.word	0x40007000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	42470060 	.word	0x42470060

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90c      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e067      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff fa54 	bl	800112c <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff fa50 	bl	800112c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d20c      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f9b4 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08003cbc 	.word	0x08003cbc
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d62:	2100      	movs	r1, #0
 8001d64:	6079      	str	r1, [r7, #4]
 8001d66:	2100      	movs	r1, #0
 8001d68:	60f9      	str	r1, [r7, #12]
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2100      	movs	r1, #0
 8001d70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d72:	4952      	ldr	r1, [pc, #328]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001d74:	6889      	ldr	r1, [r1, #8]
 8001d76:	f001 010c 	and.w	r1, r1, #12
 8001d7a:	2908      	cmp	r1, #8
 8001d7c:	d00d      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x3e>
 8001d7e:	2908      	cmp	r1, #8
 8001d80:	f200 8094 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x150>
 8001d84:	2900      	cmp	r1, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x32>
 8001d88:	2904      	cmp	r1, #4
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x38>
 8001d8c:	e08e      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d90:	60bb      	str	r3, [r7, #8]
       break;
 8001d92:	e08e      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d96:	60bb      	str	r3, [r7, #8]
      break;
 8001d98:	e08b      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9a:	4948      	ldr	r1, [pc, #288]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001d9c:	6849      	ldr	r1, [r1, #4]
 8001d9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001da2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da4:	4945      	ldr	r1, [pc, #276]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001da6:	6849      	ldr	r1, [r1, #4]
 8001da8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001dac:	2900      	cmp	r1, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db0:	4942      	ldr	r1, [pc, #264]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001db2:	6849      	ldr	r1, [r1, #4]
 8001db4:	0989      	lsrs	r1, r1, #6
 8001db6:	4608      	mov	r0, r1
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001dc0:	f04f 0500 	mov.w	r5, #0
 8001dc4:	ea00 0204 	and.w	r2, r0, r4
 8001dc8:	ea01 0305 	and.w	r3, r1, r5
 8001dcc:	493d      	ldr	r1, [pc, #244]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dce:	fb01 f003 	mul.w	r0, r1, r3
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	fb01 f102 	mul.w	r1, r1, r2
 8001dd8:	1844      	adds	r4, r0, r1
 8001dda:	493a      	ldr	r1, [pc, #232]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ddc:	fba2 0101 	umull	r0, r1, r2, r1
 8001de0:	1863      	adds	r3, r4, r1
 8001de2:	4619      	mov	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e04a      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	461a      	mov	r2, r3
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	ea02 0400 	and.w	r4, r2, r0
 8001e12:	ea03 0501 	and.w	r5, r3, r1
 8001e16:	4620      	mov	r0, r4
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	014b      	lsls	r3, r1, #5
 8001e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e28:	0142      	lsls	r2, r0, #5
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	1b00      	subs	r0, r0, r4
 8001e30:	eb61 0105 	sbc.w	r1, r1, r5
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	018b      	lsls	r3, r1, #6
 8001e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e42:	0182      	lsls	r2, r0, #6
 8001e44:	1a12      	subs	r2, r2, r0
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	00d9      	lsls	r1, r3, #3
 8001e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e58:	00d0      	lsls	r0, r2, #3
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	1912      	adds	r2, r2, r4
 8001e60:	eb45 0303 	adc.w	r3, r5, r3
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0299      	lsls	r1, r3, #10
 8001e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e72:	0290      	lsls	r0, r2, #10
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f7fe f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	60bb      	str	r3, [r7, #8]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001eae:	60bb      	str	r3, [r7, #8]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	017d7840 	.word	0x017d7840

08001ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e041      	b.n	8001f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff80 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 fbf0 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d001      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e04e      	b.n	800201e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_TIM_Base_Start_IT+0xc4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d01d      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_TIM_Base_Start_IT+0xd4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x80>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d010      	beq.n	800201c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	e007      	b.n	800201c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40010400 	.word	0x40010400
 8002040:	40014000 	.word	0x40014000
 8002044:	40001800 	.word	0x40001800

08002048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e041      	b.n	80020de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f839 	bl	80020e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f000 fb30 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_TIM_PWM_Start+0x24>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e022      	b.n	8002166 <HAL_TIM_PWM_Start+0x6a>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d109      	bne.n	800213a <HAL_TIM_PWM_Start+0x3e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	bf14      	ite	ne
 8002132:	2301      	movne	r3, #1
 8002134:	2300      	moveq	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e015      	b.n	8002166 <HAL_TIM_PWM_Start+0x6a>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d109      	bne.n	8002154 <HAL_TIM_PWM_Start+0x58>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e008      	b.n	8002166 <HAL_TIM_PWM_Start+0x6a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07c      	b.n	8002268 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Start+0x82>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Start+0xaa>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Start+0x92>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_PWM_Start+0xaa>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0xa2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800219c:	e003      	b.n	80021a6 <HAL_TIM_PWM_Start+0xaa>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fdf9 	bl	8002da6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_TIM_PWM_Start+0x174>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_TIM_PWM_Start+0xcc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2c      	ldr	r2, [pc, #176]	; (8002274 <HAL_TIM_PWM_Start+0x178>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_TIM_PWM_Start+0xd0>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_TIM_PWM_Start+0xd2>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_TIM_PWM_Start+0x174>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d01d      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_TIM_PWM_Start+0x17c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d018      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_TIM_PWM_Start+0x180>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_TIM_PWM_Start+0x184>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00e      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_TIM_PWM_Start+0x178>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_TIM_PWM_Start+0x188>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_TIM_PWM_Start+0x136>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_TIM_PWM_Start+0x18c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d010      	beq.n	8002266 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e007      	b.n	8002266 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40010000 	.word	0x40010000
 8002274:	40010400 	.word	0x40010400
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40014000 	.word	0x40014000
 8002288:	40001800 	.word	0x40001800

0800228c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d122      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0202 	mvn.w	r2, #2
 80022b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9ee 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f9e0 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f9f1 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0204 	mvn.w	r2, #4
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9c4 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9b6 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f9c7 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b08      	cmp	r3, #8
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0208 	mvn.w	r2, #8
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f99a 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f98c 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f99d 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b10      	cmp	r3, #16
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0210 	mvn.w	r2, #16
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2208      	movs	r2, #8
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f970 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f962 	bl	800269c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f973 	bl	80026c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0201 	mvn.w	r2, #1
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fca4 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b80      	cmp	r3, #128	; 0x80
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fe6c 	bl	8003114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f938 	bl	80026d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b20      	cmp	r3, #32
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0220 	mvn.w	r2, #32
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fe36 	bl	8003100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ac      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x174>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	f200 809f 	bhi.w	8002604 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002605 	.word	0x08002605
 80024d4:	08002605 	.word	0x08002605
 80024d8:	08002605 	.word	0x08002605
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002605 	.word	0x08002605
 80024e4:	08002605 	.word	0x08002605
 80024e8:	08002605 	.word	0x08002605
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002605 	.word	0x08002605
 80024f4:	08002605 	.word	0x08002605
 80024f8:	08002605 	.word	0x08002605
 80024fc:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f990 	bl	800282c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
      break;
 800253e:	e062      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f9e0 	bl	800290c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	619a      	str	r2, [r3, #24]
      break;
 8002580:	e041      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fa35 	bl	80029f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0208 	orr.w	r2, r2, #8
 800259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0204 	bic.w	r2, r2, #4
 80025ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      break;
 80025c0:	e021      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa89 	bl	8002ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
      break;
 8002602:	e000      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIM_SlaveConfigSynchro+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e031      	b.n	8002694 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 faa2 	bl	8002b8c <TIM_SlaveTimer_SetConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e018      	b.n	8002694 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002670:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002680:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <TIM_Base_SetConfig+0x114>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <TIM_Base_SetConfig+0x118>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <TIM_Base_SetConfig+0x11c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <TIM_Base_SetConfig+0x120>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <TIM_Base_SetConfig+0x124>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2f      	ldr	r2, [pc, #188]	; (8002800 <TIM_Base_SetConfig+0x114>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d027      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2c      	ldr	r2, [pc, #176]	; (8002804 <TIM_Base_SetConfig+0x118>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d023      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <TIM_Base_SetConfig+0x11c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01f      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2a      	ldr	r2, [pc, #168]	; (800280c <TIM_Base_SetConfig+0x120>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a29      	ldr	r2, [pc, #164]	; (8002810 <TIM_Base_SetConfig+0x124>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d017      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <TIM_Base_SetConfig+0x128>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <TIM_Base_SetConfig+0x12c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00f      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <TIM_Base_SetConfig+0x130>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a25      	ldr	r2, [pc, #148]	; (8002820 <TIM_Base_SetConfig+0x134>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <TIM_Base_SetConfig+0x138>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a23      	ldr	r2, [pc, #140]	; (8002828 <TIM_Base_SetConfig+0x13c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <TIM_Base_SetConfig+0x114>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0xf8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <TIM_Base_SetConfig+0x124>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	615a      	str	r2, [r3, #20]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40010400 	.word	0x40010400
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800
 8002820:	40001800 	.word	0x40001800
 8002824:	40001c00 	.word	0x40001c00
 8002828:	40002000 	.word	0x40002000

0800282c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f023 0201 	bic.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 0302 	bic.w	r3, r3, #2
 8002874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <TIM_OC1_SetConfig+0xd8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_OC1_SetConfig+0x64>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <TIM_OC1_SetConfig+0xdc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10c      	bne.n	80028aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0308 	bic.w	r3, r3, #8
 8002896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <TIM_OC1_SetConfig+0xd8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_OC1_SetConfig+0x8e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <TIM_OC1_SetConfig+0xdc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40010000 	.word	0x40010000
 8002908:	40010400 	.word	0x40010400

0800290c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0210 	bic.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0320 	bic.w	r3, r3, #32
 8002956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_OC2_SetConfig+0xe4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_OC2_SetConfig+0x68>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <TIM_OC2_SetConfig+0xe8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d10d      	bne.n	8002990 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <TIM_OC2_SetConfig+0xe4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_OC2_SetConfig+0x94>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <TIM_OC2_SetConfig+0xe8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d113      	bne.n	80029c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010400 	.word	0x40010400

080029f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <TIM_OC3_SetConfig+0xe0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC3_SetConfig+0x66>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a20      	ldr	r2, [pc, #128]	; (8002adc <TIM_OC3_SetConfig+0xe4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <TIM_OC3_SetConfig+0xe0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d003      	beq.n	8002a8a <TIM_OC3_SetConfig+0x92>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <TIM_OC3_SetConfig+0xe4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40010400 	.word	0x40010400

08002ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <TIM_OC4_SetConfig+0xa4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_OC4_SetConfig+0x68>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <TIM_OC4_SetConfig+0xa8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d109      	bne.n	8002b5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40010400 	.word	0x40010400

08002b8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b70      	cmp	r3, #112	; 0x70
 8002bd0:	d01a      	beq.n	8002c08 <TIM_SlaveTimer_SetConfig+0x7c>
 8002bd2:	2b70      	cmp	r3, #112	; 0x70
 8002bd4:	d860      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002bd6:	2b60      	cmp	r3, #96	; 0x60
 8002bd8:	d054      	beq.n	8002c84 <TIM_SlaveTimer_SetConfig+0xf8>
 8002bda:	2b60      	cmp	r3, #96	; 0x60
 8002bdc:	d85c      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002bde:	2b50      	cmp	r3, #80	; 0x50
 8002be0:	d046      	beq.n	8002c70 <TIM_SlaveTimer_SetConfig+0xe4>
 8002be2:	2b50      	cmp	r3, #80	; 0x50
 8002be4:	d858      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d019      	beq.n	8002c1e <TIM_SlaveTimer_SetConfig+0x92>
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d854      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002bee:	2b30      	cmp	r3, #48	; 0x30
 8002bf0:	d054      	beq.n	8002c9c <TIM_SlaveTimer_SetConfig+0x110>
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	d850      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d050      	beq.n	8002c9c <TIM_SlaveTimer_SetConfig+0x110>
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d84c      	bhi.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d04c      	beq.n	8002c9c <TIM_SlaveTimer_SetConfig+0x110>
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d04a      	beq.n	8002c9c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002c06:	e047      	b.n	8002c98 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68d9      	ldr	r1, [r3, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f000 f8a5 	bl	8002d66 <TIM_ETR_SetConfig>
      break;
 8002c1c:	e03f      	b.n	8002c9e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d101      	bne.n	8002c2a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e03a      	b.n	8002ca0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
      break;
 8002c6e:	e016      	b.n	8002c9e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f000 f813 	bl	8002ca8 <TIM_TI1_ConfigInputStage>
      break;
 8002c82:	e00c      	b.n	8002c9e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f000 f838 	bl	8002d06 <TIM_TI2_ConfigInputStage>
      break;
 8002c96:	e002      	b.n	8002c9e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002c9c:	bf00      	nop
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f023 030a 	bic.w	r3, r3, #10
 8002ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	621a      	str	r2, [r3, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0210 	bic.w	r2, r3, #16
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2201      	movs	r2, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	401a      	ands	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_TIMEx_PWMN_Start+0x24>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e022      	b.n	8002e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d109      	bne.n	8002e2e <HAL_TIMEx_PWMN_Start+0x3e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e015      	b.n	8002e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d109      	bne.n	8002e48 <HAL_TIMEx_PWMN_Start+0x58>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e008      	b.n	8002e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06d      	b.n	8002f3e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_TIMEx_PWMN_Start+0x82>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e70:	e013      	b.n	8002e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d104      	bne.n	8002e82 <HAL_TIMEx_PWMN_Start+0x92>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e80:	e00b      	b.n	8002e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d104      	bne.n	8002e92 <HAL_TIMEx_PWMN_Start+0xa2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e90:	e003      	b.n	8002e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2202      	movs	r2, #2
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f940 	bl	8003128 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_TIMEx_PWMN_Start+0x158>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eca:	d01d      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_TIMEx_PWMN_Start+0x15c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_TIMEx_PWMN_Start+0x160>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIMEx_PWMN_Start+0x164>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_TIMEx_PWMN_Start+0x168>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_TIMEx_PWMN_Start+0x16c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_TIMEx_PWMN_Start+0x118>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_TIMEx_PWMN_Start+0x170>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d010      	beq.n	8002f3c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	e007      	b.n	8002f3c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40001800 	.word	0x40001800

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e05a      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d01d      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40010400 	.word	0x40010400
 8003054:	40014000 	.word	0x40014000
 8003058:	40001800 	.word	0x40001800

0800305c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e03d      	b.n	80030f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2204      	movs	r2, #4
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4d0d      	ldr	r5, [pc, #52]	; (80031ac <__libc_init_array+0x38>)
 8003178:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	2600      	movs	r6, #0
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	4d0b      	ldr	r5, [pc, #44]	; (80031b4 <__libc_init_array+0x40>)
 8003186:	4c0c      	ldr	r4, [pc, #48]	; (80031b8 <__libc_init_array+0x44>)
 8003188:	f000 fd8c 	bl	8003ca4 <_init>
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	2600      	movs	r6, #0
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	080040a4 	.word	0x080040a4
 80031b0:	080040a4 	.word	0x080040a4
 80031b4:	080040a4 	.word	0x080040a4
 80031b8:	080040a8 	.word	0x080040a8

080031bc <memset>:
 80031bc:	4402      	add	r2, r0
 80031be:	4603      	mov	r3, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <sinf>:
 80031cc:	ee10 3a10 	vmov	r3, s0
 80031d0:	b507      	push	{r0, r1, r2, lr}
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <sinf+0x7c>)
 80031d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d8:	4293      	cmp	r3, r2
 80031da:	dc05      	bgt.n	80031e8 <sinf+0x1c>
 80031dc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800324c <sinf+0x80>
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 fc5b 	bl	8003a9c <__kernel_sinf>
 80031e6:	e004      	b.n	80031f2 <sinf+0x26>
 80031e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80031ec:	db04      	blt.n	80031f8 <sinf+0x2c>
 80031ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80031f2:	b003      	add	sp, #12
 80031f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80031f8:	4668      	mov	r0, sp
 80031fa:	f000 f829 	bl	8003250 <__ieee754_rem_pio2f>
 80031fe:	f000 0003 	and.w	r0, r0, #3
 8003202:	2801      	cmp	r0, #1
 8003204:	d008      	beq.n	8003218 <sinf+0x4c>
 8003206:	2802      	cmp	r0, #2
 8003208:	d00d      	beq.n	8003226 <sinf+0x5a>
 800320a:	b9b0      	cbnz	r0, 800323a <sinf+0x6e>
 800320c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003210:	ed9d 0a00 	vldr	s0, [sp]
 8003214:	2001      	movs	r0, #1
 8003216:	e7e4      	b.n	80031e2 <sinf+0x16>
 8003218:	eddd 0a01 	vldr	s1, [sp, #4]
 800321c:	ed9d 0a00 	vldr	s0, [sp]
 8003220:	f000 f952 	bl	80034c8 <__kernel_cosf>
 8003224:	e7e5      	b.n	80031f2 <sinf+0x26>
 8003226:	eddd 0a01 	vldr	s1, [sp, #4]
 800322a:	ed9d 0a00 	vldr	s0, [sp]
 800322e:	2001      	movs	r0, #1
 8003230:	f000 fc34 	bl	8003a9c <__kernel_sinf>
 8003234:	eeb1 0a40 	vneg.f32	s0, s0
 8003238:	e7db      	b.n	80031f2 <sinf+0x26>
 800323a:	eddd 0a01 	vldr	s1, [sp, #4]
 800323e:	ed9d 0a00 	vldr	s0, [sp]
 8003242:	f000 f941 	bl	80034c8 <__kernel_cosf>
 8003246:	e7f5      	b.n	8003234 <sinf+0x68>
 8003248:	3f490fd8 	.word	0x3f490fd8
 800324c:	00000000 	.word	0x00000000

08003250 <__ieee754_rem_pio2f>:
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	ee10 6a10 	vmov	r6, s0
 8003256:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <__ieee754_rem_pio2f+0x240>)
 8003258:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800325c:	429d      	cmp	r5, r3
 800325e:	b087      	sub	sp, #28
 8003260:	eef0 7a40 	vmov.f32	s15, s0
 8003264:	4604      	mov	r4, r0
 8003266:	dc05      	bgt.n	8003274 <__ieee754_rem_pio2f+0x24>
 8003268:	2300      	movs	r3, #0
 800326a:	ed80 0a00 	vstr	s0, [r0]
 800326e:	6043      	str	r3, [r0, #4]
 8003270:	2000      	movs	r0, #0
 8003272:	e01a      	b.n	80032aa <__ieee754_rem_pio2f+0x5a>
 8003274:	4b87      	ldr	r3, [pc, #540]	; (8003494 <__ieee754_rem_pio2f+0x244>)
 8003276:	429d      	cmp	r5, r3
 8003278:	dc46      	bgt.n	8003308 <__ieee754_rem_pio2f+0xb8>
 800327a:	2e00      	cmp	r6, #0
 800327c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8003498 <__ieee754_rem_pio2f+0x248>
 8003280:	4b86      	ldr	r3, [pc, #536]	; (800349c <__ieee754_rem_pio2f+0x24c>)
 8003282:	f025 050f 	bic.w	r5, r5, #15
 8003286:	dd1f      	ble.n	80032c8 <__ieee754_rem_pio2f+0x78>
 8003288:	429d      	cmp	r5, r3
 800328a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800328e:	d00e      	beq.n	80032ae <__ieee754_rem_pio2f+0x5e>
 8003290:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80034a0 <__ieee754_rem_pio2f+0x250>
 8003294:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8003298:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800329c:	ed80 0a00 	vstr	s0, [r0]
 80032a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032a4:	2001      	movs	r0, #1
 80032a6:	edc4 7a01 	vstr	s15, [r4, #4]
 80032aa:	b007      	add	sp, #28
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ae:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80034a4 <__ieee754_rem_pio2f+0x254>
 80032b2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80034a8 <__ieee754_rem_pio2f+0x258>
 80032b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80032ba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80032be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032c2:	edc0 6a00 	vstr	s13, [r0]
 80032c6:	e7eb      	b.n	80032a0 <__ieee754_rem_pio2f+0x50>
 80032c8:	429d      	cmp	r5, r3
 80032ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80032ce:	d00e      	beq.n	80032ee <__ieee754_rem_pio2f+0x9e>
 80032d0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80034a0 <__ieee754_rem_pio2f+0x250>
 80032d4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80032d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80032dc:	ed80 0a00 	vstr	s0, [r0]
 80032e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	edc4 7a01 	vstr	s15, [r4, #4]
 80032ec:	e7dd      	b.n	80032aa <__ieee754_rem_pio2f+0x5a>
 80032ee:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80034a4 <__ieee754_rem_pio2f+0x254>
 80032f2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80034a8 <__ieee754_rem_pio2f+0x258>
 80032f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80032fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 80032fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003302:	edc0 6a00 	vstr	s13, [r0]
 8003306:	e7eb      	b.n	80032e0 <__ieee754_rem_pio2f+0x90>
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <__ieee754_rem_pio2f+0x25c>)
 800330a:	429d      	cmp	r5, r3
 800330c:	dc72      	bgt.n	80033f4 <__ieee754_rem_pio2f+0x1a4>
 800330e:	f000 fc0d 	bl	8003b2c <fabsf>
 8003312:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80034b0 <__ieee754_rem_pio2f+0x260>
 8003316:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800331a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800331e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003326:	ee17 0a90 	vmov	r0, s15
 800332a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003498 <__ieee754_rem_pio2f+0x248>
 800332e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003332:	281f      	cmp	r0, #31
 8003334:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80034a0 <__ieee754_rem_pio2f+0x250>
 8003338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333c:	eeb1 6a47 	vneg.f32	s12, s14
 8003340:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003344:	ee16 2a90 	vmov	r2, s13
 8003348:	dc1c      	bgt.n	8003384 <__ieee754_rem_pio2f+0x134>
 800334a:	495a      	ldr	r1, [pc, #360]	; (80034b4 <__ieee754_rem_pio2f+0x264>)
 800334c:	1e47      	subs	r7, r0, #1
 800334e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003352:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003356:	428b      	cmp	r3, r1
 8003358:	d014      	beq.n	8003384 <__ieee754_rem_pio2f+0x134>
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	ed94 7a00 	vldr	s14, [r4]
 8003360:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003364:	2e00      	cmp	r6, #0
 8003366:	ee30 0a67 	vsub.f32	s0, s0, s15
 800336a:	ed84 0a01 	vstr	s0, [r4, #4]
 800336e:	da9c      	bge.n	80032aa <__ieee754_rem_pio2f+0x5a>
 8003370:	eeb1 7a47 	vneg.f32	s14, s14
 8003374:	eeb1 0a40 	vneg.f32	s0, s0
 8003378:	ed84 7a00 	vstr	s14, [r4]
 800337c:	ed84 0a01 	vstr	s0, [r4, #4]
 8003380:	4240      	negs	r0, r0
 8003382:	e792      	b.n	80032aa <__ieee754_rem_pio2f+0x5a>
 8003384:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003388:	15eb      	asrs	r3, r5, #23
 800338a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800338e:	2d08      	cmp	r5, #8
 8003390:	dde3      	ble.n	800335a <__ieee754_rem_pio2f+0x10a>
 8003392:	eddf 7a44 	vldr	s15, [pc, #272]	; 80034a4 <__ieee754_rem_pio2f+0x254>
 8003396:	eef0 6a40 	vmov.f32	s13, s0
 800339a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800339e:	ee30 0a66 	vsub.f32	s0, s0, s13
 80033a2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80033a6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80034a8 <__ieee754_rem_pio2f+0x258>
 80033aa:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80033ae:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80033b2:	eef0 7a40 	vmov.f32	s15, s0
 80033b6:	ee15 2a90 	vmov	r2, s11
 80033ba:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80033be:	1a5b      	subs	r3, r3, r1
 80033c0:	2b19      	cmp	r3, #25
 80033c2:	dc04      	bgt.n	80033ce <__ieee754_rem_pio2f+0x17e>
 80033c4:	edc4 5a00 	vstr	s11, [r4]
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	e7c6      	b.n	800335c <__ieee754_rem_pio2f+0x10c>
 80033ce:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80034b8 <__ieee754_rem_pio2f+0x268>
 80033d2:	eeb0 0a66 	vmov.f32	s0, s13
 80033d6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80033da:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80033de:	eddf 6a37 	vldr	s13, [pc, #220]	; 80034bc <__ieee754_rem_pio2f+0x26c>
 80033e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80033e6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80033ea:	ee30 7a67 	vsub.f32	s14, s0, s15
 80033ee:	ed84 7a00 	vstr	s14, [r4]
 80033f2:	e7b3      	b.n	800335c <__ieee754_rem_pio2f+0x10c>
 80033f4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80033f8:	db06      	blt.n	8003408 <__ieee754_rem_pio2f+0x1b8>
 80033fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80033fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8003402:	edc0 7a00 	vstr	s15, [r0]
 8003406:	e733      	b.n	8003270 <__ieee754_rem_pio2f+0x20>
 8003408:	15ea      	asrs	r2, r5, #23
 800340a:	3a86      	subs	r2, #134	; 0x86
 800340c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003418:	eddf 6a29 	vldr	s13, [pc, #164]	; 80034c0 <__ieee754_rem_pio2f+0x270>
 800341c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003424:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800342c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003438:	ed8d 7a04 	vstr	s14, [sp, #16]
 800343c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003440:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	edcd 7a05 	vstr	s15, [sp, #20]
 800344c:	d11e      	bne.n	800348c <__ieee754_rem_pio2f+0x23c>
 800344e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	bf14      	ite	ne
 8003458:	2302      	movne	r3, #2
 800345a:	2301      	moveq	r3, #1
 800345c:	4919      	ldr	r1, [pc, #100]	; (80034c4 <__ieee754_rem_pio2f+0x274>)
 800345e:	9101      	str	r1, [sp, #4]
 8003460:	2102      	movs	r1, #2
 8003462:	9100      	str	r1, [sp, #0]
 8003464:	a803      	add	r0, sp, #12
 8003466:	4621      	mov	r1, r4
 8003468:	f000 f88e 	bl	8003588 <__kernel_rem_pio2f>
 800346c:	2e00      	cmp	r6, #0
 800346e:	f6bf af1c 	bge.w	80032aa <__ieee754_rem_pio2f+0x5a>
 8003472:	edd4 7a00 	vldr	s15, [r4]
 8003476:	eef1 7a67 	vneg.f32	s15, s15
 800347a:	edc4 7a00 	vstr	s15, [r4]
 800347e:	edd4 7a01 	vldr	s15, [r4, #4]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	edc4 7a01 	vstr	s15, [r4, #4]
 800348a:	e779      	b.n	8003380 <__ieee754_rem_pio2f+0x130>
 800348c:	2303      	movs	r3, #3
 800348e:	e7e5      	b.n	800345c <__ieee754_rem_pio2f+0x20c>
 8003490:	3f490fd8 	.word	0x3f490fd8
 8003494:	4016cbe3 	.word	0x4016cbe3
 8003498:	3fc90f80 	.word	0x3fc90f80
 800349c:	3fc90fd0 	.word	0x3fc90fd0
 80034a0:	37354443 	.word	0x37354443
 80034a4:	37354400 	.word	0x37354400
 80034a8:	2e85a308 	.word	0x2e85a308
 80034ac:	43490f80 	.word	0x43490f80
 80034b0:	3f22f984 	.word	0x3f22f984
 80034b4:	08003ccc 	.word	0x08003ccc
 80034b8:	2e85a300 	.word	0x2e85a300
 80034bc:	248d3132 	.word	0x248d3132
 80034c0:	43800000 	.word	0x43800000
 80034c4:	08003d4c 	.word	0x08003d4c

080034c8 <__kernel_cosf>:
 80034c8:	ee10 3a10 	vmov	r3, s0
 80034cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80034d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80034d8:	da05      	bge.n	80034e6 <__kernel_cosf+0x1e>
 80034da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80034de:	ee17 2a90 	vmov	r2, s15
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d03d      	beq.n	8003562 <__kernel_cosf+0x9a>
 80034e6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80034ea:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003568 <__kernel_cosf+0xa0>
 80034ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800356c <__kernel_cosf+0xa4>
 80034f2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003570 <__kernel_cosf+0xa8>
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <__kernel_cosf+0xac>)
 80034f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80034fc:	4293      	cmp	r3, r2
 80034fe:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003578 <__kernel_cosf+0xb0>
 8003502:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003506:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800357c <__kernel_cosf+0xb4>
 800350a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800350e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003580 <__kernel_cosf+0xb8>
 8003512:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003516:	eeb0 7a66 	vmov.f32	s14, s13
 800351a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800351e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003522:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8003526:	ee67 6a25 	vmul.f32	s13, s14, s11
 800352a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800352e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003532:	dc04      	bgt.n	800353e <__kernel_cosf+0x76>
 8003534:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003538:	ee36 0a47 	vsub.f32	s0, s12, s14
 800353c:	4770      	bx	lr
 800353e:	4a11      	ldr	r2, [pc, #68]	; (8003584 <__kernel_cosf+0xbc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bfda      	itte	le
 8003544:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003548:	ee06 3a90 	vmovle	s13, r3
 800354c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8003550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003554:	ee36 0a66 	vsub.f32	s0, s12, s13
 8003558:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800355c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003560:	4770      	bx	lr
 8003562:	eeb0 0a46 	vmov.f32	s0, s12
 8003566:	4770      	bx	lr
 8003568:	ad47d74e 	.word	0xad47d74e
 800356c:	310f74f6 	.word	0x310f74f6
 8003570:	3d2aaaab 	.word	0x3d2aaaab
 8003574:	3e999999 	.word	0x3e999999
 8003578:	b493f27c 	.word	0xb493f27c
 800357c:	37d00d01 	.word	0x37d00d01
 8003580:	bab60b61 	.word	0xbab60b61
 8003584:	3f480000 	.word	0x3f480000

08003588 <__kernel_rem_pio2f>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	ed2d 8b04 	vpush	{d8-d9}
 8003590:	b0d7      	sub	sp, #348	; 0x15c
 8003592:	4616      	mov	r6, r2
 8003594:	4698      	mov	r8, r3
 8003596:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003598:	4bbb      	ldr	r3, [pc, #748]	; (8003888 <__kernel_rem_pio2f+0x300>)
 800359a:	9001      	str	r0, [sp, #4]
 800359c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80035a0:	1d33      	adds	r3, r6, #4
 80035a2:	460d      	mov	r5, r1
 80035a4:	f108 39ff 	add.w	r9, r8, #4294967295
 80035a8:	db29      	blt.n	80035fe <__kernel_rem_pio2f+0x76>
 80035aa:	1ef1      	subs	r1, r6, #3
 80035ac:	bf48      	it	mi
 80035ae:	1d31      	addmi	r1, r6, #4
 80035b0:	10c9      	asrs	r1, r1, #3
 80035b2:	1c4c      	adds	r4, r1, #1
 80035b4:	00e3      	lsls	r3, r4, #3
 80035b6:	9302      	str	r3, [sp, #8]
 80035b8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80035ba:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003898 <__kernel_rem_pio2f+0x310>
 80035be:	eba1 0009 	sub.w	r0, r1, r9
 80035c2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80035c6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80035ca:	eb07 0c09 	add.w	ip, r7, r9
 80035ce:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80035d2:	2300      	movs	r3, #0
 80035d4:	4563      	cmp	r3, ip
 80035d6:	dd14      	ble.n	8003602 <__kernel_rem_pio2f+0x7a>
 80035d8:	ab1a      	add	r3, sp, #104	; 0x68
 80035da:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80035de:	46cc      	mov	ip, r9
 80035e0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80035e4:	f1c8 0b01 	rsb	fp, r8, #1
 80035e8:	eb0b 020c 	add.w	r2, fp, ip
 80035ec:	4297      	cmp	r7, r2
 80035ee:	db27      	blt.n	8003640 <__kernel_rem_pio2f+0xb8>
 80035f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80035f4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003898 <__kernel_rem_pio2f+0x310>
 80035f8:	4618      	mov	r0, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	e016      	b.n	800362c <__kernel_rem_pio2f+0xa4>
 80035fe:	2100      	movs	r1, #0
 8003600:	e7d7      	b.n	80035b2 <__kernel_rem_pio2f+0x2a>
 8003602:	42d8      	cmn	r0, r3
 8003604:	bf5d      	ittte	pl
 8003606:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800360a:	ee07 2a90 	vmovpl	s15, r2
 800360e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003612:	eef0 7a47 	vmovmi.f32	s15, s14
 8003616:	ecea 7a01 	vstmia	sl!, {s15}
 800361a:	3301      	adds	r3, #1
 800361c:	e7da      	b.n	80035d4 <__kernel_rem_pio2f+0x4c>
 800361e:	ecfe 6a01 	vldmia	lr!, {s13}
 8003622:	ed90 7a00 	vldr	s14, [r0]
 8003626:	eee6 7a87 	vfma.f32	s15, s13, s14
 800362a:	3201      	adds	r2, #1
 800362c:	454a      	cmp	r2, r9
 800362e:	f1a0 0004 	sub.w	r0, r0, #4
 8003632:	ddf4      	ble.n	800361e <__kernel_rem_pio2f+0x96>
 8003634:	ecea 7a01 	vstmia	sl!, {s15}
 8003638:	3304      	adds	r3, #4
 800363a:	f10c 0c01 	add.w	ip, ip, #1
 800363e:	e7d3      	b.n	80035e8 <__kernel_rem_pio2f+0x60>
 8003640:	ab06      	add	r3, sp, #24
 8003642:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003646:	9304      	str	r3, [sp, #16]
 8003648:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800364a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8003894 <__kernel_rem_pio2f+0x30c>
 800364e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8003890 <__kernel_rem_pio2f+0x308>
 8003652:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	46ba      	mov	sl, r7
 800365a:	ab56      	add	r3, sp, #344	; 0x158
 800365c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003660:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003664:	ab06      	add	r3, sp, #24
 8003666:	4618      	mov	r0, r3
 8003668:	4652      	mov	r2, sl
 800366a:	2a00      	cmp	r2, #0
 800366c:	dc51      	bgt.n	8003712 <__kernel_rem_pio2f+0x18a>
 800366e:	4620      	mov	r0, r4
 8003670:	9305      	str	r3, [sp, #20]
 8003672:	f000 faa5 	bl	8003bc0 <scalbnf>
 8003676:	eeb0 8a40 	vmov.f32	s16, s0
 800367a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800367e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003682:	f000 fa5b 	bl	8003b3c <floorf>
 8003686:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800368a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800368e:	2c00      	cmp	r4, #0
 8003690:	9b05      	ldr	r3, [sp, #20]
 8003692:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003696:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800369a:	edcd 7a00 	vstr	s15, [sp]
 800369e:	ee38 8a40 	vsub.f32	s16, s16, s0
 80036a2:	dd4b      	ble.n	800373c <__kernel_rem_pio2f+0x1b4>
 80036a4:	f10a 3cff 	add.w	ip, sl, #4294967295
 80036a8:	aa06      	add	r2, sp, #24
 80036aa:	f1c4 0e08 	rsb	lr, r4, #8
 80036ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80036b2:	ee17 1a90 	vmov	r1, s15
 80036b6:	fa42 f00e 	asr.w	r0, r2, lr
 80036ba:	4401      	add	r1, r0
 80036bc:	9100      	str	r1, [sp, #0]
 80036be:	fa00 f00e 	lsl.w	r0, r0, lr
 80036c2:	a906      	add	r1, sp, #24
 80036c4:	1a12      	subs	r2, r2, r0
 80036c6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80036ca:	f1c4 0007 	rsb	r0, r4, #7
 80036ce:	fa42 fb00 	asr.w	fp, r2, r0
 80036d2:	f1bb 0f00 	cmp.w	fp, #0
 80036d6:	dd43      	ble.n	8003760 <__kernel_rem_pio2f+0x1d8>
 80036d8:	9a00      	ldr	r2, [sp, #0]
 80036da:	f04f 0e00 	mov.w	lr, #0
 80036de:	3201      	adds	r2, #1
 80036e0:	9200      	str	r2, [sp, #0]
 80036e2:	4670      	mov	r0, lr
 80036e4:	45f2      	cmp	sl, lr
 80036e6:	dc6c      	bgt.n	80037c2 <__kernel_rem_pio2f+0x23a>
 80036e8:	2c00      	cmp	r4, #0
 80036ea:	dd04      	ble.n	80036f6 <__kernel_rem_pio2f+0x16e>
 80036ec:	2c01      	cmp	r4, #1
 80036ee:	d079      	beq.n	80037e4 <__kernel_rem_pio2f+0x25c>
 80036f0:	2c02      	cmp	r4, #2
 80036f2:	f000 8082 	beq.w	80037fa <__kernel_rem_pio2f+0x272>
 80036f6:	f1bb 0f02 	cmp.w	fp, #2
 80036fa:	d131      	bne.n	8003760 <__kernel_rem_pio2f+0x1d8>
 80036fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003700:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003704:	b360      	cbz	r0, 8003760 <__kernel_rem_pio2f+0x1d8>
 8003706:	4620      	mov	r0, r4
 8003708:	f000 fa5a 	bl	8003bc0 <scalbnf>
 800370c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003710:	e026      	b.n	8003760 <__kernel_rem_pio2f+0x1d8>
 8003712:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003716:	3a01      	subs	r2, #1
 8003718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371c:	a942      	add	r1, sp, #264	; 0x108
 800371e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003722:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003726:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800372a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800372e:	eca0 0a01 	vstmia	r0!, {s0}
 8003732:	ed9c 0a00 	vldr	s0, [ip]
 8003736:	ee37 0a80 	vadd.f32	s0, s15, s0
 800373a:	e796      	b.n	800366a <__kernel_rem_pio2f+0xe2>
 800373c:	d107      	bne.n	800374e <__kernel_rem_pio2f+0x1c6>
 800373e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8003742:	a906      	add	r1, sp, #24
 8003744:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003748:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800374c:	e7c1      	b.n	80036d2 <__kernel_rem_pio2f+0x14a>
 800374e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003752:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	da2f      	bge.n	80037bc <__kernel_rem_pio2f+0x234>
 800375c:	f04f 0b00 	mov.w	fp, #0
 8003760:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	f040 8098 	bne.w	800389c <__kernel_rem_pio2f+0x314>
 800376c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003770:	469c      	mov	ip, r3
 8003772:	2200      	movs	r2, #0
 8003774:	45bc      	cmp	ip, r7
 8003776:	da48      	bge.n	800380a <__kernel_rem_pio2f+0x282>
 8003778:	2a00      	cmp	r2, #0
 800377a:	d05f      	beq.n	800383c <__kernel_rem_pio2f+0x2b4>
 800377c:	aa06      	add	r2, sp, #24
 800377e:	3c08      	subs	r4, #8
 8003780:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003784:	2900      	cmp	r1, #0
 8003786:	d07d      	beq.n	8003884 <__kernel_rem_pio2f+0x2fc>
 8003788:	4620      	mov	r0, r4
 800378a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f000 fa16 	bl	8003bc0 <scalbnf>
 8003794:	9b01      	ldr	r3, [sp, #4]
 8003796:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003894 <__kernel_rem_pio2f+0x30c>
 800379a:	4619      	mov	r1, r3
 800379c:	2900      	cmp	r1, #0
 800379e:	f280 80af 	bge.w	8003900 <__kernel_rem_pio2f+0x378>
 80037a2:	4618      	mov	r0, r3
 80037a4:	2400      	movs	r4, #0
 80037a6:	2800      	cmp	r0, #0
 80037a8:	f2c0 80d0 	blt.w	800394c <__kernel_rem_pio2f+0x3c4>
 80037ac:	a942      	add	r1, sp, #264	; 0x108
 80037ae:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80037b2:	4a36      	ldr	r2, [pc, #216]	; (800388c <__kernel_rem_pio2f+0x304>)
 80037b4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003898 <__kernel_rem_pio2f+0x310>
 80037b8:	2100      	movs	r1, #0
 80037ba:	e0bb      	b.n	8003934 <__kernel_rem_pio2f+0x3ac>
 80037bc:	f04f 0b02 	mov.w	fp, #2
 80037c0:	e78a      	b.n	80036d8 <__kernel_rem_pio2f+0x150>
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	b948      	cbnz	r0, 80037da <__kernel_rem_pio2f+0x252>
 80037c6:	b11a      	cbz	r2, 80037d0 <__kernel_rem_pio2f+0x248>
 80037c8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f10e 0e01 	add.w	lr, lr, #1
 80037d4:	3304      	adds	r3, #4
 80037d6:	4610      	mov	r0, r2
 80037d8:	e784      	b.n	80036e4 <__kernel_rem_pio2f+0x15c>
 80037da:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4602      	mov	r2, r0
 80037e2:	e7f5      	b.n	80037d0 <__kernel_rem_pio2f+0x248>
 80037e4:	f10a 3cff 	add.w	ip, sl, #4294967295
 80037e8:	ab06      	add	r3, sp, #24
 80037ea:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80037ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f2:	aa06      	add	r2, sp, #24
 80037f4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80037f8:	e77d      	b.n	80036f6 <__kernel_rem_pio2f+0x16e>
 80037fa:	f10a 3cff 	add.w	ip, sl, #4294967295
 80037fe:	ab06      	add	r3, sp, #24
 8003800:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	e7f3      	b.n	80037f2 <__kernel_rem_pio2f+0x26a>
 800380a:	a906      	add	r1, sp, #24
 800380c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8003810:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003814:	4302      	orrs	r2, r0
 8003816:	e7ad      	b.n	8003774 <__kernel_rem_pio2f+0x1ec>
 8003818:	3001      	adds	r0, #1
 800381a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800381e:	2a00      	cmp	r2, #0
 8003820:	d0fa      	beq.n	8003818 <__kernel_rem_pio2f+0x290>
 8003822:	a91a      	add	r1, sp, #104	; 0x68
 8003824:	eb0a 0208 	add.w	r2, sl, r8
 8003828:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800382c:	f10a 0301 	add.w	r3, sl, #1
 8003830:	eb0a 0100 	add.w	r1, sl, r0
 8003834:	4299      	cmp	r1, r3
 8003836:	da04      	bge.n	8003842 <__kernel_rem_pio2f+0x2ba>
 8003838:	468a      	mov	sl, r1
 800383a:	e70e      	b.n	800365a <__kernel_rem_pio2f+0xd2>
 800383c:	9b04      	ldr	r3, [sp, #16]
 800383e:	2001      	movs	r0, #1
 8003840:	e7eb      	b.n	800381a <__kernel_rem_pio2f+0x292>
 8003842:	9803      	ldr	r0, [sp, #12]
 8003844:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003848:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800384c:	9000      	str	r0, [sp, #0]
 800384e:	ee07 0a90 	vmov	s15, r0
 8003852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003856:	2000      	movs	r0, #0
 8003858:	ece2 7a01 	vstmia	r2!, {s15}
 800385c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003898 <__kernel_rem_pio2f+0x310>
 8003860:	4696      	mov	lr, r2
 8003862:	4548      	cmp	r0, r9
 8003864:	dd06      	ble.n	8003874 <__kernel_rem_pio2f+0x2ec>
 8003866:	a842      	add	r0, sp, #264	; 0x108
 8003868:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800386c:	edc0 7a00 	vstr	s15, [r0]
 8003870:	3301      	adds	r3, #1
 8003872:	e7df      	b.n	8003834 <__kernel_rem_pio2f+0x2ac>
 8003874:	ecfc 6a01 	vldmia	ip!, {s13}
 8003878:	ed3e 7a01 	vldmdb	lr!, {s14}
 800387c:	3001      	adds	r0, #1
 800387e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003882:	e7ee      	b.n	8003862 <__kernel_rem_pio2f+0x2da>
 8003884:	3b01      	subs	r3, #1
 8003886:	e779      	b.n	800377c <__kernel_rem_pio2f+0x1f4>
 8003888:	08004090 	.word	0x08004090
 800388c:	08004064 	.word	0x08004064
 8003890:	43800000 	.word	0x43800000
 8003894:	3b800000 	.word	0x3b800000
 8003898:	00000000 	.word	0x00000000
 800389c:	9b02      	ldr	r3, [sp, #8]
 800389e:	eeb0 0a48 	vmov.f32	s0, s16
 80038a2:	1b98      	subs	r0, r3, r6
 80038a4:	f000 f98c 	bl	8003bc0 <scalbnf>
 80038a8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003890 <__kernel_rem_pio2f+0x308>
 80038ac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	db1b      	blt.n	80038ee <__kernel_rem_pio2f+0x366>
 80038b6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003894 <__kernel_rem_pio2f+0x30c>
 80038ba:	ee60 7a27 	vmul.f32	s15, s0, s15
 80038be:	aa06      	add	r2, sp, #24
 80038c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c4:	a906      	add	r1, sp, #24
 80038c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ca:	3408      	adds	r4, #8
 80038cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80038d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80038d8:	ee10 3a10 	vmov	r3, s0
 80038dc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80038e0:	ee17 2a90 	vmov	r2, s15
 80038e4:	f10a 0301 	add.w	r3, sl, #1
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80038ec:	e74c      	b.n	8003788 <__kernel_rem_pio2f+0x200>
 80038ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80038f2:	aa06      	add	r2, sp, #24
 80038f4:	ee10 3a10 	vmov	r3, s0
 80038f8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80038fc:	4653      	mov	r3, sl
 80038fe:	e743      	b.n	8003788 <__kernel_rem_pio2f+0x200>
 8003900:	aa42      	add	r2, sp, #264	; 0x108
 8003902:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003906:	aa06      	add	r2, sp, #24
 8003908:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800390c:	9201      	str	r2, [sp, #4]
 800390e:	ee07 2a90 	vmov	s15, r2
 8003912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003916:	3901      	subs	r1, #1
 8003918:	ee67 7a80 	vmul.f32	s15, s15, s0
 800391c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003920:	edc0 7a00 	vstr	s15, [r0]
 8003924:	e73a      	b.n	800379c <__kernel_rem_pio2f+0x214>
 8003926:	ecf2 6a01 	vldmia	r2!, {s13}
 800392a:	ecb6 7a01 	vldmia	r6!, {s14}
 800392e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003932:	3101      	adds	r1, #1
 8003934:	42b9      	cmp	r1, r7
 8003936:	dc01      	bgt.n	800393c <__kernel_rem_pio2f+0x3b4>
 8003938:	428c      	cmp	r4, r1
 800393a:	daf4      	bge.n	8003926 <__kernel_rem_pio2f+0x39e>
 800393c:	aa56      	add	r2, sp, #344	; 0x158
 800393e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003942:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8003946:	3801      	subs	r0, #1
 8003948:	3401      	adds	r4, #1
 800394a:	e72c      	b.n	80037a6 <__kernel_rem_pio2f+0x21e>
 800394c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800394e:	2a02      	cmp	r2, #2
 8003950:	dc0a      	bgt.n	8003968 <__kernel_rem_pio2f+0x3e0>
 8003952:	2a00      	cmp	r2, #0
 8003954:	dc61      	bgt.n	8003a1a <__kernel_rem_pio2f+0x492>
 8003956:	d03c      	beq.n	80039d2 <__kernel_rem_pio2f+0x44a>
 8003958:	9b00      	ldr	r3, [sp, #0]
 800395a:	f003 0007 	and.w	r0, r3, #7
 800395e:	b057      	add	sp, #348	; 0x15c
 8003960:	ecbd 8b04 	vpop	{d8-d9}
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003968:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800396a:	2a03      	cmp	r2, #3
 800396c:	d1f4      	bne.n	8003958 <__kernel_rem_pio2f+0x3d0>
 800396e:	aa2e      	add	r2, sp, #184	; 0xb8
 8003970:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003974:	4608      	mov	r0, r1
 8003976:	461c      	mov	r4, r3
 8003978:	2c00      	cmp	r4, #0
 800397a:	f1a0 0004 	sub.w	r0, r0, #4
 800397e:	dc59      	bgt.n	8003a34 <__kernel_rem_pio2f+0x4ac>
 8003980:	4618      	mov	r0, r3
 8003982:	2801      	cmp	r0, #1
 8003984:	f1a1 0104 	sub.w	r1, r1, #4
 8003988:	dc64      	bgt.n	8003a54 <__kernel_rem_pio2f+0x4cc>
 800398a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8003898 <__kernel_rem_pio2f+0x310>
 800398e:	2b01      	cmp	r3, #1
 8003990:	dc70      	bgt.n	8003a74 <__kernel_rem_pio2f+0x4ec>
 8003992:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003996:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800399a:	f1bb 0f00 	cmp.w	fp, #0
 800399e:	d172      	bne.n	8003a86 <__kernel_rem_pio2f+0x4fe>
 80039a0:	edc5 6a00 	vstr	s13, [r5]
 80039a4:	ed85 7a01 	vstr	s14, [r5, #4]
 80039a8:	edc5 7a02 	vstr	s15, [r5, #8]
 80039ac:	e7d4      	b.n	8003958 <__kernel_rem_pio2f+0x3d0>
 80039ae:	aa2e      	add	r2, sp, #184	; 0xb8
 80039b0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80039b4:	ed91 7a00 	vldr	s14, [r1]
 80039b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039bc:	3b01      	subs	r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	daf5      	bge.n	80039ae <__kernel_rem_pio2f+0x426>
 80039c2:	f1bb 0f00 	cmp.w	fp, #0
 80039c6:	d001      	beq.n	80039cc <__kernel_rem_pio2f+0x444>
 80039c8:	eef1 7a67 	vneg.f32	s15, s15
 80039cc:	edc5 7a00 	vstr	s15, [r5]
 80039d0:	e7c2      	b.n	8003958 <__kernel_rem_pio2f+0x3d0>
 80039d2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003898 <__kernel_rem_pio2f+0x310>
 80039d6:	e7f2      	b.n	80039be <__kernel_rem_pio2f+0x436>
 80039d8:	aa2e      	add	r2, sp, #184	; 0xb8
 80039da:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80039de:	edd0 7a00 	vldr	s15, [r0]
 80039e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e6:	3901      	subs	r1, #1
 80039e8:	2900      	cmp	r1, #0
 80039ea:	daf5      	bge.n	80039d8 <__kernel_rem_pio2f+0x450>
 80039ec:	f1bb 0f00 	cmp.w	fp, #0
 80039f0:	d017      	beq.n	8003a22 <__kernel_rem_pio2f+0x49a>
 80039f2:	eef1 7a47 	vneg.f32	s15, s14
 80039f6:	edc5 7a00 	vstr	s15, [r5]
 80039fa:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80039fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a02:	a82f      	add	r0, sp, #188	; 0xbc
 8003a04:	2101      	movs	r1, #1
 8003a06:	428b      	cmp	r3, r1
 8003a08:	da0e      	bge.n	8003a28 <__kernel_rem_pio2f+0x4a0>
 8003a0a:	f1bb 0f00 	cmp.w	fp, #0
 8003a0e:	d001      	beq.n	8003a14 <__kernel_rem_pio2f+0x48c>
 8003a10:	eef1 7a67 	vneg.f32	s15, s15
 8003a14:	edc5 7a01 	vstr	s15, [r5, #4]
 8003a18:	e79e      	b.n	8003958 <__kernel_rem_pio2f+0x3d0>
 8003a1a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8003898 <__kernel_rem_pio2f+0x310>
 8003a1e:	4619      	mov	r1, r3
 8003a20:	e7e2      	b.n	80039e8 <__kernel_rem_pio2f+0x460>
 8003a22:	eef0 7a47 	vmov.f32	s15, s14
 8003a26:	e7e6      	b.n	80039f6 <__kernel_rem_pio2f+0x46e>
 8003a28:	ecb0 7a01 	vldmia	r0!, {s14}
 8003a2c:	3101      	adds	r1, #1
 8003a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a32:	e7e8      	b.n	8003a06 <__kernel_rem_pio2f+0x47e>
 8003a34:	edd0 7a00 	vldr	s15, [r0]
 8003a38:	edd0 6a01 	vldr	s13, [r0, #4]
 8003a3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003a40:	3c01      	subs	r4, #1
 8003a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a46:	ed80 7a00 	vstr	s14, [r0]
 8003a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4e:	edc0 7a01 	vstr	s15, [r0, #4]
 8003a52:	e791      	b.n	8003978 <__kernel_rem_pio2f+0x3f0>
 8003a54:	edd1 7a00 	vldr	s15, [r1]
 8003a58:	edd1 6a01 	vldr	s13, [r1, #4]
 8003a5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003a60:	3801      	subs	r0, #1
 8003a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a66:	ed81 7a00 	vstr	s14, [r1]
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	edc1 7a01 	vstr	s15, [r1, #4]
 8003a72:	e786      	b.n	8003982 <__kernel_rem_pio2f+0x3fa>
 8003a74:	aa2e      	add	r2, sp, #184	; 0xb8
 8003a76:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003a7a:	ed91 7a00 	vldr	s14, [r1]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a84:	e783      	b.n	800398e <__kernel_rem_pio2f+0x406>
 8003a86:	eef1 6a66 	vneg.f32	s13, s13
 8003a8a:	eeb1 7a47 	vneg.f32	s14, s14
 8003a8e:	edc5 6a00 	vstr	s13, [r5]
 8003a92:	ed85 7a01 	vstr	s14, [r5, #4]
 8003a96:	eef1 7a67 	vneg.f32	s15, s15
 8003a9a:	e785      	b.n	80039a8 <__kernel_rem_pio2f+0x420>

08003a9c <__kernel_sinf>:
 8003a9c:	ee10 3a10 	vmov	r3, s0
 8003aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aa4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003aa8:	da04      	bge.n	8003ab4 <__kernel_sinf+0x18>
 8003aaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003aae:	ee17 3a90 	vmov	r3, s15
 8003ab2:	b35b      	cbz	r3, 8003b0c <__kernel_sinf+0x70>
 8003ab4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003ab8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003b10 <__kernel_sinf+0x74>
 8003abc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003b14 <__kernel_sinf+0x78>
 8003ac0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ac4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003b18 <__kernel_sinf+0x7c>
 8003ac8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003acc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003b1c <__kernel_sinf+0x80>
 8003ad0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ad4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003b20 <__kernel_sinf+0x84>
 8003ad8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003adc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ae0:	b930      	cbnz	r0, 8003af0 <__kernel_sinf+0x54>
 8003ae2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003b24 <__kernel_sinf+0x88>
 8003ae6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003aea:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003aee:	4770      	bx	lr
 8003af0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003af4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003af8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003afc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003b00:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003b28 <__kernel_sinf+0x8c>
 8003b04:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003b08:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	2f2ec9d3 	.word	0x2f2ec9d3
 8003b14:	b2d72f34 	.word	0xb2d72f34
 8003b18:	3638ef1b 	.word	0x3638ef1b
 8003b1c:	b9500d01 	.word	0xb9500d01
 8003b20:	3c088889 	.word	0x3c088889
 8003b24:	be2aaaab 	.word	0xbe2aaaab
 8003b28:	3e2aaaab 	.word	0x3e2aaaab

08003b2c <fabsf>:
 8003b2c:	ee10 3a10 	vmov	r3, s0
 8003b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b34:	ee00 3a10 	vmov	s0, r3
 8003b38:	4770      	bx	lr
	...

08003b3c <floorf>:
 8003b3c:	ee10 3a10 	vmov	r3, s0
 8003b40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003b44:	3a7f      	subs	r2, #127	; 0x7f
 8003b46:	2a16      	cmp	r2, #22
 8003b48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b4c:	dc2a      	bgt.n	8003ba4 <floorf+0x68>
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	da11      	bge.n	8003b76 <floorf+0x3a>
 8003b52:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003bb4 <floorf+0x78>
 8003b56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b62:	dd05      	ble.n	8003b70 <floorf+0x34>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da23      	bge.n	8003bb0 <floorf+0x74>
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <floorf+0x7c>)
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	bf18      	it	ne
 8003b6e:	4613      	movne	r3, r2
 8003b70:	ee00 3a10 	vmov	s0, r3
 8003b74:	4770      	bx	lr
 8003b76:	4911      	ldr	r1, [pc, #68]	; (8003bbc <floorf+0x80>)
 8003b78:	4111      	asrs	r1, r2
 8003b7a:	420b      	tst	r3, r1
 8003b7c:	d0fa      	beq.n	8003b74 <floorf+0x38>
 8003b7e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003bb4 <floorf+0x78>
 8003b82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	ddef      	ble.n	8003b70 <floorf+0x34>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfbe      	ittt	lt
 8003b94:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003b98:	fa40 f202 	asrlt.w	r2, r0, r2
 8003b9c:	189b      	addlt	r3, r3, r2
 8003b9e:	ea23 0301 	bic.w	r3, r3, r1
 8003ba2:	e7e5      	b.n	8003b70 <floorf+0x34>
 8003ba4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003ba8:	d3e4      	bcc.n	8003b74 <floorf+0x38>
 8003baa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003bae:	4770      	bx	lr
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e7dd      	b.n	8003b70 <floorf+0x34>
 8003bb4:	7149f2ca 	.word	0x7149f2ca
 8003bb8:	bf800000 	.word	0xbf800000
 8003bbc:	007fffff 	.word	0x007fffff

08003bc0 <scalbnf>:
 8003bc0:	ee10 3a10 	vmov	r3, s0
 8003bc4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003bc8:	d025      	beq.n	8003c16 <scalbnf+0x56>
 8003bca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003bce:	d302      	bcc.n	8003bd6 <scalbnf+0x16>
 8003bd0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003bd4:	4770      	bx	lr
 8003bd6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003bda:	d122      	bne.n	8003c22 <scalbnf+0x62>
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <scalbnf+0xc8>)
 8003bde:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003c8c <scalbnf+0xcc>
 8003be2:	4298      	cmp	r0, r3
 8003be4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003be8:	db16      	blt.n	8003c18 <scalbnf+0x58>
 8003bea:	ee10 3a10 	vmov	r3, s0
 8003bee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003bf2:	3a19      	subs	r2, #25
 8003bf4:	4402      	add	r2, r0
 8003bf6:	2afe      	cmp	r2, #254	; 0xfe
 8003bf8:	dd15      	ble.n	8003c26 <scalbnf+0x66>
 8003bfa:	ee10 3a10 	vmov	r3, s0
 8003bfe:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003c90 <scalbnf+0xd0>
 8003c02:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003c94 <scalbnf+0xd4>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	eeb0 7a67 	vmov.f32	s14, s15
 8003c0c:	bfb8      	it	lt
 8003c0e:	eef0 7a66 	vmovlt.f32	s15, s13
 8003c12:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003c16:	4770      	bx	lr
 8003c18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003c98 <scalbnf+0xd8>
 8003c1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003c20:	4770      	bx	lr
 8003c22:	0dd2      	lsrs	r2, r2, #23
 8003c24:	e7e6      	b.n	8003bf4 <scalbnf+0x34>
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	dd06      	ble.n	8003c38 <scalbnf+0x78>
 8003c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003c32:	ee00 3a10 	vmov	s0, r3
 8003c36:	4770      	bx	lr
 8003c38:	f112 0f16 	cmn.w	r2, #22
 8003c3c:	da1a      	bge.n	8003c74 <scalbnf+0xb4>
 8003c3e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003c42:	4298      	cmp	r0, r3
 8003c44:	ee10 3a10 	vmov	r3, s0
 8003c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c4c:	dd0a      	ble.n	8003c64 <scalbnf+0xa4>
 8003c4e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003c90 <scalbnf+0xd0>
 8003c52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003c94 <scalbnf+0xd4>
 8003c56:	eef0 7a40 	vmov.f32	s15, s0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf18      	it	ne
 8003c5e:	eeb0 0a47 	vmovne.f32	s0, s14
 8003c62:	e7db      	b.n	8003c1c <scalbnf+0x5c>
 8003c64:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003c98 <scalbnf+0xd8>
 8003c68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003c9c <scalbnf+0xdc>
 8003c6c:	eef0 7a40 	vmov.f32	s15, s0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	e7f3      	b.n	8003c5c <scalbnf+0x9c>
 8003c74:	3219      	adds	r2, #25
 8003c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003c7e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003ca0 <scalbnf+0xe0>
 8003c82:	ee07 3a10 	vmov	s14, r3
 8003c86:	e7c4      	b.n	8003c12 <scalbnf+0x52>
 8003c88:	ffff3cb0 	.word	0xffff3cb0
 8003c8c:	4c000000 	.word	0x4c000000
 8003c90:	7149f2ca 	.word	0x7149f2ca
 8003c94:	f149f2ca 	.word	0xf149f2ca
 8003c98:	0da24260 	.word	0x0da24260
 8003c9c:	8da24260 	.word	0x8da24260
 8003ca0:	33000000 	.word	0x33000000

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
