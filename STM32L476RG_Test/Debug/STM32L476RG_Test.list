
STM32L476RG_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008050  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f4  080085f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085fc  080085fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000074  08008678  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08008678  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ca6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267e  00000000  00000000  00034d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000373c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000385f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028af2  00000000  00000000  00039700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012555  00000000  00000000  000621f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106740  00000000  00000000  00074747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ae87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005210  00000000  00000000  0017aedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081c0 	.word	0x080081c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080081c0 	.word	0x080081c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4abb      	ldr	r2, [pc, #748]	; (80011bc <SVPWM_Update+0x2fc>)
 8000ed0:	601a      	str	r2, [r3, #0]
	svm->Freq = 1; /*vhz->Freq;*/
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ed8:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ee0:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80011c0 <SVPWM_Update+0x300>
 8000ee4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	ed93 7a02 	vldr	s14, [r3, #8]
 8000eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f1c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80011c4 <SVPWM_Update+0x304>
 8000f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	db09      	blt.n	8000f3e <SVPWM_Update+0x7e>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f30:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80011c4 <SVPWM_Update+0x304>
 8000f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f4c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80011c4 <SVPWM_Update+0x304>
 8000f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	f006 f9ba 	bl	80072d0 <sinf>
 8000f5c:	eeb0 7a40 	vmov.f32	s14, s0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f80:	eeb0 0a67 	vmov.f32	s0, s15
 8000f84:	f006 f9a4 	bl	80072d0 <sinf>
 8000f88:	eeb0 7a40 	vmov.f32	s14, s0
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fc0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d518      	bpl.n	800101a <SVPWM_Update+0x15a>
      	if (svm->SectorPointer == 5){
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000ff2:	eef4 7a47 	vcmp.f32	s15, s14
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	d104      	bne.n	8001006 <SVPWM_Update+0x146>
         	svm->SectorPointer = 0;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	e009      	b.n	800101a <SVPWM_Update+0x15a>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edd3 7a05 	vldr	s15, [r3, #20]
 800100c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001020:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d11f      	bne.n	800106a <SVPWM_Update+0x1aa>
		svm->U = svm->ta + svm->tb + svm->to;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	e0d7      	b.n	800121a <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001074:	eef4 7a47 	vcmp.f32	s15, s14
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	d11f      	bne.n	80010be <SVPWM_Update+0x1fe>
    	svm->U= svm->ta + svm->to;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	e0ad      	b.n	800121a <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010c8:	eef4 7a47 	vcmp.f32	s15, s14
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d11f      	bne.n	8001112 <SVPWM_Update+0x252>
    	svm->U = svm->to;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80010f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edc3 7a08 	vstr	s15, [r3, #32]
 8001110:	e083      	b.n	800121a <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edd3 7a05 	vldr	s15, [r3, #20]
 8001118:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800111c:	eef4 7a47 	vcmp.f32	s15, s14
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d11f      	bne.n	8001166 <SVPWM_Update+0x2a6>
    	svm->U = svm->to;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	edc3 7a08 	vstr	s15, [r3, #32]
 8001164:	e059      	b.n	800121a <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	edd3 7a05 	vldr	s15, [r3, #20]
 800116c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001170:	eef4 7a47 	vcmp.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d126      	bne.n	80011c8 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	edc3 7a08 	vstr	s15, [r3, #32]
 80011b8:	e02f      	b.n	800121a <SVPWM_Update+0x35a>
 80011ba:	bf00      	nop
 80011bc:	3f666666 	.word	0x3f666666
 80011c0:	40c90fdb 	.word	0x40c90fdb
 80011c4:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80011ce:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011d2:	eef4 7a47 	vcmp.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d11e      	bne.n	800121a <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edd3 7a02 	vldr	s15, [r3, #8]
 8001226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <SVPWM_Update+0x3ec>)
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	3301      	adds	r3, #1
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <SVPWM_Update+0x3ec>)
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 6a07 	vldr	s13, [r3, #28]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	edd3 7a02 	vldr	s15, [r3, #8]
 8001254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <SVPWM_Update+0x3ec>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	3301      	adds	r3, #1
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <SVPWM_Update+0x3ec>)
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	edd3 6a08 	vldr	s13, [r3, #32]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <SVPWM_Update+0x3ec>)
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	3301      	adds	r3, #1
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SVPWM_Update+0x3ec>)
 800129a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129e:	ee17 2a90 	vmov	r2, s15
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40012c00 	.word	0x40012c00

080012b0 <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6178      	str	r0, [r7, #20]
 80012b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80012bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80012c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80012c4:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 80012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ed93 7a06 	vldr	s14, [r3, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d804      	bhi.n	8001344 <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 8001342:	e03b      	b.n	80013bc <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd20      	ble.n	800139c <VHZ_Update+0x80>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a01 	vldr	s15, [r3, #4]
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d815      	bhi.n	800139c <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a02 	vldr	s14, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 6a04 	vldr	s13, [r3, #16]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed93 6a06 	vldr	s12, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee76 7a67 	vsub.f32	s15, s12, s15
 800138c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800139a:	e00f      	b.n	80013bc <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	ed93 7a06 	vldr	s14, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	dc00      	bgt.n	80013b4 <VHZ_Update+0x98>
}
 80013b2:	e003      	b.n	80013bc <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 80013ce:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001500 <main+0x138>
 80013d2:	484c      	ldr	r0, [pc, #304]	; (8001504 <main+0x13c>)
 80013d4:	f7ff fd30 	bl	8000e38 <SVPWM_Init>
  VHZ_Init(&vhz1, 0.001, 0.01, 10, 100);
 80013d8:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8001508 <main+0x140>
 80013dc:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80013e0:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800150c <main+0x144>
 80013e4:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001510 <main+0x148>
 80013e8:	484a      	ldr	r0, [pc, #296]	; (8001514 <main+0x14c>)
 80013ea:	f7ff ff61 	bl	80012b0 <VHZ_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f000 ffb9 	bl	8002364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 f89d 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f000 fbc5 	bl	8001b84 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013fa:	f000 fa67 	bl	80018cc <MX_TIM1_Init>
  MX_TIM15_Init();
 80013fe:	f000 fb3f 	bl	8001a80 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8001402:	f000 fb8f 	bl	8001b24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001406:	f000 f91b 	bl	8001640 <MX_ADC1_Init>
  MX_ADC2_Init();
 800140a:	f000 f993 	bl	8001734 <MX_ADC2_Init>
  MX_ADC3_Init();
 800140e:	f000 f9f7 	bl	8001800 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4840      	ldr	r0, [pc, #256]	; (8001518 <main+0x150>)
 8001416:	f003 fffd 	bl	8005414 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800141a:	2100      	movs	r1, #0
 800141c:	483e      	ldr	r0, [pc, #248]	; (8001518 <main+0x150>)
 800141e:	f005 f879 	bl	8006514 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001422:	2104      	movs	r1, #4
 8001424:	483c      	ldr	r0, [pc, #240]	; (8001518 <main+0x150>)
 8001426:	f003 fff5 	bl	8005414 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800142a:	2104      	movs	r1, #4
 800142c:	483a      	ldr	r0, [pc, #232]	; (8001518 <main+0x150>)
 800142e:	f005 f871 	bl	8006514 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001432:	2108      	movs	r1, #8
 8001434:	4838      	ldr	r0, [pc, #224]	; (8001518 <main+0x150>)
 8001436:	f003 ffed 	bl	8005414 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800143a:	2108      	movs	r1, #8
 800143c:	4836      	ldr	r0, [pc, #216]	; (8001518 <main+0x150>)
 800143e:	f005 f869 	bl	8006514 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8001442:	4836      	ldr	r0, [pc, #216]	; (800151c <main+0x154>)
 8001444:	f003 ff86 	bl	8005354 <HAL_TIM_Base_Start_IT>

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4834      	ldr	r0, [pc, #208]	; (8001520 <main+0x158>)
 800144e:	f002 fc31 	bl	8003cb4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8001452:	4834      	ldr	r0, [pc, #208]	; (8001524 <main+0x15c>)
 8001454:	f001 fb4a 	bl	8002aec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800145c:	4831      	ldr	r0, [pc, #196]	; (8001524 <main+0x15c>)
 800145e:	f001 fbff 	bl	8002c60 <HAL_ADC_PollForConversion>
	  raw_voltage = HAL_ADC_GetValue(&hadc1);
 8001462:	4830      	ldr	r0, [pc, #192]	; (8001524 <main+0x15c>)
 8001464:	f001 fccc 	bl	8002e00 <HAL_ADC_GetValue>
 8001468:	4603      	mov	r3, r0
 800146a:	84fb      	strh	r3, [r7, #38]	; 0x26
	  voltage = adc_voltage_conversion (raw_voltage) / SCALING_FACTOR;
 800146c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fc52 	bl	8001d18 <adc_voltage_conversion>
 8001474:	ee10 3a10 	vmov	r3, s0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f809 	bl	8000490 <__aeabi_f2d>
 800147e:	a31e      	add	r3, pc, #120	; (adr r3, 80014f8 <main+0x130>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f986 	bl	8000794 <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb06 	bl	8000aa0 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	623b      	str	r3, [r7, #32]

	  HAL_Delay (100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f000 ffdb 	bl	8002454 <HAL_Delay>
    // TOOD: Currently only one phase has a current sense, need to add two more!
	  HAL_ADC_Start (&hadc2);
 800149e:	4822      	ldr	r0, [pc, #136]	; (8001528 <main+0x160>)
 80014a0:	f001 fb24 	bl	8002aec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <main+0x160>)
 80014aa:	f001 fbd9 	bl	8002c60 <HAL_ADC_PollForConversion>
	  current_raw = HAL_ADC_GetValue(&hadc2);
 80014ae:	481e      	ldr	r0, [pc, #120]	; (8001528 <main+0x160>)
 80014b0:	f001 fca6 	bl	8002e00 <HAL_ADC_GetValue>
 80014b4:	4603      	mov	r3, r0
 80014b6:	83fb      	strh	r3, [r7, #30]
	  DC_current_M = DC_current_sensing (current_raw);	//current 1 is the actual current we want not current2
 80014b8:	8bfb      	ldrh	r3, [r7, #30]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fccc 	bl	8001e58 <DC_current_sensing>
 80014c0:	ed87 0a06 	vstr	s0, [r7, #24]

	  HAL_Delay (100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f000 ffc5 	bl	8002454 <HAL_Delay>

	  HAL_ADC_Start (&hadc3);
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <main+0x164>)
 80014cc:	f001 fb0e 	bl	8002aec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d4:	4815      	ldr	r0, [pc, #84]	; (800152c <main+0x164>)
 80014d6:	f001 fbc3 	bl	8002c60 <HAL_ADC_PollForConversion>
	  raw_temperature = HAL_ADC_GetValue(&hadc3);
 80014da:	4814      	ldr	r0, [pc, #80]	; (800152c <main+0x164>)
 80014dc:	f001 fc90 	bl	8002e00 <HAL_ADC_GetValue>
 80014e0:	4603      	mov	r3, r0
 80014e2:	82fb      	strh	r3, [r7, #22]
	  temperature = temperature_sensing (raw_temperature);
 80014e4:	8afb      	ldrh	r3, [r7, #22]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fc36 	bl	8001d58 <temperature_sensing>
 80014ec:	ed87 0a04 	vstr	s0, [r7, #16]
    //Fault management
    //Fault_Mgmt(DC_current_M, voltage, temperature);

	  // Send out buffer (temperature or error message)

	  HAL_Delay (100);
 80014f0:	2064      	movs	r0, #100	; 0x64
 80014f2:	f000 ffaf 	bl	8002454 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80014f6:	e7ac      	b.n	8001452 <main+0x8a>
 80014f8:	76ae970d 	.word	0x76ae970d
 80014fc:	3fa5941b 	.word	0x3fa5941b
 8001500:	461c4000 	.word	0x461c4000
 8001504:	200002e4 	.word	0x200002e4
 8001508:	42c80000 	.word	0x42c80000
 800150c:	3c23d70a 	.word	0x3c23d70a
 8001510:	3a83126f 	.word	0x3a83126f
 8001514:	20000208 	.word	0x20000208
 8001518:	20000224 	.word	0x20000224
 800151c:	20000100 	.word	0x20000100
 8001520:	48000400 	.word	0x48000400
 8001524:	20000140 	.word	0x20000140
 8001528:	2000009c 	.word	0x2000009c
 800152c:	200001a4 	.word	0x200001a4

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0b8      	sub	sp, #224	; 0xe0
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153a:	2244      	movs	r2, #68	; 0x44
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f005 febe 	bl	80072c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2288      	movs	r2, #136	; 0x88
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f005 feb0 	bl	80072c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156e:	2310      	movs	r3, #16
 8001570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001580:	2301      	movs	r3, #1
 8001582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001586:	230a      	movs	r3, #10
 8001588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800158c:	2307      	movs	r3, #7
 800158e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fc02 	bl	8003dac <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ae:	f000 fc81 	bl	8001eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015d4:	2104      	movs	r1, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 ffce 	bl	8004578 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015e2:	f000 fc67 	bl	8001eb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80015e6:	f244 0302 	movw	r3, #16386	; 0x4002
 80015ea:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80015f6:	2302      	movs	r3, #2
 80015f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80015fe:	2308      	movs	r3, #8
 8001600:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001602:	2307      	movs	r3, #7
 8001604:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800160e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001612:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f9b4 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001622:	f000 fc47 	bl	8001eb4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800162a:	f002 fb69 	bl	8003d00 <HAL_PWREx_ControlVoltageScaling>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001634:	f000 fc3e 	bl	8001eb4 <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	37e0      	adds	r7, #224	; 0xe0
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001664:	4a31      	ldr	r2, [pc, #196]	; (800172c <MX_ADC1_Init+0xec>)
 8001666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MX_ADC1_Init+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_ADC1_Init+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001682:	2204      	movs	r2, #4
 8001684:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <MX_ADC1_Init+0xe8>)
 800168e:	2200      	movs	r2, #0
 8001690:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001694:	2201      	movs	r2, #1
 8001696:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_ADC1_Init+0xe8>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016ca:	f001 f8bb 	bl	8002844 <HAL_ADC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80016d4:	f000 fbee 	bl	8001eb4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <MX_ADC1_Init+0xe8>)
 80016e4:	f001 ff7e 	bl	80035e4 <HAL_ADCEx_MultiModeConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016ee:	f000 fbe1 	bl	8001eb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_ADC1_Init+0xf0>)
 80016f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f6:	2306      	movs	r3, #6
 80016f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016fe:	237f      	movs	r3, #127	; 0x7f
 8001700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001702:	2304      	movs	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_ADC1_Init+0xe8>)
 8001710:	f001 fb84 	bl	8002e1c <HAL_ADC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800171a:	f000 fbcb 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000140 	.word	0x20000140
 800172c:	50040000 	.word	0x50040000
 8001730:	14f00020 	.word	0x14f00020

08001734 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <MX_ADC2_Init+0xc4>)
 800174e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800176a:	2204      	movs	r2, #4
 800176c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001770:	2200      	movs	r2, #0
 8001772:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001776:	2200      	movs	r2, #0
 8001778:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800177c:	2201      	movs	r2, #1
 800177e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800178a:	2201      	movs	r2, #1
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC2_Init+0xc0>)
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_ADC2_Init+0xc0>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC2_Init+0xc0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC2_Init+0xc0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <MX_ADC2_Init+0xc0>)
 80017b2:	f001 f847 	bl	8002844 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f000 fb7a 	bl	8001eb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_ADC2_Init+0xc8>)
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c4:	2306      	movs	r3, #6
 80017c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017cc:	237f      	movs	r3, #127	; 0x7f
 80017ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017d0:	2304      	movs	r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC2_Init+0xc0>)
 80017de:	f001 fb1d 	bl	8002e1c <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80017e8:	f000 fb64 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	50040100 	.word	0x50040100
 80017fc:	10c00010 	.word	0x10c00010

08001800 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001818:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <MX_ADC3_Init+0xc4>)
 800181a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001836:	2204      	movs	r2, #4
 8001838:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800183c:	2200      	movs	r2, #0
 800183e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001842:	2200      	movs	r2, #0
 8001844:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001848:	2201      	movs	r2, #1
 800184a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001856:	2201      	movs	r2, #1
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_ADC3_Init+0xc0>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <MX_ADC3_Init+0xc0>)
 800187e:	f000 ffe1 	bl	8002844 <HAL_ADC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001888:	f000 fb14 	bl	8001eb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_ADC3_Init+0xc8>)
 800188e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001890:	2306      	movs	r3, #6
 8001892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001898:	237f      	movs	r3, #127	; 0x7f
 800189a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800189c:	2304      	movs	r3, #4
 800189e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_ADC3_Init+0xc0>)
 80018aa:	f001 fab7 	bl	8002e1c <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80018b4:	f000 fafe 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200001a4 	.word	0x200001a4
 80018c4:	50040200 	.word	0x50040200
 80018c8:	04300002 	.word	0x04300002

080018cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09e      	sub	sp, #120	; 0x78
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	222c      	movs	r2, #44	; 0x2c
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fcd2 	bl	80072c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 800191e:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <MX_TIM1_Init+0x1b0>)
 8001920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001922:	4b55      	ldr	r3, [pc, #340]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001924:	224f      	movs	r2, #79	; 0x4f
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 800192a:	2260      	movs	r2, #96	; 0x60
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800192e:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001930:	2263      	movs	r2, #99	; 0x63
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001946:	484c      	ldr	r0, [pc, #304]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001948:	f003 fcd8 	bl	80052fc <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001952:	f000 faaf 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800195c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001960:	4619      	mov	r1, r3
 8001962:	4845      	ldr	r0, [pc, #276]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001964:	f003 ffe6 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800196e:	f000 faa1 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001972:	4841      	ldr	r0, [pc, #260]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001974:	f003 fd18 	bl	80053a8 <HAL_TIM_PWM_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800197e:	f000 fa99 	bl	8001eb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001986:	2300      	movs	r3, #0
 8001988:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800198a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198e:	4619      	mov	r1, r3
 8001990:	4839      	ldr	r0, [pc, #228]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001992:	f004 f895 	bl	8005ac0 <HAL_TIM_SlaveConfigSynchro>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800199c:	f000 fa8a 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b0:	4619      	mov	r1, r3
 80019b2:	4831      	ldr	r0, [pc, #196]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 80019b4:	f004 fdde 	bl	8006574 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019be:	f000 fa79 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	; 0x60
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4824      	ldr	r0, [pc, #144]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 80019e8:	f003 fe8c 	bl	8005704 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80019f2:	f000 fa5f 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fa:	2204      	movs	r2, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	481e      	ldr	r0, [pc, #120]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001a00:	f003 fe80 	bl	8005704 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a0a:	f000 fa53 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a12:	2208      	movs	r2, #8
 8001a14:	4619      	mov	r1, r3
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001a18:	f003 fe74 	bl	8005704 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a22:	f000 fa47 	bl	8001eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001a5c:	f004 fe12 	bl	8006684 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8001a66:	f000 fa25 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM1_Init+0x1ac>)
 8001a6c:	f000 fb46 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3778      	adds	r7, #120	; 0x78
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000224 	.word	0x20000224
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <MX_TIM15_Init+0xa0>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001aa8:	224f      	movs	r2, #79	; 0x4f
 8001aaa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001ab4:	2263      	movs	r2, #99	; 0x63
 8001ab6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001acc:	f003 fc16 	bl	80052fc <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f000 f9ed 	bl	8001eb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001aea:	f003 ffe9 	bl	8005ac0 <HAL_TIM_SlaveConfigSynchro>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001af4:	f000 f9de 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM15_Init+0x9c>)
 8001b06:	f004 fd35 	bl	8006574 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b10:	f000 f9d0 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000100 	.word	0x20000100
 8001b20:	40014000 	.word	0x40014000

08001b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART2_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b68:	f004 fe4d 	bl	8006806 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f000 f99f 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000264 	.word	0x20000264
 8001b80:	40004400 	.word	0x40004400

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_GPIO_Init+0xe8>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	481c      	ldr	r0, [pc, #112]	; (8001c70 <MX_GPIO_Init+0xec>)
 8001c00:	f002 f858 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2120      	movs	r1, #32
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f002 f852 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_GPIO_Init+0xf0>)
 8001c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_GPIO_Init+0xec>)
 8001c26:	f001 fe9b 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <MX_GPIO_Init+0xec>)
 8001c42:	f001 fe8d 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c46:	2320      	movs	r3, #32
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f001 fe7e 	bl	8003960 <HAL_GPIO_Init>

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800
 8001c74:	10210000 	.word	0x10210000

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  if(temperature > MOTOR_TEMP_MAX){
    //SHUTDOWN
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if(a==1000){
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001d04 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001c8a:	eef4 7a47 	vcmp.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	d105      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2120      	movs	r1, #32
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 f80a 	bl	8003cb4 <HAL_GPIO_WritePin>
	}
	OldSector = svpwm1.SectorPointer;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001ca2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001caa:	ee17 2a90 	vmov	r2, s15
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cb0:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8001cb2:	4817      	ldr	r0, [pc, #92]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001cb4:	f7ff fb32 	bl	800131c <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001cba:	4915      	ldr	r1, [pc, #84]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001cbe:	f7ff f8ff 	bl	8000ec0 <SVPWM_Update>
	if(a==1000){
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d04 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001ccc:	eef4 7a47 	vcmp.f32	s15, s14
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d105      	bne.n	8001ce2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2120      	movs	r1, #32
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f001 ffe9 	bl	8003cb4 <HAL_GPIO_WritePin>
	}
	a = a+1;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000031c 	.word	0x2000031c
 8001d04:	447a0000 	.word	0x447a0000
 8001d08:	200002e4 	.word	0x200002e4
 8001d0c:	20000094 	.word	0x20000094
 8001d10:	20000208 	.word	0x20000208
 8001d14:	20000224 	.word	0x20000224

08001d18 <adc_voltage_conversion>:


float adc_voltage_conversion (uint16_t raw_a)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
	return (float) (raw_a / ADC_VOLTAGE_CONVERSION);
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fba1 	bl	800046c <__aeabi_i2d>
 8001d2a:	a309      	add	r3, pc, #36	; (adr r3, 8001d50 <adc_voltage_conversion+0x38>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fd30 	bl	8000794 <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe feb0 	bl	8000aa0 <__aeabi_d2f>
 8001d40:	4603      	mov	r3, r0
 8001d42:	ee07 3a90 	vmov	s15, r3
}
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	e8ba2e8c 	.word	0xe8ba2e8c
 8001d54:	409363a2 	.word	0x409363a2

08001d58 <temperature_sensing>:

float temperature_sensing (uint16_t raw_a)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
	float thermistor = adc_voltage_conversion (raw_a); //gets the voltage
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ffd7 	bl	8001d18 <adc_voltage_conversion>
 8001d6a:	ed87 0a03 	vstr	s0, [r7, #12]
	thermistor = (float) (THERMISTOR_RESISTANCE * raw_a / (INPUT_VOLTAGE - raw_a)); //calculates therm resistance
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fb77 	bl	800046c <__aeabi_i2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb71 	bl	800046c <__aeabi_i2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	a12d      	add	r1, pc, #180	; (adr r1, 8001e44 <temperature_sensing+0xec>)
 8001d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d94:	f7fe fa1c 	bl	80001d0 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	f7fe fcf8 	bl	8000794 <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe fe78 	bl	8000aa0 <__aeabi_d2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
	return (float) ( pow((1 / ROOM_TEMP) + 1 / THERMISTOR_BETA * (log(thermistor / THERMISTOR_RESISTANCE)),-1) -273.15);
 8001db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc0:	ee16 0a90 	vmov	r0, s13
 8001dc4:	f7fe fb64 	bl	8000490 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	ec43 2b10 	vmov	d0, r2, r3
 8001dd0:	f005 fac2 	bl	8007358 <log>
 8001dd4:	ec51 0b10 	vmov	r0, r1, d0
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f7fe fbae 	bl	8000540 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	a317      	add	r3, pc, #92	; (adr r3, 8001e4c <temperature_sensing+0xf4>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe f9ef 	bl	80001d4 <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	4910      	ldr	r1, [pc, #64]	; (8001e40 <temperature_sensing+0xe8>)
 8001e00:	f7fe fcc8 	bl	8000794 <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	a30a      	add	r3, pc, #40	; (adr r3, 8001e38 <temperature_sensing+0xe0>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe f9dd 	bl	80001d0 <__aeabi_dsub>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fe3f 	bl	8000aa0 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	ee07 3a90 	vmov	s15, r3

}
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	66666666 	.word	0x66666666
 8001e3c:	40711266 	.word	0x40711266
 8001e40:	3ff00000 	.word	0x3ff00000
 8001e44:	66666666 	.word	0x66666666
 8001e48:	400a6666 	.word	0x400a6666
 8001e4c:	dcb5db83 	.word	0xdcb5db83
 8001e50:	3f6b79e1 	.word	0x3f6b79e1
 8001e54:	00000000 	.word	0x00000000

08001e58 <DC_current_sensing>:
float DC_current_sensing (uint16_t raw_v)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
	float voltage_difference = adc_voltage_conversion (raw_v)/GAIN;
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff57 	bl	8001d18 <adc_voltage_conversion>
 8001e6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e6e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001eb0 <DC_current_sensing+0x58>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	edc7 7a03 	vstr	s15, [r7, #12]
	return (float) voltage_difference / DC_RESISTOR;
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7fe fb08 	bl	8000490 <__aeabi_f2d>
 8001e80:	a309      	add	r3, pc, #36	; (adr r3, 8001ea8 <DC_current_sensing+0x50>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fc85 	bl	8000794 <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fe05 	bl	8000aa0 <__aeabi_d2f>
 8001e96:	4603      	mov	r3, r0
 8001e98:	ee07 3a90 	vmov	s15, r3
}
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001eac:	3f40624d 	.word	0x3f40624d
 8001eb0:	42c80000 	.word	0x42c80000

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_MspInit+0x44>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	; 0x38
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_ADC_MspInit+0x154>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d12e      	bne.n	8001f8c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001f36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	4a42      	ldr	r2, [pc, #264]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f70:	2301      	movs	r3, #1
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f74:	230b      	movs	r3, #11
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f001 fceb 	bl	8003960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f8a:	e064      	b.n	8002056 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a36      	ldr	r2, [pc, #216]	; (800206c <HAL_ADC_MspInit+0x160>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12d      	bne.n	8001ff2 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a31      	ldr	r2, [pc, #196]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001f9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fdc:	230b      	movs	r3, #11
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4821      	ldr	r0, [pc, #132]	; (8002070 <HAL_ADC_MspInit+0x164>)
 8001fec:	f001 fcb8 	bl	8003960 <HAL_GPIO_Init>
}
 8001ff0:	e031      	b.n	8002056 <HAL_ADC_MspInit+0x14a>
  else if(hadc->Instance==ADC3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_ADC_MspInit+0x168>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d12c      	bne.n	8002056 <HAL_ADC_MspInit+0x14a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8002004:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_ADC_MspInit+0x158>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10b      	bne.n	8002026 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8002014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_ADC_MspInit+0x15c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800203e:	2301      	movs	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002042:	230b      	movs	r3, #11
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	4619      	mov	r1, r3
 8002050:	4807      	ldr	r0, [pc, #28]	; (8002070 <HAL_ADC_MspInit+0x164>)
 8002052:	f001 fc85 	bl	8003960 <HAL_GPIO_Init>
}
 8002056:	bf00      	nop
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	50040000 	.word	0x50040000
 8002064:	20000090 	.word	0x20000090
 8002068:	40021000 	.word	0x40021000
 800206c:	50040100 	.word	0x50040100
 8002070:	48000800 	.word	0x48000800
 8002074:	50040200 	.word	0x50040200

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_TIM_Base_MspInit+0x78>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d114      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002094:	6613      	str	r3, [r2, #96]	; 0x60
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2018      	movs	r0, #24
 80020a8:	f001 fc23 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020ac:	2018      	movs	r0, #24
 80020ae:	f001 fc3c 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80020b2:	e018      	b.n	80020e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_TIM_Base_MspInit+0x80>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d113      	bne.n	80020e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_Base_MspInit+0x7c>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2018      	movs	r0, #24
 80020dc:	f001 fc09 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020e0:	2018      	movs	r0, #24
 80020e2:	f001 fc22 	bl	800392a <HAL_NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40014000 	.word	0x40014000

080020fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_TIM_MspPostInit+0xa0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d13a      	bne.n	8002194 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_TIM_MspPostInit+0xa4>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800214e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_TIM_MspPostInit+0xa8>)
 800216c:	f001 fbf8 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002170:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002190:	f001 fbe6 	bl	8003960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000400 	.word	0x48000400

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_UART_MspInit+0x7c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d128      	bne.n	800221c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_UART_MspInit+0x80>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021fa:	230c      	movs	r3, #12
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220a:	2307      	movs	r3, #7
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f001 fba2 	bl	8003960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40004400 	.word	0x40004400
 8002228:	40021000 	.word	0x40021000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002280:	f000 f8ca 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800228e:	f003 f919 	bl	80054c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002292:	4803      	ldr	r0, [pc, #12]	; (80022a0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002294:	f003 f916 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000224 	.word	0x20000224
 80022a0:	20000100 	.word	0x20000100

080022a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <SystemInit+0x64>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <SystemInit+0x64>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <SystemInit+0x68>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <SystemInit+0x68>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <SystemInit+0x68>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <SystemInit+0x68>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <SystemInit+0x68>)
 80022d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <SystemInit+0x68>)
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <SystemInit+0x68>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <SystemInit+0x68>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <SystemInit+0x68>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SystemInit+0x64>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fa:	609a      	str	r2, [r3, #8]
#endif
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	40021000 	.word	0x40021000

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
	ldr	r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopForever+0x12>)
	b	LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800232e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <LoopForever+0x16>)
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800233a:	f7ff ffb3 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f004 ff9b 	bl	8007278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7ff f841 	bl	80013c8 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800234c:	08008604 	.word	0x08008604
	ldr	r0, =_sdata
 8002350:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002354:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002358:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800235c:	20000324 	.word	0x20000324

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_Init+0x3c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_Init+0x3c>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237a:	2003      	movs	r0, #3
 800237c:	f001 faae 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002380:	2000      	movs	r0, #0
 8002382:	f000 f80f 	bl	80023a4 <HAL_InitTick>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	e001      	b.n	8002396 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002392:	f7ff fd97 	bl	8001ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002396:	79fb      	ldrb	r3, [r7, #7]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40022000 	.word	0x40022000

080023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_InitTick+0x68>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d022      	beq.n	80023fe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_InitTick+0x6c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_InitTick+0x68>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 faba 	bl	8003946 <HAL_SYSTICK_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10f      	bne.n	80023f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	d809      	bhi.n	80023f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023de:	2200      	movs	r2, #0
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e6:	f001 fa84 	bl	80038f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_InitTick+0x70>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e007      	b.n	8002402 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e004      	b.n	8002402 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000008 	.word	0x20000008
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_IncTick+0x1c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x20>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4413      	add	r3, r2
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_IncTick+0x1c>)
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000320 	.word	0x20000320
 8002438:	20000008 	.word	0x20000008

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000320 	.word	0x20000320

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246c:	d004      	beq.n	8002478 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_Delay+0x40>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002478:	bf00      	nop
 800247a:	f7ff ffdf 	bl	800243c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	429a      	cmp	r2, r3
 8002488:	d8f7      	bhi.n	800247a <HAL_Delay+0x26>
  {
  }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000008 	.word	0x20000008

08002498 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002500:	b490      	push	{r4, r7}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <LL_ADC_SetOffset+0x40>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	4313      	orrs	r3, r2
 800252e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002532:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bc90      	pop	{r4, r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	03fff000 	.word	0x03fff000

08002544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002544:	b490      	push	{r4, r7}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bc90      	pop	{r4, r7}
 800256a:	4770      	bx	lr

0800256c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800256c:	b490      	push	{r4, r7}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3360      	adds	r3, #96	; 0x60
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4313      	orrs	r3, r2
 8002590:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bc90      	pop	{r4, r7}
 800259a:	4770      	bx	lr

0800259c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025c2:	b490      	push	{r4, r7}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3330      	adds	r3, #48	; 0x30
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	4413      	add	r3, r2
 80025e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	211f      	movs	r1, #31
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	401a      	ands	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 011f 	and.w	r1, r3, #31
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bc90      	pop	{r4, r7}
 8002612:	4770      	bx	lr

08002614 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002614:	b490      	push	{r4, r7}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3314      	adds	r3, #20
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0e5b      	lsrs	r3, r3, #25
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	4413      	add	r3, r2
 8002632:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0d1b      	lsrs	r3, r3, #20
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2107      	movs	r1, #7
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0d1b      	lsrs	r3, r3, #20
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bc90      	pop	{r4, r7}
 8002662:	4770      	bx	lr

08002664 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0318 	and.w	r3, r3, #24
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002688:	40d9      	lsrs	r1, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	400b      	ands	r3, r1
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	0007ffff 	.word	0x0007ffff

080026ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 031f 	and.w	r3, r3, #31
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6093      	str	r3, [r2, #8]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002744:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <LL_ADC_IsEnabled+0x18>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <LL_ADC_IsEnabled+0x1a>
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d101      	bne.n	800280e <LL_ADC_REG_IsConversionOngoing+0x18>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d101      	bne.n	8002834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e134      	b.n	8002ac8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fb4d 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff3f 	bl	8002708 <LL_ADC_IsDeepPowerDownEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff25 	bl	80026e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff5a 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff3e 	bl	8002730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80028b4:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <HAL_ADC_Init+0x28c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	4a86      	ldr	r2, [pc, #536]	; (8002ad4 <HAL_ADC_Init+0x290>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028c4:	e002      	b.n	80028cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f9      	bne.n	80028c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff3e 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff77 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002908:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 80cf 	bne.w	8002ab6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80cb 	bne.w	8002ab6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff37 	bl	80027a8 <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d115      	bne.n	800296c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002940:	4865      	ldr	r0, [pc, #404]	; (8002ad8 <HAL_ADC_Init+0x294>)
 8002942:	f7ff ff31 	bl	80027a8 <LL_ADC_IsEnabled>
 8002946:	4604      	mov	r4, r0
 8002948:	4864      	ldr	r0, [pc, #400]	; (8002adc <HAL_ADC_Init+0x298>)
 800294a:	f7ff ff2d 	bl	80027a8 <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	431c      	orrs	r4, r3
 8002952:	4863      	ldr	r0, [pc, #396]	; (8002ae0 <HAL_ADC_Init+0x29c>)
 8002954:	f7ff ff28 	bl	80027a8 <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	4323      	orrs	r3, r4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4619      	mov	r1, r3
 8002966:	485f      	ldr	r0, [pc, #380]	; (8002ae4 <HAL_ADC_Init+0x2a0>)
 8002968:	f7ff fd96 	bl	8002498 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7e5b      	ldrb	r3, [r3, #25]
 8002970:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002976:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800297c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002982:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	045b      	lsls	r3, r3, #17
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_ADC_Init+0x2a4>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff0a 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff17 	bl	800281c <LL_ADC_INJ_IsConversionOngoing>
 80029ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d13d      	bne.n	8002a72 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13a      	bne.n	8002a72 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a08:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	69b9      	ldr	r1, [r7, #24]
 8002a22:	430b      	orrs	r3, r1
 8002a24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d118      	bne.n	8002a62 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a52:	430a      	orrs	r2, r1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	611a      	str	r2, [r3, #16]
 8002a60:	e007      	b.n	8002a72 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10c      	bne.n	8002a94 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	f023 010f 	bic.w	r1, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
 8002a92:	e007      	b.n	8002aa4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020f 	bic.w	r2, r2, #15
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f023 0303 	bic.w	r3, r3, #3
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ab4:	e007      	b.n	8002ac6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3724      	adds	r7, #36	; 0x24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	50040000 	.word	0x50040000
 8002adc:	50040100 	.word	0x50040100
 8002ae0:	50040200 	.word	0x50040200
 8002ae4:	50040300 	.word	0x50040300
 8002ae8:	fff0c007 	.word	0xfff0c007

08002aec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af4:	4857      	ldr	r0, [pc, #348]	; (8002c54 <HAL_ADC_Start+0x168>)
 8002af6:	f7ff fdd9 	bl	80026ac <LL_ADC_GetMultimode>
 8002afa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe78 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 809c 	bne.w	8002c46 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_Start+0x30>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e097      	b.n	8002c4c <HAL_ADC_Start+0x160>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fcdd 	bl	80034e4 <ADC_Enable>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 8083 	bne.w	8002c3c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_ADC_Start+0x16c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d002      	beq.n	8002b5a <HAL_ADC_Start+0x6e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	e000      	b.n	8002b5c <HAL_ADC_Start+0x70>
 8002b5a:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_ADC_Start+0x170>)
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d002      	beq.n	8002b6a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f023 0206 	bic.w	r2, r3, #6
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	221c      	movs	r2, #28
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <HAL_ADC_Start+0x16c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d002      	beq.n	8002bb8 <HAL_ADC_Start+0xcc>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <HAL_ADC_Start+0xce>
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_ADC_Start+0x170>)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d008      	beq.n	8002bd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d002      	beq.n	8002bd4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d114      	bne.n	8002bfe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fde9 	bl	80027ce <LL_ADC_REG_StartConversion>
 8002bfc:	e025      	b.n	8002c4a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <HAL_ADC_Start+0x16c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d002      	beq.n	8002c1a <HAL_ADC_Start+0x12e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	e000      	b.n	8002c1c <HAL_ADC_Start+0x130>
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_ADC_Start+0x170>)
 8002c1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00f      	beq.n	8002c4a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
 8002c3a:	e006      	b.n	8002c4a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c44:	e001      	b.n	8002c4a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
 8002c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	50040300 	.word	0x50040300
 8002c58:	50040100 	.word	0x50040100
 8002c5c:	50040000 	.word	0x50040000

08002c60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6a:	4862      	ldr	r0, [pc, #392]	; (8002df4 <HAL_ADC_PollForConversion+0x194>)
 8002c6c:	f7ff fd1e 	bl	80026ac <LL_ADC_GetMultimode>
 8002c70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d102      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e02a      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d002      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	d111      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e09d      	b.n	8002dec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cb4:	e00f      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cb6:	484f      	ldr	r0, [pc, #316]	; (8002df4 <HAL_ADC_PollForConversion+0x194>)
 8002cb8:	f7ff fd06 	bl	80026c8 <LL_ADC_GetMultiDMATransfer>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08c      	b.n	8002dec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cd6:	f7ff fbb1 	bl	800243c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cdc:	e01a      	b.n	8002d14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce4:	d016      	beq.n	8002d14 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ce6:	f7ff fba9 	bl	800243c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <HAL_ADC_PollForConversion+0x9c>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e06b      	b.n	8002dec <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0dd      	beq.n	8002cde <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fc32 	bl	800259c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7e5b      	ldrb	r3, [r3, #25]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d111      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_ADC_PollForConversion+0x198>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d002      	beq.n	8002d88 <HAL_ADC_PollForConversion+0x128>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_PollForConversion+0x12a>
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_ADC_PollForConversion+0x19c>)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d008      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d002      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d104      	bne.n	8002dae <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e00c      	b.n	8002dc8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_ADC_PollForConversion+0x198>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d002      	beq.n	8002dbe <HAL_ADC_PollForConversion+0x15e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADC_PollForConversion+0x160>
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_ADC_PollForConversion+0x19c>)
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d104      	bne.n	8002dd8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e008      	b.n	8002dea <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	50040300 	.word	0x50040300
 8002df8:	50040100 	.word	0x50040100
 8002dfc:	50040000 	.word	0x50040000

08002e00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0a6      	sub	sp, #152	; 0x98
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x22>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e348      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x6b4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fcd3 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8329 	bne.w	80034aa <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d824      	bhi.n	8002eaa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	3b02      	subs	r3, #2
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d81b      	bhi.n	8002ea2 <HAL_ADC_ConfigChannel+0x86>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_ADC_ConfigChannel+0x54>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e89 	.word	0x08002e89
 8002e78:	08002e91 	.word	0x08002e91
 8002e7c:	08002e99 	.word	0x08002e99
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	220c      	movs	r2, #12
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	e011      	b.n	8002eac <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2212      	movs	r2, #18
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e00d      	b.n	8002eac <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2218      	movs	r2, #24
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e009      	b.n	8002eac <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2206      	movs	r2, #6
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002eaa:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f7ff fb82 	bl	80025c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fc97 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fca3 	bl	800281c <LL_ADC_INJ_IsConversionOngoing>
 8002ed6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 8148 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 8143 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff fb8a 	bl	8002614 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d00a      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f32:	f7ff fae5 	bl	8002500 <LL_ADC_SetOffset>
 8002f36:	e11d      	b.n	8003174 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb00 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x148>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff faf5 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	e012      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x16e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff faea 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x186>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e00a      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x19c>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d106      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fad1 	bl	800256c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fab7 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x1da>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff faac 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	e010      	b.n	8003018 <HAL_ADC_ConfigChannel+0x1fc>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff faa1 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x214>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	e00a      	b.n	8003046 <HAL_ADC_ConfigChannel+0x22a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800303e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	429a      	cmp	r2, r3
 8003048:	d106      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fa8a 	bl	800256c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fa70 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x268>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fa65 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	0e9b      	lsrs	r3, r3, #26
 800307e:	f003 021f 	and.w	r2, r3, #31
 8003082:	e010      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x28a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2102      	movs	r1, #2
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fa5a 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800309c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_ConfigChannel+0x2a2>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	e00a      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x2b8>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d106      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fa43 	bl	800256c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2103      	movs	r1, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fa29 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x2f6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fa1e 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	e010      	b.n	8003134 <HAL_ADC_ConfigChannel+0x318>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2103      	movs	r1, #3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fa13 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_ConfigChannel+0x330>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	e00a      	b.n	8003162 <HAL_ADC_ConfigChannel+0x346>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800315a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	429a      	cmp	r2, r3
 8003164:	d106      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	2103      	movs	r1, #3
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f9fc 	bl	800256c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fb15 	bl	80027a8 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 810c 	bne.w	800339e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	461a      	mov	r2, r3
 8003194:	f7ff fa66 	bl	8002664 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4aad      	ldr	r2, [pc, #692]	; (8003454 <HAL_ADC_ConfigChannel+0x638>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f040 80fd 	bne.w	800339e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x3b0>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0e9b      	lsrs	r3, r3, #26
 80031ba:	3301      	adds	r3, #1
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e012      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x3d6>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	bf94      	ite	ls
 80031ec:	2301      	movls	r3, #1
 80031ee:	2300      	movhi	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d064      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x3f6>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	3301      	adds	r3, #1
 800320a:	069b      	lsls	r3, r3, #26
 800320c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003210:	e00e      	b.n	8003230 <HAL_ADC_ConfigChannel+0x414>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x434>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	3301      	adds	r3, #1
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	e010      	b.n	8003272 <HAL_ADC_ConfigChannel+0x456>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x47c>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	e011      	b.n	80032bc <HAL_ADC_ConfigChannel+0x4a0>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032bc:	430b      	orrs	r3, r1
 80032be:	e069      	b.n	8003394 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x4c0>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	3301      	adds	r3, #1
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032da:	e00e      	b.n	80032fa <HAL_ADC_ConfigChannel+0x4de>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	61fb      	str	r3, [r7, #28]
  return result;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	069b      	lsls	r3, r3, #26
 80032f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_ADC_ConfigChannel+0x4fe>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	e010      	b.n	800333c <HAL_ADC_ConfigChannel+0x520>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
  return result;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x54c>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	3b1e      	subs	r3, #30
 8003360:	051b      	lsls	r3, r3, #20
 8003362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003366:	e014      	b.n	8003392 <HAL_ADC_ConfigChannel+0x576>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	60fb      	str	r3, [r7, #12]
  return result;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	3b1e      	subs	r3, #30
 800338c:	051b      	lsls	r3, r3, #20
 800338e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	430b      	orrs	r3, r1
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	6892      	ldr	r2, [r2, #8]
 8003398:	4619      	mov	r1, r3
 800339a:	f7ff f93b 	bl	8002614 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_ADC_ConfigChannel+0x63c>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 808c 	beq.w	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ac:	482b      	ldr	r0, [pc, #172]	; (800345c <HAL_ADC_ConfigChannel+0x640>)
 80033ae:	f7ff f899 	bl	80024e4 <LL_ADC_GetCommonPathInternalCh>
 80033b2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a29      	ldr	r2, [pc, #164]	; (8003460 <HAL_ADC_ConfigChannel+0x644>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d12b      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x5fc>
 80033c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d125      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_ADC_ConfigChannel+0x648>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x5c4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a23      	ldr	r2, [pc, #140]	; (8003468 <HAL_ADC_ConfigChannel+0x64c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d16e      	bne.n	80034be <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033e8:	4619      	mov	r1, r3
 80033ea:	481c      	ldr	r0, [pc, #112]	; (800345c <HAL_ADC_ConfigChannel+0x640>)
 80033ec:	f7ff f867 	bl	80024be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_ADC_ConfigChannel+0x650>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_ADC_ConfigChannel+0x654>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099a      	lsrs	r2, r3, #6
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003408:	e002      	b.n	8003410 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3b01      	subs	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003416:	e052      	b.n	80034be <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_ADC_ConfigChannel+0x658>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12a      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x65c>
 8003422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d124      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0c      	ldr	r2, [pc, #48]	; (8003464 <HAL_ADC_ConfigChannel+0x648>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x626>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_ADC_ConfigChannel+0x64c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d13f      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	4619      	mov	r1, r3
 800344c:	4803      	ldr	r0, [pc, #12]	; (800345c <HAL_ADC_ConfigChannel+0x640>)
 800344e:	f7ff f836 	bl	80024be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003452:	e036      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x6a6>
 8003454:	407f0000 	.word	0x407f0000
 8003458:	80080000 	.word	0x80080000
 800345c:	50040300 	.word	0x50040300
 8003460:	c7520000 	.word	0xc7520000
 8003464:	50040000 	.word	0x50040000
 8003468:	50040200 	.word	0x50040200
 800346c:	20000000 	.word	0x20000000
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_ADC_ConfigChannel+0x6bc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d120      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11a      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_ADC_ConfigChannel+0x6c0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d115      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800349c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a0:	4619      	mov	r1, r3
 80034a2:	480f      	ldr	r0, [pc, #60]	; (80034e0 <HAL_ADC_ConfigChannel+0x6c4>)
 80034a4:	f7ff f80b 	bl	80024be <LL_ADC_SetCommonPathInternalCh>
 80034a8:	e00c      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80034bc:	e002      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3798      	adds	r7, #152	; 0x98
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	80000001 	.word	0x80000001
 80034dc:	50040000 	.word	0x50040000
 80034e0:	50040300 	.word	0x50040300

080034e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f959 	bl	80027a8 <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d146      	bne.n	800358a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <ADC_Enable+0xb0>)
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e032      	b.n	800358c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff f928 	bl	8002780 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003530:	f7fe ff84 	bl	800243c <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003536:	e021      	b.n	800357c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff f933 	bl	80027a8 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f917 	bl	8002780 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003552:	f7fe ff73 	bl	800243c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d90d      	bls.n	800357c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e007      	b.n	800358c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d1d6      	bne.n	8003538 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	8000003f 	.word	0x8000003f

08003598 <LL_ADC_IsEnabled>:
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <LL_ADC_IsEnabled+0x18>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_ADC_IsEnabled+0x1a>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_REG_IsConversionOngoing>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b09f      	sub	sp, #124	; 0x7c
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e08f      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d102      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	e001      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e072      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ffbd 	bl	80035be <LL_ADC_REG_IsConversionOngoing>
 8003644:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ffb7 	bl	80035be <LL_ADC_REG_IsConversionOngoing>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d154      	bne.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003658:	2b00      	cmp	r3, #0
 800365a:	d151      	bne.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800365e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02c      	beq.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800367a:	035b      	lsls	r3, r3, #13
 800367c:	430b      	orrs	r3, r1
 800367e:	431a      	orrs	r2, r3
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003684:	4829      	ldr	r0, [pc, #164]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003686:	f7ff ff87 	bl	8003598 <LL_ADC_IsEnabled>
 800368a:	4604      	mov	r4, r0
 800368c:	4828      	ldr	r0, [pc, #160]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800368e:	f7ff ff83 	bl	8003598 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	431c      	orrs	r4, r3
 8003696:	4828      	ldr	r0, [pc, #160]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003698:	f7ff ff7e 	bl	8003598 <LL_ADC_IsEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	4323      	orrs	r3, r4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d137      	bne.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ac:	f023 030f 	bic.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6811      	ldr	r1, [r2, #0]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6892      	ldr	r2, [r2, #8]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	e028      	b.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ce:	4817      	ldr	r0, [pc, #92]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80036d0:	f7ff ff62 	bl	8003598 <LL_ADC_IsEnabled>
 80036d4:	4604      	mov	r4, r0
 80036d6:	4816      	ldr	r0, [pc, #88]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80036d8:	f7ff ff5e 	bl	8003598 <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	431c      	orrs	r4, r3
 80036e0:	4815      	ldr	r0, [pc, #84]	; (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036e2:	f7ff ff59 	bl	8003598 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4323      	orrs	r3, r4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d112      	bne.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036f6:	f023 030f 	bic.w	r3, r3, #15
 80036fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036fe:	e009      	b.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003712:	e000      	b.n	8003716 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003714:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800371e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003722:	4618      	mov	r0, r3
 8003724:	377c      	adds	r7, #124	; 0x7c
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	50040000 	.word	0x50040000
 8003730:	50040100 	.word	0x50040100
 8003734:	50040300 	.word	0x50040300
 8003738:	50040200 	.word	0x50040200

0800373c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <__NVIC_SetPriorityGrouping+0x44>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003758:	4013      	ands	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376e:	4a04      	ldr	r2, [pc, #16]	; (8003780 <__NVIC_SetPriorityGrouping+0x44>)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	60d3      	str	r3, [r2, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <__NVIC_GetPriorityGrouping+0x18>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	f003 0307 	and.w	r3, r3, #7
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	db0b      	blt.n	80037ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	f003 021f 	and.w	r2, r3, #31
 80037b8:	4907      	ldr	r1, [pc, #28]	; (80037d8 <__NVIC_EnableIRQ+0x38>)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2001      	movs	r0, #1
 80037c2:	fa00 f202 	lsl.w	r2, r0, r2
 80037c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
         );
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a8:	d301      	bcc.n	80038ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00f      	b.n	80038ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <SysTick_Config+0x40>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b6:	210f      	movs	r1, #15
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038bc:	f7ff ff8e 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SysTick_Config+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SysTick_Config+0x40>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff29 	bl	800373c <__NVIC_SetPriorityGrouping>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003904:	f7ff ff3e 	bl	8003784 <__NVIC_GetPriorityGrouping>
 8003908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff8e 	bl	8003830 <NVIC_EncodePriority>
 8003914:	4602      	mov	r2, r0
 8003916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff5d 	bl	80037dc <__NVIC_SetPriority>
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff31 	bl	80037a0 <__NVIC_EnableIRQ>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffa2 	bl	8003898 <SysTick_Config>
 8003954:	4603      	mov	r3, r0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	e17f      	b.n	8003c70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2101      	movs	r1, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8171 	beq.w	8003c6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d00b      	beq.n	80039a8 <HAL_GPIO_Init+0x48>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d007      	beq.n	80039a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800399c:	2b11      	cmp	r3, #17
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b12      	cmp	r3, #18
 80039a6:	d130      	bne.n	8003a0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039de:	2201      	movs	r2, #1
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 0201 	and.w	r2, r3, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d118      	bne.n	8003a48 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f003 0201 	and.w	r2, r3, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x128>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d123      	bne.n	8003ad0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80ac 	beq.w	8003c6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_GPIO_Init+0x330>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <HAL_GPIO_Init+0x330>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_GPIO_Init+0x330>)
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b2a:	4a5a      	ldr	r2, [pc, #360]	; (8003c94 <HAL_GPIO_Init+0x334>)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b54:	d025      	beq.n	8003ba2 <HAL_GPIO_Init+0x242>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <HAL_GPIO_Init+0x338>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_GPIO_Init+0x23e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_GPIO_Init+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x23a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_GPIO_Init+0x340>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x236>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4c      	ldr	r2, [pc, #304]	; (8003ca4 <HAL_GPIO_Init+0x344>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x232>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <HAL_GPIO_Init+0x348>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x22e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <HAL_GPIO_Init+0x34c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x22a>
 8003b86:	2306      	movs	r3, #6
 8003b88:	e00c      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e00a      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_Init+0x244>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	f002 0203 	and.w	r2, r2, #3
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	4093      	lsls	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bb4:	4937      	ldr	r1, [pc, #220]	; (8003c94 <HAL_GPIO_Init+0x334>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3302      	adds	r3, #2
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003be6:	4a32      	ldr	r2, [pc, #200]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003bec:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c10:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <HAL_GPIO_Init+0x350>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f47f ae78 	bne.w	8003970 <HAL_GPIO_Init+0x10>
  }
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40010000 	.word	0x40010000
 8003c98:	48000400 	.word	0x48000400
 8003c9c:	48000800 	.word	0x48000800
 8003ca0:	48000c00 	.word	0x48000c00
 8003ca4:	48001000 	.word	0x48001000
 8003ca8:	48001400 	.word	0x48001400
 8003cac:	48001800 	.word	0x48001800
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_PWREx_GetVoltageRange+0x18>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d130      	bne.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d038      	beq.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2232      	movs	r2, #50	; 0x32
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0c9b      	lsrs	r3, r3, #18
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d44:	e002      	b.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d58:	d102      	bne.n	8003d60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f2      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d110      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e00f      	b.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d007      	beq.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d88:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40007000 	.word	0x40007000
 8003da4:	20000000 	.word	0x20000000
 8003da8:	431bde83 	.word	0x431bde83

08003dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e3d4      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbe:	4ba1      	ldr	r3, [pc, #644]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc8:	4b9e      	ldr	r3, [pc, #632]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80e4 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4a>
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	f040 808b 	bne.w	8003f04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8087 	bne.w	8003f04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df6:	4b93      	ldr	r3, [pc, #588]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e3ac      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <HAL_RCC_OscConfig+0x7c>
 8003e1e:	4b89      	ldr	r3, [pc, #548]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_OscConfig+0x88>
 8003e28:	4b86      	ldr	r3, [pc, #536]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d223      	bcs.n	8003e80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd41 	bl	80048c4 <RCC_SetFlashLatencyFromMSIRange>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e38d      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4c:	4b7d      	ldr	r3, [pc, #500]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a7c      	ldr	r2, [pc, #496]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e52:	f043 0308 	orr.w	r3, r3, #8
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b7a      	ldr	r3, [pc, #488]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4977      	ldr	r1, [pc, #476]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	4972      	ldr	r1, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
 8003e7e:	e025      	b.n	8003ecc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6f      	ldr	r2, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e86:	f043 0308 	orr.w	r3, r3, #8
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	496a      	ldr	r1, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9e:	4b69      	ldr	r3, [pc, #420]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4965      	ldr	r1, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fd01 	bl	80048c4 <RCC_SetFlashLatencyFromMSIRange>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e34d      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ecc:	f000 fc36 	bl	800473c <HAL_RCC_GetSysClockFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	495a      	ldr	r1, [pc, #360]	; (8004048 <HAL_RCC_OscConfig+0x29c>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x2a0>)
 8003eea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <HAL_RCC_OscConfig+0x2a4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fa57 	bl	80023a4 <HAL_InitTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d052      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	e331      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d032      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4c      	ldr	r2, [pc, #304]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fa90 	bl	800243c <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f20:	f7fe fa8c 	bl	800243c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e31a      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f32:	4b44      	ldr	r3, [pc, #272]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3e:	4b41      	ldr	r3, [pc, #260]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a40      	ldr	r2, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f44:	f043 0308 	orr.w	r3, r3, #8
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	493b      	ldr	r1, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	4936      	ldr	r1, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
 8003f70:	e01a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a33      	ldr	r2, [pc, #204]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fa5d 	bl	800243c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f86:	f7fe fa59 	bl	800243c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e2e7      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x1da>
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d074      	beq.n	800409e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x21a>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d10e      	bne.n	8003fde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc6:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d064      	beq.n	800409c <HAL_RCC_OscConfig+0x2f0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d160      	bne.n	800409c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e2c4      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x24a>
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e01d      	b.n	8004032 <HAL_RCC_OscConfig+0x286>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x26e>
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8004006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x286>
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a06      	ldr	r2, [pc, #24]	; (8004044 <HAL_RCC_OscConfig+0x298>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004030:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fe f9ff 	bl	800243c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004040:	e011      	b.n	8004066 <HAL_RCC_OscConfig+0x2ba>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	080081d8 	.word	0x080081d8
 800404c:	20000000 	.word	0x20000000
 8004050:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f9f2 	bl	800243c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e280      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004066:	4baf      	ldr	r3, [pc, #700]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x2a8>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f9e2 	bl	800243c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe f9de 	bl	800243c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e26c      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408e:	4ba5      	ldr	r3, [pc, #660]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x2d0>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d060      	beq.n	800416c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x310>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d119      	bne.n	80040ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d116      	bne.n	80040ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040bc:	4b99      	ldr	r3, [pc, #612]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_OscConfig+0x328>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e249      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b93      	ldr	r3, [pc, #588]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4990      	ldr	r1, [pc, #576]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e8:	e040      	b.n	800416c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d023      	beq.n	800413a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f2:	4b8c      	ldr	r3, [pc, #560]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fe f99d 	bl	800243c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004106:	f7fe f999 	bl	800243c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e227      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	4b82      	ldr	r3, [pc, #520]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004124:	4b7f      	ldr	r3, [pc, #508]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	497c      	ldr	r1, [pc, #496]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	e018      	b.n	800416c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413a:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a79      	ldr	r2, [pc, #484]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe f979 	bl	800243c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414e:	f7fe f975 	bl	800243c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e203      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004160:	4b70      	ldr	r3, [pc, #448]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01c      	beq.n	80041ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	4a67      	ldr	r2, [pc, #412]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fe f954 	bl	800243c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004198:	f7fe f950 	bl	800243c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1de      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ef      	beq.n	8004198 <HAL_RCC_OscConfig+0x3ec>
 80041b8:	e01b      	b.n	80041f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ba:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	4a58      	ldr	r2, [pc, #352]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fe f937 	bl	800243c <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d2:	f7fe f933 	bl	800243c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1c1      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e4:	4b4f      	ldr	r3, [pc, #316]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ef      	bne.n	80041d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80a6 	beq.w	800434c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004204:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	4b44      	ldr	r3, [pc, #272]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	4a43      	ldr	r2, [pc, #268]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	; 0x58
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004228:	2301      	movs	r3, #1
 800422a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_RCC_OscConfig+0x57c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d118      	bne.n	800426a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004238:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x57c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_RCC_OscConfig+0x57c>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004244:	f7fe f8fa 	bl	800243c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424c:	f7fe f8f6 	bl	800243c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e184      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425e:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_RCC_OscConfig+0x57c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d108      	bne.n	8004284 <HAL_RCC_OscConfig+0x4d8>
 8004272:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004282:	e024      	b.n	80042ce <HAL_RCC_OscConfig+0x522>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d110      	bne.n	80042ae <HAL_RCC_OscConfig+0x502>
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	4a24      	ldr	r2, [pc, #144]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	4a20      	ldr	r2, [pc, #128]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ac:	e00f      	b.n	80042ce <HAL_RCC_OscConfig+0x522>
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042c6:	f023 0304 	bic.w	r3, r3, #4
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe f8b1 	bl	800243c <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe f8ad 	bl	800243c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e139      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_OscConfig+0x578>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ed      	beq.n	80042de <HAL_RCC_OscConfig+0x532>
 8004302:	e01a      	b.n	800433a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fe f89a 	bl	800243c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800430a:	e00f      	b.n	800432c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fe f896 	bl	800243c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d906      	bls.n	800432c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e122      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432c:	4b90      	ldr	r3, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e8      	bne.n	800430c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433a:	7ffb      	ldrb	r3, [r7, #31]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4a8a      	ldr	r2, [pc, #552]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8108 	beq.w	8004566 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	2b02      	cmp	r3, #2
 800435c:	f040 80d0 	bne.w	8004500 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004360:	4b83      	ldr	r3, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f003 0203 	and.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	429a      	cmp	r2, r3
 8004372:	d130      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	3b01      	subs	r3, #1
 8004380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d127      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d11f      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a0:	2a07      	cmp	r2, #7
 80043a2:	bf14      	ite	ne
 80043a4:	2201      	movne	r2, #1
 80043a6:	2200      	moveq	r2, #0
 80043a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	3b01      	subs	r3, #1
 80043bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d06e      	beq.n	80044b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d069      	beq.n	80044b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043dc:	4b64      	ldr	r3, [pc, #400]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0b7      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004402:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004404:	f7fe f81a 	bl	800243c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fe f816 	bl	800243c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0a4      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441e:	4b54      	ldr	r3, [pc, #336]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442a:	4b51      	ldr	r3, [pc, #324]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCC_OscConfig+0x7c8>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800443a:	3a01      	subs	r2, #1
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004444:	0212      	lsls	r2, r2, #8
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800444c:	0852      	lsrs	r2, r2, #1
 800444e:	3a01      	subs	r2, #1
 8004450:	0552      	lsls	r2, r2, #21
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004458:	0852      	lsrs	r2, r2, #1
 800445a:	3a01      	subs	r2, #1
 800445c:	0652      	lsls	r2, r2, #25
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004464:	0912      	lsrs	r2, r2, #4
 8004466:	0452      	lsls	r2, r2, #17
 8004468:	430a      	orrs	r2, r1
 800446a:	4941      	ldr	r1, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004470:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3e      	ldr	r2, [pc, #248]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800447c:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004486:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004488:	f7fd ffd8 	bl	800243c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd ffd4 	bl	800243c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e062      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ae:	e05a      	b.n	8004566 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e059      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b4:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d152      	bne.n	8004566 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2a      	ldr	r2, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d8:	f7fd ffb0 	bl	800243c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd ffac 	bl	800243c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e03a      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x734>
 80044fe:	e032      	b.n	8004566 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d02d      	beq.n	8004562 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a19      	ldr	r2, [pc, #100]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800450c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004510:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004524:	f023 0303 	bic.w	r3, r3, #3
 8004528:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004530:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd ff7f 	bl	800243c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7fd ff7b 	bl	800243c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e009      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_OscConfig+0x7c4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x796>
 8004560:	e001      	b.n	8004566 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	f99d808c 	.word	0xf99d808c

08004578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0c8      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d910      	bls.n	80045bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 0207 	bic.w	r2, r3, #7
 80045a2:	4961      	ldr	r1, [pc, #388]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0b0      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d04c      	beq.n	8004662 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d0:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d121      	bne.n	8004620 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e09e      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d115      	bne.n	8004620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e092      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e086      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004610:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e07e      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 0203 	bic.w	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	493f      	ldr	r1, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fd ff03 	bl	800243c <HAL_GetTick>
 8004636:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004638:	e00a      	b.n	8004650 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463a:	f7fd feff 	bl	800243c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e066      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004650:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 020c 	and.w	r2, r3, #12
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	429a      	cmp	r2, r3
 8004660:	d1eb      	bne.n	800463a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	492c      	ldr	r1, [pc, #176]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d210      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 0207 	bic.w	r2, r3, #7
 8004696:	4924      	ldr	r1, [pc, #144]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e036      	b.n	800471e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4918      	ldr	r1, [pc, #96]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4910      	ldr	r1, [pc, #64]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ee:	f000 f825 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_RCC_ClockConfig+0x1b4>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490c      	ldr	r1, [pc, #48]	; (8004730 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd fe46 	bl	80023a4 <HAL_InitTick>
 8004718:	4603      	mov	r3, r0
 800471a:	72fb      	strb	r3, [r7, #11]

  return status;
 800471c:	7afb      	ldrb	r3, [r7, #11]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	080081d8 	.word	0x080081d8
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474a:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004754:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d121      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d11e      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004770:	4b34      	ldr	r3, [pc, #208]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800477c:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 800477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e005      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800478c:	4b2d      	ldr	r3, [pc, #180]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004798:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10d      	bne.n	80047c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <HAL_RCC_GetSysClockFreq+0x110>)
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	e004      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_RCC_GetSysClockFreq+0x114>)
 80047c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d134      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d003      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0xac>
 80047e0:	e005      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_GetSysClockFreq+0x110>)
 80047e4:	617b      	str	r3, [r7, #20]
      break;
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ea:	617b      	str	r3, [r7, #20]
      break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	617b      	str	r3, [r7, #20]
      break;
 80047f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	3301      	adds	r3, #1
 8004800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	fb02 f203 	mul.w	r2, r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0e5b      	lsrs	r3, r3, #25
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	3301      	adds	r3, #1
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004834:	69bb      	ldr	r3, [r7, #24]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3724      	adds	r7, #36	; 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	080081f0 	.word	0x080081f0
 800484c:	00f42400 	.word	0x00f42400
 8004850:	007a1200 	.word	0x007a1200

08004854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004870:	f7ff fff0 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	080081e8 	.word	0x080081e8

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800489c:	f7ff ffda 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0adb      	lsrs	r3, r3, #11
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4904      	ldr	r1, [pc, #16]	; (80048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	080081e8 	.word	0x080081e8

080048c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048d0:	4b2a      	ldr	r3, [pc, #168]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048dc:	f7ff fa02 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 80048e0:	6178      	str	r0, [r7, #20]
 80048e2:	e014      	b.n	800490e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	4a24      	ldr	r2, [pc, #144]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6593      	str	r3, [r2, #88]	; 0x58
 80048f0:	4b22      	ldr	r3, [pc, #136]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048fc:	f7ff f9f2 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 8004900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	4a1d      	ldr	r2, [pc, #116]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004914:	d10b      	bne.n	800492e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d919      	bls.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2ba0      	cmp	r3, #160	; 0xa0
 8004920:	d902      	bls.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004922:	2302      	movs	r3, #2
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e013      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004928:	2301      	movs	r3, #1
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e010      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d902      	bls.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004934:	2303      	movs	r3, #3
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e00a      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d102      	bne.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004940:	2302      	movs	r3, #2
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e004      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d101      	bne.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800494c:	2301      	movs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 0207 	bic.w	r2, r3, #7
 8004958:	4909      	ldr	r1, [pc, #36]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	40022000 	.word	0x40022000

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800498c:	2300      	movs	r3, #0
 800498e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004990:	2300      	movs	r3, #0
 8004992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	2b00      	cmp	r3, #0
 800499e:	d041      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049a8:	d02a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ae:	d824      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b4:	d008      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ba:	d81e      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c4:	d010      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049c6:	e018      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049c8:	4b86      	ldr	r3, [pc, #536]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a85      	ldr	r2, [pc, #532]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d4:	e015      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fabb 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e6:	e00c      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3320      	adds	r3, #32
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fba6 	bl	8005140 <RCCEx_PLLSAI2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f8:	e003      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	74fb      	strb	r3, [r7, #19]
      break;
 80049fe:	e000      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a08:	4b76      	ldr	r3, [pc, #472]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a16:	4973      	ldr	r1, [pc, #460]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d041      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a38:	d02a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a3e:	d824      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4a:	d81e      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a54:	d010      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a56:	e018      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a58:	4b62      	ldr	r3, [pc, #392]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a64:	e015      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fa73 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a76:	e00c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3320      	adds	r3, #32
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fb5e 	bl	8005140 <RCCEx_PLLSAI2_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a98:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa6:	494f      	ldr	r1, [pc, #316]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aae:	e001      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a0 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004adc:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae8:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af4:	2301      	movs	r3, #1
 8004af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b04:	f7fd fc9a 	bl	800243c <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b0a:	e009      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0c:	f7fd fc96 	bl	800243c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b1e:	e005      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ef      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d15c      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01f      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d019      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b50:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fc55 	bl	800243c <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b94:	e00b      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fd fc51 	bl	800243c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d902      	bls.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	74fb      	strb	r3, [r7, #19]
            break;
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0ec      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd2:	4904      	ldr	r1, [pc, #16]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bda:	e009      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	74bb      	strb	r3, [r7, #18]
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf0:	7c7b      	ldrb	r3, [r7, #17]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d105      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf6:	4b9e      	ldr	r3, [pc, #632]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	4a9d      	ldr	r2, [pc, #628]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c0e:	4b98      	ldr	r3, [pc, #608]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f023 0203 	bic.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	4994      	ldr	r1, [pc, #592]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c30:	4b8f      	ldr	r3, [pc, #572]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f023 020c 	bic.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	498c      	ldr	r1, [pc, #560]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c52:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4983      	ldr	r1, [pc, #524]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c74:	4b7e      	ldr	r3, [pc, #504]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	497b      	ldr	r1, [pc, #492]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca4:	4972      	ldr	r1, [pc, #456]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cb8:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	496a      	ldr	r1, [pc, #424]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cda:	4b65      	ldr	r3, [pc, #404]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	4961      	ldr	r1, [pc, #388]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cfc:	4b5c      	ldr	r3, [pc, #368]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	4959      	ldr	r1, [pc, #356]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d1e:	4b54      	ldr	r3, [pc, #336]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	4950      	ldr	r1, [pc, #320]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	4948      	ldr	r1, [pc, #288]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	493f      	ldr	r1, [pc, #252]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d028      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d84:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	4937      	ldr	r1, [pc, #220]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004da2:	d106      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da4:	4b32      	ldr	r3, [pc, #200]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a31      	ldr	r2, [pc, #196]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dae:	60d3      	str	r3, [r2, #12]
 8004db0:	e011      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dba:	d10c      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f8c8 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dd2:	7cfb      	ldrb	r3, [r7, #19]
 8004dd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d028      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	491f      	ldr	r1, [pc, #124]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0c:	60d3      	str	r3, [r2, #12]
 8004e0e:	e011      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f899 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02b      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	4908      	ldr	r1, [pc, #32]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a02      	ldr	r2, [pc, #8]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
 8004e6c:	e014      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f867 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e94:	7cfb      	ldrb	r3, [r7, #19]
 8004e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d02f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea4:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb2:	4928      	ldr	r1, [pc, #160]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f844 	bl	8004f58 <RCCEx_PLLSAI1_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	74bb      	strb	r3, [r7, #18]
 8004ede:	e011      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3320      	adds	r3, #32
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f925 	bl	8005140 <RCCEx_PLLSAI2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1e:	490d      	ldr	r1, [pc, #52]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f42:	4904      	ldr	r1, [pc, #16]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000

08004f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f66:	4b75      	ldr	r3, [pc, #468]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f72:	4b72      	ldr	r3, [pc, #456]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0203 	and.w	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10d      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
       ||
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
       ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d047      	beq.n	800502e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e044      	b.n	800502e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d018      	beq.n	8004fde <RCCEx_PLLSAI1_Config+0x86>
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d825      	bhi.n	8004ffc <RCCEx_PLLSAI1_Config+0xa4>
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d002      	beq.n	8004fba <RCCEx_PLLSAI1_Config+0x62>
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d009      	beq.n	8004fcc <RCCEx_PLLSAI1_Config+0x74>
 8004fb8:	e020      	b.n	8004ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fba:	4b60      	ldr	r3, [pc, #384]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11d      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fca:	e01a      	b.n	8005002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fcc:	4b5b      	ldr	r3, [pc, #364]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d116      	bne.n	8005006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fdc:	e013      	b.n	8005006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fde:	4b57      	ldr	r3, [pc, #348]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10f      	bne.n	800500a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ffa:	e006      	b.n	800500a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e004      	b.n	800500c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500a:	bf00      	nop
    }

    if(status == HAL_OK)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10d      	bne.n	800502e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	3b01      	subs	r3, #1
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	430b      	orrs	r3, r1
 8005028:	4944      	ldr	r1, [pc, #272]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d17d      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a40      	ldr	r2, [pc, #256]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fd f9fc 	bl	800243c <HAL_GetTick>
 8005044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005046:	e009      	b.n	800505c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005048:	f7fd f9f8 	bl	800243c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d902      	bls.n	800505c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	73fb      	strb	r3, [r7, #15]
        break;
 800505a:	e005      	b.n	8005068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505c:	4b37      	ldr	r3, [pc, #220]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ef      	bne.n	8005048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d160      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d111      	bne.n	8005098 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005074:	4b31      	ldr	r3, [pc, #196]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	0211      	lsls	r1, r2, #8
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68d2      	ldr	r2, [r2, #12]
 800508a:	0912      	lsrs	r2, r2, #4
 800508c:	0452      	lsls	r2, r2, #17
 800508e:	430a      	orrs	r2, r1
 8005090:	492a      	ldr	r1, [pc, #168]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
 8005096:	e027      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d112      	bne.n	80050c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	0211      	lsls	r1, r2, #8
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6912      	ldr	r2, [r2, #16]
 80050b4:	0852      	lsrs	r2, r2, #1
 80050b6:	3a01      	subs	r2, #1
 80050b8:	0552      	lsls	r2, r2, #21
 80050ba:	430a      	orrs	r2, r1
 80050bc:	491f      	ldr	r1, [pc, #124]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]
 80050c2:	e011      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
 80050d4:	0211      	lsls	r1, r2, #8
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6952      	ldr	r2, [r2, #20]
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0652      	lsls	r2, r2, #25
 80050e0:	430a      	orrs	r2, r1
 80050e2:	4916      	ldr	r1, [pc, #88]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fd f9a2 	bl	800243c <HAL_GetTick>
 80050f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fa:	e009      	b.n	8005110 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050fc:	f7fd f99e 	bl	800243c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d902      	bls.n	8005110 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
          break;
 800510e:	e005      	b.n	800511c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4904      	ldr	r1, [pc, #16]	; (800513c <RCCEx_PLLSAI1_Config+0x1e4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000

08005140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
       ||
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005172:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
       ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d047      	beq.n	8005216 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	e044      	b.n	8005216 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d018      	beq.n	80051c6 <RCCEx_PLLSAI2_Config+0x86>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d825      	bhi.n	80051e4 <RCCEx_PLLSAI2_Config+0xa4>
 8005198:	2b01      	cmp	r3, #1
 800519a:	d002      	beq.n	80051a2 <RCCEx_PLLSAI2_Config+0x62>
 800519c:	2b02      	cmp	r3, #2
 800519e:	d009      	beq.n	80051b4 <RCCEx_PLLSAI2_Config+0x74>
 80051a0:	e020      	b.n	80051e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a2:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b2:	e01a      	b.n	80051ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051b4:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d116      	bne.n	80051ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c4:	e013      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051c6:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051d2:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051e2:	e006      	b.n	80051f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e004      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051fa:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	430b      	orrs	r3, r1
 8005210:	4939      	ldr	r1, [pc, #228]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d167      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005228:	f7fd f908 	bl	800243c <HAL_GetTick>
 800522c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800522e:	e009      	b.n	8005244 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005230:	f7fd f904 	bl	800243c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d902      	bls.n	8005244 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	73fb      	strb	r3, [r7, #15]
        break;
 8005242:	e005      	b.n	8005250 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005244:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ef      	bne.n	8005230 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14a      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d111      	bne.n	8005280 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6892      	ldr	r2, [r2, #8]
 800526c:	0211      	lsls	r1, r2, #8
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68d2      	ldr	r2, [r2, #12]
 8005272:	0912      	lsrs	r2, r2, #4
 8005274:	0452      	lsls	r2, r2, #17
 8005276:	430a      	orrs	r2, r1
 8005278:	491f      	ldr	r1, [pc, #124]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	614b      	str	r3, [r1, #20]
 800527e:	e011      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005280:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6892      	ldr	r2, [r2, #8]
 8005290:	0211      	lsls	r1, r2, #8
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6912      	ldr	r2, [r2, #16]
 8005296:	0852      	lsrs	r2, r2, #1
 8005298:	3a01      	subs	r2, #1
 800529a:	0652      	lsls	r2, r2, #25
 800529c:	430a      	orrs	r2, r1
 800529e:	4916      	ldr	r1, [pc, #88]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052a4:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd f8c4 	bl	800243c <HAL_GetTick>
 80052b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052b6:	e009      	b.n	80052cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052b8:	f7fd f8c0 	bl	800243c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d902      	bls.n	80052cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	73fb      	strb	r3, [r7, #15]
          break;
 80052ca:	e005      	b.n	80052d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ef      	beq.n	80052b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4904      	ldr	r1, [pc, #16]	; (80052f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e01d      	b.n	800534a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fea8 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fc2a 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_TIM_Base_Start_IT+0x50>)
 8005374:	4013      	ands	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b06      	cmp	r3, #6
 800537c:	d00b      	beq.n	8005396 <HAL_TIM_Base_Start_IT+0x42>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d007      	beq.n	8005396 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	00010007 	.word	0x00010007

080053a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e01d      	b.n	80053f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f815 	bl	80053fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 fbd4 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f001 f84e 	bl	80064c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_TIM_PWM_Start+0x98>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <HAL_TIM_PWM_Start+0x4a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_TIM_PWM_Start+0x9c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00e      	beq.n	800545e <HAL_TIM_PWM_Start+0x4a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIM_PWM_Start+0xa0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_TIM_PWM_Start+0x4a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_TIM_PWM_Start+0xa4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_TIM_PWM_Start+0x4a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIM_PWM_Start+0xa8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <HAL_TIM_PWM_Start+0x4e>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_TIM_PWM_Start+0x50>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_TIM_PWM_Start+0xac>)
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d00b      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x8e>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d007      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	00010007 	.word	0x00010007

080054c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d122      	bne.n	8005520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d11b      	bne.n	8005520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0202 	mvn.w	r2, #2
 80054f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb26 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb18 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb29 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0204 	mvn.w	r2, #4
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fafc 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 faee 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 faff 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0208 	mvn.w	r2, #8
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2204      	movs	r2, #4
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fad2 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fac4 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fad5 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0210 	mvn.w	r2, #16
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2208      	movs	r2, #8
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 faa8 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa9a 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 faab 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10e      	bne.n	8005648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d107      	bne.n	8005648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0201 	mvn.w	r2, #1
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fb18 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d10e      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d107      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 f890 	bl	8006794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	d10e      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d107      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f883 	bl	80067a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d10e      	bne.n	80056ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d107      	bne.n	80056ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa59 	bl	8005b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d10e      	bne.n	80056fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d107      	bne.n	80056fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f06f 0220 	mvn.w	r2, #32
 80056f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f843 	bl	8006780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800571a:	2302      	movs	r3, #2
 800571c:	e105      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x226>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b14      	cmp	r3, #20
 8005732:	f200 80f0 	bhi.w	8005916 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005791 	.word	0x08005791
 8005740:	08005917 	.word	0x08005917
 8005744:	08005917 	.word	0x08005917
 8005748:	08005917 	.word	0x08005917
 800574c:	080057d1 	.word	0x080057d1
 8005750:	08005917 	.word	0x08005917
 8005754:	08005917 	.word	0x08005917
 8005758:	08005917 	.word	0x08005917
 800575c:	08005813 	.word	0x08005813
 8005760:	08005917 	.word	0x08005917
 8005764:	08005917 	.word	0x08005917
 8005768:	08005917 	.word	0x08005917
 800576c:	08005853 	.word	0x08005853
 8005770:	08005917 	.word	0x08005917
 8005774:	08005917 	.word	0x08005917
 8005778:	08005917 	.word	0x08005917
 800577c:	08005895 	.word	0x08005895
 8005780:	08005917 	.word	0x08005917
 8005784:	08005917 	.word	0x08005917
 8005788:	08005917 	.word	0x08005917
 800578c:	080058d5 	.word	0x080058d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fa96 	bl	8005cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
      break;
 80057ce:	e0a3      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fb06 	bl	8005de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
      break;
 8005810:	e082      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fb6f 	bl	8005efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0204 	bic.w	r2, r2, #4
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	61da      	str	r2, [r3, #28]
      break;
 8005850:	e062      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbd7 	bl	800600c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69d9      	ldr	r1, [r3, #28]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	61da      	str	r2, [r3, #28]
      break;
 8005892:	e041      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fc20 	bl	80060e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058d2:	e021      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc64 	bl	80061a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005914:	e000      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005916:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop

08005934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIM_ConfigClockSource+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e0b5      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x184>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800596e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d03e      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xd4>
 800598a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598e:	f200 8087 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	f000 8085 	beq.w	8005aa4 <HAL_TIM_ConfigClockSource+0x170>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d87f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d01a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xa6>
 80059a4:	2b70      	cmp	r3, #112	; 0x70
 80059a6:	d87b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d050      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x11a>
 80059ac:	2b60      	cmp	r3, #96	; 0x60
 80059ae:	d877      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d03c      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0xfa>
 80059b4:	2b50      	cmp	r3, #80	; 0x50
 80059b6:	d873      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d058      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x13a>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d86f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d064      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d86b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d060      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d867      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d05a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059d8:	e062      	b.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f000 fd4d 	bl	8006488 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e04e      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6899      	ldr	r1, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f000 fd36 	bl	8006488 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2a:	609a      	str	r2, [r3, #8]
      break;
 8005a2c:	e03b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f000 fcaa 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2150      	movs	r1, #80	; 0x50
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fd03 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e02b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f000 fcc9 	bl	80063f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2160      	movs	r1, #96	; 0x60
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fcf3 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e01b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 fc8a 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fce3 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e00b      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fcda 	bl	8006452 <TIM_ITRx_SetConfig>
      break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e031      	b.n	8005b3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fbc2 	bl	8006274 <TIM_SlaveTimer_SetConfig>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e018      	b.n	8005b3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01f      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d01b      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d017      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00f      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d108      	bne.n	8005c40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	615a      	str	r2, [r3, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800

08005cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 0302 	bic.w	r3, r3, #2
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	; (8005dd4 <TIM_OC1_SetConfig+0x10c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <TIM_OC1_SetConfig+0x80>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a2b      	ldr	r2, [pc, #172]	; (8005dd8 <TIM_OC1_SetConfig+0x110>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_OC1_SetConfig+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <TIM_OC1_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_OC1_SetConfig+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <TIM_OC1_SetConfig+0x118>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC1_SetConfig+0x80>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_OC1_SetConfig+0x11c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10c      	bne.n	8005d62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f023 0308 	bic.w	r3, r3, #8
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <TIM_OC1_SetConfig+0x10c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00f      	beq.n	8005d8a <TIM_OC1_SetConfig+0xc2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <TIM_OC1_SetConfig+0x110>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00b      	beq.n	8005d8a <TIM_OC1_SetConfig+0xc2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <TIM_OC1_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d007      	beq.n	8005d8a <TIM_OC1_SetConfig+0xc2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <TIM_OC1_SetConfig+0x118>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d003      	beq.n	8005d8a <TIM_OC1_SetConfig+0xc2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC1_SetConfig+0x11c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d111      	bne.n	8005dae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800

08005de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0210 	bic.w	r2, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <TIM_OC2_SetConfig+0x100>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC2_SetConfig+0x6c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a27      	ldr	r2, [pc, #156]	; (8005eec <TIM_OC2_SetConfig+0x104>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10d      	bne.n	8005e70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <TIM_OC2_SetConfig+0x100>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00f      	beq.n	8005e98 <TIM_OC2_SetConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC2_SetConfig+0x104>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_OC2_SetConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <TIM_OC2_SetConfig+0x108>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_OC2_SetConfig+0xb0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <TIM_OC2_SetConfig+0x10c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC2_SetConfig+0xb0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <TIM_OC2_SetConfig+0x110>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d113      	bne.n	8005ec0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <TIM_OC3_SetConfig+0xfc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0x6a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <TIM_OC3_SetConfig+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10d      	bne.n	8005f82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <TIM_OC3_SetConfig+0xfc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_OC3_SetConfig+0xae>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <TIM_OC3_SetConfig+0x100>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_OC3_SetConfig+0xae>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <TIM_OC3_SetConfig+0x104>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_OC3_SetConfig+0xae>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a19      	ldr	r2, [pc, #100]	; (8006004 <TIM_OC3_SetConfig+0x108>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC3_SetConfig+0xae>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a18      	ldr	r2, [pc, #96]	; (8006008 <TIM_OC3_SetConfig+0x10c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d113      	bne.n	8005fd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800

0800600c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_OC4_SetConfig+0xc0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_OC4_SetConfig+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC4_SetConfig+0xc4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_OC4_SetConfig+0x84>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <TIM_OC4_SetConfig+0xc8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC4_SetConfig+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <TIM_OC4_SetConfig+0xcc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC4_SetConfig+0x84>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a14      	ldr	r2, [pc, #80]	; (80060dc <TIM_OC4_SetConfig+0xd0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006124:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <TIM_OC5_SetConfig+0xb4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00f      	beq.n	800615a <TIM_OC5_SetConfig+0x7a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a16      	ldr	r2, [pc, #88]	; (8006198 <TIM_OC5_SetConfig+0xb8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_OC5_SetConfig+0x7a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <TIM_OC5_SetConfig+0xbc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_OC5_SetConfig+0x7a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <TIM_OC5_SetConfig+0xc0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_OC5_SetConfig+0x7a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <TIM_OC5_SetConfig+0xc4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d109      	bne.n	800616e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006160:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40013400 	.word	0x40013400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400
 80061a4:	40014800 	.word	0x40014800

080061a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	051b      	lsls	r3, r3, #20
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <TIM_OC6_SetConfig+0xb8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00f      	beq.n	8006224 <TIM_OC6_SetConfig+0x7c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a17      	ldr	r2, [pc, #92]	; (8006264 <TIM_OC6_SetConfig+0xbc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_OC6_SetConfig+0x7c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a16      	ldr	r2, [pc, #88]	; (8006268 <TIM_OC6_SetConfig+0xc0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_OC6_SetConfig+0x7c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a15      	ldr	r2, [pc, #84]	; (800626c <TIM_OC6_SetConfig+0xc4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC6_SetConfig+0x7c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a14      	ldr	r2, [pc, #80]	; (8006270 <TIM_OC6_SetConfig+0xc8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d109      	bne.n	8006238 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40013400 	.word	0x40013400
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800

08006274 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b70      	cmp	r3, #112	; 0x70
 80062bc:	d01a      	beq.n	80062f4 <TIM_SlaveTimer_SetConfig+0x80>
 80062be:	2b70      	cmp	r3, #112	; 0x70
 80062c0:	d860      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062c2:	2b60      	cmp	r3, #96	; 0x60
 80062c4:	d054      	beq.n	8006370 <TIM_SlaveTimer_SetConfig+0xfc>
 80062c6:	2b60      	cmp	r3, #96	; 0x60
 80062c8:	d85c      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062ca:	2b50      	cmp	r3, #80	; 0x50
 80062cc:	d046      	beq.n	800635c <TIM_SlaveTimer_SetConfig+0xe8>
 80062ce:	2b50      	cmp	r3, #80	; 0x50
 80062d0:	d858      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d019      	beq.n	800630a <TIM_SlaveTimer_SetConfig+0x96>
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d854      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062da:	2b30      	cmp	r3, #48	; 0x30
 80062dc:	d054      	beq.n	8006388 <TIM_SlaveTimer_SetConfig+0x114>
 80062de:	2b30      	cmp	r3, #48	; 0x30
 80062e0:	d850      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d050      	beq.n	8006388 <TIM_SlaveTimer_SetConfig+0x114>
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d84c      	bhi.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04c      	beq.n	8006388 <TIM_SlaveTimer_SetConfig+0x114>
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d04a      	beq.n	8006388 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80062f2:	e047      	b.n	8006384 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68d9      	ldr	r1, [r3, #12]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f000 f8c0 	bl	8006488 <TIM_ETR_SetConfig>
      break;
 8006308:	e03f      	b.n	800638a <TIM_SlaveTimer_SetConfig+0x116>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b05      	cmp	r3, #5
 8006310:	d101      	bne.n	8006316 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e03a      	b.n	800638c <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a1a      	ldr	r2, [r3, #32]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
      break;
 800635a:	e016      	b.n	800638a <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6899      	ldr	r1, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	461a      	mov	r2, r3
 800636a:	f000 f813 	bl	8006394 <TIM_TI1_ConfigInputStage>
      break;
 800636e:	e00c      	b.n	800638a <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	461a      	mov	r2, r3
 800637e:	f000 f838 	bl	80063f2 <TIM_TI2_ConfigInputStage>
      break;
 8006382:	e002      	b.n	800638a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006388:	bf00      	nop
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0201 	bic.w	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 030a 	bic.w	r3, r3, #10
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b087      	sub	sp, #28
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f023 0210 	bic.w	r2, r3, #16
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800641c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800642e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	f043 0307 	orr.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2201      	movs	r2, #1
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	431a      	orrs	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2204      	movs	r2, #4
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f948 	bl	80067bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800653a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_TIMEx_PWMN_Start+0x5c>)
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b06      	cmp	r3, #6
 800654c:	d00b      	beq.n	8006566 <HAL_TIMEx_PWMN_Start+0x52>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006554:	d007      	beq.n	8006566 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	00010007 	.word	0x00010007

08006574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006588:	2302      	movs	r3, #2
 800658a:	e068      	b.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2e      	ldr	r2, [pc, #184]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d108      	bne.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fe:	d018      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10c      	bne.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4313      	orrs	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40013400 	.word	0x40013400
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40014000 	.word	0x40014000

08006684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e065      	b.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a16      	ldr	r2, [pc, #88]	; (8006778 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a14      	ldr	r2, [pc, #80]	; (800677c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d115      	bne.n	800675a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	051b      	lsls	r3, r3, #20
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400

08006780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2204      	movs	r2, #4
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	fa01 f303 	lsl.w	r3, r1, r3
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e040      	b.n	800689a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fb fcbd 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2224      	movs	r2, #36	; 0x24
 8006832:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f82d 	bl	80068a4 <UART_SetConfig>
 800684a:	4603      	mov	r3, r0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e022      	b.n	800689a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fba3 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006870:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006880:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fc2a 	bl	80070ec <UART_CheckIdleState>
 8006898:	4603      	mov	r3, r0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a8:	b08c      	sub	sp, #48	; 0x30
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4bb9      	ldr	r3, [pc, #740]	; (8006bc0 <UART_SetConfig+0x31c>)
 80068dc:	4013      	ands	r3, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4aae      	ldr	r2, [pc, #696]	; (8006bc4 <UART_SetConfig+0x320>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	4313      	orrs	r3, r2
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4aa5      	ldr	r2, [pc, #660]	; (8006bc8 <UART_SetConfig+0x324>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d126      	bne.n	8006984 <UART_SetConfig+0xe0>
 8006936:	4ba5      	ldr	r3, [pc, #660]	; (8006bcc <UART_SetConfig+0x328>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0xd8>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xa8>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006965 	.word	0x08006965
 8006958:	08006975 	.word	0x08006975
 800695c:	2301      	movs	r3, #1
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006962:	e106      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696a:	e102      	b.n	8006b72 <UART_SetConfig+0x2ce>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006972:	e0fe      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800697a:	e0fa      	b.n	8006b72 <UART_SetConfig+0x2ce>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006982:	e0f6      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a91      	ldr	r2, [pc, #580]	; (8006bd0 <UART_SetConfig+0x32c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d138      	bne.n	8006a00 <UART_SetConfig+0x15c>
 800698e:	4b8f      	ldr	r3, [pc, #572]	; (8006bcc <UART_SetConfig+0x328>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d82d      	bhi.n	80069f8 <UART_SetConfig+0x154>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0x100>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	080069f9 	.word	0x080069f9
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	080069f9 	.word	0x080069f9
 80069bc:	080069f9 	.word	0x080069f9
 80069c0:	080069f9 	.word	0x080069f9
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069de:	e0c8      	b.n	8006b72 <UART_SetConfig+0x2ce>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e6:	e0c4      	b.n	8006b72 <UART_SetConfig+0x2ce>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e0c0      	b.n	8006b72 <UART_SetConfig+0x2ce>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e0bc      	b.n	8006b72 <UART_SetConfig+0x2ce>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e0b8      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a73      	ldr	r2, [pc, #460]	; (8006bd4 <UART_SetConfig+0x330>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d125      	bne.n	8006a56 <UART_SetConfig+0x1b2>
 8006a0a:	4b70      	ldr	r3, [pc, #448]	; (8006bcc <UART_SetConfig+0x328>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d016      	beq.n	8006a46 <UART_SetConfig+0x1a2>
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d818      	bhi.n	8006a4e <UART_SetConfig+0x1aa>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d00a      	beq.n	8006a36 <UART_SetConfig+0x192>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d814      	bhi.n	8006a4e <UART_SetConfig+0x1aa>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x18a>
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d008      	beq.n	8006a3e <UART_SetConfig+0x19a>
 8006a2c:	e00f      	b.n	8006a4e <UART_SetConfig+0x1aa>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a34:	e09d      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a36:	2302      	movs	r3, #2
 8006a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a3c:	e099      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a44:	e095      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a46:	2308      	movs	r3, #8
 8006a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4c:	e091      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a4e:	2310      	movs	r3, #16
 8006a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a54:	e08d      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a5f      	ldr	r2, [pc, #380]	; (8006bd8 <UART_SetConfig+0x334>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d125      	bne.n	8006aac <UART_SetConfig+0x208>
 8006a60:	4b5a      	ldr	r3, [pc, #360]	; (8006bcc <UART_SetConfig+0x328>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a6c:	d016      	beq.n	8006a9c <UART_SetConfig+0x1f8>
 8006a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a70:	d818      	bhi.n	8006aa4 <UART_SetConfig+0x200>
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d00a      	beq.n	8006a8c <UART_SetConfig+0x1e8>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d814      	bhi.n	8006aa4 <UART_SetConfig+0x200>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x1e0>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d008      	beq.n	8006a94 <UART_SetConfig+0x1f0>
 8006a82:	e00f      	b.n	8006aa4 <UART_SetConfig+0x200>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a8a:	e072      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a92:	e06e      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a9a:	e06a      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa2:	e066      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aaa:	e062      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a4a      	ldr	r2, [pc, #296]	; (8006bdc <UART_SetConfig+0x338>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12a      	bne.n	8006b0c <UART_SetConfig+0x268>
 8006ab6:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <UART_SetConfig+0x328>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac4:	d01a      	beq.n	8006afc <UART_SetConfig+0x258>
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0x260>
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad0:	d00c      	beq.n	8006aec <UART_SetConfig+0x248>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad6:	d815      	bhi.n	8006b04 <UART_SetConfig+0x260>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <UART_SetConfig+0x240>
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x250>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x260>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aea:	e042      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af2:	e03e      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afa:	e03a      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b02:	e036      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	e032      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2c      	ldr	r2, [pc, #176]	; (8006bc4 <UART_SetConfig+0x320>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d12a      	bne.n	8006b6c <UART_SetConfig+0x2c8>
 8006b16:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <UART_SetConfig+0x328>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b24:	d01a      	beq.n	8006b5c <UART_SetConfig+0x2b8>
 8006b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0x2c0>
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	d00c      	beq.n	8006b4c <UART_SetConfig+0x2a8>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b36:	d815      	bhi.n	8006b64 <UART_SetConfig+0x2c0>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x2a0>
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x2b0>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x2c0>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4a:	e012      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b52:	e00e      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5a:	e00a      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b62:	e006      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e002      	b.n	8006b72 <UART_SetConfig+0x2ce>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <UART_SetConfig+0x320>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	f040 8105 	bne.w	8006d88 <UART_SetConfig+0x4e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d836      	bhi.n	8006bf4 <UART_SetConfig+0x350>
 8006b86:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <UART_SetConfig+0x2e8>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bf5 	.word	0x08006bf5
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bed 	.word	0x08006bed
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fd fe5c 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006bb4:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bb6:	e021      	b.n	8006bfc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <UART_SetConfig+0x33c>)
 8006bba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bbc:	e01e      	b.n	8006bfc <UART_SetConfig+0x358>
 8006bbe:	bf00      	nop
 8006bc0:	efff69f3 	.word	0xefff69f3
 8006bc4:	40008000 	.word	0x40008000
 8006bc8:	40013800 	.word	0x40013800
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40004400 	.word	0x40004400
 8006bd4:	40004800 	.word	0x40004800
 8006bd8:	40004c00 	.word	0x40004c00
 8006bdc:	40005000 	.word	0x40005000
 8006be0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006be4:	f7fd fdaa 	bl	800473c <HAL_RCC_GetSysClockFreq>
 8006be8:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bea:	e007      	b.n	8006bfc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bf2:	e003      	b.n	8006bfc <UART_SetConfig+0x358>
      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8006bfa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 81c5 	beq.w	8006f8e <UART_SetConfig+0x6ea>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d305      	bcc.n	8006c20 <UART_SetConfig+0x37c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d903      	bls.n	8006c28 <UART_SetConfig+0x384>
      {
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c26:	e1b2      	b.n	8006f8e <UART_SetConfig+0x6ea>
      }
      else
      {
        switch (clocksource)
 8006c28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	f200 8096 	bhi.w	8006d5e <UART_SetConfig+0x4ba>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x394>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006d5f 	.word	0x08006d5f
 8006c40:	08006cab 	.word	0x08006cab
 8006c44:	08006d5f 	.word	0x08006d5f
 8006c48:	08006ce1 	.word	0x08006ce1
 8006c4c:	08006d5f 	.word	0x08006d5f
 8006c50:	08006d5f 	.word	0x08006d5f
 8006c54:	08006d5f 	.word	0x08006d5f
 8006c58:	08006d2f 	.word	0x08006d2f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd fe06 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006c60:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f04f 0100 	mov.w	r1, #0
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	020b      	lsls	r3, r1, #8
 8006c74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c78:	0202      	lsls	r2, r0, #8
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	6849      	ldr	r1, [r1, #4]
 8006c7e:	0849      	lsrs	r1, r1, #1
 8006c80:	4608      	mov	r0, r1
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	1814      	adds	r4, r2, r0
 8006c88:	603c      	str	r4, [r7, #0]
 8006c8a:	414b      	adcs	r3, r1
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9c:	f7f9 ff50 	bl	8000b40 <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ca8:	e05d      	b.n	8006d66 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	48b3      	ldr	r0, [pc, #716]	; (8006f84 <UART_SetConfig+0x6e0>)
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	eb12 0a00 	adds.w	sl, r2, r0
 8006cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	4650      	mov	r0, sl
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	f7f9 ff35 	bl	8000b40 <__aeabi_uldivmod>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4613      	mov	r3, r2
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006cde:	e042      	b.n	8006d66 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006ce0:	f7fd fd2c 	bl	800473c <HAL_RCC_GetSysClockFreq>
 8006ce4:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	020b      	lsls	r3, r1, #8
 8006cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cfc:	0202      	lsls	r2, r0, #8
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	6849      	ldr	r1, [r1, #4]
 8006d02:	0849      	lsrs	r1, r1, #1
 8006d04:	4608      	mov	r0, r1
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	eb12 0800 	adds.w	r8, r2, r0
 8006d0e:	eb43 0901 	adc.w	r9, r3, r1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 ff0e 	bl	8000b40 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4613      	mov	r3, r2
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d2c:	e01b      	b.n	8006d66 <UART_SetConfig+0x4c2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	461a      	mov	r2, r3
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 8006d3e:	f143 0500 	adc.w	r5, r3, #0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fef6 	bl	8000b40 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4613      	mov	r3, r2
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d5c:	e003      	b.n	8006d66 <UART_SetConfig+0x4c2>
          default:
            ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8006d64:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6c:	d308      	bcc.n	8006d80 <UART_SetConfig+0x4dc>
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d74:	d204      	bcs.n	8006d80 <UART_SetConfig+0x4dc>
        {
          huart->Instance->BRR = usartdiv;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	60da      	str	r2, [r3, #12]
 8006d7e:	e106      	b.n	8006f8e <UART_SetConfig+0x6ea>
        }
        else
        {
          ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d86:	e102      	b.n	8006f8e <UART_SetConfig+0x6ea>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d90:	f040 8086 	bne.w	8006ea0 <UART_SetConfig+0x5fc>
  {
    switch (clocksource)
 8006d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d85f      	bhi.n	8006e5c <UART_SetConfig+0x5b8>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x500>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006de9 	.word	0x08006de9
 8006dac:	08006e09 	.word	0x08006e09
 8006db0:	08006e5d 	.word	0x08006e5d
 8006db4:	08006e25 	.word	0x08006e25
 8006db8:	08006e5d 	.word	0x08006e5d
 8006dbc:	08006e5d 	.word	0x08006e5d
 8006dc0:	08006e5d 	.word	0x08006e5d
 8006dc4:	08006e45 	.word	0x08006e45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fd fd50 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006dcc:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	005a      	lsls	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	441a      	add	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006de6:	e03d      	b.n	8006e64 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de8:	f7fd fd56 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8006dec:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	005a      	lsls	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	085b      	lsrs	r3, r3, #1
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e06:	e02d      	b.n	8006e64 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006e12:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	6852      	ldr	r2, [r2, #4]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e22:	e01f      	b.n	8006e64 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e24:	f7fd fc8a 	bl	800473c <HAL_RCC_GetSysClockFreq>
 8006e28:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	005a      	lsls	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	441a      	add	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e42:	e00f      	b.n	8006e64 <UART_SetConfig+0x5c0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e5a:	e003      	b.n	8006e64 <UART_SetConfig+0x5c0>
      default:
        ret = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8006e62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	2b0f      	cmp	r3, #15
 8006e68:	d916      	bls.n	8006e98 <UART_SetConfig+0x5f4>
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e70:	d212      	bcs.n	8006e98 <UART_SetConfig+0x5f4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f023 030f 	bic.w	r3, r3, #15
 8006e7a:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	8afb      	ldrh	r3, [r7, #22]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	8afa      	ldrh	r2, [r7, #22]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	e07a      	b.n	8006f8e <UART_SetConfig+0x6ea>
    }
    else
    {
      ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	e076      	b.n	8006f8e <UART_SetConfig+0x6ea>
    }
  }
  else
  {
    switch (clocksource)
 8006ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d85c      	bhi.n	8006f62 <UART_SetConfig+0x6be>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x60c>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ef3 	.word	0x08006ef3
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f63 	.word	0x08006f63
 8006ec0:	08006f2d 	.word	0x08006f2d
 8006ec4:	08006f63 	.word	0x08006f63
 8006ec8:	08006f63 	.word	0x08006f63
 8006ecc:	08006f63 	.word	0x08006f63
 8006ed0:	08006f4b 	.word	0x08006f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed4:	f7fd fcca 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006ed8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	085a      	lsrs	r2, r3, #1
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	441a      	add	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ef0:	e03b      	b.n	8006f6a <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef2:	f7fd fcd1 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8006ef6:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	085a      	lsrs	r2, r3, #1
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f0e:	e02c      	b.n	8006f6a <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	085b      	lsrs	r3, r3, #1
 8006f16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006f1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f2a:	e01e      	b.n	8006f6a <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2c:	f7fd fc06 	bl	800473c <HAL_RCC_GetSysClockFreq>
 8006f30:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085a      	lsrs	r2, r3, #1
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f48:	e00f      	b.n	8006f6a <UART_SetConfig+0x6c6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f60:	e003      	b.n	8006f6a <UART_SetConfig+0x6c6>
      default:
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8006f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b0f      	cmp	r3, #15
 8006f6e:	d90b      	bls.n	8006f88 <UART_SetConfig+0x6e4>
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f76:	d207      	bcs.n	8006f88 <UART_SetConfig+0x6e4>
    {
      huart->Instance->BRR = usartdiv;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e005      	b.n	8006f8e <UART_SetConfig+0x6ea>
 8006f82:	bf00      	nop
 8006f84:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d10a      	bne.n	80070be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80070fa:	f7fb f99f 	bl	800243c <HAL_GetTick>
 80070fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b08      	cmp	r3, #8
 800710c:	d10e      	bne.n	800712c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f82a 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e020      	b.n	800716e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d10e      	bne.n	8007158 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f814 	bl	8007176 <UART_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e00a      	b.n	800716e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	4613      	mov	r3, r2
 8007184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007186:	e05d      	b.n	8007244 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718e:	d059      	beq.n	8007244 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007190:	f7fb f954 	bl	800243c <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	d302      	bcc.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d11b      	bne.n	80071de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0201 	bic.w	r2, r2, #1
 80071c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e042      	b.n	8007264 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02b      	beq.n	8007244 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fa:	d123      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007204:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007214:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2220      	movs	r2, #32
 8007230:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e00f      	b.n	8007264 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4013      	ands	r3, r2
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	429a      	cmp	r2, r3
 8007252:	bf0c      	ite	eq
 8007254:	2301      	moveq	r3, #1
 8007256:	2300      	movne	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	429a      	cmp	r2, r3
 8007260:	d092      	beq.n	8007188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <__errno>:
 800726c:	4b01      	ldr	r3, [pc, #4]	; (8007274 <__errno+0x8>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c

08007278 <__libc_init_array>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4d0d      	ldr	r5, [pc, #52]	; (80072b0 <__libc_init_array+0x38>)
 800727c:	4c0d      	ldr	r4, [pc, #52]	; (80072b4 <__libc_init_array+0x3c>)
 800727e:	1b64      	subs	r4, r4, r5
 8007280:	10a4      	asrs	r4, r4, #2
 8007282:	2600      	movs	r6, #0
 8007284:	42a6      	cmp	r6, r4
 8007286:	d109      	bne.n	800729c <__libc_init_array+0x24>
 8007288:	4d0b      	ldr	r5, [pc, #44]	; (80072b8 <__libc_init_array+0x40>)
 800728a:	4c0c      	ldr	r4, [pc, #48]	; (80072bc <__libc_init_array+0x44>)
 800728c:	f000 ff98 	bl	80081c0 <_init>
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	2600      	movs	r6, #0
 8007296:	42a6      	cmp	r6, r4
 8007298:	d105      	bne.n	80072a6 <__libc_init_array+0x2e>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a0:	4798      	blx	r3
 80072a2:	3601      	adds	r6, #1
 80072a4:	e7ee      	b.n	8007284 <__libc_init_array+0xc>
 80072a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072aa:	4798      	blx	r3
 80072ac:	3601      	adds	r6, #1
 80072ae:	e7f2      	b.n	8007296 <__libc_init_array+0x1e>
 80072b0:	080085fc 	.word	0x080085fc
 80072b4:	080085fc 	.word	0x080085fc
 80072b8:	080085fc 	.word	0x080085fc
 80072bc:	08008600 	.word	0x08008600

080072c0 <memset>:
 80072c0:	4402      	add	r2, r0
 80072c2:	4603      	mov	r3, r0
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d100      	bne.n	80072ca <memset+0xa>
 80072c8:	4770      	bx	lr
 80072ca:	f803 1b01 	strb.w	r1, [r3], #1
 80072ce:	e7f9      	b.n	80072c4 <memset+0x4>

080072d0 <sinf>:
 80072d0:	ee10 3a10 	vmov	r3, s0
 80072d4:	b507      	push	{r0, r1, r2, lr}
 80072d6:	4a1d      	ldr	r2, [pc, #116]	; (800734c <sinf+0x7c>)
 80072d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072dc:	4293      	cmp	r3, r2
 80072de:	dc05      	bgt.n	80072ec <sinf+0x1c>
 80072e0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007350 <sinf+0x80>
 80072e4:	2000      	movs	r0, #0
 80072e6:	f000 fe5f 	bl	8007fa8 <__kernel_sinf>
 80072ea:	e004      	b.n	80072f6 <sinf+0x26>
 80072ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072f0:	db04      	blt.n	80072fc <sinf+0x2c>
 80072f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80072f6:	b003      	add	sp, #12
 80072f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80072fc:	4668      	mov	r0, sp
 80072fe:	f000 fa2d 	bl	800775c <__ieee754_rem_pio2f>
 8007302:	f000 0003 	and.w	r0, r0, #3
 8007306:	2801      	cmp	r0, #1
 8007308:	d008      	beq.n	800731c <sinf+0x4c>
 800730a:	2802      	cmp	r0, #2
 800730c:	d00d      	beq.n	800732a <sinf+0x5a>
 800730e:	b9b0      	cbnz	r0, 800733e <sinf+0x6e>
 8007310:	eddd 0a01 	vldr	s1, [sp, #4]
 8007314:	ed9d 0a00 	vldr	s0, [sp]
 8007318:	2001      	movs	r0, #1
 800731a:	e7e4      	b.n	80072e6 <sinf+0x16>
 800731c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007320:	ed9d 0a00 	vldr	s0, [sp]
 8007324:	f000 fb56 	bl	80079d4 <__kernel_cosf>
 8007328:	e7e5      	b.n	80072f6 <sinf+0x26>
 800732a:	eddd 0a01 	vldr	s1, [sp, #4]
 800732e:	ed9d 0a00 	vldr	s0, [sp]
 8007332:	2001      	movs	r0, #1
 8007334:	f000 fe38 	bl	8007fa8 <__kernel_sinf>
 8007338:	eeb1 0a40 	vneg.f32	s0, s0
 800733c:	e7db      	b.n	80072f6 <sinf+0x26>
 800733e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007342:	ed9d 0a00 	vldr	s0, [sp]
 8007346:	f000 fb45 	bl	80079d4 <__kernel_cosf>
 800734a:	e7f5      	b.n	8007338 <sinf+0x68>
 800734c:	3f490fd8 	.word	0x3f490fd8
	...

08007358 <log>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	ed2d 8b02 	vpush	{d8}
 800735e:	ec55 4b10 	vmov	r4, r5, d0
 8007362:	f000 f841 	bl	80073e8 <__ieee754_log>
 8007366:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <log+0x88>)
 8007368:	eeb0 8a40 	vmov.f32	s16, s0
 800736c:	eef0 8a60 	vmov.f32	s17, s1
 8007370:	f993 3000 	ldrsb.w	r3, [r3]
 8007374:	3301      	adds	r3, #1
 8007376:	d01a      	beq.n	80073ae <log+0x56>
 8007378:	4622      	mov	r2, r4
 800737a:	462b      	mov	r3, r5
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 fb78 	bl	8000a74 <__aeabi_dcmpun>
 8007384:	b998      	cbnz	r0, 80073ae <log+0x56>
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	f7f9 fb67 	bl	8000a60 <__aeabi_dcmpgt>
 8007392:	b960      	cbnz	r0, 80073ae <log+0x56>
 8007394:	2200      	movs	r2, #0
 8007396:	2300      	movs	r3, #0
 8007398:	4620      	mov	r0, r4
 800739a:	4629      	mov	r1, r5
 800739c:	f7f9 fb38 	bl	8000a10 <__aeabi_dcmpeq>
 80073a0:	b160      	cbz	r0, 80073bc <log+0x64>
 80073a2:	f7ff ff63 	bl	800726c <__errno>
 80073a6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80073d8 <log+0x80>
 80073aa:	2322      	movs	r3, #34	; 0x22
 80073ac:	6003      	str	r3, [r0, #0]
 80073ae:	eeb0 0a48 	vmov.f32	s0, s16
 80073b2:	eef0 0a68 	vmov.f32	s1, s17
 80073b6:	ecbd 8b02 	vpop	{d8}
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	f7ff ff56 	bl	800726c <__errno>
 80073c0:	ecbd 8b02 	vpop	{d8}
 80073c4:	2321      	movs	r3, #33	; 0x21
 80073c6:	6003      	str	r3, [r0, #0]
 80073c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073cc:	4805      	ldr	r0, [pc, #20]	; (80073e4 <log+0x8c>)
 80073ce:	f000 be33 	b.w	8008038 <nan>
 80073d2:	bf00      	nop
 80073d4:	f3af 8000 	nop.w
 80073d8:	00000000 	.word	0x00000000
 80073dc:	fff00000 	.word	0xfff00000
 80073e0:	20000070 	.word	0x20000070
 80073e4:	08008220 	.word	0x08008220

080073e8 <__ieee754_log>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	ec51 0b10 	vmov	r0, r1, d0
 80073f0:	ed2d 8b04 	vpush	{d8-d9}
 80073f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80073f8:	b083      	sub	sp, #12
 80073fa:	460d      	mov	r5, r1
 80073fc:	da29      	bge.n	8007452 <__ieee754_log+0x6a>
 80073fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007402:	4303      	orrs	r3, r0
 8007404:	ee10 2a10 	vmov	r2, s0
 8007408:	d10c      	bne.n	8007424 <__ieee754_log+0x3c>
 800740a:	49cf      	ldr	r1, [pc, #828]	; (8007748 <__ieee754_log+0x360>)
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	2000      	movs	r0, #0
 8007412:	f7f9 f9bf 	bl	8000794 <__aeabi_ddiv>
 8007416:	ec41 0b10 	vmov	d0, r0, r1
 800741a:	b003      	add	sp, #12
 800741c:	ecbd 8b04 	vpop	{d8-d9}
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	2900      	cmp	r1, #0
 8007426:	da05      	bge.n	8007434 <__ieee754_log+0x4c>
 8007428:	460b      	mov	r3, r1
 800742a:	f7f8 fed1 	bl	80001d0 <__aeabi_dsub>
 800742e:	2200      	movs	r2, #0
 8007430:	2300      	movs	r3, #0
 8007432:	e7ee      	b.n	8007412 <__ieee754_log+0x2a>
 8007434:	4bc5      	ldr	r3, [pc, #788]	; (800774c <__ieee754_log+0x364>)
 8007436:	2200      	movs	r2, #0
 8007438:	f7f9 f882 	bl	8000540 <__aeabi_dmul>
 800743c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007440:	460d      	mov	r5, r1
 8007442:	4ac3      	ldr	r2, [pc, #780]	; (8007750 <__ieee754_log+0x368>)
 8007444:	4295      	cmp	r5, r2
 8007446:	dd06      	ble.n	8007456 <__ieee754_log+0x6e>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	f7f8 fec2 	bl	80001d4 <__adddf3>
 8007450:	e7e1      	b.n	8007416 <__ieee754_log+0x2e>
 8007452:	2300      	movs	r3, #0
 8007454:	e7f5      	b.n	8007442 <__ieee754_log+0x5a>
 8007456:	152c      	asrs	r4, r5, #20
 8007458:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800745c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007460:	441c      	add	r4, r3
 8007462:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007466:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800746a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800746e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007472:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007476:	ea42 0105 	orr.w	r1, r2, r5
 800747a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800747e:	2200      	movs	r2, #0
 8007480:	4bb4      	ldr	r3, [pc, #720]	; (8007754 <__ieee754_log+0x36c>)
 8007482:	f7f8 fea5 	bl	80001d0 <__aeabi_dsub>
 8007486:	1cab      	adds	r3, r5, #2
 8007488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800748c:	2b02      	cmp	r3, #2
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	dc53      	bgt.n	8007540 <__ieee754_log+0x158>
 8007498:	2300      	movs	r3, #0
 800749a:	f7f9 fab9 	bl	8000a10 <__aeabi_dcmpeq>
 800749e:	b1d0      	cbz	r0, 80074d6 <__ieee754_log+0xee>
 80074a0:	2c00      	cmp	r4, #0
 80074a2:	f000 8122 	beq.w	80076ea <__ieee754_log+0x302>
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7f8 ffe0 	bl	800046c <__aeabi_i2d>
 80074ac:	a390      	add	r3, pc, #576	; (adr r3, 80076f0 <__ieee754_log+0x308>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	4606      	mov	r6, r0
 80074b4:	460f      	mov	r7, r1
 80074b6:	f7f9 f843 	bl	8000540 <__aeabi_dmul>
 80074ba:	a38f      	add	r3, pc, #572	; (adr r3, 80076f8 <__ieee754_log+0x310>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f9 f83a 	bl	8000540 <__aeabi_dmul>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4620      	mov	r0, r4
 80074d2:	4629      	mov	r1, r5
 80074d4:	e7ba      	b.n	800744c <__ieee754_log+0x64>
 80074d6:	a38a      	add	r3, pc, #552	; (adr r3, 8007700 <__ieee754_log+0x318>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	f7f9 f82e 	bl	8000540 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	2000      	movs	r0, #0
 80074ea:	499b      	ldr	r1, [pc, #620]	; (8007758 <__ieee754_log+0x370>)
 80074ec:	f7f8 fe70 	bl	80001d0 <__aeabi_dsub>
 80074f0:	4652      	mov	r2, sl
 80074f2:	4606      	mov	r6, r0
 80074f4:	460f      	mov	r7, r1
 80074f6:	465b      	mov	r3, fp
 80074f8:	4650      	mov	r0, sl
 80074fa:	4659      	mov	r1, fp
 80074fc:	f7f9 f820 	bl	8000540 <__aeabi_dmul>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f9 f81a 	bl	8000540 <__aeabi_dmul>
 800750c:	4606      	mov	r6, r0
 800750e:	460f      	mov	r7, r1
 8007510:	b914      	cbnz	r4, 8007518 <__ieee754_log+0x130>
 8007512:	4632      	mov	r2, r6
 8007514:	463b      	mov	r3, r7
 8007516:	e0a2      	b.n	800765e <__ieee754_log+0x276>
 8007518:	4620      	mov	r0, r4
 800751a:	f7f8 ffa7 	bl	800046c <__aeabi_i2d>
 800751e:	a374      	add	r3, pc, #464	; (adr r3, 80076f0 <__ieee754_log+0x308>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	f7f9 f80a 	bl	8000540 <__aeabi_dmul>
 800752c:	a372      	add	r3, pc, #456	; (adr r3, 80076f8 <__ieee754_log+0x310>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
 8007536:	4640      	mov	r0, r8
 8007538:	4649      	mov	r1, r9
 800753a:	f7f9 f801 	bl	8000540 <__aeabi_dmul>
 800753e:	e0a7      	b.n	8007690 <__ieee754_log+0x2a8>
 8007540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007544:	f7f8 fe46 	bl	80001d4 <__adddf3>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4650      	mov	r0, sl
 800754e:	4659      	mov	r1, fp
 8007550:	f7f9 f920 	bl	8000794 <__aeabi_ddiv>
 8007554:	ec41 0b18 	vmov	d8, r0, r1
 8007558:	4620      	mov	r0, r4
 800755a:	f7f8 ff87 	bl	800046c <__aeabi_i2d>
 800755e:	ec53 2b18 	vmov	r2, r3, d8
 8007562:	ec41 0b19 	vmov	d9, r0, r1
 8007566:	ec51 0b18 	vmov	r0, r1, d8
 800756a:	f7f8 ffe9 	bl	8000540 <__aeabi_dmul>
 800756e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007572:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	f7f8 ffde 	bl	8000540 <__aeabi_dmul>
 8007584:	a360      	add	r3, pc, #384	; (adr r3, 8007708 <__ieee754_log+0x320>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	f7f8 ffd7 	bl	8000540 <__aeabi_dmul>
 8007592:	a35f      	add	r3, pc, #380	; (adr r3, 8007710 <__ieee754_log+0x328>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fe1c 	bl	80001d4 <__adddf3>
 800759c:	4632      	mov	r2, r6
 800759e:	463b      	mov	r3, r7
 80075a0:	f7f8 ffce 	bl	8000540 <__aeabi_dmul>
 80075a4:	a35c      	add	r3, pc, #368	; (adr r3, 8007718 <__ieee754_log+0x330>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe13 	bl	80001d4 <__adddf3>
 80075ae:	4632      	mov	r2, r6
 80075b0:	463b      	mov	r3, r7
 80075b2:	f7f8 ffc5 	bl	8000540 <__aeabi_dmul>
 80075b6:	a35a      	add	r3, pc, #360	; (adr r3, 8007720 <__ieee754_log+0x338>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe0a 	bl	80001d4 <__adddf3>
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	f7f8 ffbc 	bl	8000540 <__aeabi_dmul>
 80075c8:	a357      	add	r3, pc, #348	; (adr r3, 8007728 <__ieee754_log+0x340>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	4680      	mov	r8, r0
 80075d0:	4689      	mov	r9, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 ffb3 	bl	8000540 <__aeabi_dmul>
 80075da:	a355      	add	r3, pc, #340	; (adr r3, 8007730 <__ieee754_log+0x348>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fdf8 	bl	80001d4 <__adddf3>
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	f7f8 ffaa 	bl	8000540 <__aeabi_dmul>
 80075ec:	a352      	add	r3, pc, #328	; (adr r3, 8007738 <__ieee754_log+0x350>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fdef 	bl	80001d4 <__adddf3>
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 ffa1 	bl	8000540 <__aeabi_dmul>
 80075fe:	460b      	mov	r3, r1
 8007600:	4602      	mov	r2, r0
 8007602:	4649      	mov	r1, r9
 8007604:	4640      	mov	r0, r8
 8007606:	f7f8 fde5 	bl	80001d4 <__adddf3>
 800760a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3551      	adds	r5, #81	; 0x51
 8007612:	431d      	orrs	r5, r3
 8007614:	2d00      	cmp	r5, #0
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	dd48      	ble.n	80076ae <__ieee754_log+0x2c6>
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <__ieee754_log+0x370>)
 800761e:	2200      	movs	r2, #0
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	f7f8 ff8c 	bl	8000540 <__aeabi_dmul>
 8007628:	4652      	mov	r2, sl
 800762a:	465b      	mov	r3, fp
 800762c:	f7f8 ff88 	bl	8000540 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f8 fdca 	bl	80001d4 <__adddf3>
 8007640:	ec53 2b18 	vmov	r2, r3, d8
 8007644:	f7f8 ff7c 	bl	8000540 <__aeabi_dmul>
 8007648:	4680      	mov	r8, r0
 800764a:	4689      	mov	r9, r1
 800764c:	b964      	cbnz	r4, 8007668 <__ieee754_log+0x280>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	f7f8 fdbb 	bl	80001d0 <__aeabi_dsub>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4650      	mov	r0, sl
 8007660:	4659      	mov	r1, fp
 8007662:	f7f8 fdb5 	bl	80001d0 <__aeabi_dsub>
 8007666:	e6d6      	b.n	8007416 <__ieee754_log+0x2e>
 8007668:	a321      	add	r3, pc, #132	; (adr r3, 80076f0 <__ieee754_log+0x308>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	ec51 0b19 	vmov	r0, r1, d9
 8007672:	f7f8 ff65 	bl	8000540 <__aeabi_dmul>
 8007676:	a320      	add	r3, pc, #128	; (adr r3, 80076f8 <__ieee754_log+0x310>)
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	4604      	mov	r4, r0
 800767e:	460d      	mov	r5, r1
 8007680:	ec51 0b19 	vmov	r0, r1, d9
 8007684:	f7f8 ff5c 	bl	8000540 <__aeabi_dmul>
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	f7f8 fda2 	bl	80001d4 <__adddf3>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	f7f8 fd9a 	bl	80001d0 <__aeabi_dsub>
 800769c:	4652      	mov	r2, sl
 800769e:	465b      	mov	r3, fp
 80076a0:	f7f8 fd96 	bl	80001d0 <__aeabi_dsub>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4620      	mov	r0, r4
 80076aa:	4629      	mov	r1, r5
 80076ac:	e7d9      	b.n	8007662 <__ieee754_log+0x27a>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4650      	mov	r0, sl
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7f8 fd8b 	bl	80001d0 <__aeabi_dsub>
 80076ba:	ec53 2b18 	vmov	r2, r3, d8
 80076be:	f7f8 ff3f 	bl	8000540 <__aeabi_dmul>
 80076c2:	4606      	mov	r6, r0
 80076c4:	460f      	mov	r7, r1
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	f43f af23 	beq.w	8007512 <__ieee754_log+0x12a>
 80076cc:	a308      	add	r3, pc, #32	; (adr r3, 80076f0 <__ieee754_log+0x308>)
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	ec51 0b19 	vmov	r0, r1, d9
 80076d6:	f7f8 ff33 	bl	8000540 <__aeabi_dmul>
 80076da:	a307      	add	r3, pc, #28	; (adr r3, 80076f8 <__ieee754_log+0x310>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	ec51 0b19 	vmov	r0, r1, d9
 80076e8:	e727      	b.n	800753a <__ieee754_log+0x152>
 80076ea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007740 <__ieee754_log+0x358>
 80076ee:	e694      	b.n	800741a <__ieee754_log+0x32>
 80076f0:	fee00000 	.word	0xfee00000
 80076f4:	3fe62e42 	.word	0x3fe62e42
 80076f8:	35793c76 	.word	0x35793c76
 80076fc:	3dea39ef 	.word	0x3dea39ef
 8007700:	55555555 	.word	0x55555555
 8007704:	3fd55555 	.word	0x3fd55555
 8007708:	df3e5244 	.word	0xdf3e5244
 800770c:	3fc2f112 	.word	0x3fc2f112
 8007710:	96cb03de 	.word	0x96cb03de
 8007714:	3fc74664 	.word	0x3fc74664
 8007718:	94229359 	.word	0x94229359
 800771c:	3fd24924 	.word	0x3fd24924
 8007720:	55555593 	.word	0x55555593
 8007724:	3fe55555 	.word	0x3fe55555
 8007728:	d078c69f 	.word	0xd078c69f
 800772c:	3fc39a09 	.word	0x3fc39a09
 8007730:	1d8e78af 	.word	0x1d8e78af
 8007734:	3fcc71c5 	.word	0x3fcc71c5
 8007738:	9997fa04 	.word	0x9997fa04
 800773c:	3fd99999 	.word	0x3fd99999
	...
 8007748:	c3500000 	.word	0xc3500000
 800774c:	43500000 	.word	0x43500000
 8007750:	7fefffff 	.word	0x7fefffff
 8007754:	3ff00000 	.word	0x3ff00000
 8007758:	3fe00000 	.word	0x3fe00000

0800775c <__ieee754_rem_pio2f>:
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	ee10 6a10 	vmov	r6, s0
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <__ieee754_rem_pio2f+0x240>)
 8007764:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007768:	429d      	cmp	r5, r3
 800776a:	b087      	sub	sp, #28
 800776c:	eef0 7a40 	vmov.f32	s15, s0
 8007770:	4604      	mov	r4, r0
 8007772:	dc05      	bgt.n	8007780 <__ieee754_rem_pio2f+0x24>
 8007774:	2300      	movs	r3, #0
 8007776:	ed80 0a00 	vstr	s0, [r0]
 800777a:	6043      	str	r3, [r0, #4]
 800777c:	2000      	movs	r0, #0
 800777e:	e01a      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 8007780:	4b87      	ldr	r3, [pc, #540]	; (80079a0 <__ieee754_rem_pio2f+0x244>)
 8007782:	429d      	cmp	r5, r3
 8007784:	dc46      	bgt.n	8007814 <__ieee754_rem_pio2f+0xb8>
 8007786:	2e00      	cmp	r6, #0
 8007788:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80079a4 <__ieee754_rem_pio2f+0x248>
 800778c:	4b86      	ldr	r3, [pc, #536]	; (80079a8 <__ieee754_rem_pio2f+0x24c>)
 800778e:	f025 050f 	bic.w	r5, r5, #15
 8007792:	dd1f      	ble.n	80077d4 <__ieee754_rem_pio2f+0x78>
 8007794:	429d      	cmp	r5, r3
 8007796:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800779a:	d00e      	beq.n	80077ba <__ieee754_rem_pio2f+0x5e>
 800779c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80079ac <__ieee754_rem_pio2f+0x250>
 80077a0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80077a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077a8:	ed80 0a00 	vstr	s0, [r0]
 80077ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077b0:	2001      	movs	r0, #1
 80077b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80077b6:	b007      	add	sp, #28
 80077b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ba:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80077be:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 80077c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077c6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80077ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077ce:	edc0 6a00 	vstr	s13, [r0]
 80077d2:	e7eb      	b.n	80077ac <__ieee754_rem_pio2f+0x50>
 80077d4:	429d      	cmp	r5, r3
 80077d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80077da:	d00e      	beq.n	80077fa <__ieee754_rem_pio2f+0x9e>
 80077dc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80079ac <__ieee754_rem_pio2f+0x250>
 80077e0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80077e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077e8:	ed80 0a00 	vstr	s0, [r0]
 80077ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f4:	edc4 7a01 	vstr	s15, [r4, #4]
 80077f8:	e7dd      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 80077fa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80077fe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 8007802:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007806:	ee77 6a87 	vadd.f32	s13, s15, s14
 800780a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800780e:	edc0 6a00 	vstr	s13, [r0]
 8007812:	e7eb      	b.n	80077ec <__ieee754_rem_pio2f+0x90>
 8007814:	4b68      	ldr	r3, [pc, #416]	; (80079b8 <__ieee754_rem_pio2f+0x25c>)
 8007816:	429d      	cmp	r5, r3
 8007818:	dc72      	bgt.n	8007900 <__ieee754_rem_pio2f+0x1a4>
 800781a:	f000 fc15 	bl	8008048 <fabsf>
 800781e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80079bc <__ieee754_rem_pio2f+0x260>
 8007822:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007826:	eee0 7a07 	vfma.f32	s15, s0, s14
 800782a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800782e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007832:	ee17 0a90 	vmov	r0, s15
 8007836:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80079a4 <__ieee754_rem_pio2f+0x248>
 800783a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800783e:	281f      	cmp	r0, #31
 8007840:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80079ac <__ieee754_rem_pio2f+0x250>
 8007844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007848:	eeb1 6a47 	vneg.f32	s12, s14
 800784c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007850:	ee16 2a90 	vmov	r2, s13
 8007854:	dc1c      	bgt.n	8007890 <__ieee754_rem_pio2f+0x134>
 8007856:	495a      	ldr	r1, [pc, #360]	; (80079c0 <__ieee754_rem_pio2f+0x264>)
 8007858:	1e47      	subs	r7, r0, #1
 800785a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800785e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007862:	428b      	cmp	r3, r1
 8007864:	d014      	beq.n	8007890 <__ieee754_rem_pio2f+0x134>
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	ed94 7a00 	vldr	s14, [r4]
 800786c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007870:	2e00      	cmp	r6, #0
 8007872:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007876:	ed84 0a01 	vstr	s0, [r4, #4]
 800787a:	da9c      	bge.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 800787c:	eeb1 7a47 	vneg.f32	s14, s14
 8007880:	eeb1 0a40 	vneg.f32	s0, s0
 8007884:	ed84 7a00 	vstr	s14, [r4]
 8007888:	ed84 0a01 	vstr	s0, [r4, #4]
 800788c:	4240      	negs	r0, r0
 800788e:	e792      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 8007890:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007894:	15eb      	asrs	r3, r5, #23
 8007896:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800789a:	2d08      	cmp	r5, #8
 800789c:	dde3      	ble.n	8007866 <__ieee754_rem_pio2f+0x10a>
 800789e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80078a2:	eef0 6a40 	vmov.f32	s13, s0
 80078a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80078aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80078ae:	eea6 0a27 	vfma.f32	s0, s12, s15
 80078b2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 80078b6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80078ba:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80078be:	eef0 7a40 	vmov.f32	s15, s0
 80078c2:	ee15 2a90 	vmov	r2, s11
 80078c6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80078ca:	1a5b      	subs	r3, r3, r1
 80078cc:	2b19      	cmp	r3, #25
 80078ce:	dc04      	bgt.n	80078da <__ieee754_rem_pio2f+0x17e>
 80078d0:	edc4 5a00 	vstr	s11, [r4]
 80078d4:	eeb0 0a66 	vmov.f32	s0, s13
 80078d8:	e7c6      	b.n	8007868 <__ieee754_rem_pio2f+0x10c>
 80078da:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80079c4 <__ieee754_rem_pio2f+0x268>
 80078de:	eeb0 0a66 	vmov.f32	s0, s13
 80078e2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80078e6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80078ea:	eddf 6a37 	vldr	s13, [pc, #220]	; 80079c8 <__ieee754_rem_pio2f+0x26c>
 80078ee:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078f2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80078f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80078fa:	ed84 7a00 	vstr	s14, [r4]
 80078fe:	e7b3      	b.n	8007868 <__ieee754_rem_pio2f+0x10c>
 8007900:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007904:	db06      	blt.n	8007914 <__ieee754_rem_pio2f+0x1b8>
 8007906:	ee70 7a40 	vsub.f32	s15, s0, s0
 800790a:	edc0 7a01 	vstr	s15, [r0, #4]
 800790e:	edc0 7a00 	vstr	s15, [r0]
 8007912:	e733      	b.n	800777c <__ieee754_rem_pio2f+0x20>
 8007914:	15ea      	asrs	r2, r5, #23
 8007916:	3a86      	subs	r2, #134	; 0x86
 8007918:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007924:	eddf 6a29 	vldr	s13, [pc, #164]	; 80079cc <__ieee754_rem_pio2f+0x270>
 8007928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800792c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007930:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007938:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800793c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007944:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800794c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	edcd 7a05 	vstr	s15, [sp, #20]
 8007958:	d11e      	bne.n	8007998 <__ieee754_rem_pio2f+0x23c>
 800795a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	bf14      	ite	ne
 8007964:	2302      	movne	r3, #2
 8007966:	2301      	moveq	r3, #1
 8007968:	4919      	ldr	r1, [pc, #100]	; (80079d0 <__ieee754_rem_pio2f+0x274>)
 800796a:	9101      	str	r1, [sp, #4]
 800796c:	2102      	movs	r1, #2
 800796e:	9100      	str	r1, [sp, #0]
 8007970:	a803      	add	r0, sp, #12
 8007972:	4621      	mov	r1, r4
 8007974:	f000 f88e 	bl	8007a94 <__kernel_rem_pio2f>
 8007978:	2e00      	cmp	r6, #0
 800797a:	f6bf af1c 	bge.w	80077b6 <__ieee754_rem_pio2f+0x5a>
 800797e:	edd4 7a00 	vldr	s15, [r4]
 8007982:	eef1 7a67 	vneg.f32	s15, s15
 8007986:	edc4 7a00 	vstr	s15, [r4]
 800798a:	edd4 7a01 	vldr	s15, [r4, #4]
 800798e:	eef1 7a67 	vneg.f32	s15, s15
 8007992:	edc4 7a01 	vstr	s15, [r4, #4]
 8007996:	e779      	b.n	800788c <__ieee754_rem_pio2f+0x130>
 8007998:	2303      	movs	r3, #3
 800799a:	e7e5      	b.n	8007968 <__ieee754_rem_pio2f+0x20c>
 800799c:	3f490fd8 	.word	0x3f490fd8
 80079a0:	4016cbe3 	.word	0x4016cbe3
 80079a4:	3fc90f80 	.word	0x3fc90f80
 80079a8:	3fc90fd0 	.word	0x3fc90fd0
 80079ac:	37354443 	.word	0x37354443
 80079b0:	37354400 	.word	0x37354400
 80079b4:	2e85a308 	.word	0x2e85a308
 80079b8:	43490f80 	.word	0x43490f80
 80079bc:	3f22f984 	.word	0x3f22f984
 80079c0:	08008224 	.word	0x08008224
 80079c4:	2e85a300 	.word	0x2e85a300
 80079c8:	248d3132 	.word	0x248d3132
 80079cc:	43800000 	.word	0x43800000
 80079d0:	080082a4 	.word	0x080082a4

080079d4 <__kernel_cosf>:
 80079d4:	ee10 3a10 	vmov	r3, s0
 80079d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80079e4:	da05      	bge.n	80079f2 <__kernel_cosf+0x1e>
 80079e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80079ea:	ee17 2a90 	vmov	r2, s15
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	d03d      	beq.n	8007a6e <__kernel_cosf+0x9a>
 80079f2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80079f6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a74 <__kernel_cosf+0xa0>
 80079fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007a78 <__kernel_cosf+0xa4>
 80079fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007a7c <__kernel_cosf+0xa8>
 8007a02:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <__kernel_cosf+0xac>)
 8007a04:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007a84 <__kernel_cosf+0xb0>
 8007a0e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007a12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007a88 <__kernel_cosf+0xb4>
 8007a16:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007a1a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007a8c <__kernel_cosf+0xb8>
 8007a1e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007a22:	eeb0 7a66 	vmov.f32	s14, s13
 8007a26:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007a2a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007a2e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007a32:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007a36:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007a3a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a3e:	dc04      	bgt.n	8007a4a <__kernel_cosf+0x76>
 8007a40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007a44:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007a48:	4770      	bx	lr
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <__kernel_cosf+0xbc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfda      	itte	le
 8007a50:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	ee06 3a90 	vmovle	s13, r3
 8007a58:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007a5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a60:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a68:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a6c:	4770      	bx	lr
 8007a6e:	eeb0 0a46 	vmov.f32	s0, s12
 8007a72:	4770      	bx	lr
 8007a74:	ad47d74e 	.word	0xad47d74e
 8007a78:	310f74f6 	.word	0x310f74f6
 8007a7c:	3d2aaaab 	.word	0x3d2aaaab
 8007a80:	3e999999 	.word	0x3e999999
 8007a84:	b493f27c 	.word	0xb493f27c
 8007a88:	37d00d01 	.word	0x37d00d01
 8007a8c:	bab60b61 	.word	0xbab60b61
 8007a90:	3f480000 	.word	0x3f480000

08007a94 <__kernel_rem_pio2f>:
 8007a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	ed2d 8b04 	vpush	{d8-d9}
 8007a9c:	b0d7      	sub	sp, #348	; 0x15c
 8007a9e:	4616      	mov	r6, r2
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007aa4:	4bbb      	ldr	r3, [pc, #748]	; (8007d94 <__kernel_rem_pio2f+0x300>)
 8007aa6:	9001      	str	r0, [sp, #4]
 8007aa8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007aac:	1d33      	adds	r3, r6, #4
 8007aae:	460d      	mov	r5, r1
 8007ab0:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8007ab4:	db29      	blt.n	8007b0a <__kernel_rem_pio2f+0x76>
 8007ab6:	1ef1      	subs	r1, r6, #3
 8007ab8:	bf48      	it	mi
 8007aba:	1d31      	addmi	r1, r6, #4
 8007abc:	10c9      	asrs	r1, r1, #3
 8007abe:	1c4c      	adds	r4, r1, #1
 8007ac0:	00e3      	lsls	r3, r4, #3
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007ac6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007aca:	eba1 0009 	sub.w	r0, r1, r9
 8007ace:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007ad2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007ad6:	eb07 0c09 	add.w	ip, r7, r9
 8007ada:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4563      	cmp	r3, ip
 8007ae2:	dd14      	ble.n	8007b0e <__kernel_rem_pio2f+0x7a>
 8007ae4:	ab1a      	add	r3, sp, #104	; 0x68
 8007ae6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007aea:	46cc      	mov	ip, r9
 8007aec:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007af0:	f1c8 0b01 	rsb	fp, r8, #1
 8007af4:	eb0b 020c 	add.w	r2, fp, ip
 8007af8:	4297      	cmp	r7, r2
 8007afa:	db27      	blt.n	8007b4c <__kernel_rem_pio2f+0xb8>
 8007afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b00:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007b04:	4618      	mov	r0, r3
 8007b06:	2200      	movs	r2, #0
 8007b08:	e016      	b.n	8007b38 <__kernel_rem_pio2f+0xa4>
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	e7d7      	b.n	8007abe <__kernel_rem_pio2f+0x2a>
 8007b0e:	42d8      	cmn	r0, r3
 8007b10:	bf5d      	ittte	pl
 8007b12:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007b16:	ee07 2a90 	vmovpl	s15, r2
 8007b1a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007b1e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007b22:	ecea 7a01 	vstmia	sl!, {s15}
 8007b26:	3301      	adds	r3, #1
 8007b28:	e7da      	b.n	8007ae0 <__kernel_rem_pio2f+0x4c>
 8007b2a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007b2e:	ed90 7a00 	vldr	s14, [r0]
 8007b32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b36:	3201      	adds	r2, #1
 8007b38:	454a      	cmp	r2, r9
 8007b3a:	f1a0 0004 	sub.w	r0, r0, #4
 8007b3e:	ddf4      	ble.n	8007b2a <__kernel_rem_pio2f+0x96>
 8007b40:	ecea 7a01 	vstmia	sl!, {s15}
 8007b44:	3304      	adds	r3, #4
 8007b46:	f10c 0c01 	add.w	ip, ip, #1
 8007b4a:	e7d3      	b.n	8007af4 <__kernel_rem_pio2f+0x60>
 8007b4c:	ab06      	add	r3, sp, #24
 8007b4e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007b56:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007b5a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007d9c <__kernel_rem_pio2f+0x308>
 8007b5e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	46ba      	mov	sl, r7
 8007b66:	ab56      	add	r3, sp, #344	; 0x158
 8007b68:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007b6c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007b70:	ab06      	add	r3, sp, #24
 8007b72:	4618      	mov	r0, r3
 8007b74:	4652      	mov	r2, sl
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	dc51      	bgt.n	8007c1e <__kernel_rem_pio2f+0x18a>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	f000 faad 	bl	80080dc <scalbnf>
 8007b82:	eeb0 8a40 	vmov.f32	s16, s0
 8007b86:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007b8a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007b8e:	f000 fa63 	bl	8008058 <floorf>
 8007b92:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007b96:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	9b05      	ldr	r3, [sp, #20]
 8007b9e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007ba2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007ba6:	edcd 7a00 	vstr	s15, [sp]
 8007baa:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007bae:	dd4b      	ble.n	8007c48 <__kernel_rem_pio2f+0x1b4>
 8007bb0:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8007bb4:	aa06      	add	r2, sp, #24
 8007bb6:	f1c4 0e08 	rsb	lr, r4, #8
 8007bba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007bbe:	ee17 1a90 	vmov	r1, s15
 8007bc2:	fa42 f00e 	asr.w	r0, r2, lr
 8007bc6:	4401      	add	r1, r0
 8007bc8:	9100      	str	r1, [sp, #0]
 8007bca:	fa00 f00e 	lsl.w	r0, r0, lr
 8007bce:	a906      	add	r1, sp, #24
 8007bd0:	1a12      	subs	r2, r2, r0
 8007bd2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007bd6:	f1c4 0007 	rsb	r0, r4, #7
 8007bda:	fa42 fb00 	asr.w	fp, r2, r0
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	dd43      	ble.n	8007c6c <__kernel_rem_pio2f+0x1d8>
 8007be4:	9a00      	ldr	r2, [sp, #0]
 8007be6:	f04f 0e00 	mov.w	lr, #0
 8007bea:	3201      	adds	r2, #1
 8007bec:	9200      	str	r2, [sp, #0]
 8007bee:	4670      	mov	r0, lr
 8007bf0:	45f2      	cmp	sl, lr
 8007bf2:	dc6c      	bgt.n	8007cce <__kernel_rem_pio2f+0x23a>
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	dd04      	ble.n	8007c02 <__kernel_rem_pio2f+0x16e>
 8007bf8:	2c01      	cmp	r4, #1
 8007bfa:	d079      	beq.n	8007cf0 <__kernel_rem_pio2f+0x25c>
 8007bfc:	2c02      	cmp	r4, #2
 8007bfe:	f000 8082 	beq.w	8007d06 <__kernel_rem_pio2f+0x272>
 8007c02:	f1bb 0f02 	cmp.w	fp, #2
 8007c06:	d131      	bne.n	8007c6c <__kernel_rem_pio2f+0x1d8>
 8007c08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007c10:	b360      	cbz	r0, 8007c6c <__kernel_rem_pio2f+0x1d8>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fa62 	bl	80080dc <scalbnf>
 8007c18:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007c1c:	e026      	b.n	8007c6c <__kernel_rem_pio2f+0x1d8>
 8007c1e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007c22:	3a01      	subs	r2, #1
 8007c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c28:	a942      	add	r1, sp, #264	; 0x108
 8007c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007c32:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007c36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c3a:	eca0 0a01 	vstmia	r0!, {s0}
 8007c3e:	ed9c 0a00 	vldr	s0, [ip]
 8007c42:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c46:	e796      	b.n	8007b76 <__kernel_rem_pio2f+0xe2>
 8007c48:	d107      	bne.n	8007c5a <__kernel_rem_pio2f+0x1c6>
 8007c4a:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8007c4e:	a906      	add	r1, sp, #24
 8007c50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c54:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007c58:	e7c1      	b.n	8007bde <__kernel_rem_pio2f+0x14a>
 8007c5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c66:	da2f      	bge.n	8007cc8 <__kernel_rem_pio2f+0x234>
 8007c68:	f04f 0b00 	mov.w	fp, #0
 8007c6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c74:	f040 8098 	bne.w	8007da8 <__kernel_rem_pio2f+0x314>
 8007c78:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007c7c:	469c      	mov	ip, r3
 8007c7e:	2200      	movs	r2, #0
 8007c80:	45bc      	cmp	ip, r7
 8007c82:	da48      	bge.n	8007d16 <__kernel_rem_pio2f+0x282>
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d05f      	beq.n	8007d48 <__kernel_rem_pio2f+0x2b4>
 8007c88:	aa06      	add	r2, sp, #24
 8007c8a:	3c08      	subs	r4, #8
 8007c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d07d      	beq.n	8007d90 <__kernel_rem_pio2f+0x2fc>
 8007c94:	4620      	mov	r0, r4
 8007c96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f000 fa1e 	bl	80080dc <scalbnf>
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	f280 80af 	bge.w	8007e0c <__kernel_rem_pio2f+0x378>
 8007cae:	4618      	mov	r0, r3
 8007cb0:	2400      	movs	r4, #0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f2c0 80d0 	blt.w	8007e58 <__kernel_rem_pio2f+0x3c4>
 8007cb8:	a942      	add	r1, sp, #264	; 0x108
 8007cba:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007cbe:	4a36      	ldr	r2, [pc, #216]	; (8007d98 <__kernel_rem_pio2f+0x304>)
 8007cc0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	e0bb      	b.n	8007e40 <__kernel_rem_pio2f+0x3ac>
 8007cc8:	f04f 0b02 	mov.w	fp, #2
 8007ccc:	e78a      	b.n	8007be4 <__kernel_rem_pio2f+0x150>
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	b948      	cbnz	r0, 8007ce6 <__kernel_rem_pio2f+0x252>
 8007cd2:	b11a      	cbz	r2, 8007cdc <__kernel_rem_pio2f+0x248>
 8007cd4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f10e 0e01 	add.w	lr, lr, #1
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	e784      	b.n	8007bf0 <__kernel_rem_pio2f+0x15c>
 8007ce6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	4602      	mov	r2, r0
 8007cee:	e7f5      	b.n	8007cdc <__kernel_rem_pio2f+0x248>
 8007cf0:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8007cf4:	ab06      	add	r3, sp, #24
 8007cf6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfe:	aa06      	add	r2, sp, #24
 8007d00:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007d04:	e77d      	b.n	8007c02 <__kernel_rem_pio2f+0x16e>
 8007d06:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8007d0a:	ab06      	add	r3, sp, #24
 8007d0c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d14:	e7f3      	b.n	8007cfe <__kernel_rem_pio2f+0x26a>
 8007d16:	a906      	add	r1, sp, #24
 8007d18:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007d1c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007d20:	4302      	orrs	r2, r0
 8007d22:	e7ad      	b.n	8007c80 <__kernel_rem_pio2f+0x1ec>
 8007d24:	3001      	adds	r0, #1
 8007d26:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d0fa      	beq.n	8007d24 <__kernel_rem_pio2f+0x290>
 8007d2e:	a91a      	add	r1, sp, #104	; 0x68
 8007d30:	eb0a 0208 	add.w	r2, sl, r8
 8007d34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007d38:	f10a 0301 	add.w	r3, sl, #1
 8007d3c:	eb0a 0100 	add.w	r1, sl, r0
 8007d40:	4299      	cmp	r1, r3
 8007d42:	da04      	bge.n	8007d4e <__kernel_rem_pio2f+0x2ba>
 8007d44:	468a      	mov	sl, r1
 8007d46:	e70e      	b.n	8007b66 <__kernel_rem_pio2f+0xd2>
 8007d48:	9b04      	ldr	r3, [sp, #16]
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	e7eb      	b.n	8007d26 <__kernel_rem_pio2f+0x292>
 8007d4e:	9803      	ldr	r0, [sp, #12]
 8007d50:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d54:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007d58:	9000      	str	r0, [sp, #0]
 8007d5a:	ee07 0a90 	vmov	s15, r0
 8007d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d62:	2000      	movs	r0, #0
 8007d64:	ece2 7a01 	vstmia	r2!, {s15}
 8007d68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007d6c:	4696      	mov	lr, r2
 8007d6e:	4548      	cmp	r0, r9
 8007d70:	dd06      	ble.n	8007d80 <__kernel_rem_pio2f+0x2ec>
 8007d72:	a842      	add	r0, sp, #264	; 0x108
 8007d74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007d78:	edc0 7a00 	vstr	s15, [r0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	e7df      	b.n	8007d40 <__kernel_rem_pio2f+0x2ac>
 8007d80:	ecfc 6a01 	vldmia	ip!, {s13}
 8007d84:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007d88:	3001      	adds	r0, #1
 8007d8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d8e:	e7ee      	b.n	8007d6e <__kernel_rem_pio2f+0x2da>
 8007d90:	3b01      	subs	r3, #1
 8007d92:	e779      	b.n	8007c88 <__kernel_rem_pio2f+0x1f4>
 8007d94:	080085e8 	.word	0x080085e8
 8007d98:	080085bc 	.word	0x080085bc
 8007d9c:	43800000 	.word	0x43800000
 8007da0:	3b800000 	.word	0x3b800000
 8007da4:	00000000 	.word	0x00000000
 8007da8:	9b02      	ldr	r3, [sp, #8]
 8007daa:	eeb0 0a48 	vmov.f32	s0, s16
 8007dae:	1b98      	subs	r0, r3, r6
 8007db0:	f000 f994 	bl	80080dc <scalbnf>
 8007db4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007d9c <__kernel_rem_pio2f+0x308>
 8007db8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc0:	db1b      	blt.n	8007dfa <__kernel_rem_pio2f+0x366>
 8007dc2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007dc6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007dca:	aa06      	add	r2, sp, #24
 8007dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dd0:	a906      	add	r1, sp, #24
 8007dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dd6:	3408      	adds	r4, #8
 8007dd8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007de4:	ee10 3a10 	vmov	r3, s0
 8007de8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007dec:	ee17 2a90 	vmov	r2, s15
 8007df0:	f10a 0301 	add.w	r3, sl, #1
 8007df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007df8:	e74c      	b.n	8007c94 <__kernel_rem_pio2f+0x200>
 8007dfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007dfe:	aa06      	add	r2, sp, #24
 8007e00:	ee10 3a10 	vmov	r3, s0
 8007e04:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007e08:	4653      	mov	r3, sl
 8007e0a:	e743      	b.n	8007c94 <__kernel_rem_pio2f+0x200>
 8007e0c:	aa42      	add	r2, sp, #264	; 0x108
 8007e0e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007e12:	aa06      	add	r2, sp, #24
 8007e14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007e18:	9201      	str	r2, [sp, #4]
 8007e1a:	ee07 2a90 	vmov	s15, r2
 8007e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e22:	3901      	subs	r1, #1
 8007e24:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e28:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007e2c:	edc0 7a00 	vstr	s15, [r0]
 8007e30:	e73a      	b.n	8007ca8 <__kernel_rem_pio2f+0x214>
 8007e32:	ecf2 6a01 	vldmia	r2!, {s13}
 8007e36:	ecb6 7a01 	vldmia	r6!, {s14}
 8007e3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e3e:	3101      	adds	r1, #1
 8007e40:	42b9      	cmp	r1, r7
 8007e42:	dc01      	bgt.n	8007e48 <__kernel_rem_pio2f+0x3b4>
 8007e44:	428c      	cmp	r4, r1
 8007e46:	daf4      	bge.n	8007e32 <__kernel_rem_pio2f+0x39e>
 8007e48:	aa56      	add	r2, sp, #344	; 0x158
 8007e4a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007e4e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007e52:	3801      	subs	r0, #1
 8007e54:	3401      	adds	r4, #1
 8007e56:	e72c      	b.n	8007cb2 <__kernel_rem_pio2f+0x21e>
 8007e58:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007e5a:	2a02      	cmp	r2, #2
 8007e5c:	dc0a      	bgt.n	8007e74 <__kernel_rem_pio2f+0x3e0>
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	dc61      	bgt.n	8007f26 <__kernel_rem_pio2f+0x492>
 8007e62:	d03c      	beq.n	8007ede <__kernel_rem_pio2f+0x44a>
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	f003 0007 	and.w	r0, r3, #7
 8007e6a:	b057      	add	sp, #348	; 0x15c
 8007e6c:	ecbd 8b04 	vpop	{d8-d9}
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007e76:	2a03      	cmp	r2, #3
 8007e78:	d1f4      	bne.n	8007e64 <__kernel_rem_pio2f+0x3d0>
 8007e7a:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e7c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007e80:	4608      	mov	r0, r1
 8007e82:	461c      	mov	r4, r3
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	f1a0 0004 	sub.w	r0, r0, #4
 8007e8a:	dc59      	bgt.n	8007f40 <__kernel_rem_pio2f+0x4ac>
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	2801      	cmp	r0, #1
 8007e90:	f1a1 0104 	sub.w	r1, r1, #4
 8007e94:	dc64      	bgt.n	8007f60 <__kernel_rem_pio2f+0x4cc>
 8007e96:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	dc70      	bgt.n	8007f80 <__kernel_rem_pio2f+0x4ec>
 8007e9e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007ea2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007ea6:	f1bb 0f00 	cmp.w	fp, #0
 8007eaa:	d172      	bne.n	8007f92 <__kernel_rem_pio2f+0x4fe>
 8007eac:	edc5 6a00 	vstr	s13, [r5]
 8007eb0:	ed85 7a01 	vstr	s14, [r5, #4]
 8007eb4:	edc5 7a02 	vstr	s15, [r5, #8]
 8007eb8:	e7d4      	b.n	8007e64 <__kernel_rem_pio2f+0x3d0>
 8007eba:	aa2e      	add	r2, sp, #184	; 0xb8
 8007ebc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007ec0:	ed91 7a00 	vldr	s14, [r1]
 8007ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	daf5      	bge.n	8007eba <__kernel_rem_pio2f+0x426>
 8007ece:	f1bb 0f00 	cmp.w	fp, #0
 8007ed2:	d001      	beq.n	8007ed8 <__kernel_rem_pio2f+0x444>
 8007ed4:	eef1 7a67 	vneg.f32	s15, s15
 8007ed8:	edc5 7a00 	vstr	s15, [r5]
 8007edc:	e7c2      	b.n	8007e64 <__kernel_rem_pio2f+0x3d0>
 8007ede:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007ee2:	e7f2      	b.n	8007eca <__kernel_rem_pio2f+0x436>
 8007ee4:	aa2e      	add	r2, sp, #184	; 0xb8
 8007ee6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007eea:	edd0 7a00 	vldr	s15, [r0]
 8007eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ef2:	3901      	subs	r1, #1
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	daf5      	bge.n	8007ee4 <__kernel_rem_pio2f+0x450>
 8007ef8:	f1bb 0f00 	cmp.w	fp, #0
 8007efc:	d017      	beq.n	8007f2e <__kernel_rem_pio2f+0x49a>
 8007efe:	eef1 7a47 	vneg.f32	s15, s14
 8007f02:	edc5 7a00 	vstr	s15, [r5]
 8007f06:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f0e:	a82f      	add	r0, sp, #188	; 0xbc
 8007f10:	2101      	movs	r1, #1
 8007f12:	428b      	cmp	r3, r1
 8007f14:	da0e      	bge.n	8007f34 <__kernel_rem_pio2f+0x4a0>
 8007f16:	f1bb 0f00 	cmp.w	fp, #0
 8007f1a:	d001      	beq.n	8007f20 <__kernel_rem_pio2f+0x48c>
 8007f1c:	eef1 7a67 	vneg.f32	s15, s15
 8007f20:	edc5 7a01 	vstr	s15, [r5, #4]
 8007f24:	e79e      	b.n	8007e64 <__kernel_rem_pio2f+0x3d0>
 8007f26:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007da4 <__kernel_rem_pio2f+0x310>
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	e7e2      	b.n	8007ef4 <__kernel_rem_pio2f+0x460>
 8007f2e:	eef0 7a47 	vmov.f32	s15, s14
 8007f32:	e7e6      	b.n	8007f02 <__kernel_rem_pio2f+0x46e>
 8007f34:	ecb0 7a01 	vldmia	r0!, {s14}
 8007f38:	3101      	adds	r1, #1
 8007f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f3e:	e7e8      	b.n	8007f12 <__kernel_rem_pio2f+0x47e>
 8007f40:	edd0 7a00 	vldr	s15, [r0]
 8007f44:	edd0 6a01 	vldr	s13, [r0, #4]
 8007f48:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f4c:	3c01      	subs	r4, #1
 8007f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f52:	ed80 7a00 	vstr	s14, [r0]
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f5e:	e791      	b.n	8007e84 <__kernel_rem_pio2f+0x3f0>
 8007f60:	edd1 7a00 	vldr	s15, [r1]
 8007f64:	edd1 6a01 	vldr	s13, [r1, #4]
 8007f68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f6c:	3801      	subs	r0, #1
 8007f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f72:	ed81 7a00 	vstr	s14, [r1]
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	edc1 7a01 	vstr	s15, [r1, #4]
 8007f7e:	e786      	b.n	8007e8e <__kernel_rem_pio2f+0x3fa>
 8007f80:	aa2e      	add	r2, sp, #184	; 0xb8
 8007f82:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007f86:	ed91 7a00 	vldr	s14, [r1]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f90:	e783      	b.n	8007e9a <__kernel_rem_pio2f+0x406>
 8007f92:	eef1 6a66 	vneg.f32	s13, s13
 8007f96:	eeb1 7a47 	vneg.f32	s14, s14
 8007f9a:	edc5 6a00 	vstr	s13, [r5]
 8007f9e:	ed85 7a01 	vstr	s14, [r5, #4]
 8007fa2:	eef1 7a67 	vneg.f32	s15, s15
 8007fa6:	e785      	b.n	8007eb4 <__kernel_rem_pio2f+0x420>

08007fa8 <__kernel_sinf>:
 8007fa8:	ee10 3a10 	vmov	r3, s0
 8007fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007fb4:	da04      	bge.n	8007fc0 <__kernel_sinf+0x18>
 8007fb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007fba:	ee17 3a90 	vmov	r3, s15
 8007fbe:	b35b      	cbz	r3, 8008018 <__kernel_sinf+0x70>
 8007fc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007fc4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800801c <__kernel_sinf+0x74>
 8007fc8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008020 <__kernel_sinf+0x78>
 8007fcc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fd0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008024 <__kernel_sinf+0x7c>
 8007fd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fd8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008028 <__kernel_sinf+0x80>
 8007fdc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007fe0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800802c <__kernel_sinf+0x84>
 8007fe4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007fe8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fec:	b930      	cbnz	r0, 8007ffc <__kernel_sinf+0x54>
 8007fee:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008030 <__kernel_sinf+0x88>
 8007ff2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ff6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007ffa:	4770      	bx	lr
 8007ffc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008000:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008004:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008008:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800800c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008034 <__kernel_sinf+0x8c>
 8008010:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008014:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008020:	b2d72f34 	.word	0xb2d72f34
 8008024:	3638ef1b 	.word	0x3638ef1b
 8008028:	b9500d01 	.word	0xb9500d01
 800802c:	3c088889 	.word	0x3c088889
 8008030:	be2aaaab 	.word	0xbe2aaaab
 8008034:	3e2aaaab 	.word	0x3e2aaaab

08008038 <nan>:
 8008038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008040 <nan+0x8>
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	00000000 	.word	0x00000000
 8008044:	7ff80000 	.word	0x7ff80000

08008048 <fabsf>:
 8008048:	ee10 3a10 	vmov	r3, s0
 800804c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008050:	ee00 3a10 	vmov	s0, r3
 8008054:	4770      	bx	lr
	...

08008058 <floorf>:
 8008058:	ee10 3a10 	vmov	r3, s0
 800805c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008060:	3a7f      	subs	r2, #127	; 0x7f
 8008062:	2a16      	cmp	r2, #22
 8008064:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008068:	dc2a      	bgt.n	80080c0 <floorf+0x68>
 800806a:	2a00      	cmp	r2, #0
 800806c:	da11      	bge.n	8008092 <floorf+0x3a>
 800806e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80080d0 <floorf+0x78>
 8008072:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008076:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	dd05      	ble.n	800808c <floorf+0x34>
 8008080:	2b00      	cmp	r3, #0
 8008082:	da23      	bge.n	80080cc <floorf+0x74>
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <floorf+0x7c>)
 8008086:	2900      	cmp	r1, #0
 8008088:	bf18      	it	ne
 800808a:	4613      	movne	r3, r2
 800808c:	ee00 3a10 	vmov	s0, r3
 8008090:	4770      	bx	lr
 8008092:	4911      	ldr	r1, [pc, #68]	; (80080d8 <floorf+0x80>)
 8008094:	4111      	asrs	r1, r2
 8008096:	420b      	tst	r3, r1
 8008098:	d0fa      	beq.n	8008090 <floorf+0x38>
 800809a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80080d0 <floorf+0x78>
 800809e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80080a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080aa:	ddef      	ble.n	800808c <floorf+0x34>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bfbe      	ittt	lt
 80080b0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80080b4:	fa40 f202 	asrlt.w	r2, r0, r2
 80080b8:	189b      	addlt	r3, r3, r2
 80080ba:	ea23 0301 	bic.w	r3, r3, r1
 80080be:	e7e5      	b.n	800808c <floorf+0x34>
 80080c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80080c4:	d3e4      	bcc.n	8008090 <floorf+0x38>
 80080c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080ca:	4770      	bx	lr
 80080cc:	2300      	movs	r3, #0
 80080ce:	e7dd      	b.n	800808c <floorf+0x34>
 80080d0:	7149f2ca 	.word	0x7149f2ca
 80080d4:	bf800000 	.word	0xbf800000
 80080d8:	007fffff 	.word	0x007fffff

080080dc <scalbnf>:
 80080dc:	ee10 3a10 	vmov	r3, s0
 80080e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80080e4:	d025      	beq.n	8008132 <scalbnf+0x56>
 80080e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80080ea:	d302      	bcc.n	80080f2 <scalbnf+0x16>
 80080ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080f0:	4770      	bx	lr
 80080f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80080f6:	d122      	bne.n	800813e <scalbnf+0x62>
 80080f8:	4b2a      	ldr	r3, [pc, #168]	; (80081a4 <scalbnf+0xc8>)
 80080fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80081a8 <scalbnf+0xcc>
 80080fe:	4298      	cmp	r0, r3
 8008100:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008104:	db16      	blt.n	8008134 <scalbnf+0x58>
 8008106:	ee10 3a10 	vmov	r3, s0
 800810a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800810e:	3a19      	subs	r2, #25
 8008110:	4402      	add	r2, r0
 8008112:	2afe      	cmp	r2, #254	; 0xfe
 8008114:	dd15      	ble.n	8008142 <scalbnf+0x66>
 8008116:	ee10 3a10 	vmov	r3, s0
 800811a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80081ac <scalbnf+0xd0>
 800811e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80081b0 <scalbnf+0xd4>
 8008122:	2b00      	cmp	r3, #0
 8008124:	eeb0 7a67 	vmov.f32	s14, s15
 8008128:	bfb8      	it	lt
 800812a:	eef0 7a66 	vmovlt.f32	s15, s13
 800812e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008132:	4770      	bx	lr
 8008134:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80081b4 <scalbnf+0xd8>
 8008138:	ee20 0a27 	vmul.f32	s0, s0, s15
 800813c:	4770      	bx	lr
 800813e:	0dd2      	lsrs	r2, r2, #23
 8008140:	e7e6      	b.n	8008110 <scalbnf+0x34>
 8008142:	2a00      	cmp	r2, #0
 8008144:	dd06      	ble.n	8008154 <scalbnf+0x78>
 8008146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800814a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800814e:	ee00 3a10 	vmov	s0, r3
 8008152:	4770      	bx	lr
 8008154:	f112 0f16 	cmn.w	r2, #22
 8008158:	da1a      	bge.n	8008190 <scalbnf+0xb4>
 800815a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800815e:	4298      	cmp	r0, r3
 8008160:	ee10 3a10 	vmov	r3, s0
 8008164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008168:	dd0a      	ble.n	8008180 <scalbnf+0xa4>
 800816a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80081ac <scalbnf+0xd0>
 800816e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80081b0 <scalbnf+0xd4>
 8008172:	eef0 7a40 	vmov.f32	s15, s0
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf18      	it	ne
 800817a:	eeb0 0a47 	vmovne.f32	s0, s14
 800817e:	e7db      	b.n	8008138 <scalbnf+0x5c>
 8008180:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80081b4 <scalbnf+0xd8>
 8008184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80081b8 <scalbnf+0xdc>
 8008188:	eef0 7a40 	vmov.f32	s15, s0
 800818c:	2b00      	cmp	r3, #0
 800818e:	e7f3      	b.n	8008178 <scalbnf+0x9c>
 8008190:	3219      	adds	r2, #25
 8008192:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008196:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800819a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80081bc <scalbnf+0xe0>
 800819e:	ee07 3a10 	vmov	s14, r3
 80081a2:	e7c4      	b.n	800812e <scalbnf+0x52>
 80081a4:	ffff3cb0 	.word	0xffff3cb0
 80081a8:	4c000000 	.word	0x4c000000
 80081ac:	7149f2ca 	.word	0x7149f2ca
 80081b0:	f149f2ca 	.word	0xf149f2ca
 80081b4:	0da24260 	.word	0x0da24260
 80081b8:	8da24260 	.word	0x8da24260
 80081bc:	33000000 	.word	0x33000000

080081c0 <_init>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr

080081cc <_fini>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr
