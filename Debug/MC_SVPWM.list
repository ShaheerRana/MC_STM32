
MC_SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b54  08007b54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b5c  08007b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08007b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08007b70  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d01  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002349  00000000  00000000  00032d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00035088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217ae  00000000  00000000  00037130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4ec  00000000  00000000  000588de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc8aa  00000000  00000000  00065dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  001326f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007720 	.word	0x08007720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08007720 	.word	0x08007720

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_d2f>:
 8000548:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800054c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000550:	bf24      	itt	cs
 8000552:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000556:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800055a:	d90d      	bls.n	8000578 <__aeabi_d2f+0x30>
 800055c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000560:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000564:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000568:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800056c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800057c:	d121      	bne.n	80005c2 <__aeabi_d2f+0x7a>
 800057e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000582:	bfbc      	itt	lt
 8000584:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000588:	4770      	bxlt	lr
 800058a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000592:	f1c2 0218 	rsb	r2, r2, #24
 8000596:	f1c2 0c20 	rsb	ip, r2, #32
 800059a:	fa10 f30c 	lsls.w	r3, r0, ip
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	bf18      	it	ne
 80005a4:	f040 0001 	orrne.w	r0, r0, #1
 80005a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005b4:	ea40 000c 	orr.w	r0, r0, ip
 80005b8:	fa23 f302 	lsr.w	r3, r3, r2
 80005bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c0:	e7cc      	b.n	800055c <__aeabi_d2f+0x14>
 80005c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005c6:	d107      	bne.n	80005d8 <__aeabi_d2f+0x90>
 80005c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005cc:	bf1e      	ittt	ne
 80005ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bxne	lr
 80005d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b972 	b.w	80008e4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9e08      	ldr	r6, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	4688      	mov	r8, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14b      	bne.n	80006be <__udivmoddi4+0xa6>
 8000626:	428a      	cmp	r2, r1
 8000628:	4615      	mov	r5, r2
 800062a:	d967      	bls.n	80006fc <__udivmoddi4+0xe4>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0720 	rsb	r7, r2, #32
 8000636:	fa01 f302 	lsl.w	r3, r1, r2
 800063a:	fa20 f707 	lsr.w	r7, r0, r7
 800063e:	4095      	lsls	r5, r2
 8000640:	ea47 0803 	orr.w	r8, r7, r3
 8000644:	4094      	lsls	r4, r2
 8000646:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800064a:	0c23      	lsrs	r3, r4, #16
 800064c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000650:	fa1f fc85 	uxth.w	ip, r5
 8000654:	fb0e 8817 	mls	r8, lr, r7, r8
 8000658:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065c:	fb07 f10c 	mul.w	r1, r7, ip
 8000660:	4299      	cmp	r1, r3
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x60>
 8000664:	18eb      	adds	r3, r5, r3
 8000666:	f107 30ff 	add.w	r0, r7, #4294967295
 800066a:	f080 811b 	bcs.w	80008a4 <__udivmoddi4+0x28c>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 8118 	bls.w	80008a4 <__udivmoddi4+0x28c>
 8000674:	3f02      	subs	r7, #2
 8000676:	442b      	add	r3, r5
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b2a4      	uxth	r4, r4
 800067c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000680:	fb0e 3310 	mls	r3, lr, r0, r3
 8000684:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000688:	fb00 fc0c 	mul.w	ip, r0, ip
 800068c:	45a4      	cmp	ip, r4
 800068e:	d909      	bls.n	80006a4 <__udivmoddi4+0x8c>
 8000690:	192c      	adds	r4, r5, r4
 8000692:	f100 33ff 	add.w	r3, r0, #4294967295
 8000696:	f080 8107 	bcs.w	80008a8 <__udivmoddi4+0x290>
 800069a:	45a4      	cmp	ip, r4
 800069c:	f240 8104 	bls.w	80008a8 <__udivmoddi4+0x290>
 80006a0:	3802      	subs	r0, #2
 80006a2:	442c      	add	r4, r5
 80006a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a8:	eba4 040c 	sub.w	r4, r4, ip
 80006ac:	2700      	movs	r7, #0
 80006ae:	b11e      	cbz	r6, 80006b8 <__udivmoddi4+0xa0>
 80006b0:	40d4      	lsrs	r4, r2
 80006b2:	2300      	movs	r3, #0
 80006b4:	e9c6 4300 	strd	r4, r3, [r6]
 80006b8:	4639      	mov	r1, r7
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	428b      	cmp	r3, r1
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0xbe>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	f000 80eb 	beq.w	800089e <__udivmoddi4+0x286>
 80006c8:	2700      	movs	r7, #0
 80006ca:	e9c6 0100 	strd	r0, r1, [r6]
 80006ce:	4638      	mov	r0, r7
 80006d0:	4639      	mov	r1, r7
 80006d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d6:	fab3 f783 	clz	r7, r3
 80006da:	2f00      	cmp	r7, #0
 80006dc:	d147      	bne.n	800076e <__udivmoddi4+0x156>
 80006de:	428b      	cmp	r3, r1
 80006e0:	d302      	bcc.n	80006e8 <__udivmoddi4+0xd0>
 80006e2:	4282      	cmp	r2, r0
 80006e4:	f200 80fa 	bhi.w	80008dc <__udivmoddi4+0x2c4>
 80006e8:	1a84      	subs	r4, r0, r2
 80006ea:	eb61 0303 	sbc.w	r3, r1, r3
 80006ee:	2001      	movs	r0, #1
 80006f0:	4698      	mov	r8, r3
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d0e0      	beq.n	80006b8 <__udivmoddi4+0xa0>
 80006f6:	e9c6 4800 	strd	r4, r8, [r6]
 80006fa:	e7dd      	b.n	80006b8 <__udivmoddi4+0xa0>
 80006fc:	b902      	cbnz	r2, 8000700 <__udivmoddi4+0xe8>
 80006fe:	deff      	udf	#255	; 0xff
 8000700:	fab2 f282 	clz	r2, r2
 8000704:	2a00      	cmp	r2, #0
 8000706:	f040 808f 	bne.w	8000828 <__udivmoddi4+0x210>
 800070a:	1b49      	subs	r1, r1, r5
 800070c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000710:	fa1f f885 	uxth.w	r8, r5
 8000714:	2701      	movs	r7, #1
 8000716:	fbb1 fcfe 	udiv	ip, r1, lr
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000724:	fb08 f10c 	mul.w	r1, r8, ip
 8000728:	4299      	cmp	r1, r3
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x124>
 800072c:	18eb      	adds	r3, r5, r3
 800072e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x122>
 8000734:	4299      	cmp	r1, r3
 8000736:	f200 80cd 	bhi.w	80008d4 <__udivmoddi4+0x2bc>
 800073a:	4684      	mov	ip, r0
 800073c:	1a59      	subs	r1, r3, r1
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb1 f0fe 	udiv	r0, r1, lr
 8000744:	fb0e 1410 	mls	r4, lr, r0, r1
 8000748:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800074c:	fb08 f800 	mul.w	r8, r8, r0
 8000750:	45a0      	cmp	r8, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x14c>
 8000754:	192c      	adds	r4, r5, r4
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x14a>
 800075c:	45a0      	cmp	r8, r4
 800075e:	f200 80b6 	bhi.w	80008ce <__udivmoddi4+0x2b6>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 0408 	sub.w	r4, r4, r8
 8000768:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800076c:	e79f      	b.n	80006ae <__udivmoddi4+0x96>
 800076e:	f1c7 0c20 	rsb	ip, r7, #32
 8000772:	40bb      	lsls	r3, r7
 8000774:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000778:	ea4e 0e03 	orr.w	lr, lr, r3
 800077c:	fa01 f407 	lsl.w	r4, r1, r7
 8000780:	fa20 f50c 	lsr.w	r5, r0, ip
 8000784:	fa21 f30c 	lsr.w	r3, r1, ip
 8000788:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800078c:	4325      	orrs	r5, r4
 800078e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000792:	0c2c      	lsrs	r4, r5, #16
 8000794:	fb08 3319 	mls	r3, r8, r9, r3
 8000798:	fa1f fa8e 	uxth.w	sl, lr
 800079c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a0:	fb09 f40a 	mul.w	r4, r9, sl
 80007a4:	429c      	cmp	r4, r3
 80007a6:	fa02 f207 	lsl.w	r2, r2, r7
 80007aa:	fa00 f107 	lsl.w	r1, r0, r7
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b0>
 80007b0:	eb1e 0303 	adds.w	r3, lr, r3
 80007b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b8:	f080 8087 	bcs.w	80008ca <__udivmoddi4+0x2b2>
 80007bc:	429c      	cmp	r4, r3
 80007be:	f240 8084 	bls.w	80008ca <__udivmoddi4+0x2b2>
 80007c2:	f1a9 0902 	sub.w	r9, r9, #2
 80007c6:	4473      	add	r3, lr
 80007c8:	1b1b      	subs	r3, r3, r4
 80007ca:	b2ad      	uxth	r5, r5
 80007cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d0:	fb08 3310 	mls	r3, r8, r0, r3
 80007d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007dc:	45a2      	cmp	sl, r4
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1da>
 80007e0:	eb1e 0404 	adds.w	r4, lr, r4
 80007e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e8:	d26b      	bcs.n	80008c2 <__udivmoddi4+0x2aa>
 80007ea:	45a2      	cmp	sl, r4
 80007ec:	d969      	bls.n	80008c2 <__udivmoddi4+0x2aa>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4474      	add	r4, lr
 80007f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007f6:	fba0 8902 	umull	r8, r9, r0, r2
 80007fa:	eba4 040a 	sub.w	r4, r4, sl
 80007fe:	454c      	cmp	r4, r9
 8000800:	46c2      	mov	sl, r8
 8000802:	464b      	mov	r3, r9
 8000804:	d354      	bcc.n	80008b0 <__udivmoddi4+0x298>
 8000806:	d051      	beq.n	80008ac <__udivmoddi4+0x294>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d069      	beq.n	80008e0 <__udivmoddi4+0x2c8>
 800080c:	ebb1 050a 	subs.w	r5, r1, sl
 8000810:	eb64 0403 	sbc.w	r4, r4, r3
 8000814:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000818:	40fd      	lsrs	r5, r7
 800081a:	40fc      	lsrs	r4, r7
 800081c:	ea4c 0505 	orr.w	r5, ip, r5
 8000820:	e9c6 5400 	strd	r5, r4, [r6]
 8000824:	2700      	movs	r7, #0
 8000826:	e747      	b.n	80006b8 <__udivmoddi4+0xa0>
 8000828:	f1c2 0320 	rsb	r3, r2, #32
 800082c:	fa20 f703 	lsr.w	r7, r0, r3
 8000830:	4095      	lsls	r5, r2
 8000832:	fa01 f002 	lsl.w	r0, r1, r2
 8000836:	fa21 f303 	lsr.w	r3, r1, r3
 800083a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083e:	4338      	orrs	r0, r7
 8000840:	0c01      	lsrs	r1, r0, #16
 8000842:	fbb3 f7fe 	udiv	r7, r3, lr
 8000846:	fa1f f885 	uxth.w	r8, r5
 800084a:	fb0e 3317 	mls	r3, lr, r7, r3
 800084e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000852:	fb07 f308 	mul.w	r3, r7, r8
 8000856:	428b      	cmp	r3, r1
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d907      	bls.n	800086e <__udivmoddi4+0x256>
 800085e:	1869      	adds	r1, r5, r1
 8000860:	f107 3cff 	add.w	ip, r7, #4294967295
 8000864:	d22f      	bcs.n	80008c6 <__udivmoddi4+0x2ae>
 8000866:	428b      	cmp	r3, r1
 8000868:	d92d      	bls.n	80008c6 <__udivmoddi4+0x2ae>
 800086a:	3f02      	subs	r7, #2
 800086c:	4429      	add	r1, r5
 800086e:	1acb      	subs	r3, r1, r3
 8000870:	b281      	uxth	r1, r0
 8000872:	fbb3 f0fe 	udiv	r0, r3, lr
 8000876:	fb0e 3310 	mls	r3, lr, r0, r3
 800087a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800087e:	fb00 f308 	mul.w	r3, r0, r8
 8000882:	428b      	cmp	r3, r1
 8000884:	d907      	bls.n	8000896 <__udivmoddi4+0x27e>
 8000886:	1869      	adds	r1, r5, r1
 8000888:	f100 3cff 	add.w	ip, r0, #4294967295
 800088c:	d217      	bcs.n	80008be <__udivmoddi4+0x2a6>
 800088e:	428b      	cmp	r3, r1
 8000890:	d915      	bls.n	80008be <__udivmoddi4+0x2a6>
 8000892:	3802      	subs	r0, #2
 8000894:	4429      	add	r1, r5
 8000896:	1ac9      	subs	r1, r1, r3
 8000898:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800089c:	e73b      	b.n	8000716 <__udivmoddi4+0xfe>
 800089e:	4637      	mov	r7, r6
 80008a0:	4630      	mov	r0, r6
 80008a2:	e709      	b.n	80006b8 <__udivmoddi4+0xa0>
 80008a4:	4607      	mov	r7, r0
 80008a6:	e6e7      	b.n	8000678 <__udivmoddi4+0x60>
 80008a8:	4618      	mov	r0, r3
 80008aa:	e6fb      	b.n	80006a4 <__udivmoddi4+0x8c>
 80008ac:	4541      	cmp	r1, r8
 80008ae:	d2ab      	bcs.n	8000808 <__udivmoddi4+0x1f0>
 80008b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008b4:	eb69 020e 	sbc.w	r2, r9, lr
 80008b8:	3801      	subs	r0, #1
 80008ba:	4613      	mov	r3, r2
 80008bc:	e7a4      	b.n	8000808 <__udivmoddi4+0x1f0>
 80008be:	4660      	mov	r0, ip
 80008c0:	e7e9      	b.n	8000896 <__udivmoddi4+0x27e>
 80008c2:	4618      	mov	r0, r3
 80008c4:	e795      	b.n	80007f2 <__udivmoddi4+0x1da>
 80008c6:	4667      	mov	r7, ip
 80008c8:	e7d1      	b.n	800086e <__udivmoddi4+0x256>
 80008ca:	4681      	mov	r9, r0
 80008cc:	e77c      	b.n	80007c8 <__udivmoddi4+0x1b0>
 80008ce:	3802      	subs	r0, #2
 80008d0:	442c      	add	r4, r5
 80008d2:	e747      	b.n	8000764 <__udivmoddi4+0x14c>
 80008d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d8:	442b      	add	r3, r5
 80008da:	e72f      	b.n	800073c <__udivmoddi4+0x124>
 80008dc:	4638      	mov	r0, r7
 80008de:	e708      	b.n	80006f2 <__udivmoddi4+0xda>
 80008e0:	4637      	mov	r7, r6
 80008e2:	e6e9      	b.n	80006b8 <__udivmoddi4+0xa0>

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid, float Kp, float Ki, float LimMin, float LimMax, float LimMinInt, float LimMaxInt, float T) {
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	61f8      	str	r0, [r7, #28]
 80008f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80008f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80008f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80008fc:	edc7 1a03 	vstr	s3, [r7, #12]
 8000900:	ed87 2a02 	vstr	s4, [r7, #8]
 8000904:	edc7 2a01 	vstr	s5, [r7, #4]
 8000908:	ed87 3a00 	vstr	s6, [r7]
	/* Clear controller variables */
	pid->Integrator = 0.0f;
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
	pid->PrevError  = 0.0f;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
	pid->Out = 0.0f;
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Kp = Kp;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	605a      	str	r2, [r3, #4]
	pid->LimMin = LimMin;
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	609a      	str	r2, [r3, #8]
	pid->LimMax = LimMax;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	60da      	str	r2, [r3, #12]
	pid->LimMinInt = LimMinInt;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	611a      	str	r2, [r3, #16]
	pid->LimMaxInt = LimMaxInt;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	615a      	str	r2, [r3, #20]
}
 8000948:	bf00      	nop
 800094a:	3724      	adds	r7, #36	; 0x24
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4aba      	ldr	r2, [pc, #744]	; (8000cd4 <SVPWM_Update+0x2f8>)
 80009ec:	601a      	str	r2, [r3, #0]
	svm->Freq = 0.01; /*vhz->Freq;*/
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4ab9      	ldr	r2, [pc, #740]	; (8000cd8 <SVPWM_Update+0x2fc>)
 80009f2:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80009fa:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8000cdc <SVPWM_Update+0x300>
 80009fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a36:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8000ce0 <SVPWM_Update+0x304>
 8000a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <SVPWM_Update+0x7c>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a4a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8000ce0 <SVPWM_Update+0x304>
 8000a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a66:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8000ce0 <SVPWM_Update+0x304>
 8000a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a72:	f006 f909 	bl	8006c88 <sinf>
 8000a76:	eeb0 7a40 	vmov.f32	s14, s0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	f006 f8f3 	bl	8006c88 <sinf>
 8000aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ad6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ada:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	ed93 7a04 	vldr	s14, [r3, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	d518      	bpl.n	8000b34 <SVPWM_Update+0x158>
      	if (svm->SectorPointer == 5){
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b08:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b0c:	eef4 7a47 	vcmp.f32	s15, s14
 8000b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b14:	d104      	bne.n	8000b20 <SVPWM_Update+0x144>
         	svm->SectorPointer = 0;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	e009      	b.n	8000b34 <SVPWM_Update+0x158>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	d11f      	bne.n	8000b84 <SVPWM_Update+0x1a8>
		svm->U = svm->ta + svm->tb + svm->to;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	621a      	str	r2, [r3, #32]
 8000b82:	e0d8      	b.n	8000d36 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b8e:	eef4 7a47 	vcmp.f32	s15, s14
 8000b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b96:	d11f      	bne.n	8000bd8 <SVPWM_Update+0x1fc>
    	svm->U= svm->ta + svm->to;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	621a      	str	r2, [r3, #32]
 8000bd6:	e0ae      	b.n	8000d36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bde:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000be2:	eef4 7a47 	vcmp.f32	s15, s14
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	d11f      	bne.n	8000c2c <SVPWM_Update+0x250>
    	svm->U = svm->to;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	edc3 7a08 	vstr	s15, [r3, #32]
 8000c2a:	e084      	b.n	8000d36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c32:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000c36:	eef4 7a47 	vcmp.f32	s15, s14
 8000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3e:	d11f      	bne.n	8000c80 <SVPWM_Update+0x2a4>
    	svm->U = svm->to;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	edc3 7a08 	vstr	s15, [r3, #32]
 8000c7e:	e05a      	b.n	8000d36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c8a:	eef4 7a47 	vcmp.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	d127      	bne.n	8000ce4 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	edc3 7a08 	vstr	s15, [r3, #32]
 8000cd2:	e030      	b.n	8000d36 <SVPWM_Update+0x35a>
 8000cd4:	3f666666 	.word	0x3f666666
 8000cd8:	3c23d70a 	.word	0x3c23d70a
 8000cdc:	40c90fdb 	.word	0x40c90fdb
 8000ce0:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000cee:	eef4 7a47 	vcmp.f32	s15, s14
 8000cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf6:	d11e      	bne.n	8000d36 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	edd3 6a06 	vldr	s13, [r3, #24]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d5e:	ee17 2a90 	vmov	r2, s15
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	edd3 6a07 	vldr	s13, [r3, #28]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	3301      	adds	r3, #1
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d8c:	ee17 2a90 	vmov	r2, s15
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	edd3 6a08 	vldr	s13, [r3, #32]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	3301      	adds	r3, #1
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SVPWM_Update+0x3ec>)
 8000db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dba:	ee17 2a90 	vmov	r2, s15
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6178      	str	r0, [r7, #20]
 8000dd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ddc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000de0:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8000dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	d804      	bhi.n	8000e60 <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 8000e5e:	e03b      	b.n	8000ed8 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	dd20      	ble.n	8000eb8 <VHZ_Update+0x80>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8a:	d815      	bhi.n	8000eb8 <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	edd3 6a04 	vldr	s13, [r3, #16]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	ed93 6a06 	vldr	s12, [r3, #24]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000eb6:	e00f      	b.n	8000ed8 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ecc:	dc00      	bgt.n	8000ed0 <VHZ_Update+0x98>
}
 8000ece:	e003      	b.n	8000ed8 <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	615a      	str	r2, [r3, #20]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8000eee:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8001178 <main+0x290>
 8000ef2:	48a2      	ldr	r0, [pc, #648]	; (800117c <main+0x294>)
 8000ef4:	f7ff fd2e 	bl	8000954 <SVPWM_Init>
  VHZ_Init(&vhz1, 1, 0.1, 10, 100);
 8000ef8:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8001180 <main+0x298>
 8000efc:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000f00:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8001184 <main+0x29c>
 8000f04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f08:	489f      	ldr	r0, [pc, #636]	; (8001188 <main+0x2a0>)
 8000f0a:	f7ff ff5f 	bl	8000dcc <VHZ_Init>
  PIDController_Init(&slip, 5, 0, -500, 500, 0, 0, 10000);
 8000f0e:	ed9f 3a9a 	vldr	s6, [pc, #616]	; 8001178 <main+0x290>
 8000f12:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800118c <main+0x2a4>
 8000f16:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 800118c <main+0x2a4>
 8000f1a:	eddf 1a9d 	vldr	s3, [pc, #628]	; 8001190 <main+0x2a8>
 8000f1e:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8001194 <main+0x2ac>
 8000f22:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800118c <main+0x2a4>
 8000f26:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000f2a:	489b      	ldr	r0, [pc, #620]	; (8001198 <main+0x2b0>)
 8000f2c:	f7ff fcdc 	bl	80008e8 <PIDController_Init>

  // Setting up SPI buffer
  char spi_buf[20];
  uint8_t addr;
  uint8_t wip;
  uint8_t state = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fe4e 	bl	8001bd6 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f945 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fb87 	bl	8001650 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f42:	f000 fa29 	bl	8001398 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000f46:	f000 fb01 	bl	800154c <MX_TIM15_Init>
  MX_SPI1_Init();
 8000f4a:	f000 f9ad 	bl	80012a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 fb4f 	bl	80015f0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f52:	f000 f9e7 	bl	8001324 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	4890      	ldr	r0, [pc, #576]	; (800119c <main+0x2b4>)
 8000f5c:	f001 f98e 	bl	800227c <HAL_GPIO_WritePin>

  // Set starting address in EEPROM (arbitrarily set to 5). Note that for the
  // 25AA040A, we can't do sequential writes outside of page (16 bytes)
  addr = 0x05;
 8000f60:	2305      	movs	r3, #5
 8000f62:	70fb      	strb	r3, [r7, #3]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	488e      	ldr	r0, [pc, #568]	; (80011a0 <main+0x2b8>)
 8000f68:	f004 f886 	bl	8005078 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	488c      	ldr	r0, [pc, #560]	; (80011a0 <main+0x2b8>)
 8000f70:	f005 f8de 	bl	8006130 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	488a      	ldr	r0, [pc, #552]	; (80011a0 <main+0x2b8>)
 8000f78:	f004 f87e 	bl	8005078 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4888      	ldr	r0, [pc, #544]	; (80011a0 <main+0x2b8>)
 8000f80:	f005 f8d6 	bl	8006130 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4886      	ldr	r0, [pc, #536]	; (80011a0 <main+0x2b8>)
 8000f88:	f004 f876 	bl	8005078 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4884      	ldr	r0, [pc, #528]	; (80011a0 <main+0x2b8>)
 8000f90:	f005 f8ce 	bl	8006130 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8000f94:	4883      	ldr	r0, [pc, #524]	; (80011a4 <main+0x2bc>)
 8000f96:	f003 ffb9 	bl	8004f0c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8000f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	f200 80b9 	bhi.w	8001116 <main+0x22e>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <main+0xc4>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fc5 	.word	0x08000fc5
 8000fb0:	08001033 	.word	0x08001033
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	08001095 	.word	0x08001095
 8000fbc:	080010eb 	.word	0x080010eb
 8000fc0:	08001107 	.word	0x08001107
	      {
	        // Transmit
	        case 0:

	          // First 2 bytes of buffer are instruction and address
	          spi_buf[0] = EEPROM_WRITE;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	713b      	strb	r3, [r7, #4]
	          spi_buf[1] = addr;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	717b      	strb	r3, [r7, #5]

	          // Fill buffer with stuff to write to EEPROM
	          for (int i = 0; i < 10; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	e00b      	b.n	8000fea <main+0x102>
	          {
	            spi_buf[2 + i] = i;
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	6a3a      	ldr	r2, [r7, #32]
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fde:	440b      	add	r3, r1
 8000fe0:	f803 2c24 	strb.w	r2, [r3, #-36]
	          for (int i = 0; i < 10; i++)
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	ddf0      	ble.n	8000fd2 <main+0xea>
	          }

	          // Enable write enable latch (allow write operations)
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	4869      	ldr	r0, [pc, #420]	; (800119c <main+0x2b4>)
 8000ff6:	f001 f941 	bl	800227c <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	496a      	ldr	r1, [pc, #424]	; (80011a8 <main+0x2c0>)
 8001000:	486a      	ldr	r0, [pc, #424]	; (80011ac <main+0x2c4>)
 8001002:	f002 fb60 	bl	80036c6 <HAL_SPI_Transmit>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4864      	ldr	r0, [pc, #400]	; (800119c <main+0x2b4>)
 800100c:	f001 f936 	bl	800227c <HAL_GPIO_WritePin>

	          // Perform non-blocking write to SPI
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	4861      	ldr	r0, [pc, #388]	; (800119c <main+0x2b4>)
 8001016:	f001 f931 	bl	800227c <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_buf, 12);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	220c      	movs	r2, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4862      	ldr	r0, [pc, #392]	; (80011ac <main+0x2c4>)
 8001022:	f003 f801 	bl	8004028 <HAL_SPI_Transmit_IT>

	          // Go to next state: waiting for interrupt flag
	          state += 1;
 8001026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102a:	3301      	adds	r3, #1
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	          break;
 8001030:	e078      	b.n	8001124 <main+0x23c>

	        // Wait for transmit flag
	        case 1:

	          if (spi_xmit_flag)
 8001032:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <main+0x2c8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d06e      	beq.n	800111a <main+0x232>
	          {
	            // Clear flag and go to next state
	            spi_xmit_flag = 0;
 800103c:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <main+0x2c8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
	            state += 1;
 8001042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001046:	3301      	adds	r3, #1
 8001048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	          }

	          break;
 800104c:	e065      	b.n	800111a <main+0x232>

	        // Wait for WIP bit to be cleared
	        case 2:

	          // Read status register
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4852      	ldr	r0, [pc, #328]	; (800119c <main+0x2b4>)
 8001054:	f001 f912 	bl	800227c <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	2201      	movs	r2, #1
 800105c:	4955      	ldr	r1, [pc, #340]	; (80011b4 <main+0x2cc>)
 800105e:	4853      	ldr	r0, [pc, #332]	; (80011ac <main+0x2c4>)
 8001060:	f002 fb31 	bl	80036c6 <HAL_SPI_Transmit>
	          HAL_SPI_Receive(&hspi3, (uint8_t *)spi_buf, 1, 100);
 8001064:	1d39      	adds	r1, r7, #4
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	2201      	movs	r2, #1
 800106a:	4853      	ldr	r0, [pc, #332]	; (80011b8 <main+0x2d0>)
 800106c:	f002 fc99 	bl	80039a2 <HAL_SPI_Receive>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4849      	ldr	r0, [pc, #292]	; (800119c <main+0x2b4>)
 8001076:	f001 f901 	bl	800227c <HAL_GPIO_WritePin>

	          // Mask out WIP bit
	          wip = spi_buf[0] & 0b00000001;
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	76fb      	strb	r3, [r7, #27]

	          // If WIP is cleared, go to next state
	          if (wip == 0)
 8001082:	7efb      	ldrb	r3, [r7, #27]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14a      	bne.n	800111e <main+0x236>
	          {
	            state += 1;
 8001088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800108c:	3301      	adds	r3, #1
 800108e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	          }

	          break;
 8001092:	e044      	b.n	800111e <main+0x236>

	        // Set up for interrupt-based SPI receive
	        case 3:

	          // Clear SPI buffer
	          for (int i = 0; i < 12; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e007      	b.n	80010aa <main+0x1c2>
	          {
	            spi_buf[i] = 0;
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	          for (int i = 0; i < 12; i++)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b0b      	cmp	r3, #11
 80010ae:	ddf4      	ble.n	800109a <main+0x1b2>
	          }

	          // Read the 10 bytes back
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4839      	ldr	r0, [pc, #228]	; (800119c <main+0x2b4>)
 80010b6:	f001 f8e1 	bl	800227c <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_READ, 1, 100);
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	2201      	movs	r2, #1
 80010be:	493f      	ldr	r1, [pc, #252]	; (80011bc <main+0x2d4>)
 80010c0:	483a      	ldr	r0, [pc, #232]	; (80011ac <main+0x2c4>)
 80010c2:	f002 fb00 	bl	80036c6 <HAL_SPI_Transmit>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
 80010c6:	1cf9      	adds	r1, r7, #3
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	2201      	movs	r2, #1
 80010cc:	4837      	ldr	r0, [pc, #220]	; (80011ac <main+0x2c4>)
 80010ce:	f002 fafa 	bl	80036c6 <HAL_SPI_Transmit>
	          HAL_SPI_Receive_IT(&hspi3, (uint8_t *)spi_buf, 10);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	220a      	movs	r2, #10
 80010d6:	4619      	mov	r1, r3
 80010d8:	4837      	ldr	r0, [pc, #220]	; (80011b8 <main+0x2d0>)
 80010da:	f003 f833 	bl	8004144 <HAL_SPI_Receive_IT>

	          // Go to next state: waiting for receive to finish
	          state += 1;
 80010de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e2:	3301      	adds	r3, #1
 80010e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	          break;
 80010e8:	e01c      	b.n	8001124 <main+0x23c>

	        // Wait for receive flag
	        case 4:

	          if (spi_recv_flag)
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x2d8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d016      	beq.n	8001122 <main+0x23a>
	          {
	            // Clear flag and go to next state
	            spi_recv_flag = 0;
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <main+0x2d8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	            state += 1;
 80010fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fe:	3301      	adds	r3, #1
 8001100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	          }

	          break;
 8001104:	e00d      	b.n	8001122 <main+0x23a>
//	          uart_buf_len = sprintf(uart_buf, "\r\n");
//	          HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

	          // Wait a few seconds before retransmitting (yes, I know that this is
	          // blocking--you can make it non-blocking if you wish. I'm lazy.)
	          HAL_Delay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110a:	f000 fdd9 	bl	8001cc0 <HAL_Delay>
	          state = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	          break;
 8001114:	e006      	b.n	8001124 <main+0x23c>

	        default:
	          break;
 8001116:	bf00      	nop
 8001118:	e004      	b.n	8001124 <main+0x23c>
	          break;
 800111a:	bf00      	nop
 800111c:	e002      	b.n	8001124 <main+0x23c>
	          break;
 800111e:	bf00      	nop
 8001120:	e000      	b.n	8001124 <main+0x23c>
	          break;
 8001122:	bf00      	nop
		vhz1.Freq = 0.01;
	}
	else{
		vhz1.Freq += 0.001;
	}*/
	if(a >= 10){
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <main+0x2dc>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	db04      	blt.n	8001142 <main+0x25a>
		a = 0;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <main+0x2dc>)
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e012      	b.n	8001168 <main+0x280>
	}
	else{
		a += 0.001;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <main+0x2dc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9a6 	bl	8000498 <__aeabi_f2d>
 800114c:	a308      	add	r3, pc, #32	; (adr r3, 8001170 <main+0x288>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff f843 	bl	80001dc <__adddf3>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4618      	mov	r0, r3
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_d2f>
 8001162:	4602      	mov	r2, r0
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <main+0x2dc>)
 8001166:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fda9 	bl	8001cc0 <HAL_Delay>
	  switch(state)
 800116e:	e714      	b.n	8000f9a <main+0xb2>
 8001170:	d2f1a9fc 	.word	0xd2f1a9fc
 8001174:	3f50624d 	.word	0x3f50624d
 8001178:	461c4000 	.word	0x461c4000
 800117c:	20000258 	.word	0x20000258
 8001180:	42c80000 	.word	0x42c80000
 8001184:	3dcccccd 	.word	0x3dcccccd
 8001188:	2000010c 	.word	0x2000010c
 800118c:	00000000 	.word	0x00000000
 8001190:	43fa0000 	.word	0x43fa0000
 8001194:	c3fa0000 	.word	0xc3fa0000
 8001198:	20000080 	.word	0x20000080
 800119c:	48000400 	.word	0x48000400
 80011a0:	20000128 	.word	0x20000128
 80011a4:	20000034 	.word	0x20000034
 80011a8:	08007739 	.word	0x08007739
 80011ac:	20000174 	.word	0x20000174
 80011b0:	20000028 	.word	0x20000028
 80011b4:	0800773a 	.word	0x0800773a
 80011b8:	200000a8 	.word	0x200000a8
 80011bc:	08007738 	.word	0x08007738
 80011c0:	20000029 	.word	0x20000029
 80011c4:	20000290 	.word	0x20000290

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ac      	sub	sp, #176	; 0xb0
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d2:	2244      	movs	r2, #68	; 0x44
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 fd4e 	bl	8006c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2254      	movs	r2, #84	; 0x54
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fd40 	bl	8006c78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001218:	230a      	movs	r3, #10
 800121a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800121e:	2307      	movs	r3, #7
 8001220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001234:	4618      	mov	r0, r3
 8001236:	f001 f89d 	bl	8002374 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001240:	f000 fa8e 	bl	8001760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001250:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001254:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001260:	2104      	movs	r1, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fca6 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800126e:	f000 fa77 	bl	8001760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001272:	2302      	movs	r3, #2
 8001274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fe9d 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001288:	f000 fa6a 	bl	8001760 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800128c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001290:	f001 f81a 	bl	80022c8 <HAL_PWREx_ControlVoltageScaling>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800129a:	f000 fa61 	bl	8001760 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	37b0      	adds	r7, #176	; 0xb0
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_SPI1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_SPI1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_SPI1_Init+0x74>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI1_Init+0x74>)
 80012c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x74>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI1_Init+0x74>)
 80012de:	2228      	movs	r2, #40	; 0x28
 80012e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI1_Init+0x74>)
 8001308:	f002 f93a 	bl	8003580 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 fa25 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000174 	.word	0x20000174
 8001320:	40013000 	.word	0x40013000

08001324 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_SPI3_Init+0x6c>)
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <MX_SPI3_Init+0x70>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_SPI3_Init+0x6c>)
 800133c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001340:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x6c>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x6c>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x6c>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI3_Init+0x6c>)
 800137c:	f002 f900 	bl	8003580 <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001386:	f000 f9eb 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000a8 	.word	0x200000a8
 8001394:	40003c00 	.word	0x40003c00

08001398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09e      	sub	sp, #120	; 0x78
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	615a      	str	r2, [r3, #20]
 80013da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	222c      	movs	r2, #44	; 0x2c
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 fc48 	bl	8006c78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e8:	4b56      	ldr	r3, [pc, #344]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80013ea:	4a57      	ldr	r2, [pc, #348]	; (8001548 <MX_TIM1_Init+0x1b0>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80013ee:	4b55      	ldr	r3, [pc, #340]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80013f0:	224f      	movs	r2, #79	; 0x4f
 80013f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80013f6:	2260      	movs	r2, #96	; 0x60
 80013f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80013fa:	4b52      	ldr	r3, [pc, #328]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80013fc:	2263      	movs	r2, #99	; 0x63
 80013fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001406:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <MX_TIM1_Init+0x1ac>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001412:	484c      	ldr	r0, [pc, #304]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001414:	f003 fd23 	bl	8004e5e <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800141e:	f000 f99f 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800142c:	4619      	mov	r1, r3
 800142e:	4845      	ldr	r0, [pc, #276]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001430:	f004 f930 	bl	8005694 <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800143a:	f000 f991 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143e:	4841      	ldr	r0, [pc, #260]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001440:	f003 fdb8 	bl	8004fb4 <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800144a:	f000 f989 	bl	8001760 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001452:	2300      	movs	r3, #0
 8001454:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001456:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800145a:	4619      	mov	r1, r3
 800145c:	4839      	ldr	r0, [pc, #228]	; (8001544 <MX_TIM1_Init+0x1ac>)
 800145e:	f004 f9d2 	bl	8005806 <HAL_TIM_SlaveConfigSynchro>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001468:	f000 f97a 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800147c:	4619      	mov	r1, r3
 800147e:	4831      	ldr	r0, [pc, #196]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001480:	f004 fef4 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800148a:	f000 f969 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	; 0x60
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4824      	ldr	r0, [pc, #144]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80014b4:	f003 ffde 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014be:	f000 f94f 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	481e      	ldr	r0, [pc, #120]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80014cc:	f003 ffd2 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014d6:	f000 f943 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014de:	2208      	movs	r2, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_TIM1_Init+0x1ac>)
 80014e4:	f003 ffc6 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80014ee:	f000 f937 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001518:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001528:	f004 ff06 	bl	8006338 <HAL_TIMEx_ConfigBreakDeadTime>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8001532:	f000 f915 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM1_Init+0x1ac>)
 8001538:	f000 f9fe 	bl	8001938 <HAL_TIM_MspPostInit>

}
 800153c:	bf00      	nop
 800153e:	3778      	adds	r7, #120	; 0x78
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000128 	.word	0x20000128
 8001548:	40012c00 	.word	0x40012c00

0800154c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_TIM15_Init+0x9c>)
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <MX_TIM15_Init+0xa0>)
 8001570:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_TIM15_Init+0x9c>)
 8001574:	224f      	movs	r2, #79	; 0x4f
 8001576:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_TIM15_Init+0x9c>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM15_Init+0x9c>)
 8001580:	2263      	movs	r2, #99	; 0x63
 8001582:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_TIM15_Init+0x9c>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_TIM15_Init+0x9c>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_TIM15_Init+0x9c>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_TIM15_Init+0x9c>)
 8001598:	f003 fc61 	bl	8004e5e <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80015a2:	f000 f8dd 	bl	8001760 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_TIM15_Init+0x9c>)
 80015b6:	f004 f926 	bl	8005806 <HAL_TIM_SlaveConfigSynchro>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80015c0:	f000 f8ce 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM15_Init+0x9c>)
 80015d2:	f004 fe4b 	bl	800626c <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80015dc:	f000 f8c0 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000034 	.word	0x20000034
 80015ec:	40014000 	.word	0x40014000

080015f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART2_UART_Init+0x58>)
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_USART2_UART_Init+0x5c>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART2_UART_Init+0x58>)
 80015fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_USART2_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART2_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART2_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART2_UART_Init+0x58>)
 8001634:	f004 ff3b 	bl	80064ae <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800163e:	f000 f88f 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001d8 	.word	0x200001d8
 800164c:	40004400 	.word	0x40004400

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_GPIO_Init+0x74>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <MX_GPIO_Init+0x74>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_GPIO_Init+0x74>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_GPIO_Init+0x74>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <MX_GPIO_Init+0x74>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_GPIO_Init+0x74>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <MX_GPIO_Init+0x78>)
 800169c:	f000 fdee 	bl	800227c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_GPIO_Init+0x78>)
 80016b8:	f000 fc76 	bl	8001fa8 <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_TIM_PeriodElapsedCallback>:

}
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	OldSector = svpwm1.SectorPointer;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016de:	ee17 2a90 	vmov	r2, s15
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016e4:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016e8:	f7ff fba6 	bl	8000e38 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80016ee:	4906      	ldr	r1, [pc, #24]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016f2:	f7ff f973 	bl	80009dc <SVPWM_Update>
	//Count_Up(&svpwm1, OldSector);

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000258 	.word	0x20000258
 8001704:	2000002c 	.word	0x2000002c
 8001708:	2000010c 	.word	0x2000010c
 800170c:	20000128 	.word	0x20000128

08001710 <HAL_SPI_TxCpltCallback>:
}
#endif

// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2140      	movs	r1, #64	; 0x40
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <HAL_SPI_TxCpltCallback+0x20>)
 800171e:	f000 fdad 	bl	800227c <HAL_GPIO_WritePin>
  spi_xmit_flag = 1;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_SPI_TxCpltCallback+0x24>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	48000400 	.word	0x48000400
 8001734:	20000028 	.word	0x20000028

08001738 <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <HAL_SPI_RxCpltCallback+0x20>)
 8001746:	f000 fd99 	bl	800227c <HAL_GPIO_WritePin>
  spi_recv_flag = 1;
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_SPI_RxCpltCallback+0x24>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	48000400 	.word	0x48000400
 800175c:	20000029 	.word	0x20000029

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <HAL_SPI_MspInit+0xec>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d132      	bne.n	8001840 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 800180a:	f241 0342 	movw	r3, #4162	; 0x1042
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181c:	2305      	movs	r3, #5
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f000 fbbd 	bl	8001fa8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2023      	movs	r0, #35	; 0x23
 8001834:	f000 fb41 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001838:	2023      	movs	r0, #35	; 0x23
 800183a:	f000 fb5a 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800183e:	e02c      	b.n	800189a <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d127      	bne.n	800189a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800187a:	2338      	movs	r3, #56	; 0x38
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188a:	2306      	movs	r3, #6
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <HAL_SPI_MspInit+0xf8>)
 8001896:	f000 fb87 	bl	8001fa8 <HAL_GPIO_Init>
}
 800189a:	bf00      	nop
 800189c:	3730      	adds	r7, #48	; 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40003c00 	.word	0x40003c00
 80018b0:	48000400 	.word	0x48000400

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <HAL_TIM_Base_MspInit+0x78>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d114      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	6613      	str	r3, [r2, #96]	; 0x60
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2018      	movs	r0, #24
 80018e4:	f000 fae9 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018e8:	2018      	movs	r0, #24
 80018ea:	f000 fb02 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018ee:	e018      	b.n	8001922 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_TIM_Base_MspInit+0x80>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d113      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6613      	str	r3, [r2, #96]	; 0x60
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_Base_MspInit+0x7c>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2018      	movs	r0, #24
 8001918:	f000 facf 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800191c:	2018      	movs	r0, #24
 800191e:	f000 fae8 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40014000 	.word	0x40014000

08001938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <HAL_TIM_MspPostInit+0xa0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d139      	bne.n	80019ce <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_TIM_MspPostInit+0xa4>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800199c:	2301      	movs	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f000 fafd 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ae:	2303      	movs	r3, #3
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019be:	2301      	movs	r3, #1
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_TIM_MspPostInit+0xa8>)
 80019ca:	f000 faed 	bl	8001fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_UART_MspInit+0xa0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d13a      	bne.n	8001a7c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_UART_MspInit+0xa4>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a36:	2304      	movs	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a46:	2307      	movs	r3, #7
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f000 faa8 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f000 fa96 	bl	8001fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40021000 	.word	0x40021000

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8ce 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001aee:	f003 fba1 	bl	8005234 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001af4:	f003 fb9e 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000128 	.word	0x20000128
 8001b00:	20000034 	.word	0x20000034

08001b04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <SPI1_IRQHandler+0x10>)
 8001b0a:	f002 fc7b 	bl	8004404 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000174 	.word	0x20000174

08001b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <SystemInit+0x64>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <SystemInit+0x64>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <SystemInit+0x68>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <SystemInit+0x68>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <SystemInit+0x68>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <SystemInit+0x68>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <SystemInit+0x68>)
 8001b44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <SystemInit+0x68>)
 8001b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <SystemInit+0x68>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <SystemInit+0x68>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <SystemInit+0x68>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SystemInit+0x64>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00
 8001b80:	40021000 	.word	0x40021000

08001b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff ffc6 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b8e:	e003      	b.n	8001b98 <LoopCopyDataInit>

08001b90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b96:	3104      	adds	r1, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ba0:	d3f6      	bcc.n	8001b90 <CopyDataInit>
	ldr	r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ba4:	e002      	b.n	8001bac <LoopFillZerobss>

08001ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ba6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ba8:	f842 3b04 	str.w	r3, [r2], #4

08001bac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <LoopForever+0x16>)
	cmp	r2, r3
 8001bae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bb0:	d3f9      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f005 f83d 	bl	8006c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb6:	f7ff f997 	bl	8000ee8 <main>

08001bba <LoopForever>:

LoopForever:
    b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001bc0:	08007b64 	.word	0x08007b64
	ldr	r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bc8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001bcc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001bd0:	20000298 	.word	0x20000298

08001bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_IRQHandler>

08001bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f95f 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f80e 	bl	8001c08 <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	e001      	b.n	8001bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf8:	f7ff fdba 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_InitTick+0x6c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_InitTick+0x70>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_InitTick+0x6c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f96b 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d809      	bhi.n	8001c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f935 	bl	8001eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_InitTick+0x74>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e007      	b.n	8001c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e004      	b.n	8001c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e001      	b.n	8001c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000294 	.word	0x20000294

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000294 	.word	0x20000294

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_Delay+0x40>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000008 	.word	0x20000008

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d005      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e029      	b.n	8001f9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020e 	bic.w	r2, r2, #14
 8001f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f003 021c 	and.w	r2, r3, #28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
    }
  }
  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e148      	b.n	800224a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 813a 	beq.w	8002244 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0xea>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b12      	cmp	r3, #18
 8002090:	d123      	bne.n	80020da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	6939      	ldr	r1, [r7, #16]
 80020d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8094 	beq.w	8002244 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211c:	4b52      	ldr	r3, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x2c0>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <HAL_GPIO_Init+0x2c0>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6613      	str	r3, [r2, #96]	; 0x60
 8002128:	4b4f      	ldr	r3, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x2c0>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002134:	4a4d      	ldr	r2, [pc, #308]	; (800226c <HAL_GPIO_Init+0x2c4>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800215e:	d00d      	beq.n	800217c <HAL_GPIO_Init+0x1d4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_GPIO_Init+0x2c8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <HAL_GPIO_Init+0x1d0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a42      	ldr	r2, [pc, #264]	; (8002274 <HAL_GPIO_Init+0x2cc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_GPIO_Init+0x1cc>
 8002170:	2302      	movs	r3, #2
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x1d6>
 8002174:	2307      	movs	r3, #7
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x1d6>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x1d6>
 800217c:	2300      	movs	r3, #0
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_GPIO_Init+0x2c4>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ea:	4a23      	ldr	r2, [pc, #140]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002214:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_GPIO_Init+0x2d0>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f aeaf 	bne.w	8001fb8 <HAL_GPIO_Init+0x10>
  }
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	48000400 	.word	0x48000400
 8002274:	48000800 	.word	0x48000800
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40007000 	.word	0x40007000

080022c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d6:	d130      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d038      	beq.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2232      	movs	r2, #50	; 0x32
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230c:	e002      	b.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3b01      	subs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002320:	d102      	bne.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f2      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d110      	bne.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e00f      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d007      	beq.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002350:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40007000 	.word	0x40007000
 800236c:	20000000 	.word	0x20000000
 8002370:	431bde83 	.word	0x431bde83

08002374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f000 bc11 	b.w	8002baa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002388:	4ba0      	ldr	r3, [pc, #640]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002392:	4b9e      	ldr	r3, [pc, #632]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80e4 	beq.w	8002572 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4c>
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	f040 808b 	bne.w	80024ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 8087 	bne.w	80024ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x64>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e3e8      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_RCC_OscConfig+0x7e>
 80023e8:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f0:	e005      	b.n	80023fe <HAL_RCC_OscConfig+0x8a>
 80023f2:	4b86      	ldr	r3, [pc, #536]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fe:	4293      	cmp	r3, r2
 8002400:	d223      	bcs.n	800244a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fd78 	bl	8002efc <RCC_SetFlashLatencyFromMSIRange>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e3c9      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7c      	ldr	r2, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b7a      	ldr	r3, [pc, #488]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4977      	ldr	r1, [pc, #476]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	4972      	ldr	r1, [pc, #456]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
 8002448:	e025      	b.n	8002496 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800244a:	4b70      	ldr	r3, [pc, #448]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6f      	ldr	r2, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b6d      	ldr	r3, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	496a      	ldr	r1, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	4965      	ldr	r1, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd38 	bl	8002efc <RCC_SetFlashLatencyFromMSIRange>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e389      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002496:	f000 fc6f 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 800249a:	4601      	mov	r1, r0
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <HAL_RCC_OscConfig+0x29c>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	fa21 f303 	lsr.w	r3, r1, r3
 80024b2:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_OscConfig+0x2a0>)
 80024b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b6:	4b58      	ldr	r3, [pc, #352]	; (8002618 <HAL_RCC_OscConfig+0x2a4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fba4 	bl	8001c08 <HAL_InitTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d052      	beq.n	8002570 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e36d      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d032      	beq.n	800253c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024d6:	4b4d      	ldr	r3, [pc, #308]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a4c      	ldr	r2, [pc, #304]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e2:	f7ff fbe1 	bl	8001ca8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ea:	f7ff fbdd 	bl	8001ca8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e356      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	493a      	ldr	r1, [pc, #232]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	4935      	ldr	r1, [pc, #212]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
 800253a:	e01a      	b.n	8002572 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002548:	f7ff fbae 	bl	8001ca8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002550:	f7ff fbaa 	bl	8001ca8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e323      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x1dc>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d073      	beq.n	8002666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x21c>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d10e      	bne.n	80025a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <HAL_RCC_OscConfig+0x298>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d063      	beq.n	8002664 <HAL_RCC_OscConfig+0x2f0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d15f      	bne.n	8002664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e300      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x24c>
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0x288>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x270>
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0x288>
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a05      	ldr	r2, [pc, #20]	; (800260c <HAL_RCC_OscConfig+0x298>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff fb50 	bl	8001ca8 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	e010      	b.n	800262e <HAL_RCC_OscConfig+0x2ba>
 800260c:	40021000 	.word	0x40021000
 8002610:	0800773c 	.word	0x0800773c
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fb44 	bl	8001ca8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e2bd      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	4baf      	ldr	r3, [pc, #700]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x2a8>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fb34 	bl	8001ca8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff fb30 	bl	8001ca8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e2a9      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	4ba5      	ldr	r3, [pc, #660]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x2d0>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d060      	beq.n	8002734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x310>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d119      	bne.n	80026b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d116      	bne.n	80026b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	4b99      	ldr	r3, [pc, #612]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_OscConfig+0x328>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e286      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b93      	ldr	r3, [pc, #588]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	4990      	ldr	r1, [pc, #576]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	e040      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d023      	beq.n	8002702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ba:	4b8c      	ldr	r3, [pc, #560]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a8b      	ldr	r2, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff faef 	bl	8001ca8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff faeb 	bl	8001ca8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e264      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	497c      	ldr	r1, [pc, #496]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e018      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a79      	ldr	r2, [pc, #484]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7ff facb 	bl	8001ca8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7ff fac7 	bl	8001ca8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e240      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03c      	beq.n	80027ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01c      	beq.n	8002782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	4a67      	ldr	r2, [pc, #412]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff faa6 	bl	8001ca8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff faa2 	bl	8001ca8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e21b      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	4b5e      	ldr	r3, [pc, #376]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCC_OscConfig+0x3ec>
 8002780:	e01b      	b.n	80027ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fa89 	bl	8001ca8 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279a:	f7ff fa85 	bl	8001ca8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1fe      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ac:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ef      	bne.n	800279a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80a6 	beq.w	8002914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027cc:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	4a43      	ldr	r2, [pc, #268]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6593      	str	r3, [r2, #88]	; 0x58
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d118      	bne.n	8002832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280c:	f7ff fa4c 	bl	8001ca8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7ff fa48 	bl	8001ca8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1c1      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <HAL_RCC_OscConfig+0x57c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x4d8>
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	4a2a      	ldr	r2, [pc, #168]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284a:	e024      	b.n	8002896 <HAL_RCC_OscConfig+0x522>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d110      	bne.n	8002876 <HAL_RCC_OscConfig+0x502>
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002874:	e00f      	b.n	8002896 <HAL_RCC_OscConfig+0x522>
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7ff fa03 	bl	8001ca8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7ff f9ff 	bl	8001ca8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e176      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x578>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ed      	beq.n	80028a6 <HAL_RCC_OscConfig+0x532>
 80028ca:	e01a      	b.n	8002902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7ff f9ec 	bl	8001ca8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d2:	e00f      	b.n	80028f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7ff f9e8 	bl	8001ca8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d906      	bls.n	80028f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e15f      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f4:	4baa      	ldr	r3, [pc, #680]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e8      	bne.n	80028d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002902:	7ffb      	ldrb	r3, [r7, #31]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4ba5      	ldr	r3, [pc, #660]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	4aa4      	ldr	r2, [pc, #656]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d03c      	beq.n	800299a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002928:	4b9d      	ldr	r3, [pc, #628]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 800292a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292e:	4a9c      	ldr	r2, [pc, #624]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f9b6 	bl	8001ca8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002940:	f7ff f9b2 	bl	8001ca8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e12b      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x5cc>
 8002960:	e01b      	b.n	800299a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002968:	4a8d      	ldr	r2, [pc, #564]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7ff f999 	bl	8001ca8 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297a:	f7ff f995 	bl	8001ca8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e10e      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800298c:	4b84      	ldr	r3, [pc, #528]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 800298e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ef      	bne.n	800297a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8102 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	f040 80c5 	bne.w	8002b38 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ae:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d12c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	3b01      	subs	r3, #1
 80029ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d123      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d11b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d113      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d109      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d067      	beq.n	8002aec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d062      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0bb      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a32:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5a      	ldr	r2, [pc, #360]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3e:	f7ff f933 	bl	8001ca8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff f92f 	bl	8001ca8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0a8      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a64:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <HAL_RCC_OscConfig+0x830>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7e:	0212      	lsls	r2, r2, #8
 8002a80:	4311      	orrs	r1, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a86:	0852      	lsrs	r2, r2, #1
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	0552      	lsls	r2, r2, #21
 8002a8c:	4311      	orrs	r1, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0652      	lsls	r2, r2, #25
 8002a98:	4311      	orrs	r1, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a9e:	06d2      	lsls	r2, r2, #27
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	493f      	ldr	r1, [pc, #252]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a39      	ldr	r2, [pc, #228]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac0:	f7ff f8f2 	bl	8001ca8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff f8ee 	bl	8001ca8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e067      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae6:	e05f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e05e      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d157      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b10:	f7ff f8ca 	bl	8001ca8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff f8c6 	bl	8001ca8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e03f      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x7a4>
 8002b36:	e037      	b.n	8002ba8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d02d      	beq.n	8002b9a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b5c:	f023 0303 	bic.w	r3, r3, #3
 8002b60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff f899 	bl	8001ca8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7ff f895 	bl	8001ca8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e00e      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_RCC_OscConfig+0x82c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x806>
 8002b98:	e006      	b.n	8002ba8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e005      	b.n	8002baa <HAL_RCC_OscConfig+0x836>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0c8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4961      	ldr	r1, [pc, #388]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b0      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d04c      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e09e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e092      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e086      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e07e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	493f      	ldr	r1, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6e:	f7ff f81b 	bl	8001ca8 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7ff f817 	bl	8001ca8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e066      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 020c 	and.w	r2, r3, #12
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d1eb      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	492c      	ldr	r1, [pc, #176]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	4924      	ldr	r1, [pc, #144]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e036      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4918      	ldr	r1, [pc, #96]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4910      	ldr	r1, [pc, #64]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d2a:	f000 f825 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	5cd3      	ldrb	r3, [r2, r3]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	fa21 f303 	lsr.w	r3, r1, r3
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff5a 	bl	8001c08 <HAL_InitTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	0800773c 	.word	0x0800773c
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x34>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d121      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e004      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d133      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa4>
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0xaa>
 8002e1a:	e005      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e1e:	617b      	str	r3, [r7, #20]
      break;
 8002e20:	e005      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e24:	617b      	str	r3, [r7, #20]
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	617b      	str	r3, [r7, #20]
      break;
 8002e2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	3301      	adds	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	fb02 f203 	mul.w	r2, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0e5b      	lsrs	r3, r3, #25
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3724      	adds	r7, #36	; 0x24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08007754 	.word	0x08007754
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4601      	mov	r1, r0
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	0800774c 	.word	0x0800774c

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ed4:	f7ff ffda 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed8:	4601      	mov	r1, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0adb      	lsrs	r3, r3, #11
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ee6:	5cd3      	ldrb	r3, [r2, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	0800774c 	.word	0x0800774c

08002efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f08:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f14:	f7ff f9ca 	bl	80022ac <HAL_PWREx_GetVoltageRange>
 8002f18:	6178      	str	r0, [r7, #20]
 8002f1a:	e014      	b.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6593      	str	r3, [r2, #88]	; 0x58
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f34:	f7ff f9ba 	bl	80022ac <HAL_PWREx_GetVoltageRange>
 8002f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d10b      	bne.n	8002f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d919      	bls.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2ba0      	cmp	r3, #160	; 0xa0
 8002f58:	d902      	bls.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e013      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	e010      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d902      	bls.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e00a      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d102      	bne.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f78:	2302      	movs	r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e004      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d101      	bne.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 0207 	bic.w	r2, r3, #7
 8002f90:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40022000 	.word	0x40022000

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02f      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fe0:	d005      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe6:	d015      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002fec:	e00f      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002fee:	4bac      	ldr	r3, [pc, #688]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4aab      	ldr	r2, [pc, #684]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffa:	e00c      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f9cc 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300c:	e003      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	74fb      	strb	r3, [r7, #19]
      break;
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800301c:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	499d      	ldr	r1, [pc, #628]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003032:	e001      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8099 	beq.w	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4a8e      	ldr	r2, [pc, #568]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	; 0x58
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003078:	2301      	movs	r3, #1
 800307a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800307c:	4b89      	ldr	r3, [pc, #548]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a88      	ldr	r2, [pc, #544]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003088:	f7fe fe0e 	bl	8001ca8 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800308e:	e009      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003090:	f7fe fe0a 	bl	8001ca8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	74fb      	strb	r3, [r7, #19]
        break;
 80030a2:	e005      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a4:	4b7f      	ldr	r3, [pc, #508]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d155      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030b6:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01e      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d019      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030de:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030fe:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fdca 	bl	8001ca8 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	e00b      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe fdc6 	bl	8001ca8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d902      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	74fb      	strb	r3, [r7, #19]
            break;
 800312e:	e006      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ec      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003144:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	4953      	ldr	r1, [pc, #332]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
 8003160:	e001      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003166:	7c7b      	ldrb	r3, [r7, #17]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4943      	ldr	r1, [pc, #268]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 020c 	bic.w	r2, r3, #12
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	493a      	ldr	r1, [pc, #232]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c8:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	4932      	ldr	r1, [pc, #200]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	4921      	ldr	r1, [pc, #132]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4910      	ldr	r1, [pc, #64]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02c      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003290:	d10a      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a02      	ldr	r2, [pc, #8]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329c:	60d3      	str	r3, [r2, #12]
 800329e:	e015      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f871 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d028      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	492d      	ldr	r1, [pc, #180]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f6:	d106      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a27      	ldr	r2, [pc, #156]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
 8003304:	e011      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330e:	d10c      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f842 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01c      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	4915      	ldr	r1, [pc, #84]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f81f 	bl	80033a0 <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003392:	7cbb      	ldrb	r3, [r7, #18]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ae:	4b73      	ldr	r3, [pc, #460]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ba:	4b70      	ldr	r3, [pc, #448]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
       ||
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033d2:	4b6a      	ldr	r3, [pc, #424]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
       ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d044      	beq.n	8003470 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e041      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d00c      	beq.n	800340e <RCCEx_PLLSAI1_Config+0x6e>
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d013      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x80>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d120      	bne.n	800343e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033fc:	4b5f      	ldr	r3, [pc, #380]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11d      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340c:	e01a      	b.n	8003444 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800340e:	4b5b      	ldr	r3, [pc, #364]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341e:	e013      	b.n	8003448 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003420:	4b56      	ldr	r3, [pc, #344]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800343c:	e006      	b.n	800344c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      break;
 8003442:	e004      	b.n	800344e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003444:	bf00      	nop
 8003446:	e002      	b.n	800344e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800344c:	bf00      	nop
    }

    if(status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	3b01      	subs	r3, #1
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	430b      	orrs	r3, r1
 800346a:	4944      	ldr	r1, [pc, #272]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d17c      	bne.n	8003570 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a40      	ldr	r2, [pc, #256]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800347c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003482:	f7fe fc11 	bl	8001ca8 <HAL_GetTick>
 8003486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003488:	e009      	b.n	800349e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800348a:	f7fe fc0d 	bl	8001ca8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d902      	bls.n	800349e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	73fb      	strb	r3, [r7, #15]
        break;
 800349c:	e005      	b.n	80034aa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ef      	bne.n	800348a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d15f      	bne.n	8003570 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d110      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	0211      	lsls	r1, r2, #8
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	06d2      	lsls	r2, r2, #27
 80034ce:	430a      	orrs	r2, r1
 80034d0:	492a      	ldr	r1, [pc, #168]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	610b      	str	r3, [r1, #16]
 80034d6:	e027      	b.n	8003528 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d112      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	0211      	lsls	r1, r2, #8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6912      	ldr	r2, [r2, #16]
 80034f4:	0852      	lsrs	r2, r2, #1
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0552      	lsls	r2, r2, #21
 80034fa:	430a      	orrs	r2, r1
 80034fc:	491f      	ldr	r1, [pc, #124]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
 8003502:	e011      	b.n	8003528 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800350c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	0211      	lsls	r1, r2, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6952      	ldr	r2, [r2, #20]
 800351a:	0852      	lsrs	r2, r2, #1
 800351c:	3a01      	subs	r2, #1
 800351e:	0652      	lsls	r2, r2, #25
 8003520:	430a      	orrs	r2, r1
 8003522:	4916      	ldr	r1, [pc, #88]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800352e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fe fbb8 	bl	8001ca8 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fe fbb4 	bl	8001ca8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
          break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ef      	beq.n	800353c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <RCCEx_PLLSAI1_Config+0x1dc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e095      	b.n	80036be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a2:	d009      	beq.n	80035b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
 80035aa:	e005      	b.n	80035b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe f8f0 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035f8:	d902      	bls.n	8003600 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e002      	b.n	8003606 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800360e:	d007      	beq.n	8003620 <HAL_SPI_Init+0xa0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	ea42 0103 	orr.w	r1, r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	f003 0204 	and.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800369c:	ea42 0103 	orr.w	r1, r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_SPI_Transmit+0x22>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e158      	b.n	800399a <HAL_SPI_Transmit+0x2d4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f0:	f7fe fada 	bl	8001ca8 <HAL_GetTick>
 80036f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d002      	beq.n	800370c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800370a:	e13d      	b.n	8003988 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_Transmit+0x52>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800371c:	e134      	b.n	8003988 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	d10f      	bne.n	800378a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b0:	d94b      	bls.n	800384a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0xfa>
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13e      	bne.n	800383e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037e4:	e02b      	b.n	800383e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d112      	bne.n	800381a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003818:	e011      	b.n	800383e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fe fa45 	bl	8001ca8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Transmit+0x16c>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Transmit+0x172>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800383c:	e0a4      	b.n	8003988 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ce      	bne.n	80037e6 <HAL_SPI_Transmit+0x120>
 8003848:	e07c      	b.n	8003944 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x192>
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d170      	bne.n	800393a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d912      	bls.n	8003888 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b02      	subs	r3, #2
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003886:	e058      	b.n	800393a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038ae:	e044      	b.n	800393a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d12b      	bne.n	8003916 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d912      	bls.n	80038ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b02      	subs	r3, #2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ec:	e025      	b.n	800393a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003914:	e011      	b.n	800393a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003916:	f7fe f9c7 	bl	8001ca8 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_Transmit+0x268>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_Transmit+0x26e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003938:	e026      	b.n	8003988 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1b5      	bne.n	80038b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f001 f991 	bl	8004c70 <SPI_EndRxTxTransaction>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e000      	b.n	8003988 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003998:	7ffb      	ldrb	r3, [r7, #31]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039be:	d112      	bne.n	80039e6 <HAL_SPI_Receive+0x44>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10e      	bne.n	80039e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2204      	movs	r2, #4
 80039cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f910 	bl	8003c02 <HAL_SPI_TransmitReceive>
 80039e2:	4603      	mov	r3, r0
 80039e4:	e109      	b.n	8003bfa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_SPI_Receive+0x52>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e102      	b.n	8003bfa <HAL_SPI_Receive+0x258>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039fc:	f7fe f954 	bl	8001ca8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a12:	e0e9      	b.n	8003be8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Receive+0x7e>
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a24:	e0e0      	b.n	8003be8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a70:	d908      	bls.n	8003a84 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e007      	b.n	8003a94 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9c:	d10f      	bne.n	8003abe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d007      	beq.n	8003adc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae4:	d867      	bhi.n	8003bb6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ae6:	e030      	b.n	8003b4a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d117      	bne.n	8003b26 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f103 020c 	add.w	r2, r3, #12
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b24:	e011      	b.n	8003b4a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b26:	f7fe f8bf 	bl	8001ca8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d803      	bhi.n	8003b3e <HAL_SPI_Receive+0x19c>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d102      	bne.n	8003b44 <HAL_SPI_Receive+0x1a2>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b48:	e04e      	b.n	8003be8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1c8      	bne.n	8003ae8 <HAL_SPI_Receive+0x146>
 8003b56:	e034      	b.n	8003bc2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	b292      	uxth	r2, r2
 8003b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b90:	e011      	b.n	8003bb6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b92:	f7fe f889 	bl	8001ca8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_SPI_Receive+0x208>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_Receive+0x20e>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bb4:	e018      	b.n	8003be8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ca      	bne.n	8003b58 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fffa 	bl	8004bc0 <SPI_EndRxTransaction>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
 8003be4:	e000      	b.n	8003be8 <HAL_SPI_Receive+0x246>
  }

error :
 8003be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_SPI_TransmitReceive+0x26>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e1fb      	b.n	8004020 <HAL_SPI_TransmitReceive+0x41e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c30:	f7fe f83a 	bl	8001ca8 <HAL_GetTick>
 8003c34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c4c:	7efb      	ldrb	r3, [r7, #27]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d00e      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x6e>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c58:	d106      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x66>
 8003c62:	7efb      	ldrb	r3, [r7, #27]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d003      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c6e:	e1cd      	b.n	800400c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x80>
 8003c7c:	887b      	ldrh	r3, [r7, #2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c88:	e1c0      	b.n	800400c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	887a      	ldrh	r2, [r7, #2]
 8003cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	887a      	ldrh	r2, [r7, #2]
 8003cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	887a      	ldrh	r2, [r7, #2]
 8003cca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_SPI_TransmitReceive+0xe6>
 8003ce2:	8a3b      	ldrh	r3, [r7, #16]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d908      	bls.n	8003cfa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	e007      	b.n	8003d0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d007      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d30:	d97c      	bls.n	8003e2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x13e>
 8003d3a:	8a7b      	ldrh	r3, [r7, #18]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d169      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d64:	e056      	b.n	8003e14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11b      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x1aa>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x1aa>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d113      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11c      	bne.n	8003df4 <HAL_SPI_TransmitReceive+0x1f2>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df0:	2301      	movs	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003df4:	f7fd ff58 	bl	8001ca8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d807      	bhi.n	8003e14 <HAL_SPI_TransmitReceive+0x212>
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d003      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e12:	e0fb      	b.n	800400c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1a3      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x164>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d19d      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x164>
 8003e2a:	e0df      	b.n	8003fec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x23a>
 8003e34:	8a7b      	ldrh	r3, [r7, #18]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f040 80cb 	bne.w	8003fd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d912      	bls.n	8003e6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b02      	subs	r3, #2
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e6a:	e0b2      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	7812      	ldrb	r2, [r2, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	e09e      	b.n	8003fd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d134      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x30a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02f      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x30a>
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d12c      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d912      	bls.n	8003ee2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b02      	subs	r3, #2
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee0:	e012      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d148      	bne.n	8003fac <HAL_SPI_TransmitReceive+0x3aa>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d042      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d923      	bls.n	8003f7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b02      	subs	r3, #2
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d81f      	bhi.n	8003fa8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	e016      	b.n	8003fa8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f103 020c 	add.w	r2, r3, #12
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fac:	f7fd fe7c 	bl	8001ca8 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <HAL_SPI_TransmitReceive+0x3c2>
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x3c8>
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003fd0:	e01c      	b.n	800400c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f af5b 	bne.w	8003e94 <HAL_SPI_TransmitReceive+0x292>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f47f af54 	bne.w	8003e94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fe3d 	bl	8004c70 <SPI_EndRxTxTransaction>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	661a      	str	r2, [r3, #96]	; 0x60
 8004008:	e000      	b.n	800400c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800400a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004020:	4618      	mov	r0, r3
 8004022:	3728      	adds	r7, #40	; 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_SPI_Transmit_IT+0x20>
 8004044:	2302      	movs	r3, #2
 8004046:	e072      	b.n	800412e <HAL_SPI_Transmit_IT+0x106>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_SPI_Transmit_IT+0x34>
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004060:	e060      	b.n	8004124 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004072:	e057      	b.n	8004124 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2203      	movs	r2, #3
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b8:	d903      	bls.n	80040c2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_SPI_Transmit_IT+0x114>)
 80040be:	651a      	str	r2, [r3, #80]	; 0x50
 80040c0:	e002      	b.n	80040c8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_SPI_Transmit_IT+0x118>)
 80040c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	d10f      	bne.n	80040f2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004100:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d008      	beq.n	8004122 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e000      	b.n	8004124 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004122:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	0800494f 	.word	0x0800494f
 8004140:	08004909 	.word	0x08004909

08004144 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d110      	bne.n	8004180 <HAL_SPI_Receive_IT+0x3c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004166:	d10b      	bne.n	8004180 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2204      	movs	r2, #4
 800416c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f894 	bl	80042a4 <HAL_SPI_TransmitReceive_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	e089      	b.n	8004294 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_SPI_Receive_IT+0x4a>
 800418a:	2302      	movs	r3, #2
 800418c:	e082      	b.n	8004294 <HAL_SPI_Receive_IT+0x150>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041a6:	e070      	b.n	800428a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Receive_IT+0x70>
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041b8:	e067      	b.n	800428a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2204      	movs	r2, #4
 80041be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041fe:	d90b      	bls.n	8004218 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_SPI_Receive_IT+0x158>)
 8004214:	64da      	str	r2, [r3, #76]	; 0x4c
 8004216:	e00a      	b.n	800422e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004226:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_SPI_Receive_IT+0x15c>)
 800422c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004236:	d10f      	bne.n	8004258 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004246:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004256:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004266:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d008      	beq.n	8004288 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e000      	b.n	800428a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004288:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	080048bd 	.word	0x080048bd
 80042a0:	0800486d 	.word	0x0800486d

080042a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_SPI_TransmitReceive_IT+0x20>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e091      	b.n	80043e8 <HAL_SPI_TransmitReceive_IT+0x144>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042da:	7dbb      	ldrb	r3, [r7, #22]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d00d      	beq.n	80042fc <HAL_SPI_TransmitReceive_IT+0x58>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d106      	bne.n	80042f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_TransmitReceive_IT+0x52>
 80042f0:	7dbb      	ldrb	r3, [r7, #22]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fa:	e070      	b.n	80043de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004312:	e064      	b.n	80043de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b04      	cmp	r3, #4
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2205      	movs	r2, #5
 8004324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	887a      	ldrh	r2, [r7, #2]
 800434a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	887a      	ldrh	r2, [r7, #2]
 8004352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800435e:	d906      	bls.n	800436e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004364:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800436a:	651a      	str	r2, [r3, #80]	; 0x50
 800436c:	e005      	b.n	800437a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8004372:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004378:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004382:	d802      	bhi.n	800438a <HAL_SPI_TransmitReceive_IT+0xe6>
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d908      	bls.n	800439c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	e007      	b.n	80043ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80043ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d008      	beq.n	80043dc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e000      	b.n	80043de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80043dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	080047a7 	.word	0x080047a7
 80043f8:	0800480d 	.word	0x0800480d
 80043fc:	08004657 	.word	0x08004657
 8004400:	08004715 	.word	0x08004715

08004404 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
    return;
 8004446:	e0d8      	b.n	80045fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_SPI_IRQHandler+0x66>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	09db      	lsrs	r3, r3, #7
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
    return;
 8004468:	e0c7      	b.n	80045fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10c      	bne.n	8004490 <HAL_SPI_IRQHandler+0x8c>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80b5 	beq.w	80045fa <HAL_SPI_IRQHandler+0x1f6>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80ae 	beq.w	80045fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d023      	beq.n	80044f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d011      	beq.n	80044da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e00b      	b.n	80044f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]
        return;
 80044f0:	e083      	b.n	80045fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	f043 0208 	orr.w	r2, r3, #8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	2b00      	cmp	r3, #0
 8004554:	d050      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004564:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <HAL_SPI_IRQHandler+0x17e>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d034      	beq.n	80045ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0203 	bic.w	r2, r2, #3
 8004590:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_SPI_IRQHandler+0x1fc>)
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fcbd 	bl	8001f26 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <HAL_SPI_IRQHandler+0x1fc>)
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fca7 	bl	8001f26 <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80045ea:	e003      	b.n	80045f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f813 	bl	8004618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045f2:	e000      	b.n	80045f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045f4:	bf00      	nop
    return;
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
  }
}
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0800462d 	.word	0x0800462d

08004604 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff ffe5 	bl	8004618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d923      	bls.n	80046b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	b292      	uxth	r2, r2
 8004676:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b02      	subs	r3, #2
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d11f      	bne.n	80046e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e016      	b.n	80046e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f103 020c 	add.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 faf8 	bl	8004cfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d912      	bls.n	800474c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b02      	subs	r3, #2
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474a:	e012      	b.n	8004772 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d110      	bne.n	800479e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800478a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 faaf 	bl	8004cfc <SPI_CloseRxTx_ISR>
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	b292      	uxth	r2, r2
 80047ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa7c 	bl	8004cfc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d110      	bne.n	8004864 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004850:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa4c 	bl	8004cfc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f103 020c 	add.w	r2, r3, #12
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa66 	bl	8004d80 <SPI_CloseRx_ISR>
  }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	b292      	uxth	r2, r2
 80048d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa40 	bl	8004d80 <SPI_CloseRx_ISR>
  }
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa4d 	bl	8004de0 <SPI_CloseTx_ISR>
  }
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	1c9a      	adds	r2, r3, #2
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa2b 	bl	8004de0 <SPI_CloseTx_ISR>
  }
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049a4:	f7fd f980 	bl	8001ca8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049b4:	f7fd f978 	bl	8001ca8 <HAL_GetTick>
 80049b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049ba:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	015b      	lsls	r3, r3, #5
 80049c0:	0d1b      	lsrs	r3, r3, #20
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ca:	e054      	b.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d050      	beq.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049d4:	f7fd f968 	bl	8001ca8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d902      	bls.n	80049ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d13d      	bne.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a02:	d111      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	d004      	beq.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d107      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a30:	d10f      	bne.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e017      	b.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d19b      	bne.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ab2:	f7fd f8f9 	bl	8001ca8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac2:	f7fd f8f1 	bl	8001ca8 <HAL_GetTick>
 8004ac6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ac8:	4b3c      	ldr	r3, [pc, #240]	; (8004bbc <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	0d1b      	lsrs	r3, r3, #20
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ae0:	e05f      	b.n	8004ba2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ae8:	d106      	bne.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d050      	beq.n	8004ba2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b00:	f7fd f8d2 	bl	8001ca8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d902      	bls.n	8004b16 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d13d      	bne.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d111      	bne.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d004      	beq.n	8004b44 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d107      	bne.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5c:	d10f      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e010      	b.n	8004bb4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d197      	bne.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000000 	.word	0x20000000

08004bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd4:	d111      	bne.n	8004bfa <SPI_EndRxTransaction+0x3a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bde:	d004      	beq.n	8004bea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	d107      	bne.n	8004bfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff fec5 	bl	8004994 <SPI_WaitFlagStateUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e023      	b.n	8004c68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c28:	d11d      	bne.n	8004c66 <SPI_EndRxTransaction+0xa6>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d004      	beq.n	8004c3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d113      	bne.n	8004c66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff2a 	bl	8004aa4 <SPI_WaitFifoStateUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e000      	b.n	8004c68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff0b 	bl	8004aa4 <SPI_WaitFifoStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e027      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fe70 	bl	8004994 <SPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e014      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fee4 	bl	8004aa4 <SPI_WaitFifoStateUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e000      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d04:	f7fc ffd0 	bl	8001ca8 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	2164      	movs	r1, #100	; 0x64
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ffa6 	bl	8004c70 <SPI_EndRxTxTransaction>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d115      	bne.n	8004d6a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc fcf0 	bl	8001738 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004d58:	e00e      	b.n	8004d78 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fc4e 	bl	8004604 <HAL_SPI_TxRxCpltCallback>
}
 8004d68:	e006      	b.n	8004d78 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fc50 	bl	8004618 <HAL_SPI_ErrorCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d96:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004d98:	f7fc ff86 	bl	8001ca8 <HAL_GetTick>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2164      	movs	r1, #100	; 0x64
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ff0c 	bl	8004bc0 <SPI_EndRxTransaction>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fcb4 	bl	8001738 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004dd0:	e002      	b.n	8004dd8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fc20 	bl	8004618 <HAL_SPI_ErrorCallback>
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de8:	f7fc ff5e 	bl	8001ca8 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	2164      	movs	r1, #100	; 0x64
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff34 	bl	8004c70 <SPI_EndRxTxTransaction>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff fbe5 	bl	8004618 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004e4e:	e002      	b.n	8004e56 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fc fc5d 	bl	8001710 <HAL_SPI_TxCpltCallback>
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e049      	b.n	8004f04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fc fd15 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 fd1d 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e03b      	b.n	8004f9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a19      	ldr	r2, [pc, #100]	; (8004fa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x4e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIM_Base_Start_IT+0x4e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a15      	ldr	r2, [pc, #84]	; (8004fac <HAL_TIM_Base_Start_IT+0xa0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d115      	bne.n	8004f86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d015      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x8c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f72:	d011      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	e008      	b.n	8004f98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e000      	b.n	8004f9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	00010007 	.word	0x00010007

08004fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f841 	bl	8005062 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fc72 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_TIM_PWM_Start+0x24>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e03c      	b.n	8005116 <HAL_TIM_PWM_Start+0x9e>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d109      	bne.n	80050b6 <HAL_TIM_PWM_Start+0x3e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e02f      	b.n	8005116 <HAL_TIM_PWM_Start+0x9e>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d109      	bne.n	80050d0 <HAL_TIM_PWM_Start+0x58>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e022      	b.n	8005116 <HAL_TIM_PWM_Start+0x9e>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d109      	bne.n	80050ea <HAL_TIM_PWM_Start+0x72>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	bf14      	ite	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	2300      	moveq	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	e015      	b.n	8005116 <HAL_TIM_PWM_Start+0x9e>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d109      	bne.n	8005104 <HAL_TIM_PWM_Start+0x8c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e008      	b.n	8005116 <HAL_TIM_PWM_Start+0x9e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e07e      	b.n	800521c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start+0xb6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800512c:	e023      	b.n	8005176 <HAL_TIM_PWM_Start+0xfe>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start+0xc6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	e01b      	b.n	8005176 <HAL_TIM_PWM_Start+0xfe>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d104      	bne.n	800514e <HAL_TIM_PWM_Start+0xd6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	e013      	b.n	8005176 <HAL_TIM_PWM_Start+0xfe>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start+0xe6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800515c:	e00b      	b.n	8005176 <HAL_TIM_PWM_Start+0xfe>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b10      	cmp	r3, #16
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0xf6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516c:	e003      	b.n	8005176 <HAL_TIM_PWM_Start+0xfe>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2201      	movs	r2, #1
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 ffb0 	bl	80060e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <HAL_TIM_PWM_Start+0x1ac>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x12a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a25      	ldr	r2, [pc, #148]	; (8005228 <HAL_TIM_PWM_Start+0x1b0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x12a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a23      	ldr	r2, [pc, #140]	; (800522c <HAL_TIM_PWM_Start+0x1b4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x12e>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_PWM_Start+0x130>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_TIM_PWM_Start+0x1ac>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_TIM_PWM_Start+0x162>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d004      	beq.n	80051da <HAL_TIM_PWM_Start+0x162>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <HAL_TIM_PWM_Start+0x1b0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d115      	bne.n	8005206 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_TIM_PWM_Start+0x1b8>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d015      	beq.n	8005218 <HAL_TIM_PWM_Start+0x1a0>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f2:	d011      	beq.n	8005218 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	e008      	b.n	8005218 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e000      	b.n	800521a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	00010007 	.word	0x00010007

08005234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b02      	cmp	r3, #2
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0202 	mvn.w	r2, #2
 8005260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb11 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fb03 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb14 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0204 	mvn.w	r2, #4
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fae7 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fad9 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 faea 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0208 	mvn.w	r2, #8
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2204      	movs	r2, #4
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fabd 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 faaf 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fac0 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0210 	mvn.w	r2, #16
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2208      	movs	r2, #8
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa93 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fa85 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa96 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0201 	mvn.w	r2, #1
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc f98a 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 f82c 	bl	800643c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 f81f 	bl	8006450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d10e      	bne.n	800543e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa44 	bl	80058c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b20      	cmp	r3, #32
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0220 	mvn.w	r2, #32
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 ffdf 	bl	8006428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800548a:	2302      	movs	r3, #2
 800548c:	e0fd      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x216>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b14      	cmp	r3, #20
 800549a:	f200 80f0 	bhi.w	800567e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	0800567f 	.word	0x0800567f
 80054ac:	0800567f 	.word	0x0800567f
 80054b0:	0800567f 	.word	0x0800567f
 80054b4:	08005539 	.word	0x08005539
 80054b8:	0800567f 	.word	0x0800567f
 80054bc:	0800567f 	.word	0x0800567f
 80054c0:	0800567f 	.word	0x0800567f
 80054c4:	0800557b 	.word	0x0800557b
 80054c8:	0800567f 	.word	0x0800567f
 80054cc:	0800567f 	.word	0x0800567f
 80054d0:	0800567f 	.word	0x0800567f
 80054d4:	080055bb 	.word	0x080055bb
 80054d8:	0800567f 	.word	0x0800567f
 80054dc:	0800567f 	.word	0x0800567f
 80054e0:	0800567f 	.word	0x0800567f
 80054e4:	080055fd 	.word	0x080055fd
 80054e8:	0800567f 	.word	0x0800567f
 80054ec:	0800567f 	.word	0x0800567f
 80054f0:	0800567f 	.word	0x0800567f
 80054f4:	0800563d 	.word	0x0800563d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fa50 	bl	80059a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	619a      	str	r2, [r3, #24]
      break;
 8005536:	e0a3      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 faac 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
      break;
 8005578:	e082      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fb05 	bl	8005b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0204 	bic.w	r2, r2, #4
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]
      break;
 80055b8:	e062      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fb5d 	bl	8005c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69d9      	ldr	r1, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	61da      	str	r2, [r3, #28]
      break;
 80055fa:	e041      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fb9a 	bl	8005d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0204 	bic.w	r2, r2, #4
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800563a:	e021      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fbd2 	bl	8005dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800567c:	e000      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800567e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0a8      	b.n	80057fe <HAL_TIM_ConfigClockSource+0x16a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d067      	beq.n	80057b8 <HAL_TIM_ConfigClockSource+0x124>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d80b      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x70>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d073      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x144>
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d802      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x66>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d06f      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056f8:	e078      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d06c      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x144>
 80056fe:	2b30      	cmp	r3, #48	; 0x30
 8005700:	d06a      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005702:	e073      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005704:	2b70      	cmp	r3, #112	; 0x70
 8005706:	d00d      	beq.n	8005724 <HAL_TIM_ConfigClockSource+0x90>
 8005708:	2b70      	cmp	r3, #112	; 0x70
 800570a:	d804      	bhi.n	8005716 <HAL_TIM_ConfigClockSource+0x82>
 800570c:	2b50      	cmp	r3, #80	; 0x50
 800570e:	d033      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xe4>
 8005710:	2b60      	cmp	r3, #96	; 0x60
 8005712:	d041      	beq.n	8005798 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005714:	e06a      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d066      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x156>
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d017      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005722:	e063      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f000 fcb6 	bl	80060a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005746:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	609a      	str	r2, [r3, #8]
      break;
 8005750:	e04c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f000 fc9f 	bl	80060a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005774:	609a      	str	r2, [r3, #8]
      break;
 8005776:	e039      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	461a      	mov	r2, r3
 8005786:	f000 fc13 	bl	8005fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2150      	movs	r1, #80	; 0x50
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fc6c 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005796:	e029      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6859      	ldr	r1, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	461a      	mov	r2, r3
 80057a6:	f000 fc32 	bl	800600e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2160      	movs	r1, #96	; 0x60
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fc5c 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 80057b6:	e019      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	461a      	mov	r2, r3
 80057c6:	f000 fbf3 	bl	8005fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fc4c 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 80057d6:	e009      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fc43 	bl	800606e <TIM_ITRx_SetConfig>
        break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x158>
      break;
 80057ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_TIM_SlaveConfigSynchro+0x18>
 800581a:	2302      	movs	r3, #2
 800581c:	e031      	b.n	8005882 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb35 	bl	8005ea0 <TIM_SlaveTimer_SetConfig>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e018      	b.n	8005882 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800586e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x20>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1e      	ldr	r2, [pc, #120]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a0b      	ldr	r2, [pc, #44]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400

080059a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 0302 	bic.w	r3, r3, #2
 80059f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0320 	bic.w	r3, r3, #32
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a22      	ldr	r2, [pc, #136]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10d      	bne.n	8005b1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC2_SetConfig+0xec>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <TIM_OC2_SetConfig+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400

08005b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10d      	bne.n	8005c0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <TIM_OC3_SetConfig+0xe8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <TIM_OC3_SetConfig+0xec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400

08005c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <TIM_OC4_SetConfig+0xb0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <TIM_OC4_SetConfig+0xb4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xb8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400

08005d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC5_SetConfig+0xa4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC5_SetConfig+0xa8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <TIM_OC5_SetConfig+0xac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d109      	bne.n	8005dba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400

08005dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	051b      	lsls	r3, r3, #20
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC6_SetConfig+0xa8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <TIM_OC6_SetConfig+0xac>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <TIM_OC6_SetConfig+0xb0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400

08005ea0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	d05c      	beq.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x104>
 8005eea:	2b30      	cmp	r3, #48	; 0x30
 8005eec:	d806      	bhi.n	8005efc <TIM_SlaveTimer_SetConfig+0x5c>
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d058      	beq.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x104>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d056      	beq.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x104>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d054      	beq.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005efa:	e054      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d03d      	beq.n	8005f7c <TIM_SlaveTimer_SetConfig+0xdc>
 8005f00:	2b50      	cmp	r3, #80	; 0x50
 8005f02:	d802      	bhi.n	8005f0a <TIM_SlaveTimer_SetConfig+0x6a>
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d010      	beq.n	8005f2a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8005f08:	e04d      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8005f0a:	2b60      	cmp	r3, #96	; 0x60
 8005f0c:	d040      	beq.n	8005f90 <TIM_SlaveTimer_SetConfig+0xf0>
 8005f0e:	2b70      	cmp	r3, #112	; 0x70
 8005f10:	d000      	beq.n	8005f14 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8005f12:	e048      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68d9      	ldr	r1, [r3, #12]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f000 f8be 	bl	80060a4 <TIM_ETR_SetConfig>
      break;
 8005f28:	e03d      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d101      	bne.n	8005f36 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e038      	b.n	8005fa8 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
      break;
 8005f7a:	e014      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6899      	ldr	r1, [r3, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f000 f811 	bl	8005fb0 <TIM_TI1_ConfigInputStage>
      break;
 8005f8e:	e00a      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6899      	ldr	r1, [r3, #8]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 f836 	bl	800600e <TIM_TI2_ConfigInputStage>
      break;
 8005fa2:	e000      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x106>
        break;
 8005fa4:	bf00      	nop
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0201 	bic.w	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 030a 	bic.w	r3, r3, #10
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0210 	bic.w	r2, r3, #16
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	f043 0307 	orr.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2201      	movs	r2, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	43db      	mvns	r3, r3
 8006106:	401a      	ands	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_TIMEx_PWMN_Start+0x24>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e022      	b.n	800619a <HAL_TIMEx_PWMN_Start+0x6a>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b04      	cmp	r3, #4
 8006158:	d109      	bne.n	800616e <HAL_TIMEx_PWMN_Start+0x3e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	bf14      	ite	ne
 8006166:	2301      	movne	r3, #1
 8006168:	2300      	moveq	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e015      	b.n	800619a <HAL_TIMEx_PWMN_Start+0x6a>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d109      	bne.n	8006188 <HAL_TIMEx_PWMN_Start+0x58>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e008      	b.n	800619a <HAL_TIMEx_PWMN_Start+0x6a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	bf14      	ite	ne
 8006194:	2301      	movne	r3, #1
 8006196:	2300      	moveq	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e05a      	b.n	8006258 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_TIMEx_PWMN_Start+0x82>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	e013      	b.n	80061da <HAL_TIMEx_PWMN_Start+0xaa>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d104      	bne.n	80061c2 <HAL_TIMEx_PWMN_Start+0x92>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	e00b      	b.n	80061da <HAL_TIMEx_PWMN_Start+0xaa>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d104      	bne.n	80061d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d0:	e003      	b.n	80061da <HAL_TIMEx_PWMN_Start+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2204      	movs	r2, #4
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f93e 	bl	8006464 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_TIMEx_PWMN_Start+0x130>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_TIMEx_PWMN_Start+0xe6>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d004      	beq.n	8006216 <HAL_TIMEx_PWMN_Start+0xe6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <HAL_TIMEx_PWMN_Start+0x134>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d115      	bne.n	8006242 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <HAL_TIMEx_PWMN_Start+0x138>)
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b06      	cmp	r3, #6
 8006226:	d015      	beq.n	8006254 <HAL_TIMEx_PWMN_Start+0x124>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622e:	d011      	beq.n	8006254 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006240:	e008      	b.n	8006254 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e000      	b.n	8006256 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40014000 	.word	0x40014000
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e04f      	b.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a21      	ldr	r2, [pc, #132]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d108      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d004      	beq.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d10c      	bne.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40014000 	.word	0x40014000

08006338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e060      	b.n	8006416 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a14      	ldr	r2, [pc, #80]	; (8006424 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d115      	bne.n	8006404 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	051b      	lsls	r3, r3, #20
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40012c00 	.word	0x40012c00

08006428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2204      	movs	r2, #4
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	43db      	mvns	r3, r3
 8006486:	401a      	ands	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e040      	b.n	8006542 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fb fa87 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2224      	movs	r2, #36	; 0x24
 80064da:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f82d 	bl	800654c <UART_SetConfig>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e022      	b.n	8006542 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa31 	bl	800696c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006518:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006528:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fab8 	bl	8006ab0 <UART_CheckIdleState>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800654c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006550:	b088      	sub	sp, #32
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4bb0      	ldr	r3, [pc, #704]	; (800683c <UART_SetConfig+0x2f0>)
 800657a:	4013      	ands	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	430b      	orrs	r3, r1
 8006584:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4aa6      	ldr	r2, [pc, #664]	; (8006840 <UART_SetConfig+0x2f4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a9d      	ldr	r2, [pc, #628]	; (8006844 <UART_SetConfig+0x2f8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d121      	bne.n	8006618 <UART_SetConfig+0xcc>
 80065d4:	4b9c      	ldr	r3, [pc, #624]	; (8006848 <UART_SetConfig+0x2fc>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d816      	bhi.n	8006610 <UART_SetConfig+0xc4>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <UART_SetConfig+0x9c>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	08006605 	.word	0x08006605
 80065f0:	080065ff 	.word	0x080065ff
 80065f4:	0800660b 	.word	0x0800660b
 80065f8:	2301      	movs	r3, #1
 80065fa:	76fb      	strb	r3, [r7, #27]
 80065fc:	e072      	b.n	80066e4 <UART_SetConfig+0x198>
 80065fe:	2302      	movs	r3, #2
 8006600:	76fb      	strb	r3, [r7, #27]
 8006602:	e06f      	b.n	80066e4 <UART_SetConfig+0x198>
 8006604:	2304      	movs	r3, #4
 8006606:	76fb      	strb	r3, [r7, #27]
 8006608:	e06c      	b.n	80066e4 <UART_SetConfig+0x198>
 800660a:	2308      	movs	r3, #8
 800660c:	76fb      	strb	r3, [r7, #27]
 800660e:	e069      	b.n	80066e4 <UART_SetConfig+0x198>
 8006610:	2310      	movs	r3, #16
 8006612:	76fb      	strb	r3, [r7, #27]
 8006614:	bf00      	nop
 8006616:	e065      	b.n	80066e4 <UART_SetConfig+0x198>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a8b      	ldr	r2, [pc, #556]	; (800684c <UART_SetConfig+0x300>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d134      	bne.n	800668c <UART_SetConfig+0x140>
 8006622:	4b89      	ldr	r3, [pc, #548]	; (8006848 <UART_SetConfig+0x2fc>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	f003 030c 	and.w	r3, r3, #12
 800662c:	2b0c      	cmp	r3, #12
 800662e:	d829      	bhi.n	8006684 <UART_SetConfig+0x138>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0xec>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800666d 	.word	0x0800666d
 800663c:	08006685 	.word	0x08006685
 8006640:	08006685 	.word	0x08006685
 8006644:	08006685 	.word	0x08006685
 8006648:	08006679 	.word	0x08006679
 800664c:	08006685 	.word	0x08006685
 8006650:	08006685 	.word	0x08006685
 8006654:	08006685 	.word	0x08006685
 8006658:	08006673 	.word	0x08006673
 800665c:	08006685 	.word	0x08006685
 8006660:	08006685 	.word	0x08006685
 8006664:	08006685 	.word	0x08006685
 8006668:	0800667f 	.word	0x0800667f
 800666c:	2300      	movs	r3, #0
 800666e:	76fb      	strb	r3, [r7, #27]
 8006670:	e038      	b.n	80066e4 <UART_SetConfig+0x198>
 8006672:	2302      	movs	r3, #2
 8006674:	76fb      	strb	r3, [r7, #27]
 8006676:	e035      	b.n	80066e4 <UART_SetConfig+0x198>
 8006678:	2304      	movs	r3, #4
 800667a:	76fb      	strb	r3, [r7, #27]
 800667c:	e032      	b.n	80066e4 <UART_SetConfig+0x198>
 800667e:	2308      	movs	r3, #8
 8006680:	76fb      	strb	r3, [r7, #27]
 8006682:	e02f      	b.n	80066e4 <UART_SetConfig+0x198>
 8006684:	2310      	movs	r3, #16
 8006686:	76fb      	strb	r3, [r7, #27]
 8006688:	bf00      	nop
 800668a:	e02b      	b.n	80066e4 <UART_SetConfig+0x198>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a6b      	ldr	r2, [pc, #428]	; (8006840 <UART_SetConfig+0x2f4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d124      	bne.n	80066e0 <UART_SetConfig+0x194>
 8006696:	4b6c      	ldr	r3, [pc, #432]	; (8006848 <UART_SetConfig+0x2fc>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d012      	beq.n	80066cc <UART_SetConfig+0x180>
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d802      	bhi.n	80066b2 <UART_SetConfig+0x166>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <UART_SetConfig+0x174>
 80066b0:	e012      	b.n	80066d8 <UART_SetConfig+0x18c>
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b6:	d006      	beq.n	80066c6 <UART_SetConfig+0x17a>
 80066b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066bc:	d009      	beq.n	80066d2 <UART_SetConfig+0x186>
 80066be:	e00b      	b.n	80066d8 <UART_SetConfig+0x18c>
 80066c0:	2300      	movs	r3, #0
 80066c2:	76fb      	strb	r3, [r7, #27]
 80066c4:	e00e      	b.n	80066e4 <UART_SetConfig+0x198>
 80066c6:	2302      	movs	r3, #2
 80066c8:	76fb      	strb	r3, [r7, #27]
 80066ca:	e00b      	b.n	80066e4 <UART_SetConfig+0x198>
 80066cc:	2304      	movs	r3, #4
 80066ce:	76fb      	strb	r3, [r7, #27]
 80066d0:	e008      	b.n	80066e4 <UART_SetConfig+0x198>
 80066d2:	2308      	movs	r3, #8
 80066d4:	76fb      	strb	r3, [r7, #27]
 80066d6:	e005      	b.n	80066e4 <UART_SetConfig+0x198>
 80066d8:	2310      	movs	r3, #16
 80066da:	76fb      	strb	r3, [r7, #27]
 80066dc:	bf00      	nop
 80066de:	e001      	b.n	80066e4 <UART_SetConfig+0x198>
 80066e0:	2310      	movs	r3, #16
 80066e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a55      	ldr	r2, [pc, #340]	; (8006840 <UART_SetConfig+0x2f4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d174      	bne.n	80067d8 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066ee:	7efb      	ldrb	r3, [r7, #27]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d824      	bhi.n	800673e <UART_SetConfig+0x1f2>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x1b0>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006721 	.word	0x08006721
 8006700:	0800673f 	.word	0x0800673f
 8006704:	08006729 	.word	0x08006729
 8006708:	0800673f 	.word	0x0800673f
 800670c:	0800672f 	.word	0x0800672f
 8006710:	0800673f 	.word	0x0800673f
 8006714:	0800673f 	.word	0x0800673f
 8006718:	0800673f 	.word	0x0800673f
 800671c:	08006737 	.word	0x08006737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fc fbc0 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8006724:	6178      	str	r0, [r7, #20]
        break;
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006728:	4b49      	ldr	r3, [pc, #292]	; (8006850 <UART_SetConfig+0x304>)
 800672a:	617b      	str	r3, [r7, #20]
        break;
 800672c:	e00c      	b.n	8006748 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800672e:	f7fc fb23 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8006732:	6178      	str	r0, [r7, #20]
        break;
 8006734:	e008      	b.n	8006748 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673a:	617b      	str	r3, [r7, #20]
        break;
 800673c:	e004      	b.n	8006748 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	76bb      	strb	r3, [r7, #26]
        break;
 8006746:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8100 	beq.w	8006950 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d305      	bcc.n	800676c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d902      	bls.n	8006772 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	76bb      	strb	r3, [r7, #26]
 8006770:	e0ee      	b.n	8006950 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4619      	mov	r1, r3
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	f04f 0400 	mov.w	r4, #0
 8006782:	0214      	lsls	r4, r2, #8
 8006784:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006788:	020b      	lsls	r3, r1, #8
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6852      	ldr	r2, [r2, #4]
 800678e:	0852      	lsrs	r2, r2, #1
 8006790:	4611      	mov	r1, r2
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	eb13 0b01 	adds.w	fp, r3, r1
 800679a:	eb44 0c02 	adc.w	ip, r4, r2
 800679e:	4658      	mov	r0, fp
 80067a0:	4661      	mov	r1, ip
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f04f 0400 	mov.w	r4, #0
 80067aa:	461a      	mov	r2, r3
 80067ac:	4623      	mov	r3, r4
 80067ae:	f7f9 ff1b 	bl	80005e8 <__aeabi_uldivmod>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067be:	d308      	bcc.n	80067d2 <UART_SetConfig+0x286>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	d204      	bcs.n	80067d2 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e0be      	b.n	8006950 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	76bb      	strb	r3, [r7, #26]
 80067d6:	e0bb      	b.n	8006950 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e0:	d169      	bne.n	80068b6 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80067e2:	7efb      	ldrb	r3, [r7, #27]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d835      	bhi.n	8006854 <UART_SetConfig+0x308>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x2a4>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	08006855 	.word	0x08006855
 8006800:	0800682b 	.word	0x0800682b
 8006804:	08006855 	.word	0x08006855
 8006808:	08006855 	.word	0x08006855
 800680c:	08006855 	.word	0x08006855
 8006810:	08006833 	.word	0x08006833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fc fb46 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8006818:	6178      	str	r0, [r7, #20]
        break;
 800681a:	e020      	b.n	800685e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fc fb58 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8006820:	6178      	str	r0, [r7, #20]
        break;
 8006822:	e01c      	b.n	800685e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <UART_SetConfig+0x304>)
 8006826:	617b      	str	r3, [r7, #20]
        break;
 8006828:	e019      	b.n	800685e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682a:	f7fc faa5 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 800682e:	6178      	str	r0, [r7, #20]
        break;
 8006830:	e015      	b.n	800685e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006836:	617b      	str	r3, [r7, #20]
        break;
 8006838:	e011      	b.n	800685e <UART_SetConfig+0x312>
 800683a:	bf00      	nop
 800683c:	efff69f3 	.word	0xefff69f3
 8006840:	40008000 	.word	0x40008000
 8006844:	40013800 	.word	0x40013800
 8006848:	40021000 	.word	0x40021000
 800684c:	40004400 	.word	0x40004400
 8006850:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	76bb      	strb	r3, [r7, #26]
        break;
 800685c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d075      	beq.n	8006950 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	005a      	lsls	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	441a      	add	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	b29b      	uxth	r3, r3
 800687a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d916      	bls.n	80068b0 <UART_SetConfig+0x364>
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d212      	bcs.n	80068b0 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f023 030f 	bic.w	r3, r3, #15
 8006892:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	b29a      	uxth	r2, r3
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	89fa      	ldrh	r2, [r7, #14]
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	e04f      	b.n	8006950 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	76bb      	strb	r3, [r7, #26]
 80068b4:	e04c      	b.n	8006950 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b6:	7efb      	ldrb	r3, [r7, #27]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d828      	bhi.n	800690e <UART_SetConfig+0x3c2>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x378>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068ff 	.word	0x080068ff
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e8:	f7fc fadc 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 80068ec:	6178      	str	r0, [r7, #20]
        break;
 80068ee:	e013      	b.n	8006918 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fc faee 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 80068f4:	6178      	str	r0, [r7, #20]
        break;
 80068f6:	e00f      	b.n	8006918 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <UART_SetConfig+0x41c>)
 80068fa:	617b      	str	r3, [r7, #20]
        break;
 80068fc:	e00c      	b.n	8006918 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fc fa3b 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8006902:	6178      	str	r0, [r7, #20]
        break;
 8006904:	e008      	b.n	8006918 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	617b      	str	r3, [r7, #20]
        break;
 800690c:	e004      	b.n	8006918 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	76bb      	strb	r3, [r7, #26]
        break;
 8006916:	bf00      	nop
    }

    if (pclk != 0U)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	085a      	lsrs	r2, r3, #1
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d908      	bls.n	800694c <UART_SetConfig+0x400>
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d204      	bcs.n	800694c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e001      	b.n	8006950 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800695c:	7ebb      	ldrb	r3, [r7, #26]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006968:	00f42400 	.word	0x00f42400

0800696c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01a      	beq.n	8006a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6a:	d10a      	bne.n	8006a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]
  }
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006abe:	f7fb f8f3 	bl	8001ca8 <HAL_GetTick>
 8006ac2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d10e      	bne.n	8006af0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f82a 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e020      	b.n	8006b32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d10e      	bne.n	8006b1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f814 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e00a      	b.n	8006b32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	e05d      	b.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d059      	beq.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b54:	f7fb f8a8 	bl	8001ca8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d302      	bcc.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d11b      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e042      	b.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d02b      	beq.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bbe:	d123      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bd8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e00f      	b.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4013      	ands	r3, r2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d092      	beq.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4e0d      	ldr	r6, [pc, #52]	; (8006c68 <__libc_init_array+0x38>)
 8006c34:	4c0d      	ldr	r4, [pc, #52]	; (8006c6c <__libc_init_array+0x3c>)
 8006c36:	1ba4      	subs	r4, r4, r6
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	2500      	movs	r5, #0
 8006c3c:	42a5      	cmp	r5, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	4e0b      	ldr	r6, [pc, #44]	; (8006c70 <__libc_init_array+0x40>)
 8006c42:	4c0c      	ldr	r4, [pc, #48]	; (8006c74 <__libc_init_array+0x44>)
 8006c44:	f000 fd6c 	bl	8007720 <_init>
 8006c48:	1ba4      	subs	r4, r4, r6
 8006c4a:	10a4      	asrs	r4, r4, #2
 8006c4c:	2500      	movs	r5, #0
 8006c4e:	42a5      	cmp	r5, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c58:	4798      	blx	r3
 8006c5a:	3501      	adds	r5, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c62:	4798      	blx	r3
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	08007b5c 	.word	0x08007b5c
 8006c6c:	08007b5c 	.word	0x08007b5c
 8006c70:	08007b5c 	.word	0x08007b5c
 8006c74:	08007b60 	.word	0x08007b60

08006c78 <memset>:
 8006c78:	4402      	add	r2, r0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d100      	bne.n	8006c82 <memset+0xa>
 8006c80:	4770      	bx	lr
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	e7f9      	b.n	8006c7c <memset+0x4>

08006c88 <sinf>:
 8006c88:	ee10 3a10 	vmov	r3, s0
 8006c8c:	b507      	push	{r0, r1, r2, lr}
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <sinf+0x7c>)
 8006c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	4293      	cmp	r3, r2
 8006c96:	dc05      	bgt.n	8006ca4 <sinf+0x1c>
 8006c98:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006d08 <sinf+0x80>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f000 fc41 	bl	8007524 <__kernel_sinf>
 8006ca2:	e004      	b.n	8006cae <sinf+0x26>
 8006ca4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ca8:	db04      	blt.n	8006cb4 <sinf+0x2c>
 8006caa:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006cae:	b003      	add	sp, #12
 8006cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cb4:	4668      	mov	r0, sp
 8006cb6:	f000 f829 	bl	8006d0c <__ieee754_rem_pio2f>
 8006cba:	f000 0003 	and.w	r0, r0, #3
 8006cbe:	2801      	cmp	r0, #1
 8006cc0:	d008      	beq.n	8006cd4 <sinf+0x4c>
 8006cc2:	2802      	cmp	r0, #2
 8006cc4:	d00d      	beq.n	8006ce2 <sinf+0x5a>
 8006cc6:	b9b0      	cbnz	r0, 8006cf6 <sinf+0x6e>
 8006cc8:	2001      	movs	r0, #1
 8006cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cce:	ed9d 0a00 	vldr	s0, [sp]
 8006cd2:	e7e4      	b.n	8006c9e <sinf+0x16>
 8006cd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cd8:	ed9d 0a00 	vldr	s0, [sp]
 8006cdc:	f000 f942 	bl	8006f64 <__kernel_cosf>
 8006ce0:	e7e5      	b.n	8006cae <sinf+0x26>
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ce8:	ed9d 0a00 	vldr	s0, [sp]
 8006cec:	f000 fc1a 	bl	8007524 <__kernel_sinf>
 8006cf0:	eeb1 0a40 	vneg.f32	s0, s0
 8006cf4:	e7db      	b.n	8006cae <sinf+0x26>
 8006cf6:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cfa:	ed9d 0a00 	vldr	s0, [sp]
 8006cfe:	f000 f931 	bl	8006f64 <__kernel_cosf>
 8006d02:	e7f5      	b.n	8006cf0 <sinf+0x68>
 8006d04:	3f490fd8 	.word	0x3f490fd8
 8006d08:	00000000 	.word	0x00000000

08006d0c <__ieee754_rem_pio2f>:
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	ee10 6a10 	vmov	r6, s0
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <__ieee754_rem_pio2f+0x220>)
 8006d14:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	dc05      	bgt.n	8006d2c <__ieee754_rem_pio2f+0x20>
 8006d20:	2300      	movs	r3, #0
 8006d22:	ed85 0a00 	vstr	s0, [r5]
 8006d26:	6043      	str	r3, [r0, #4]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e020      	b.n	8006d6e <__ieee754_rem_pio2f+0x62>
 8006d2c:	4b80      	ldr	r3, [pc, #512]	; (8006f30 <__ieee754_rem_pio2f+0x224>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	dc38      	bgt.n	8006da4 <__ieee754_rem_pio2f+0x98>
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	f024 040f 	bic.w	r4, r4, #15
 8006d38:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006f34 <__ieee754_rem_pio2f+0x228>
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	; (8006f38 <__ieee754_rem_pio2f+0x22c>)
 8006d3e:	dd18      	ble.n	8006d72 <__ieee754_rem_pio2f+0x66>
 8006d40:	429c      	cmp	r4, r3
 8006d42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006d46:	bf09      	itett	eq
 8006d48:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8006f3c <__ieee754_rem_pio2f+0x230>
 8006d4c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8006f40 <__ieee754_rem_pio2f+0x234>
 8006d50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006d54:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8006f44 <__ieee754_rem_pio2f+0x238>
 8006d58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006d5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d60:	edc0 6a00 	vstr	s13, [r0]
 8006d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	b007      	add	sp, #28
 8006d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d72:	429c      	cmp	r4, r3
 8006d74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006d78:	bf09      	itett	eq
 8006d7a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8006f3c <__ieee754_rem_pio2f+0x230>
 8006d7e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8006f40 <__ieee754_rem_pio2f+0x234>
 8006d82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006d86:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8006f44 <__ieee754_rem_pio2f+0x238>
 8006d8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d92:	edc0 6a00 	vstr	s13, [r0]
 8006d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	e7e4      	b.n	8006d6e <__ieee754_rem_pio2f+0x62>
 8006da4:	4b68      	ldr	r3, [pc, #416]	; (8006f48 <__ieee754_rem_pio2f+0x23c>)
 8006da6:	429c      	cmp	r4, r3
 8006da8:	dc71      	bgt.n	8006e8e <__ieee754_rem_pio2f+0x182>
 8006daa:	f000 fc03 	bl	80075b4 <fabsf>
 8006dae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006f4c <__ieee754_rem_pio2f+0x240>
 8006db2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006db6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dbe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006dc2:	ee17 0a90 	vmov	r0, s15
 8006dc6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006f34 <__ieee754_rem_pio2f+0x228>
 8006dca:	eeb1 7a46 	vneg.f32	s14, s12
 8006dce:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006dd2:	281f      	cmp	r0, #31
 8006dd4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006f40 <__ieee754_rem_pio2f+0x234>
 8006dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ddc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006de0:	ee16 3a90 	vmov	r3, s13
 8006de4:	dc1c      	bgt.n	8006e20 <__ieee754_rem_pio2f+0x114>
 8006de6:	1e47      	subs	r7, r0, #1
 8006de8:	4959      	ldr	r1, [pc, #356]	; (8006f50 <__ieee754_rem_pio2f+0x244>)
 8006dea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006dee:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006df2:	428a      	cmp	r2, r1
 8006df4:	d014      	beq.n	8006e20 <__ieee754_rem_pio2f+0x114>
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	ed95 7a00 	vldr	s14, [r5]
 8006dfc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006e06:	ed85 0a01 	vstr	s0, [r5, #4]
 8006e0a:	dab0      	bge.n	8006d6e <__ieee754_rem_pio2f+0x62>
 8006e0c:	eeb1 7a47 	vneg.f32	s14, s14
 8006e10:	eeb1 0a40 	vneg.f32	s0, s0
 8006e14:	ed85 7a00 	vstr	s14, [r5]
 8006e18:	ed85 0a01 	vstr	s0, [r5, #4]
 8006e1c:	4240      	negs	r0, r0
 8006e1e:	e7a6      	b.n	8006d6e <__ieee754_rem_pio2f+0x62>
 8006e20:	15e4      	asrs	r4, r4, #23
 8006e22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e26:	1aa2      	subs	r2, r4, r2
 8006e28:	2a08      	cmp	r2, #8
 8006e2a:	dde4      	ble.n	8006df6 <__ieee754_rem_pio2f+0xea>
 8006e2c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006f3c <__ieee754_rem_pio2f+0x230>
 8006e30:	eef0 6a40 	vmov.f32	s13, s0
 8006e34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006e38:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006e3c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006e40:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006f44 <__ieee754_rem_pio2f+0x238>
 8006e44:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8006e48:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8006e4c:	eef0 7a40 	vmov.f32	s15, s0
 8006e50:	ee15 3a90 	vmov	r3, s11
 8006e54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e58:	1aa4      	subs	r4, r4, r2
 8006e5a:	2c19      	cmp	r4, #25
 8006e5c:	dc04      	bgt.n	8006e68 <__ieee754_rem_pio2f+0x15c>
 8006e5e:	edc5 5a00 	vstr	s11, [r5]
 8006e62:	eeb0 0a66 	vmov.f32	s0, s13
 8006e66:	e7c7      	b.n	8006df8 <__ieee754_rem_pio2f+0xec>
 8006e68:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006f54 <__ieee754_rem_pio2f+0x248>
 8006e6c:	eeb0 0a66 	vmov.f32	s0, s13
 8006e70:	eea7 0a25 	vfma.f32	s0, s14, s11
 8006e74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006e78:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006e7c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006f58 <__ieee754_rem_pio2f+0x24c>
 8006e80:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8006e84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006e88:	ed85 7a00 	vstr	s14, [r5]
 8006e8c:	e7b4      	b.n	8006df8 <__ieee754_rem_pio2f+0xec>
 8006e8e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006e92:	db06      	blt.n	8006ea2 <__ieee754_rem_pio2f+0x196>
 8006e94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006e98:	edc0 7a01 	vstr	s15, [r0, #4]
 8006e9c:	edc0 7a00 	vstr	s15, [r0]
 8006ea0:	e742      	b.n	8006d28 <__ieee754_rem_pio2f+0x1c>
 8006ea2:	15e2      	asrs	r2, r4, #23
 8006ea4:	3a86      	subs	r2, #134	; 0x86
 8006ea6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eb2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006f5c <__ieee754_rem_pio2f+0x250>
 8006eb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ebe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006ec2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ec6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ed2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006eda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee2:	edcd 7a05 	vstr	s15, [sp, #20]
 8006ee6:	d11e      	bne.n	8006f26 <__ieee754_rem_pio2f+0x21a>
 8006ee8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2302      	movne	r3, #2
 8006ef6:	491a      	ldr	r1, [pc, #104]	; (8006f60 <__ieee754_rem_pio2f+0x254>)
 8006ef8:	9101      	str	r1, [sp, #4]
 8006efa:	2102      	movs	r1, #2
 8006efc:	9100      	str	r1, [sp, #0]
 8006efe:	a803      	add	r0, sp, #12
 8006f00:	4629      	mov	r1, r5
 8006f02:	f000 f88d 	bl	8007020 <__kernel_rem_pio2f>
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	f6bf af31 	bge.w	8006d6e <__ieee754_rem_pio2f+0x62>
 8006f0c:	edd5 7a00 	vldr	s15, [r5]
 8006f10:	eef1 7a67 	vneg.f32	s15, s15
 8006f14:	edc5 7a00 	vstr	s15, [r5]
 8006f18:	edd5 7a01 	vldr	s15, [r5, #4]
 8006f1c:	eef1 7a67 	vneg.f32	s15, s15
 8006f20:	edc5 7a01 	vstr	s15, [r5, #4]
 8006f24:	e77a      	b.n	8006e1c <__ieee754_rem_pio2f+0x110>
 8006f26:	2303      	movs	r3, #3
 8006f28:	e7e5      	b.n	8006ef6 <__ieee754_rem_pio2f+0x1ea>
 8006f2a:	bf00      	nop
 8006f2c:	3f490fd8 	.word	0x3f490fd8
 8006f30:	4016cbe3 	.word	0x4016cbe3
 8006f34:	3fc90f80 	.word	0x3fc90f80
 8006f38:	3fc90fd0 	.word	0x3fc90fd0
 8006f3c:	37354400 	.word	0x37354400
 8006f40:	37354443 	.word	0x37354443
 8006f44:	2e85a308 	.word	0x2e85a308
 8006f48:	43490f80 	.word	0x43490f80
 8006f4c:	3f22f984 	.word	0x3f22f984
 8006f50:	08007784 	.word	0x08007784
 8006f54:	2e85a300 	.word	0x2e85a300
 8006f58:	248d3132 	.word	0x248d3132
 8006f5c:	43800000 	.word	0x43800000
 8006f60:	08007804 	.word	0x08007804

08006f64 <__kernel_cosf>:
 8006f64:	ee10 3a10 	vmov	r3, s0
 8006f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f74:	da05      	bge.n	8006f82 <__kernel_cosf+0x1e>
 8006f76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006f7a:	ee17 2a90 	vmov	r2, s15
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d03b      	beq.n	8006ffa <__kernel_cosf+0x96>
 8006f82:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006f86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007000 <__kernel_cosf+0x9c>
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <__kernel_cosf+0xa0>)
 8006f90:	ee66 7a07 	vmul.f32	s15, s12, s14
 8006f94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007008 <__kernel_cosf+0xa4>
 8006f98:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800700c <__kernel_cosf+0xa8>
 8006fa2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006fa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007010 <__kernel_cosf+0xac>
 8006faa:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006fae:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007014 <__kernel_cosf+0xb0>
 8006fb2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006fb6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007018 <__kernel_cosf+0xb4>
 8006fba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006fbe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8006fc2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006fc6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006fca:	dc04      	bgt.n	8006fd6 <__kernel_cosf+0x72>
 8006fcc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8006fd0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8006fd4:	4770      	bx	lr
 8006fd6:	4a11      	ldr	r2, [pc, #68]	; (800701c <__kernel_cosf+0xb8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	bfda      	itte	le
 8006fdc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	ee07 3a10 	vmovle	s14, r3
 8006fe4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8006fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8006ff0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006ff4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006ff8:	4770      	bx	lr
 8006ffa:	eeb0 0a66 	vmov.f32	s0, s13
 8006ffe:	4770      	bx	lr
 8007000:	ad47d74e 	.word	0xad47d74e
 8007004:	3e999999 	.word	0x3e999999
 8007008:	310f74f6 	.word	0x310f74f6
 800700c:	b493f27c 	.word	0xb493f27c
 8007010:	37d00d01 	.word	0x37d00d01
 8007014:	bab60b61 	.word	0xbab60b61
 8007018:	3d2aaaab 	.word	0x3d2aaaab
 800701c:	3f480000 	.word	0x3f480000

08007020 <__kernel_rem_pio2f>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	ed2d 8b04 	vpush	{d8-d9}
 8007028:	b0d7      	sub	sp, #348	; 0x15c
 800702a:	469b      	mov	fp, r3
 800702c:	460e      	mov	r6, r1
 800702e:	4bbe      	ldr	r3, [pc, #760]	; (8007328 <__kernel_rem_pio2f+0x308>)
 8007030:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007032:	9002      	str	r0, [sp, #8]
 8007034:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007038:	9865      	ldr	r0, [sp, #404]	; 0x194
 800703a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007338 <__kernel_rem_pio2f+0x318>
 800703e:	1ed1      	subs	r1, r2, #3
 8007040:	2308      	movs	r3, #8
 8007042:	fb91 f1f3 	sdiv	r1, r1, r3
 8007046:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800704a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800704e:	1c4c      	adds	r4, r1, #1
 8007050:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007054:	eba1 050a 	sub.w	r5, r1, sl
 8007058:	aa1a      	add	r2, sp, #104	; 0x68
 800705a:	eb09 070a 	add.w	r7, r9, sl
 800705e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007062:	4696      	mov	lr, r2
 8007064:	2300      	movs	r3, #0
 8007066:	42bb      	cmp	r3, r7
 8007068:	dd0f      	ble.n	800708a <__kernel_rem_pio2f+0x6a>
 800706a:	af42      	add	r7, sp, #264	; 0x108
 800706c:	2200      	movs	r2, #0
 800706e:	454a      	cmp	r2, r9
 8007070:	dc27      	bgt.n	80070c2 <__kernel_rem_pio2f+0xa2>
 8007072:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007076:	eb0b 0302 	add.w	r3, fp, r2
 800707a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800707e:	9d02      	ldr	r5, [sp, #8]
 8007080:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007338 <__kernel_rem_pio2f+0x318>
 8007084:	f04f 0c00 	mov.w	ip, #0
 8007088:	e015      	b.n	80070b6 <__kernel_rem_pio2f+0x96>
 800708a:	42dd      	cmn	r5, r3
 800708c:	bf5d      	ittte	pl
 800708e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007092:	ee07 2a90 	vmovpl	s15, r2
 8007096:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800709a:	eef0 7a47 	vmovmi.f32	s15, s14
 800709e:	ecee 7a01 	vstmia	lr!, {s15}
 80070a2:	3301      	adds	r3, #1
 80070a4:	e7df      	b.n	8007066 <__kernel_rem_pio2f+0x46>
 80070a6:	ecf5 6a01 	vldmia	r5!, {s13}
 80070aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80070ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80070b2:	f10c 0c01 	add.w	ip, ip, #1
 80070b6:	45d4      	cmp	ip, sl
 80070b8:	ddf5      	ble.n	80070a6 <__kernel_rem_pio2f+0x86>
 80070ba:	ece7 7a01 	vstmia	r7!, {s15}
 80070be:	3201      	adds	r2, #1
 80070c0:	e7d5      	b.n	800706e <__kernel_rem_pio2f+0x4e>
 80070c2:	ab06      	add	r3, sp, #24
 80070c4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007334 <__kernel_rem_pio2f+0x314>
 80070ce:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007330 <__kernel_rem_pio2f+0x310>
 80070d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80070d6:	9303      	str	r3, [sp, #12]
 80070d8:	464d      	mov	r5, r9
 80070da:	ab56      	add	r3, sp, #344	; 0x158
 80070dc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80070e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80070e4:	3f01      	subs	r7, #1
 80070e6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80070ea:	00bf      	lsls	r7, r7, #2
 80070ec:	ab56      	add	r3, sp, #344	; 0x158
 80070ee:	19da      	adds	r2, r3, r7
 80070f0:	3a4c      	subs	r2, #76	; 0x4c
 80070f2:	2300      	movs	r3, #0
 80070f4:	1ae9      	subs	r1, r5, r3
 80070f6:	2900      	cmp	r1, #0
 80070f8:	dc4c      	bgt.n	8007194 <__kernel_rem_pio2f+0x174>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 faa4 	bl	8007648 <scalbnf>
 8007100:	eeb0 8a40 	vmov.f32	s16, s0
 8007104:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007108:	ee28 0a00 	vmul.f32	s0, s16, s0
 800710c:	f000 fa5a 	bl	80075c4 <floorf>
 8007110:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007114:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007118:	2c00      	cmp	r4, #0
 800711a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800711e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007126:	ee38 8a67 	vsub.f32	s16, s16, s15
 800712a:	dd48      	ble.n	80071be <__kernel_rem_pio2f+0x19e>
 800712c:	1e69      	subs	r1, r5, #1
 800712e:	ab06      	add	r3, sp, #24
 8007130:	f1c4 0008 	rsb	r0, r4, #8
 8007134:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007138:	9a01      	ldr	r2, [sp, #4]
 800713a:	fa4c f300 	asr.w	r3, ip, r0
 800713e:	441a      	add	r2, r3
 8007140:	4083      	lsls	r3, r0
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	ebac 0203 	sub.w	r2, ip, r3
 8007148:	ab06      	add	r3, sp, #24
 800714a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800714e:	f1c4 0307 	rsb	r3, r4, #7
 8007152:	fa42 f803 	asr.w	r8, r2, r3
 8007156:	f1b8 0f00 	cmp.w	r8, #0
 800715a:	dd41      	ble.n	80071e0 <__kernel_rem_pio2f+0x1c0>
 800715c:	9b01      	ldr	r3, [sp, #4]
 800715e:	2000      	movs	r0, #0
 8007160:	3301      	adds	r3, #1
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	4601      	mov	r1, r0
 8007166:	4285      	cmp	r5, r0
 8007168:	dc6d      	bgt.n	8007246 <__kernel_rem_pio2f+0x226>
 800716a:	2c00      	cmp	r4, #0
 800716c:	dd04      	ble.n	8007178 <__kernel_rem_pio2f+0x158>
 800716e:	2c01      	cmp	r4, #1
 8007170:	d07e      	beq.n	8007270 <__kernel_rem_pio2f+0x250>
 8007172:	2c02      	cmp	r4, #2
 8007174:	f000 8086 	beq.w	8007284 <__kernel_rem_pio2f+0x264>
 8007178:	f1b8 0f02 	cmp.w	r8, #2
 800717c:	d130      	bne.n	80071e0 <__kernel_rem_pio2f+0x1c0>
 800717e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007182:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007186:	b359      	cbz	r1, 80071e0 <__kernel_rem_pio2f+0x1c0>
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fa5d 	bl	8007648 <scalbnf>
 800718e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007192:	e025      	b.n	80071e0 <__kernel_rem_pio2f+0x1c0>
 8007194:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007198:	a806      	add	r0, sp, #24
 800719a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800719e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071a2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80071a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80071aa:	ee10 1a10 	vmov	r1, s0
 80071ae:	ed32 0a01 	vldmdb	r2!, {s0}
 80071b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80071b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80071ba:	3301      	adds	r3, #1
 80071bc:	e79a      	b.n	80070f4 <__kernel_rem_pio2f+0xd4>
 80071be:	d106      	bne.n	80071ce <__kernel_rem_pio2f+0x1ae>
 80071c0:	1e6b      	subs	r3, r5, #1
 80071c2:	aa06      	add	r2, sp, #24
 80071c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071c8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80071cc:	e7c3      	b.n	8007156 <__kernel_rem_pio2f+0x136>
 80071ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80071d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80071d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071da:	da31      	bge.n	8007240 <__kernel_rem_pio2f+0x220>
 80071dc:	f04f 0800 	mov.w	r8, #0
 80071e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80071e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e8:	f040 80a8 	bne.w	800733c <__kernel_rem_pio2f+0x31c>
 80071ec:	1e6b      	subs	r3, r5, #1
 80071ee:	4618      	mov	r0, r3
 80071f0:	2200      	movs	r2, #0
 80071f2:	4548      	cmp	r0, r9
 80071f4:	da4d      	bge.n	8007292 <__kernel_rem_pio2f+0x272>
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	f000 8087 	beq.w	800730a <__kernel_rem_pio2f+0x2ea>
 80071fc:	aa06      	add	r2, sp, #24
 80071fe:	3c08      	subs	r4, #8
 8007200:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007204:	2900      	cmp	r1, #0
 8007206:	f000 808d 	beq.w	8007324 <__kernel_rem_pio2f+0x304>
 800720a:	4620      	mov	r0, r4
 800720c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007210:	9302      	str	r3, [sp, #8]
 8007212:	f000 fa19 	bl	8007648 <scalbnf>
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007334 <__kernel_rem_pio2f+0x314>
 800721c:	0099      	lsls	r1, r3, #2
 800721e:	aa42      	add	r2, sp, #264	; 0x108
 8007220:	1850      	adds	r0, r2, r1
 8007222:	1d05      	adds	r5, r0, #4
 8007224:	461c      	mov	r4, r3
 8007226:	2c00      	cmp	r4, #0
 8007228:	f280 80b8 	bge.w	800739c <__kernel_rem_pio2f+0x37c>
 800722c:	2500      	movs	r5, #0
 800722e:	1b5c      	subs	r4, r3, r5
 8007230:	2c00      	cmp	r4, #0
 8007232:	f2c0 80d8 	blt.w	80073e6 <__kernel_rem_pio2f+0x3c6>
 8007236:	4f3d      	ldr	r7, [pc, #244]	; (800732c <__kernel_rem_pio2f+0x30c>)
 8007238:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007338 <__kernel_rem_pio2f+0x318>
 800723c:	2400      	movs	r4, #0
 800723e:	e0c6      	b.n	80073ce <__kernel_rem_pio2f+0x3ae>
 8007240:	f04f 0802 	mov.w	r8, #2
 8007244:	e78a      	b.n	800715c <__kernel_rem_pio2f+0x13c>
 8007246:	ab06      	add	r3, sp, #24
 8007248:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800724c:	b949      	cbnz	r1, 8007262 <__kernel_rem_pio2f+0x242>
 800724e:	b12b      	cbz	r3, 800725c <__kernel_rem_pio2f+0x23c>
 8007250:	aa06      	add	r2, sp, #24
 8007252:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007256:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800725a:	2301      	movs	r3, #1
 800725c:	3001      	adds	r0, #1
 800725e:	4619      	mov	r1, r3
 8007260:	e781      	b.n	8007166 <__kernel_rem_pio2f+0x146>
 8007262:	aa06      	add	r2, sp, #24
 8007264:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007268:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800726c:	460b      	mov	r3, r1
 800726e:	e7f5      	b.n	800725c <__kernel_rem_pio2f+0x23c>
 8007270:	1e68      	subs	r0, r5, #1
 8007272:	ab06      	add	r3, sp, #24
 8007274:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	aa06      	add	r2, sp, #24
 800727e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007282:	e779      	b.n	8007178 <__kernel_rem_pio2f+0x158>
 8007284:	1e68      	subs	r0, r5, #1
 8007286:	ab06      	add	r3, sp, #24
 8007288:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800728c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007290:	e7f4      	b.n	800727c <__kernel_rem_pio2f+0x25c>
 8007292:	a906      	add	r1, sp, #24
 8007294:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007298:	3801      	subs	r0, #1
 800729a:	430a      	orrs	r2, r1
 800729c:	e7a9      	b.n	80071f2 <__kernel_rem_pio2f+0x1d2>
 800729e:	f10c 0c01 	add.w	ip, ip, #1
 80072a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d0f9      	beq.n	800729e <__kernel_rem_pio2f+0x27e>
 80072aa:	eb0b 0305 	add.w	r3, fp, r5
 80072ae:	aa1a      	add	r2, sp, #104	; 0x68
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	1898      	adds	r0, r3, r2
 80072b4:	3004      	adds	r0, #4
 80072b6:	1c69      	adds	r1, r5, #1
 80072b8:	3704      	adds	r7, #4
 80072ba:	2200      	movs	r2, #0
 80072bc:	4465      	add	r5, ip
 80072be:	9005      	str	r0, [sp, #20]
 80072c0:	428d      	cmp	r5, r1
 80072c2:	f6ff af0a 	blt.w	80070da <__kernel_rem_pio2f+0xba>
 80072c6:	a81a      	add	r0, sp, #104	; 0x68
 80072c8:	eb02 0c03 	add.w	ip, r2, r3
 80072cc:	4484      	add	ip, r0
 80072ce:	9803      	ldr	r0, [sp, #12]
 80072d0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80072d4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80072d8:	9001      	str	r0, [sp, #4]
 80072da:	ee07 0a90 	vmov	s15, r0
 80072de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	edcc 7a00 	vstr	s15, [ip]
 80072e8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007338 <__kernel_rem_pio2f+0x318>
 80072ec:	eb00 0802 	add.w	r8, r0, r2
 80072f0:	f04f 0c00 	mov.w	ip, #0
 80072f4:	45d4      	cmp	ip, sl
 80072f6:	dd0c      	ble.n	8007312 <__kernel_rem_pio2f+0x2f2>
 80072f8:	eb02 0c07 	add.w	ip, r2, r7
 80072fc:	a842      	add	r0, sp, #264	; 0x108
 80072fe:	4484      	add	ip, r0
 8007300:	edcc 7a01 	vstr	s15, [ip, #4]
 8007304:	3101      	adds	r1, #1
 8007306:	3204      	adds	r2, #4
 8007308:	e7da      	b.n	80072c0 <__kernel_rem_pio2f+0x2a0>
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	f04f 0c01 	mov.w	ip, #1
 8007310:	e7c7      	b.n	80072a2 <__kernel_rem_pio2f+0x282>
 8007312:	ecfe 6a01 	vldmia	lr!, {s13}
 8007316:	ed38 7a01 	vldmdb	r8!, {s14}
 800731a:	f10c 0c01 	add.w	ip, ip, #1
 800731e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007322:	e7e7      	b.n	80072f4 <__kernel_rem_pio2f+0x2d4>
 8007324:	3b01      	subs	r3, #1
 8007326:	e769      	b.n	80071fc <__kernel_rem_pio2f+0x1dc>
 8007328:	08007b48 	.word	0x08007b48
 800732c:	08007b1c 	.word	0x08007b1c
 8007330:	43800000 	.word	0x43800000
 8007334:	3b800000 	.word	0x3b800000
 8007338:	00000000 	.word	0x00000000
 800733c:	4260      	negs	r0, r4
 800733e:	eeb0 0a48 	vmov.f32	s0, s16
 8007342:	f000 f981 	bl	8007648 <scalbnf>
 8007346:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007330 <__kernel_rem_pio2f+0x310>
 800734a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	db1a      	blt.n	800738a <__kernel_rem_pio2f+0x36a>
 8007354:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007334 <__kernel_rem_pio2f+0x314>
 8007358:	ee60 7a27 	vmul.f32	s15, s0, s15
 800735c:	aa06      	add	r2, sp, #24
 800735e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007362:	a906      	add	r1, sp, #24
 8007364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007368:	3408      	adds	r4, #8
 800736a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800736e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007372:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007376:	ee10 3a10 	vmov	r3, s0
 800737a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800737e:	1c6b      	adds	r3, r5, #1
 8007380:	ee17 2a90 	vmov	r2, s15
 8007384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007388:	e73f      	b.n	800720a <__kernel_rem_pio2f+0x1ea>
 800738a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800738e:	aa06      	add	r2, sp, #24
 8007390:	ee10 3a10 	vmov	r3, s0
 8007394:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007398:	462b      	mov	r3, r5
 800739a:	e736      	b.n	800720a <__kernel_rem_pio2f+0x1ea>
 800739c:	aa06      	add	r2, sp, #24
 800739e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	ee07 2a90 	vmov	s15, r2
 80073a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ac:	3c01      	subs	r4, #1
 80073ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80073b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80073b6:	ed65 7a01 	vstmdb	r5!, {s15}
 80073ba:	e734      	b.n	8007226 <__kernel_rem_pio2f+0x206>
 80073bc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80073c0:	ecf7 6a01 	vldmia	r7!, {s13}
 80073c4:	ed9c 7a00 	vldr	s14, [ip]
 80073c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073cc:	3401      	adds	r4, #1
 80073ce:	454c      	cmp	r4, r9
 80073d0:	dc01      	bgt.n	80073d6 <__kernel_rem_pio2f+0x3b6>
 80073d2:	42a5      	cmp	r5, r4
 80073d4:	daf2      	bge.n	80073bc <__kernel_rem_pio2f+0x39c>
 80073d6:	aa56      	add	r2, sp, #344	; 0x158
 80073d8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80073dc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80073e0:	3501      	adds	r5, #1
 80073e2:	3804      	subs	r0, #4
 80073e4:	e723      	b.n	800722e <__kernel_rem_pio2f+0x20e>
 80073e6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80073e8:	2a03      	cmp	r2, #3
 80073ea:	d84d      	bhi.n	8007488 <__kernel_rem_pio2f+0x468>
 80073ec:	e8df f002 	tbb	[pc, r2]
 80073f0:	021f1f3e 	.word	0x021f1f3e
 80073f4:	aa56      	add	r2, sp, #344	; 0x158
 80073f6:	4411      	add	r1, r2
 80073f8:	399c      	subs	r1, #156	; 0x9c
 80073fa:	4608      	mov	r0, r1
 80073fc:	461c      	mov	r4, r3
 80073fe:	2c00      	cmp	r4, #0
 8007400:	dc5f      	bgt.n	80074c2 <__kernel_rem_pio2f+0x4a2>
 8007402:	4608      	mov	r0, r1
 8007404:	461c      	mov	r4, r3
 8007406:	2c01      	cmp	r4, #1
 8007408:	dc6b      	bgt.n	80074e2 <__kernel_rem_pio2f+0x4c2>
 800740a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007338 <__kernel_rem_pio2f+0x318>
 800740e:	2b01      	cmp	r3, #1
 8007410:	dc77      	bgt.n	8007502 <__kernel_rem_pio2f+0x4e2>
 8007412:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007416:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800741a:	f1b8 0f00 	cmp.w	r8, #0
 800741e:	d176      	bne.n	800750e <__kernel_rem_pio2f+0x4ee>
 8007420:	edc6 6a00 	vstr	s13, [r6]
 8007424:	ed86 7a01 	vstr	s14, [r6, #4]
 8007428:	edc6 7a02 	vstr	s15, [r6, #8]
 800742c:	e02c      	b.n	8007488 <__kernel_rem_pio2f+0x468>
 800742e:	aa56      	add	r2, sp, #344	; 0x158
 8007430:	4411      	add	r1, r2
 8007432:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007338 <__kernel_rem_pio2f+0x318>
 8007436:	399c      	subs	r1, #156	; 0x9c
 8007438:	4618      	mov	r0, r3
 800743a:	2800      	cmp	r0, #0
 800743c:	da32      	bge.n	80074a4 <__kernel_rem_pio2f+0x484>
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	d035      	beq.n	80074b0 <__kernel_rem_pio2f+0x490>
 8007444:	eef1 7a47 	vneg.f32	s15, s14
 8007448:	edc6 7a00 	vstr	s15, [r6]
 800744c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007454:	a82f      	add	r0, sp, #188	; 0xbc
 8007456:	2101      	movs	r1, #1
 8007458:	428b      	cmp	r3, r1
 800745a:	da2c      	bge.n	80074b6 <__kernel_rem_pio2f+0x496>
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	d001      	beq.n	8007466 <__kernel_rem_pio2f+0x446>
 8007462:	eef1 7a67 	vneg.f32	s15, s15
 8007466:	edc6 7a01 	vstr	s15, [r6, #4]
 800746a:	e00d      	b.n	8007488 <__kernel_rem_pio2f+0x468>
 800746c:	aa56      	add	r2, sp, #344	; 0x158
 800746e:	4411      	add	r1, r2
 8007470:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007338 <__kernel_rem_pio2f+0x318>
 8007474:	399c      	subs	r1, #156	; 0x9c
 8007476:	2b00      	cmp	r3, #0
 8007478:	da0e      	bge.n	8007498 <__kernel_rem_pio2f+0x478>
 800747a:	f1b8 0f00 	cmp.w	r8, #0
 800747e:	d001      	beq.n	8007484 <__kernel_rem_pio2f+0x464>
 8007480:	eef1 7a67 	vneg.f32	s15, s15
 8007484:	edc6 7a00 	vstr	s15, [r6]
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	f003 0007 	and.w	r0, r3, #7
 800748e:	b057      	add	sp, #348	; 0x15c
 8007490:	ecbd 8b04 	vpop	{d8-d9}
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007498:	ed31 7a01 	vldmdb	r1!, {s14}
 800749c:	3b01      	subs	r3, #1
 800749e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a2:	e7e8      	b.n	8007476 <__kernel_rem_pio2f+0x456>
 80074a4:	ed71 7a01 	vldmdb	r1!, {s15}
 80074a8:	3801      	subs	r0, #1
 80074aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ae:	e7c4      	b.n	800743a <__kernel_rem_pio2f+0x41a>
 80074b0:	eef0 7a47 	vmov.f32	s15, s14
 80074b4:	e7c8      	b.n	8007448 <__kernel_rem_pio2f+0x428>
 80074b6:	ecb0 7a01 	vldmia	r0!, {s14}
 80074ba:	3101      	adds	r1, #1
 80074bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074c0:	e7ca      	b.n	8007458 <__kernel_rem_pio2f+0x438>
 80074c2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80074c6:	ed70 6a01 	vldmdb	r0!, {s13}
 80074ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80074ce:	3c01      	subs	r4, #1
 80074d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074d4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80074d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074dc:	edc0 7a00 	vstr	s15, [r0]
 80074e0:	e78d      	b.n	80073fe <__kernel_rem_pio2f+0x3de>
 80074e2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80074e6:	ed70 6a01 	vldmdb	r0!, {s13}
 80074ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80074ee:	3c01      	subs	r4, #1
 80074f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074f4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80074f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fc:	edc0 7a00 	vstr	s15, [r0]
 8007500:	e781      	b.n	8007406 <__kernel_rem_pio2f+0x3e6>
 8007502:	ed31 7a01 	vldmdb	r1!, {s14}
 8007506:	3b01      	subs	r3, #1
 8007508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800750c:	e77f      	b.n	800740e <__kernel_rem_pio2f+0x3ee>
 800750e:	eef1 6a66 	vneg.f32	s13, s13
 8007512:	eeb1 7a47 	vneg.f32	s14, s14
 8007516:	edc6 6a00 	vstr	s13, [r6]
 800751a:	ed86 7a01 	vstr	s14, [r6, #4]
 800751e:	eef1 7a67 	vneg.f32	s15, s15
 8007522:	e781      	b.n	8007428 <__kernel_rem_pio2f+0x408>

08007524 <__kernel_sinf>:
 8007524:	ee10 3a10 	vmov	r3, s0
 8007528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800752c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007530:	da04      	bge.n	800753c <__kernel_sinf+0x18>
 8007532:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007536:	ee17 3a90 	vmov	r3, s15
 800753a:	b35b      	cbz	r3, 8007594 <__kernel_sinf+0x70>
 800753c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007540:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007598 <__kernel_sinf+0x74>
 8007544:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800759c <__kernel_sinf+0x78>
 8007548:	eea7 6a27 	vfma.f32	s12, s14, s15
 800754c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80075a0 <__kernel_sinf+0x7c>
 8007550:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007554:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80075a4 <__kernel_sinf+0x80>
 8007558:	eea7 6a87 	vfma.f32	s12, s15, s14
 800755c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80075a8 <__kernel_sinf+0x84>
 8007560:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007564:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007568:	b930      	cbnz	r0, 8007578 <__kernel_sinf+0x54>
 800756a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80075ac <__kernel_sinf+0x88>
 800756e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007572:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007576:	4770      	bx	lr
 8007578:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800757c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007580:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007584:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007588:	eddf 7a09 	vldr	s15, [pc, #36]	; 80075b0 <__kernel_sinf+0x8c>
 800758c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007590:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2f2ec9d3 	.word	0x2f2ec9d3
 800759c:	b2d72f34 	.word	0xb2d72f34
 80075a0:	3638ef1b 	.word	0x3638ef1b
 80075a4:	b9500d01 	.word	0xb9500d01
 80075a8:	3c088889 	.word	0x3c088889
 80075ac:	be2aaaab 	.word	0xbe2aaaab
 80075b0:	3e2aaaab 	.word	0x3e2aaaab

080075b4 <fabsf>:
 80075b4:	ee10 3a10 	vmov	r3, s0
 80075b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	ee00 3a10 	vmov	s0, r3
 80075c0:	4770      	bx	lr
	...

080075c4 <floorf>:
 80075c4:	ee10 3a10 	vmov	r3, s0
 80075c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80075cc:	0dca      	lsrs	r2, r1, #23
 80075ce:	3a7f      	subs	r2, #127	; 0x7f
 80075d0:	2a16      	cmp	r2, #22
 80075d2:	dc2a      	bgt.n	800762a <floorf+0x66>
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	da11      	bge.n	80075fc <floorf+0x38>
 80075d8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800763c <floorf+0x78>
 80075dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80075e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	dd05      	ble.n	80075f6 <floorf+0x32>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da23      	bge.n	8007636 <floorf+0x72>
 80075ee:	4a14      	ldr	r2, [pc, #80]	; (8007640 <floorf+0x7c>)
 80075f0:	2900      	cmp	r1, #0
 80075f2:	bf18      	it	ne
 80075f4:	4613      	movne	r3, r2
 80075f6:	ee00 3a10 	vmov	s0, r3
 80075fa:	4770      	bx	lr
 80075fc:	4911      	ldr	r1, [pc, #68]	; (8007644 <floorf+0x80>)
 80075fe:	4111      	asrs	r1, r2
 8007600:	420b      	tst	r3, r1
 8007602:	d0fa      	beq.n	80075fa <floorf+0x36>
 8007604:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800763c <floorf+0x78>
 8007608:	ee30 0a27 	vadd.f32	s0, s0, s15
 800760c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007614:	ddef      	ble.n	80075f6 <floorf+0x32>
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfbe      	ittt	lt
 800761a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800761e:	fa40 f202 	asrlt.w	r2, r0, r2
 8007622:	189b      	addlt	r3, r3, r2
 8007624:	ea23 0301 	bic.w	r3, r3, r1
 8007628:	e7e5      	b.n	80075f6 <floorf+0x32>
 800762a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800762e:	d3e4      	bcc.n	80075fa <floorf+0x36>
 8007630:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007634:	4770      	bx	lr
 8007636:	2300      	movs	r3, #0
 8007638:	e7dd      	b.n	80075f6 <floorf+0x32>
 800763a:	bf00      	nop
 800763c:	7149f2ca 	.word	0x7149f2ca
 8007640:	bf800000 	.word	0xbf800000
 8007644:	007fffff 	.word	0x007fffff

08007648 <scalbnf>:
 8007648:	b508      	push	{r3, lr}
 800764a:	ee10 2a10 	vmov	r2, s0
 800764e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007652:	ed2d 8b02 	vpush	{d8}
 8007656:	eef0 0a40 	vmov.f32	s1, s0
 800765a:	d004      	beq.n	8007666 <scalbnf+0x1e>
 800765c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007660:	d306      	bcc.n	8007670 <scalbnf+0x28>
 8007662:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007666:	ecbd 8b02 	vpop	{d8}
 800766a:	eeb0 0a60 	vmov.f32	s0, s1
 800766e:	bd08      	pop	{r3, pc}
 8007670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007674:	d21c      	bcs.n	80076b0 <scalbnf+0x68>
 8007676:	4b1f      	ldr	r3, [pc, #124]	; (80076f4 <scalbnf+0xac>)
 8007678:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80076f8 <scalbnf+0xb0>
 800767c:	4298      	cmp	r0, r3
 800767e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007682:	db10      	blt.n	80076a6 <scalbnf+0x5e>
 8007684:	ee10 2a90 	vmov	r2, s1
 8007688:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800768c:	3b19      	subs	r3, #25
 800768e:	4403      	add	r3, r0
 8007690:	2bfe      	cmp	r3, #254	; 0xfe
 8007692:	dd0f      	ble.n	80076b4 <scalbnf+0x6c>
 8007694:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80076fc <scalbnf+0xb4>
 8007698:	eeb0 0a48 	vmov.f32	s0, s16
 800769c:	f000 f834 	bl	8007708 <copysignf>
 80076a0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80076a4:	e7df      	b.n	8007666 <scalbnf+0x1e>
 80076a6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007700 <scalbnf+0xb8>
 80076aa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80076ae:	e7da      	b.n	8007666 <scalbnf+0x1e>
 80076b0:	0ddb      	lsrs	r3, r3, #23
 80076b2:	e7ec      	b.n	800768e <scalbnf+0x46>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd06      	ble.n	80076c6 <scalbnf+0x7e>
 80076b8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80076bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80076c0:	ee00 3a90 	vmov	s1, r3
 80076c4:	e7cf      	b.n	8007666 <scalbnf+0x1e>
 80076c6:	f113 0f16 	cmn.w	r3, #22
 80076ca:	da06      	bge.n	80076da <scalbnf+0x92>
 80076cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076d0:	4298      	cmp	r0, r3
 80076d2:	dcdf      	bgt.n	8007694 <scalbnf+0x4c>
 80076d4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007700 <scalbnf+0xb8>
 80076d8:	e7de      	b.n	8007698 <scalbnf+0x50>
 80076da:	3319      	adds	r3, #25
 80076dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80076e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80076e4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007704 <scalbnf+0xbc>
 80076e8:	ee07 3a10 	vmov	s14, r3
 80076ec:	ee67 0a27 	vmul.f32	s1, s14, s15
 80076f0:	e7b9      	b.n	8007666 <scalbnf+0x1e>
 80076f2:	bf00      	nop
 80076f4:	ffff3cb0 	.word	0xffff3cb0
 80076f8:	4c000000 	.word	0x4c000000
 80076fc:	7149f2ca 	.word	0x7149f2ca
 8007700:	0da24260 	.word	0x0da24260
 8007704:	33000000 	.word	0x33000000

08007708 <copysignf>:
 8007708:	ee10 3a10 	vmov	r3, s0
 800770c:	ee10 2a90 	vmov	r2, s1
 8007710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007714:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007718:	4313      	orrs	r3, r2
 800771a:	ee00 3a10 	vmov	s0, r3
 800771e:	4770      	bx	lr

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
