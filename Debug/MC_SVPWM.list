
MC_SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008624  08008624  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800862c  0800862c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000070  080086a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080086a4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000250d  00000000  00000000  00033771  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00036d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ad7  00000000  00000000  00037d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc53  00000000  00000000  0005982f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccdec  00000000  00000000  00067482  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013426e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf8  00000000  00000000  001342ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081a8 	.word	0x080081a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081a8 	.word	0x080081a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2f>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005f0:	bf24      	itt	cs
 80005f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005fa:	d90d      	bls.n	8000618 <__aeabi_d2f+0x30>
 80005fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000608:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800060c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000610:	bf08      	it	eq
 8000612:	f020 0001 	biceq.w	r0, r0, #1
 8000616:	4770      	bx	lr
 8000618:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800061c:	d121      	bne.n	8000662 <__aeabi_d2f+0x7a>
 800061e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000622:	bfbc      	itt	lt
 8000624:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000628:	4770      	bxlt	lr
 800062a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000632:	f1c2 0218 	rsb	r2, r2, #24
 8000636:	f1c2 0c20 	rsb	ip, r2, #32
 800063a:	fa10 f30c 	lsls.w	r3, r0, ip
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	bf18      	it	ne
 8000644:	f040 0001 	orrne.w	r0, r0, #1
 8000648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800064c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000654:	ea40 000c 	orr.w	r0, r0, ip
 8000658:	fa23 f302 	lsr.w	r3, r3, r2
 800065c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000660:	e7cc      	b.n	80005fc <__aeabi_d2f+0x14>
 8000662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000666:	d107      	bne.n	8000678 <__aeabi_d2f+0x90>
 8000668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800066c:	bf1e      	ittt	ne
 800066e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000672:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000676:	4770      	bxne	lr
 8000678:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800067c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000680:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b972 	b.w	8000984 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f806 	bl	80006b8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__udivmoddi4>:
 80006b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006bc:	9e08      	ldr	r6, [sp, #32]
 80006be:	4604      	mov	r4, r0
 80006c0:	4688      	mov	r8, r1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d14b      	bne.n	800075e <__udivmoddi4+0xa6>
 80006c6:	428a      	cmp	r2, r1
 80006c8:	4615      	mov	r5, r2
 80006ca:	d967      	bls.n	800079c <__udivmoddi4+0xe4>
 80006cc:	fab2 f282 	clz	r2, r2
 80006d0:	b14a      	cbz	r2, 80006e6 <__udivmoddi4+0x2e>
 80006d2:	f1c2 0720 	rsb	r7, r2, #32
 80006d6:	fa01 f302 	lsl.w	r3, r1, r2
 80006da:	fa20 f707 	lsr.w	r7, r0, r7
 80006de:	4095      	lsls	r5, r2
 80006e0:	ea47 0803 	orr.w	r8, r7, r3
 80006e4:	4094      	lsls	r4, r2
 80006e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ea:	0c23      	lsrs	r3, r4, #16
 80006ec:	fbb8 f7fe 	udiv	r7, r8, lr
 80006f0:	fa1f fc85 	uxth.w	ip, r5
 80006f4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006fc:	fb07 f10c 	mul.w	r1, r7, ip
 8000700:	4299      	cmp	r1, r3
 8000702:	d909      	bls.n	8000718 <__udivmoddi4+0x60>
 8000704:	18eb      	adds	r3, r5, r3
 8000706:	f107 30ff 	add.w	r0, r7, #4294967295
 800070a:	f080 811b 	bcs.w	8000944 <__udivmoddi4+0x28c>
 800070e:	4299      	cmp	r1, r3
 8000710:	f240 8118 	bls.w	8000944 <__udivmoddi4+0x28c>
 8000714:	3f02      	subs	r7, #2
 8000716:	442b      	add	r3, r5
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	b2a4      	uxth	r4, r4
 800071c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000720:	fb0e 3310 	mls	r3, lr, r0, r3
 8000724:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000728:	fb00 fc0c 	mul.w	ip, r0, ip
 800072c:	45a4      	cmp	ip, r4
 800072e:	d909      	bls.n	8000744 <__udivmoddi4+0x8c>
 8000730:	192c      	adds	r4, r5, r4
 8000732:	f100 33ff 	add.w	r3, r0, #4294967295
 8000736:	f080 8107 	bcs.w	8000948 <__udivmoddi4+0x290>
 800073a:	45a4      	cmp	ip, r4
 800073c:	f240 8104 	bls.w	8000948 <__udivmoddi4+0x290>
 8000740:	3802      	subs	r0, #2
 8000742:	442c      	add	r4, r5
 8000744:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000748:	eba4 040c 	sub.w	r4, r4, ip
 800074c:	2700      	movs	r7, #0
 800074e:	b11e      	cbz	r6, 8000758 <__udivmoddi4+0xa0>
 8000750:	40d4      	lsrs	r4, r2
 8000752:	2300      	movs	r3, #0
 8000754:	e9c6 4300 	strd	r4, r3, [r6]
 8000758:	4639      	mov	r1, r7
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	428b      	cmp	r3, r1
 8000760:	d909      	bls.n	8000776 <__udivmoddi4+0xbe>
 8000762:	2e00      	cmp	r6, #0
 8000764:	f000 80eb 	beq.w	800093e <__udivmoddi4+0x286>
 8000768:	2700      	movs	r7, #0
 800076a:	e9c6 0100 	strd	r0, r1, [r6]
 800076e:	4638      	mov	r0, r7
 8000770:	4639      	mov	r1, r7
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	fab3 f783 	clz	r7, r3
 800077a:	2f00      	cmp	r7, #0
 800077c:	d147      	bne.n	800080e <__udivmoddi4+0x156>
 800077e:	428b      	cmp	r3, r1
 8000780:	d302      	bcc.n	8000788 <__udivmoddi4+0xd0>
 8000782:	4282      	cmp	r2, r0
 8000784:	f200 80fa 	bhi.w	800097c <__udivmoddi4+0x2c4>
 8000788:	1a84      	subs	r4, r0, r2
 800078a:	eb61 0303 	sbc.w	r3, r1, r3
 800078e:	2001      	movs	r0, #1
 8000790:	4698      	mov	r8, r3
 8000792:	2e00      	cmp	r6, #0
 8000794:	d0e0      	beq.n	8000758 <__udivmoddi4+0xa0>
 8000796:	e9c6 4800 	strd	r4, r8, [r6]
 800079a:	e7dd      	b.n	8000758 <__udivmoddi4+0xa0>
 800079c:	b902      	cbnz	r2, 80007a0 <__udivmoddi4+0xe8>
 800079e:	deff      	udf	#255	; 0xff
 80007a0:	fab2 f282 	clz	r2, r2
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	f040 808f 	bne.w	80008c8 <__udivmoddi4+0x210>
 80007aa:	1b49      	subs	r1, r1, r5
 80007ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007b0:	fa1f f885 	uxth.w	r8, r5
 80007b4:	2701      	movs	r7, #1
 80007b6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ba:	0c23      	lsrs	r3, r4, #16
 80007bc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c4:	fb08 f10c 	mul.w	r1, r8, ip
 80007c8:	4299      	cmp	r1, r3
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0x124>
 80007cc:	18eb      	adds	r3, r5, r3
 80007ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0x122>
 80007d4:	4299      	cmp	r1, r3
 80007d6:	f200 80cd 	bhi.w	8000974 <__udivmoddi4+0x2bc>
 80007da:	4684      	mov	ip, r0
 80007dc:	1a59      	subs	r1, r3, r1
 80007de:	b2a3      	uxth	r3, r4
 80007e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007e4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ec:	fb08 f800 	mul.w	r8, r8, r0
 80007f0:	45a0      	cmp	r8, r4
 80007f2:	d907      	bls.n	8000804 <__udivmoddi4+0x14c>
 80007f4:	192c      	adds	r4, r5, r4
 80007f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x14a>
 80007fc:	45a0      	cmp	r8, r4
 80007fe:	f200 80b6 	bhi.w	800096e <__udivmoddi4+0x2b6>
 8000802:	4618      	mov	r0, r3
 8000804:	eba4 0408 	sub.w	r4, r4, r8
 8000808:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800080c:	e79f      	b.n	800074e <__udivmoddi4+0x96>
 800080e:	f1c7 0c20 	rsb	ip, r7, #32
 8000812:	40bb      	lsls	r3, r7
 8000814:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000818:	ea4e 0e03 	orr.w	lr, lr, r3
 800081c:	fa01 f407 	lsl.w	r4, r1, r7
 8000820:	fa20 f50c 	lsr.w	r5, r0, ip
 8000824:	fa21 f30c 	lsr.w	r3, r1, ip
 8000828:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800082c:	4325      	orrs	r5, r4
 800082e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000832:	0c2c      	lsrs	r4, r5, #16
 8000834:	fb08 3319 	mls	r3, r8, r9, r3
 8000838:	fa1f fa8e 	uxth.w	sl, lr
 800083c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000840:	fb09 f40a 	mul.w	r4, r9, sl
 8000844:	429c      	cmp	r4, r3
 8000846:	fa02 f207 	lsl.w	r2, r2, r7
 800084a:	fa00 f107 	lsl.w	r1, r0, r7
 800084e:	d90b      	bls.n	8000868 <__udivmoddi4+0x1b0>
 8000850:	eb1e 0303 	adds.w	r3, lr, r3
 8000854:	f109 30ff 	add.w	r0, r9, #4294967295
 8000858:	f080 8087 	bcs.w	800096a <__udivmoddi4+0x2b2>
 800085c:	429c      	cmp	r4, r3
 800085e:	f240 8084 	bls.w	800096a <__udivmoddi4+0x2b2>
 8000862:	f1a9 0902 	sub.w	r9, r9, #2
 8000866:	4473      	add	r3, lr
 8000868:	1b1b      	subs	r3, r3, r4
 800086a:	b2ad      	uxth	r5, r5
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000878:	fb00 fa0a 	mul.w	sl, r0, sl
 800087c:	45a2      	cmp	sl, r4
 800087e:	d908      	bls.n	8000892 <__udivmoddi4+0x1da>
 8000880:	eb1e 0404 	adds.w	r4, lr, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	d26b      	bcs.n	8000962 <__udivmoddi4+0x2aa>
 800088a:	45a2      	cmp	sl, r4
 800088c:	d969      	bls.n	8000962 <__udivmoddi4+0x2aa>
 800088e:	3802      	subs	r0, #2
 8000890:	4474      	add	r4, lr
 8000892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000896:	fba0 8902 	umull	r8, r9, r0, r2
 800089a:	eba4 040a 	sub.w	r4, r4, sl
 800089e:	454c      	cmp	r4, r9
 80008a0:	46c2      	mov	sl, r8
 80008a2:	464b      	mov	r3, r9
 80008a4:	d354      	bcc.n	8000950 <__udivmoddi4+0x298>
 80008a6:	d051      	beq.n	800094c <__udivmoddi4+0x294>
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d069      	beq.n	8000980 <__udivmoddi4+0x2c8>
 80008ac:	ebb1 050a 	subs.w	r5, r1, sl
 80008b0:	eb64 0403 	sbc.w	r4, r4, r3
 80008b4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008b8:	40fd      	lsrs	r5, r7
 80008ba:	40fc      	lsrs	r4, r7
 80008bc:	ea4c 0505 	orr.w	r5, ip, r5
 80008c0:	e9c6 5400 	strd	r5, r4, [r6]
 80008c4:	2700      	movs	r7, #0
 80008c6:	e747      	b.n	8000758 <__udivmoddi4+0xa0>
 80008c8:	f1c2 0320 	rsb	r3, r2, #32
 80008cc:	fa20 f703 	lsr.w	r7, r0, r3
 80008d0:	4095      	lsls	r5, r2
 80008d2:	fa01 f002 	lsl.w	r0, r1, r2
 80008d6:	fa21 f303 	lsr.w	r3, r1, r3
 80008da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008de:	4338      	orrs	r0, r7
 80008e0:	0c01      	lsrs	r1, r0, #16
 80008e2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008e6:	fa1f f885 	uxth.w	r8, r5
 80008ea:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f2:	fb07 f308 	mul.w	r3, r7, r8
 80008f6:	428b      	cmp	r3, r1
 80008f8:	fa04 f402 	lsl.w	r4, r4, r2
 80008fc:	d907      	bls.n	800090e <__udivmoddi4+0x256>
 80008fe:	1869      	adds	r1, r5, r1
 8000900:	f107 3cff 	add.w	ip, r7, #4294967295
 8000904:	d22f      	bcs.n	8000966 <__udivmoddi4+0x2ae>
 8000906:	428b      	cmp	r3, r1
 8000908:	d92d      	bls.n	8000966 <__udivmoddi4+0x2ae>
 800090a:	3f02      	subs	r7, #2
 800090c:	4429      	add	r1, r5
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	b281      	uxth	r1, r0
 8000912:	fbb3 f0fe 	udiv	r0, r3, lr
 8000916:	fb0e 3310 	mls	r3, lr, r0, r3
 800091a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091e:	fb00 f308 	mul.w	r3, r0, r8
 8000922:	428b      	cmp	r3, r1
 8000924:	d907      	bls.n	8000936 <__udivmoddi4+0x27e>
 8000926:	1869      	adds	r1, r5, r1
 8000928:	f100 3cff 	add.w	ip, r0, #4294967295
 800092c:	d217      	bcs.n	800095e <__udivmoddi4+0x2a6>
 800092e:	428b      	cmp	r3, r1
 8000930:	d915      	bls.n	800095e <__udivmoddi4+0x2a6>
 8000932:	3802      	subs	r0, #2
 8000934:	4429      	add	r1, r5
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800093c:	e73b      	b.n	80007b6 <__udivmoddi4+0xfe>
 800093e:	4637      	mov	r7, r6
 8000940:	4630      	mov	r0, r6
 8000942:	e709      	b.n	8000758 <__udivmoddi4+0xa0>
 8000944:	4607      	mov	r7, r0
 8000946:	e6e7      	b.n	8000718 <__udivmoddi4+0x60>
 8000948:	4618      	mov	r0, r3
 800094a:	e6fb      	b.n	8000744 <__udivmoddi4+0x8c>
 800094c:	4541      	cmp	r1, r8
 800094e:	d2ab      	bcs.n	80008a8 <__udivmoddi4+0x1f0>
 8000950:	ebb8 0a02 	subs.w	sl, r8, r2
 8000954:	eb69 020e 	sbc.w	r2, r9, lr
 8000958:	3801      	subs	r0, #1
 800095a:	4613      	mov	r3, r2
 800095c:	e7a4      	b.n	80008a8 <__udivmoddi4+0x1f0>
 800095e:	4660      	mov	r0, ip
 8000960:	e7e9      	b.n	8000936 <__udivmoddi4+0x27e>
 8000962:	4618      	mov	r0, r3
 8000964:	e795      	b.n	8000892 <__udivmoddi4+0x1da>
 8000966:	4667      	mov	r7, ip
 8000968:	e7d1      	b.n	800090e <__udivmoddi4+0x256>
 800096a:	4681      	mov	r9, r0
 800096c:	e77c      	b.n	8000868 <__udivmoddi4+0x1b0>
 800096e:	3802      	subs	r0, #2
 8000970:	442c      	add	r4, r5
 8000972:	e747      	b.n	8000804 <__udivmoddi4+0x14c>
 8000974:	f1ac 0c02 	sub.w	ip, ip, #2
 8000978:	442b      	add	r3, r5
 800097a:	e72f      	b.n	80007dc <__udivmoddi4+0x124>
 800097c:	4638      	mov	r0, r7
 800097e:	e708      	b.n	8000792 <__udivmoddi4+0xda>
 8000980:	4637      	mov	r7, r6
 8000982:	e6e9      	b.n	8000758 <__udivmoddi4+0xa0>

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <PIDController_Init>:
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	61f8      	str	r0, [r7, #28]
 8000990:	ed87 0a06 	vstr	s0, [r7, #24]
 8000994:	edc7 0a05 	vstr	s1, [r7, #20]
 8000998:	ed87 1a04 	vstr	s2, [r7, #16]
 800099c:	edc7 1a03 	vstr	s3, [r7, #12]
 80009a0:	ed87 2a02 	vstr	s4, [r7, #8]
 80009a4:	edc7 2a01 	vstr	s5, [r7, #4]
 80009a8:	ed87 3a00 	vstr	s6, [r7]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	bf00      	nop
 80009ea:	3724      	adds	r7, #36	; 0x24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4aba      	ldr	r2, [pc, #744]	; (8000d74 <SVPWM_Update+0x2f8>)
 8000a8c:	601a      	str	r2, [r3, #0]
	svm->Freq = 0.01; /*vhz->Freq;*/
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4ab9      	ldr	r2, [pc, #740]	; (8000d78 <SVPWM_Update+0x2fc>)
 8000a92:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a9a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8000d7c <SVPWM_Update+0x300>
 8000a9e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ad6:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8000d80 <SVPWM_Update+0x304>
 8000ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	db09      	blt.n	8000af8 <SVPWM_Update+0x7c>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000aea:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8000d80 <SVPWM_Update+0x304>
 8000aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b06:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8000d80 <SVPWM_Update+0x304>
 8000b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b12:	f006 fdfd 	bl	8007710 <sinf>
 8000b16:	eeb0 7a40 	vmov.f32	s14, s0
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b3e:	f006 fde7 	bl	8007710 <sinf>
 8000b42:	eeb0 7a40 	vmov.f32	s14, s0
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000b6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b7a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	d518      	bpl.n	8000bd4 <SVPWM_Update+0x158>
      	if (svm->SectorPointer == 5){
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ba8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000bac:	eef4 7a47 	vcmp.f32	s15, s14
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d104      	bne.n	8000bc0 <SVPWM_Update+0x144>
         	svm->SectorPointer = 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	e009      	b.n	8000bd4 <SVPWM_Update+0x158>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d11f      	bne.n	8000c24 <SVPWM_Update+0x1a8>
		svm->U = svm->ta + svm->tb + svm->to;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	621a      	str	r2, [r3, #32]
 8000c22:	e0d8      	b.n	8000dd6 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c2e:	eef4 7a47 	vcmp.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	d11f      	bne.n	8000c78 <SVPWM_Update+0x1fc>
    	svm->U= svm->ta + svm->to;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	621a      	str	r2, [r3, #32]
 8000c76:	e0ae      	b.n	8000dd6 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c7e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000c82:	eef4 7a47 	vcmp.f32	s15, s14
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8a:	d11f      	bne.n	8000ccc <SVPWM_Update+0x250>
    	svm->U = svm->to;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	edc3 7a08 	vstr	s15, [r3, #32]
 8000cca:	e084      	b.n	8000dd6 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000cd6:	eef4 7a47 	vcmp.f32	s15, s14
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	d11f      	bne.n	8000d20 <SVPWM_Update+0x2a4>
    	svm->U = svm->to;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	edc3 7a08 	vstr	s15, [r3, #32]
 8000d1e:	e05a      	b.n	8000dd6 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d26:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d2a:	eef4 7a47 	vcmp.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	d127      	bne.n	8000d84 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	edc3 7a08 	vstr	s15, [r3, #32]
 8000d72:	e030      	b.n	8000dd6 <SVPWM_Update+0x35a>
 8000d74:	3f666666 	.word	0x3f666666
 8000d78:	3c23d70a 	.word	0x3c23d70a
 8000d7c:	40c90fdb 	.word	0x40c90fdb
 8000d80:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d8a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000d8e:	eef4 7a47 	vcmp.f32	s15, s14
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	d11e      	bne.n	8000dd6 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 6a06 	vldr	s13, [r3, #24]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8000de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	3301      	adds	r3, #1
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	edd3 6a07 	vldr	s13, [r3, #28]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e2c:	ee17 2a90 	vmov	r2, s15
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	edd3 6a08 	vldr	s13, [r3, #32]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SVPWM_Update+0x3ec>)
 8000e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e5a:	ee17 2a90 	vmov	r2, s15
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012c00 	.word	0x40012c00

08000e6c <VHZ_Init>:
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6178      	str	r0, [r7, #20]
 8000e74:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e78:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e80:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	edc3 7a04 	vstr	s15, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	bf00      	nop
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <VHZ_Update>:
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d804      	bhi.n	8000f00 <VHZ_Update+0x28>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	e03b      	b.n	8000f78 <VHZ_Update+0xa0>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	dd20      	ble.n	8000f58 <VHZ_Update+0x80>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2a:	d815      	bhi.n	8000f58 <VHZ_Update+0x80>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	ed93 6a06 	vldr	s12, [r3, #24]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a05 	vstr	s15, [r3, #20]
 8000f56:	e00f      	b.n	8000f78 <VHZ_Update+0xa0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	dc00      	bgt.n	8000f70 <VHZ_Update+0x98>
 8000f6e:	e003      	b.n	8000f78 <VHZ_Update+0xa0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	0000      	movs	r0, r0
	...

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b099      	sub	sp, #100	; 0x64
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8000f8e:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8001270 <main+0x2e8>
 8000f92:	48b8      	ldr	r0, [pc, #736]	; (8001274 <main+0x2ec>)
 8000f94:	f7ff fd2e 	bl	80009f4 <SVPWM_Init>
  VHZ_Init(&vhz1, 1, 0.1, 10, 100);
 8000f98:	eddf 1ab7 	vldr	s3, [pc, #732]	; 8001278 <main+0x2f0>
 8000f9c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000fa0:	eddf 0ab6 	vldr	s1, [pc, #728]	; 800127c <main+0x2f4>
 8000fa4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fa8:	48b5      	ldr	r0, [pc, #724]	; (8001280 <main+0x2f8>)
 8000faa:	f7ff ff5f 	bl	8000e6c <VHZ_Init>
  PIDController_Init(&slip, 5, 0, -500, 500, 0, 0, 10000);
 8000fae:	ed9f 3ab0 	vldr	s6, [pc, #704]	; 8001270 <main+0x2e8>
 8000fb2:	eddf 2ab4 	vldr	s5, [pc, #720]	; 8001284 <main+0x2fc>
 8000fb6:	ed9f 2ab3 	vldr	s4, [pc, #716]	; 8001284 <main+0x2fc>
 8000fba:	eddf 1ab3 	vldr	s3, [pc, #716]	; 8001288 <main+0x300>
 8000fbe:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800128c <main+0x304>
 8000fc2:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8001284 <main+0x2fc>
 8000fc6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000fca:	48b1      	ldr	r0, [pc, #708]	; (8001290 <main+0x308>)
 8000fcc:	f7ff fcdc 	bl	8000988 <PIDController_Init>
  char uart_buf[50];
  int uart_buf_len;
  char spi_buf[20];
  uint8_t addr;
  uint8_t wip;
  uint8_t state = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 fea4 	bl	8001d22 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f977 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 fbb9 	bl	8001754 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fe2:	f000 fa5b 	bl	800149c <MX_TIM1_Init>
  MX_TIM15_Init();
 8000fe6:	f000 fb33 	bl	8001650 <MX_TIM15_Init>
  MX_SPI1_Init();
 8000fea:	f000 f9df 	bl	80013ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fee:	f000 fb81 	bl	80016f4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000ff2:	f000 fa19 	bl	8001428 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	48a6      	ldr	r0, [pc, #664]	; (8001294 <main+0x30c>)
 8000ffc:	f001 f9e4 	bl	80023c8 <HAL_GPIO_WritePin>

  // Say something
  uart_buf_len = sprintf(uart_buf, "hello?");
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4aa4      	ldr	r2, [pc, #656]	; (8001298 <main+0x310>)
 8001006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100a:	6018      	str	r0, [r3, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	8019      	strh	r1, [r3, #0]
 8001010:	3302      	adds	r3, #2
 8001012:	0c0a      	lsrs	r2, r1, #16
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	2306      	movs	r3, #6
 8001018:	653b      	str	r3, [r7, #80]	; 0x50
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800101a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800101c:	b29a      	uxth	r2, r3
 800101e:	f107 011c 	add.w	r1, r7, #28
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	489d      	ldr	r0, [pc, #628]	; (800129c <main+0x314>)
 8001026:	f005 fb36 	bl	8006696 <HAL_UART_Transmit>

  // Set starting address in EEPROM (arbitrarily set to 5). Note that for the
  // 25AA040A, we can't do sequential writes outside of page (16 bytes)
  addr = 0x05;
 800102a:	2305      	movs	r3, #5
 800102c:	71fb      	strb	r3, [r7, #7]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800102e:	2100      	movs	r1, #0
 8001030:	489b      	ldr	r0, [pc, #620]	; (80012a0 <main+0x318>)
 8001032:	f004 f8c7 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	4899      	ldr	r0, [pc, #612]	; (80012a0 <main+0x318>)
 800103a:	f005 f91f 	bl	800627c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800103e:	2104      	movs	r1, #4
 8001040:	4897      	ldr	r0, [pc, #604]	; (80012a0 <main+0x318>)
 8001042:	f004 f8bf 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001046:	2104      	movs	r1, #4
 8001048:	4895      	ldr	r0, [pc, #596]	; (80012a0 <main+0x318>)
 800104a:	f005 f917 	bl	800627c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800104e:	2108      	movs	r1, #8
 8001050:	4893      	ldr	r0, [pc, #588]	; (80012a0 <main+0x318>)
 8001052:	f004 f8b7 	bl	80051c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001056:	2108      	movs	r1, #8
 8001058:	4891      	ldr	r0, [pc, #580]	; (80012a0 <main+0x318>)
 800105a:	f005 f90f 	bl	800627c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 800105e:	4891      	ldr	r0, [pc, #580]	; (80012a4 <main+0x31c>)
 8001060:	f003 fffa 	bl	8005058 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Finite state machine to allow for non-blocking SPI transmit/receive
	     switch(state)
 8001064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001068:	2b05      	cmp	r3, #5
 800106a:	f200 80d0 	bhi.w	800120e <main+0x286>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <main+0xec>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	0800108d 	.word	0x0800108d
 8001078:	080010cd 	.word	0x080010cd
 800107c:	080010e7 	.word	0x080010e7
 8001080:	0800112f 	.word	0x0800112f
 8001084:	08001185 	.word	0x08001185
 8001088:	0800119d 	.word	0x0800119d
//	         {
//	           spi_buf[2 * i] = i;
//	         }

	         // Enable write enable latch (allow write operations)
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	4880      	ldr	r0, [pc, #512]	; (8001294 <main+0x30c>)
 8001092:	f001 f999 	bl	80023c8 <HAL_GPIO_WritePin>
	         HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	4983      	ldr	r1, [pc, #524]	; (80012a8 <main+0x320>)
 800109c:	4883      	ldr	r0, [pc, #524]	; (80012ac <main+0x324>)
 800109e:	f002 fbb8 	bl	8003812 <HAL_SPI_Transmit>
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	487b      	ldr	r0, [pc, #492]	; (8001294 <main+0x30c>)
 80010a8:	f001 f98e 	bl	80023c8 <HAL_GPIO_WritePin>

	         // Perform non-blocking write to SPI
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4878      	ldr	r0, [pc, #480]	; (8001294 <main+0x30c>)
 80010b2:	f001 f989 	bl	80023c8 <HAL_GPIO_WritePin>
	         HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_buf, 12);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	220c      	movs	r2, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	487b      	ldr	r0, [pc, #492]	; (80012ac <main+0x324>)
 80010c0:	f003 f858 	bl	8004174 <HAL_SPI_Transmit_IT>

	         // Go to next state: waiting for interrupt flag
	         state  = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	         break;
 80010ca:	e0a7      	b.n	800121c <main+0x294>

	       // Wait for transmit flag
	       case 1:

	         if (spi_xmit_flag)
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <main+0x328>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 809d 	beq.w	8001212 <main+0x28a>
	         {
	           // Clear flag and go to next state
	           spi_xmit_flag = 0;
 80010d8:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <main+0x328>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	           state  = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	         }

	         break;
 80010e4:	e095      	b.n	8001212 <main+0x28a>

	       // Wait for WIP bit to be cleared
	       case 2:

	         // Read status register
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	486a      	ldr	r0, [pc, #424]	; (8001294 <main+0x30c>)
 80010ec:	f001 f96c 	bl	80023c8 <HAL_GPIO_WritePin>
	         HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2201      	movs	r2, #1
 80010f4:	496f      	ldr	r1, [pc, #444]	; (80012b4 <main+0x32c>)
 80010f6:	486d      	ldr	r0, [pc, #436]	; (80012ac <main+0x324>)
 80010f8:	f002 fb8b 	bl	8003812 <HAL_SPI_Transmit>
	         HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80010fc:	f107 0108 	add.w	r1, r7, #8
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	2201      	movs	r2, #1
 8001104:	4869      	ldr	r0, [pc, #420]	; (80012ac <main+0x324>)
 8001106:	f002 fcf2 	bl	8003aee <HAL_SPI_Receive>
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4861      	ldr	r0, [pc, #388]	; (8001294 <main+0x30c>)
 8001110:	f001 f95a 	bl	80023c8 <HAL_GPIO_WritePin>

	         // Mask out WIP bit
	         wip = spi_buf[0] & 0b00000001;
 8001114:	7a3b      	ldrb	r3, [r7, #8]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	         // If WIP is cleared, go to next state
	         if (wip == 0)
 800111e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001122:	2b00      	cmp	r3, #0
 8001124:	d177      	bne.n	8001216 <main+0x28e>
	         {
	           state  = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	         }

	         break;
 800112c:	e073      	b.n	8001216 <main+0x28e>

	       // Set up for interrupt-based SPI receive
	       case 3:

	         // Clear SPI buffer
	         for (int i = 0; i < 12; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
 8001132:	e008      	b.n	8001146 <main+0x1be>
	         {
	           spi_buf[i] = 0;
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800113a:	4413      	add	r3, r2
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	         for (int i = 0; i < 12; i++)
 8001140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001142:	3301      	adds	r3, #1
 8001144:	65bb      	str	r3, [r7, #88]	; 0x58
 8001146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001148:	2b0b      	cmp	r3, #11
 800114a:	ddf3      	ble.n	8001134 <main+0x1ac>
	         }

	         // Read the 10 bytes back
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	4850      	ldr	r0, [pc, #320]	; (8001294 <main+0x30c>)
 8001152:	f001 f939 	bl	80023c8 <HAL_GPIO_WritePin>
	         HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_READ, 1, 100);
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	2201      	movs	r2, #1
 800115a:	4957      	ldr	r1, [pc, #348]	; (80012b8 <main+0x330>)
 800115c:	4853      	ldr	r0, [pc, #332]	; (80012ac <main+0x324>)
 800115e:	f002 fb58 	bl	8003812 <HAL_SPI_Transmit>
	         HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
 8001162:	1df9      	adds	r1, r7, #7
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2201      	movs	r2, #1
 8001168:	4850      	ldr	r0, [pc, #320]	; (80012ac <main+0x324>)
 800116a:	f002 fb52 	bl	8003812 <HAL_SPI_Transmit>
	         HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_buf, 10);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	220a      	movs	r2, #10
 8001174:	4619      	mov	r1, r3
 8001176:	484d      	ldr	r0, [pc, #308]	; (80012ac <main+0x324>)
 8001178:	f003 f88a 	bl	8004290 <HAL_SPI_Receive_IT>

	         // Go to next state: waiting for receive to finish
	         state  = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	         break;
 8001182:	e04b      	b.n	800121c <main+0x294>

	       // Wait for receive flag
	       case 4:

	         if (spi_recv_flag)
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <main+0x334>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d045      	beq.n	800121a <main+0x292>
	         {
	           // Clear flag and go to next state
	           spi_recv_flag = 0;
 800118e:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <main+0x334>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	           state  = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	         }

	         break;
 800119a:	e03e      	b.n	800121a <main+0x292>

	       // Print out received bytes and wait before retransmitting
	       case 5:

	         // Print out bytes
	         for (int i = 0; i < 10; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
 80011a0:	e017      	b.n	80011d2 <main+0x24a>
	         {
	           uart_buf_len = sprintf(uart_buf,
	                                   "0xx ",(unsigned int)spi_buf[i]);
 80011a2:	f107 0208 	add.w	r2, r7, #8
 80011a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
	           uart_buf_len = sprintf(uart_buf,
 80011ac:	461a      	mov	r2, r3
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4943      	ldr	r1, [pc, #268]	; (80012c0 <main+0x338>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fea5 	bl	8006f04 <siprintf>
 80011ba:	6538      	str	r0, [r7, #80]	; 0x50
	           HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f107 011c 	add.w	r1, r7, #28
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	4835      	ldr	r0, [pc, #212]	; (800129c <main+0x314>)
 80011c8:	f005 fa65 	bl	8006696 <HAL_UART_Transmit>
	         for (int i = 0; i < 10; i++)
 80011cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ce:	3301      	adds	r3, #1
 80011d0:	657b      	str	r3, [r7, #84]	; 0x54
 80011d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	dde4      	ble.n	80011a2 <main+0x21a>
	         }

	         // Print newline
	         uart_buf_len = sprintf(uart_buf, "\r\n");
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <main+0x33c>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4611      	mov	r1, r2
 80011e2:	8019      	strh	r1, [r3, #0]
 80011e4:	3302      	adds	r3, #2
 80011e6:	0c12      	lsrs	r2, r2, #16
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	2302      	movs	r3, #2
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
	         HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f107 011c 	add.w	r1, r7, #28
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	4828      	ldr	r0, [pc, #160]	; (800129c <main+0x314>)
 80011fa:	f005 fa4c 	bl	8006696 <HAL_UART_Transmit>

	         // Wait a few seconds before retransmitting (yes, I know that this is
	         // blocking--you can make it non-blocking if you wish. I'm lazy.)
	         HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001202:	f000 fe03 	bl	8001e0c <HAL_Delay>
	         state = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	         break;
 800120c:	e006      	b.n	800121c <main+0x294>

	       default:
	         break;
 800120e:	bf00      	nop
 8001210:	e004      	b.n	800121c <main+0x294>
	         break;
 8001212:	bf00      	nop
 8001214:	e002      	b.n	800121c <main+0x294>
	         break;
 8001216:	bf00      	nop
 8001218:	e000      	b.n	800121c <main+0x294>
	         break;
 800121a:	bf00      	nop
		vhz1.Freq = 0.01;
	}
	else{
		vhz1.Freq += 0.001;
	}*/
	if(a >= 10){
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <main+0x340>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	db04      	blt.n	800123a <main+0x2b2>
		a = 0;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <main+0x340>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e012      	b.n	8001260 <main+0x2d8>
	}
	else{
		a += 0.001;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0x340>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f97a 	bl	8000538 <__aeabi_f2d>
 8001244:	a308      	add	r3, pc, #32	; (adr r3, 8001268 <main+0x2e0>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f817 	bl	800027c <__adddf3>
 800124e:	4603      	mov	r3, r0
 8001250:	460c      	mov	r4, r1
 8001252:	4618      	mov	r0, r3
 8001254:	4621      	mov	r1, r4
 8001256:	f7ff f9c7 	bl	80005e8 <__aeabi_d2f>
 800125a:	4602      	mov	r2, r0
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <main+0x340>)
 800125e:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fdd3 	bl	8001e0c <HAL_Delay>
	     switch(state)
 8001266:	e6fd      	b.n	8001064 <main+0xdc>
 8001268:	d2f1a9fc 	.word	0xd2f1a9fc
 800126c:	3f50624d 	.word	0x3f50624d
 8001270:	461c4000 	.word	0x461c4000
 8001274:	200002c8 	.word	0x200002c8
 8001278:	42c80000 	.word	0x42c80000
 800127c:	3dcccccd 	.word	0x3dcccccd
 8001280:	2000017c 	.word	0x2000017c
 8001284:	00000000 	.word	0x00000000
 8001288:	43fa0000 	.word	0x43fa0000
 800128c:	c3fa0000 	.word	0xc3fa0000
 8001290:	200000f0 	.word	0x200000f0
 8001294:	48000400 	.word	0x48000400
 8001298:	080081c0 	.word	0x080081c0
 800129c:	20000248 	.word	0x20000248
 80012a0:	20000198 	.word	0x20000198
 80012a4:	200000a4 	.word	0x200000a4
 80012a8:	080081d4 	.word	0x080081d4
 80012ac:	200001e4 	.word	0x200001e4
 80012b0:	2000008c 	.word	0x2000008c
 80012b4:	080081d5 	.word	0x080081d5
 80012b8:	080081d3 	.word	0x080081d3
 80012bc:	2000008d 	.word	0x2000008d
 80012c0:	080081c8 	.word	0x080081c8
 80012c4:	080081d0 	.word	0x080081d0
 80012c8:	20000300 	.word	0x20000300

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ac      	sub	sp, #176	; 0xb0
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012d6:	2244      	movs	r2, #68	; 0x44
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fe0a 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2254      	movs	r2, #84	; 0x54
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 fdfc 	bl	8006ef4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001304:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800131c:	230a      	movs	r3, #10
 800131e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001322:	2307      	movs	r3, #7
 8001324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001338:	4618      	mov	r0, r3
 800133a:	f001 f8c1 	bl	80024c0 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001344:	f000 fa8e 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
 800134e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001354:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001358:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001360:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001364:	2104      	movs	r1, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fcca 	bl	8002d00 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001372:	f000 fa77 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001376:	2302      	movs	r3, #2
 8001378:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fec1 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800138c:	f000 fa6a 	bl	8001864 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001390:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001394:	f001 f83e 	bl	8002414 <HAL_PWREx_ControlVoltageScaling>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800139e:	f000 fa61 	bl	8001864 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	37b0      	adds	r7, #176	; 0xb0
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_SPI1_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <MX_SPI1_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SPI1_Init+0x74>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_SPI1_Init+0x74>)
 80013c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SPI1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_SPI1_Init+0x74>)
 80013da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SPI1_Init+0x74>)
 80013e2:	2228      	movs	r2, #40	; 0x28
 80013e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SPI1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SPI1_Init+0x74>)
 80013fa:	2207      	movs	r2, #7
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_SPI1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SPI1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_SPI1_Init+0x74>)
 800140c:	f002 f95e 	bl	80036cc <HAL_SPI_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 fa25 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001e4 	.word	0x200001e4
 8001424:	40013000 	.word	0x40013000

08001428 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_SPI3_Init+0x6c>)
 800142e:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <MX_SPI3_Init+0x70>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI3_Init+0x6c>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001440:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001444:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI3_Init+0x6c>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001458:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI3_Init+0x6c>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI3_Init+0x6c>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI3_Init+0x6c>)
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_SPI3_Init+0x6c>)
 8001480:	f002 f924 	bl	80036cc <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 800148a:	f000 f9eb 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000118 	.word	0x20000118
 8001498:	40003c00 	.word	0x40003c00

0800149c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09e      	sub	sp, #120	; 0x78
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	222c      	movs	r2, #44	; 0x2c
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fd04 	bl	8006ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ec:	4b56      	ldr	r3, [pc, #344]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80014ee:	4a57      	ldr	r2, [pc, #348]	; (800164c <MX_TIM1_Init+0x1b0>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80014f2:	4b55      	ldr	r3, [pc, #340]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80014f4:	224f      	movs	r2, #79	; 0x4f
 80014f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80014fa:	2260      	movs	r2, #96	; 0x60
 80014fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001500:	2263      	movs	r2, #99	; 0x63
 8001502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <MX_TIM1_Init+0x1ac>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001516:	484c      	ldr	r0, [pc, #304]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001518:	f003 fd47 	bl	8004faa <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001522:	f000 f99f 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001530:	4619      	mov	r1, r3
 8001532:	4845      	ldr	r0, [pc, #276]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001534:	f004 f954 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800153e:	f000 f991 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001542:	4841      	ldr	r0, [pc, #260]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001544:	f003 fddc 	bl	8005100 <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800154e:	f000 f989 	bl	8001864 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001556:	2300      	movs	r3, #0
 8001558:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800155a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800155e:	4619      	mov	r1, r3
 8001560:	4839      	ldr	r0, [pc, #228]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001562:	f004 f9f6 	bl	8005952 <HAL_TIM_SlaveConfigSynchro>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800156c:	f000 f97a 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800157c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001580:	4619      	mov	r1, r3
 8001582:	4831      	ldr	r0, [pc, #196]	; (8001648 <MX_TIM1_Init+0x1ac>)
 8001584:	f004 ff18 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800158e:	f000 f969 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001592:	2360      	movs	r3, #96	; 0x60
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80015b8:	f004 f802 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80015c2:	f000 f94f 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	2204      	movs	r2, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80015d0:	f003 fff6 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015da:	f000 f943 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e2:	2208      	movs	r2, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	4818      	ldr	r0, [pc, #96]	; (8001648 <MX_TIM1_Init+0x1ac>)
 80015e8:	f003 ffea 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80015f2:	f000 f937 	bl	8001864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM1_Init+0x1ac>)
 800162c:	f004 ff2a 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8001636:	f000 f915 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM1_Init+0x1ac>)
 800163c:	f000 f9fe 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 8001640:	bf00      	nop
 8001642:	3778      	adds	r7, #120	; 0x78
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000198 	.word	0x20000198
 800164c:	40012c00 	.word	0x40012c00

08001650 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM15_Init+0x9c>)
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <MX_TIM15_Init+0xa0>)
 8001674:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_TIM15_Init+0x9c>)
 8001678:	224f      	movs	r2, #79	; 0x4f
 800167a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM15_Init+0x9c>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM15_Init+0x9c>)
 8001684:	2263      	movs	r2, #99	; 0x63
 8001686:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_TIM15_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_TIM15_Init+0x9c>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_TIM15_Init+0x9c>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800169a:	4814      	ldr	r0, [pc, #80]	; (80016ec <MX_TIM15_Init+0x9c>)
 800169c:	f003 fc85 	bl	8004faa <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80016a6:	f000 f8dd 	bl	8001864 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <MX_TIM15_Init+0x9c>)
 80016ba:	f004 f94a 	bl	8005952 <HAL_TIM_SlaveConfigSynchro>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80016c4:	f000 f8ce 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_TIM15_Init+0x9c>)
 80016d6:	f004 fe6f 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80016e0:	f000 f8c0 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000a4 	.word	0x200000a4
 80016f0:	40014000 	.word	0x40014000

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART2_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <MX_USART2_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001700:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART2_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x58>)
 8001738:	f004 ff5f 	bl	80065fa <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f88f 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000248 	.word	0x20000248
 8001750:	40004400 	.word	0x40004400

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_GPIO_Init+0x74>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <MX_GPIO_Init+0x74>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_GPIO_Init+0x74>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_GPIO_Init+0x74>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <MX_GPIO_Init+0x74>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_GPIO_Init+0x74>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <MX_GPIO_Init+0x78>)
 80017a0:	f000 fe12 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_GPIO_Init+0x78>)
 80017bc:	f000 fc9a 	bl	80020f4 <HAL_GPIO_Init>

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <HAL_TIM_PeriodElapsedCallback>:

}
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	OldSector = svpwm1.SectorPointer;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017da:	edd3 7a05 	vldr	s15, [r3, #20]
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 2a90 	vmov	r2, s15
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017e8:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 80017ea:	4808      	ldr	r0, [pc, #32]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017ec:	f7ff fb74 	bl	8000ed8 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017f2:	4906      	ldr	r1, [pc, #24]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017f6:	f7ff f941 	bl	8000a7c <SVPWM_Update>
	//Count_Up(&svpwm1, OldSector);

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002c8 	.word	0x200002c8
 8001808:	2000009c 	.word	0x2000009c
 800180c:	2000017c 	.word	0x2000017c
 8001810:	20000198 	.word	0x20000198

08001814 <HAL_SPI_TxCpltCallback>:
}
#endif

// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <HAL_SPI_TxCpltCallback+0x20>)
 8001822:	f000 fdd1 	bl	80023c8 <HAL_GPIO_WritePin>
  spi_xmit_flag = 1;
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_SPI_TxCpltCallback+0x24>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	48000400 	.word	0x48000400
 8001838:	2000008c 	.word	0x2000008c

0800183c <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef * hspi)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <HAL_SPI_RxCpltCallback+0x20>)
 800184a:	f000 fdbd 	bl	80023c8 <HAL_GPIO_WritePin>
  spi_recv_flag = 1;
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_SPI_RxCpltCallback+0x24>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	48000400 	.word	0x48000400
 8001860:	2000008d 	.word	0x2000008d

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <HAL_SPI_MspInit+0xec>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d132      	bne.n	8001944 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018de:	4b33      	ldr	r3, [pc, #204]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ea:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 800190e:	f241 0342 	movw	r3, #4162	; 0x1042
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001920:	2305      	movs	r3, #5
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f000 fbe1 	bl	80020f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2023      	movs	r0, #35	; 0x23
 8001938:	f000 fb65 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800193c:	2023      	movs	r0, #35	; 0x23
 800193e:	f000 fb7e 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001942:	e02c      	b.n	800199e <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_SPI_MspInit+0xf4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d127      	bne.n	800199e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 8001954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_SPI_MspInit+0xf0>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800197e:	2338      	movs	r3, #56	; 0x38
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800198e:	2306      	movs	r3, #6
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_SPI_MspInit+0xf8>)
 800199a:	f000 fbab 	bl	80020f4 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	3730      	adds	r7, #48	; 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013000 	.word	0x40013000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40003c00 	.word	0x40003c00
 80019b4:	48000400 	.word	0x48000400

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_TIM_Base_MspInit+0x78>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d114      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d4:	6613      	str	r3, [r2, #96]	; 0x60
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2018      	movs	r0, #24
 80019e8:	f000 fb0d 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019ec:	2018      	movs	r0, #24
 80019ee:	f000 fb26 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019f2:	e018      	b.n	8001a26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d113      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6613      	str	r3, [r2, #96]	; 0x60
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x7c>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2018      	movs	r0, #24
 8001a1c:	f000 faf3 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a20:	2018      	movs	r0, #24
 8001a22:	f000 fb0c 	bl	800203e <HAL_NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40014000 	.word	0x40014000

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <HAL_TIM_MspPostInit+0xa0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d139      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_TIM_MspPostInit+0xa4>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a8e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f000 fb21 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_TIM_MspPostInit+0xa8>)
 8001ace:	f000 fb11 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_UART_MspInit+0x7c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d128      	bne.n	8001b5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_UART_MspInit+0x80>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f000 facc 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400
 8001b68:	40021000 	.word	0x40021000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f904 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001bce:	f003 fbd7 	bl	8005380 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001bd2:	4803      	ldr	r0, [pc, #12]	; (8001be0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001bd4:	f003 fbd4 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000198 	.word	0x20000198
 8001be0:	200000a4 	.word	0x200000a4

08001be4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <SPI1_IRQHandler+0x10>)
 8001bea:	f002 fcb1 	bl	8004550 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001e4 	.word	0x200001e4

08001bf8 <_sbrk>:
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
 8001c28:	f005 f93a 	bl	8006ea0 <__errno>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	230c      	movs	r3, #12
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20010000 	.word	0x20010000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000090 	.word	0x20000090
 8001c60:	20000310 	.word	0x20000310

08001c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <SystemInit+0x64>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <SystemInit+0x64>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <SystemInit+0x68>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <SystemInit+0x68>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <SystemInit+0x68>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <SystemInit+0x68>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <SystemInit+0x68>)
 8001c90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <SystemInit+0x68>)
 8001c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <SystemInit+0x68>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <SystemInit+0x68>)
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <SystemInit+0x68>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SystemInit+0x64>)
 8001cb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cba:	609a      	str	r2, [r3, #8]
#endif
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <Reset_Handler>:
 8001cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d08 <LoopForever+0x2>
 8001cd4:	f7ff ffc6 	bl	8001c64 <SystemInit>
 8001cd8:	2100      	movs	r1, #0
 8001cda:	e003      	b.n	8001ce4 <LoopCopyDataInit>

08001cdc <CopyDataInit>:
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <LoopForever+0x6>)
 8001cde:	585b      	ldr	r3, [r3, r1]
 8001ce0:	5043      	str	r3, [r0, r1]
 8001ce2:	3104      	adds	r1, #4

08001ce4 <LoopCopyDataInit>:
 8001ce4:	480a      	ldr	r0, [pc, #40]	; (8001d10 <LoopForever+0xa>)
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <LoopForever+0xe>)
 8001ce8:	1842      	adds	r2, r0, r1
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3f6      	bcc.n	8001cdc <CopyDataInit>
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <LoopForever+0x12>)
 8001cf0:	e002      	b.n	8001cf8 <LoopFillZerobss>

08001cf2 <FillZerobss>:
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f842 3b04 	str.w	r3, [r2], #4

08001cf8 <LoopFillZerobss>:
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <LoopForever+0x16>)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3f9      	bcc.n	8001cf2 <FillZerobss>
 8001cfe:	f005 f8d5 	bl	8006eac <__libc_init_array>
 8001d02:	f7ff f941 	bl	8000f88 <main>

08001d06 <LoopForever>:
 8001d06:	e7fe      	b.n	8001d06 <LoopForever>
 8001d08:	20010000 	.word	0x20010000
 8001d0c:	08008634 	.word	0x08008634
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000070 	.word	0x20000070
 8001d18:	20000070 	.word	0x20000070
 8001d1c:	2000030c 	.word	0x2000030c

08001d20 <ADC1_IRQHandler>:
 8001d20:	e7fe      	b.n	8001d20 <ADC1_IRQHandler>

08001d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f95f 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f80e 	bl	8001d54 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e001      	b.n	8001d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d44:	f7ff fd96 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_InitTick+0x6c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d023      	beq.n	8001db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_InitTick+0x70>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_InitTick+0x6c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f96b 	bl	800205a <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d809      	bhi.n	8001da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f000 f935 	bl	8002006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_InitTick+0x74>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e007      	b.n	8001db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e004      	b.n	8001db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e001      	b.n	8001db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000304 	.word	0x20000304

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000304 	.word	0x20000304

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_Delay+0x40>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000008 	.word	0x20000008

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff29 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff3e 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff31 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d005      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e029      	b.n	80020ea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 020e 	bic.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f003 021c 	and.w	r2, r3, #28
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
    }
  }
  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e148      	b.n	8002396 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 813a 	beq.w	8002390 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00b      	beq.n	800213c <HAL_GPIO_Init+0x48>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	2b11      	cmp	r3, #17
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0xea>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d123      	bne.n	8002226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0203 	and.w	r2, r3, #3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8094 	beq.w	8002390 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002268:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x2c0>)
 800226a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226c:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_GPIO_Init+0x2c0>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6613      	str	r3, [r2, #96]	; 0x60
 8002274:	4b4f      	ldr	r3, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x2c0>)
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002280:	4a4d      	ldr	r2, [pc, #308]	; (80023b8 <HAL_GPIO_Init+0x2c4>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022aa:	d00d      	beq.n	80022c8 <HAL_GPIO_Init+0x1d4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_GPIO_Init+0x2c8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d007      	beq.n	80022c4 <HAL_GPIO_Init+0x1d0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <HAL_GPIO_Init+0x2cc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_GPIO_Init+0x1cc>
 80022bc:	2302      	movs	r3, #2
 80022be:	e004      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c0:	2307      	movs	r3, #7
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_GPIO_Init+0x1d6>
 80022c8:	2300      	movs	r3, #0
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022da:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_GPIO_Init+0x2c4>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800230c:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002336:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_GPIO_Init+0x2d0>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f aeaf 	bne.w	8002104 <HAL_GPIO_Init+0x10>
  }
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010000 	.word	0x40010000
 80023bc:	48000400 	.word	0x48000400
 80023c0:	48000800 	.word	0x48000800
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_PWREx_GetVoltageRange+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40007000 	.word	0x40007000

08002414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002422:	d130      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d038      	beq.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2232      	movs	r2, #50	; 0x32
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9b      	lsrs	r3, r3, #18
 8002454:	3301      	adds	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002458:	e002      	b.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d102      	bne.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f2      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d110      	bne.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e00f      	b.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d007      	beq.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40007000 	.word	0x40007000
 80024b8:	20000000 	.word	0x20000000
 80024bc:	431bde83 	.word	0x431bde83

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f000 bc11 	b.w	8002cf6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d4:	4ba0      	ldr	r3, [pc, #640]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024de:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80e4 	beq.w	80026be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_RCC_OscConfig+0x4c>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	f040 808b 	bne.w	800261a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 8087 	bne.w	800261a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x64>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e3e8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	4b8b      	ldr	r3, [pc, #556]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_RCC_OscConfig+0x7e>
 8002534:	4b88      	ldr	r3, [pc, #544]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253c:	e005      	b.n	800254a <HAL_RCC_OscConfig+0x8a>
 800253e:	4b86      	ldr	r3, [pc, #536]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254a:	4293      	cmp	r3, r2
 800254c:	d223      	bcs.n	8002596 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd78 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e3c9      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002562:	4b7d      	ldr	r3, [pc, #500]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7c      	ldr	r2, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b7a      	ldr	r3, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4977      	ldr	r1, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	4972      	ldr	r1, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e025      	b.n	80025e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002596:	4b70      	ldr	r3, [pc, #448]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6f      	ldr	r2, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	496a      	ldr	r1, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	4965      	ldr	r1, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fd38 	bl	8003048 <RCC_SetFlashLatencyFromMSIRange>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e389      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e2:	f000 fc6f 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 80025e6:	4601      	mov	r1, r0
 80025e8:	4b5b      	ldr	r3, [pc, #364]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x29c>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	fa21 f303 	lsr.w	r3, r1, r3
 80025fe:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x2a0>)
 8002600:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002602:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCC_OscConfig+0x2a4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fba4 	bl	8001d54 <HAL_InitTick>
 800260c:	4603      	mov	r3, r0
 800260e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d052      	beq.n	80026bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	e36d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d032      	beq.n	8002688 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002622:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800262e:	f7ff fbe1 	bl	8001df4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002636:	f7ff fbdd 	bl	8001df4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e356      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002654:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	493a      	ldr	r1, [pc, #232]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	4935      	ldr	r1, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e01a      	b.n	80026be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a32      	ldr	r2, [pc, #200]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002694:	f7ff fbae 	bl	8001df4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800269c:	f7ff fbaa 	bl	8001df4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e323      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1dc>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d073      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x21c>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d10e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d10b      	bne.n	80026f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d063      	beq.n	80027b0 <HAL_RCC_OscConfig+0x2f0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d15f      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e300      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0x24c>
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e01d      	b.n	8002748 <HAL_RCC_OscConfig+0x288>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x270>
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x288>
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x298>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7ff fb50 	bl	8001df4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002756:	e010      	b.n	800277a <HAL_RCC_OscConfig+0x2ba>
 8002758:	40021000 	.word	0x40021000
 800275c:	080081d8 	.word	0x080081d8
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fb44 	bl	8001df4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e2bd      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	4baf      	ldr	r3, [pc, #700]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x2a8>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff fb34 	bl	8001df4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff fb30 	bl	8001df4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e2a9      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	4ba5      	ldr	r3, [pc, #660]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x2d0>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d060      	beq.n	8002880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_OscConfig+0x310>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d119      	bne.n	80027fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d116      	bne.n	80027fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d0:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x328>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e286      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b93      	ldr	r3, [pc, #588]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	4990      	ldr	r1, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fc:	e040      	b.n	8002880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d023      	beq.n	800284e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002806:	4b8c      	ldr	r3, [pc, #560]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a8b      	ldr	r2, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7ff faef 	bl	8001df4 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281a:	f7ff faeb 	bl	8001df4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e264      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	497c      	ldr	r1, [pc, #496]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
 800284c:	e018      	b.n	8002880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284e:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a79      	ldr	r2, [pc, #484]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7ff facb 	bl	8001df4 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7ff fac7 	bl	8001df4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e240      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d03c      	beq.n	8002906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01c      	beq.n	80028ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7ff faa6 	bl	8001df4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ac:	f7ff faa2 	bl	8001df4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e21b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ef      	beq.n	80028ac <HAL_RCC_OscConfig+0x3ec>
 80028cc:	e01b      	b.n	8002906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7ff fa89 	bl	8001df4 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff fa85 	bl	8001df4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1fe      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80a6 	beq.w	8002a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a43      	ldr	r2, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCC_OscConfig+0x57c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d118      	bne.n	800297e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_OscConfig+0x57c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3a      	ldr	r2, [pc, #232]	; (8002a3c <HAL_RCC_OscConfig+0x57c>)
 8002952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002958:	f7ff fa4c 	bl	8001df4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7ff fa48 	bl	8001df4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1c1      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCC_OscConfig+0x57c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x4d8>
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002996:	e024      	b.n	80029e2 <HAL_RCC_OscConfig+0x522>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d110      	bne.n	80029c2 <HAL_RCC_OscConfig+0x502>
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c0:	e00f      	b.n	80029e2 <HAL_RCC_OscConfig+0x522>
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 80029da:	f023 0304 	bic.w	r3, r3, #4
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff fa03 	bl	8001df4 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff f9ff 	bl	8001df4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e176      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x578>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ed      	beq.n	80029f2 <HAL_RCC_OscConfig+0x532>
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff f9ec 	bl	8001df4 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1e:	e00f      	b.n	8002a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f9e8 	bl	8001df4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d906      	bls.n	8002a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e15f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a40:	4baa      	ldr	r3, [pc, #680]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e8      	bne.n	8002a20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4ba5      	ldr	r3, [pc, #660]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	4aa4      	ldr	r2, [pc, #656]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a74:	4b9d      	ldr	r3, [pc, #628]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7a:	4a9c      	ldr	r2, [pc, #624]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff f9b6 	bl	8001df4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7ff f9b2 	bl	8001df4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e12b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9e:	4b93      	ldr	r3, [pc, #588]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <HAL_RCC_OscConfig+0x5cc>
 8002aac:	e01b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aae:	4b8f      	ldr	r3, [pc, #572]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab4:	4a8d      	ldr	r2, [pc, #564]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7ff f999 	bl	8001df4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac6:	f7ff f995 	bl	8001df4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e10e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad8:	4b84      	ldr	r3, [pc, #528]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ef      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8102 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	f040 80c5 	bne.w	8002c84 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002afa:	4b7c      	ldr	r3, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d12c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d123      	bne.n	8002b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d11b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d113      	bne.n	8002b68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d109      	bne.n	8002b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d067      	beq.n	8002c38 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d062      	beq.n	8002c34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0bb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b8a:	f7ff f933 	bl	8001df4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7ff f92f 	bl	8001df4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb0:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <HAL_RCC_OscConfig+0x830>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bca:	0212      	lsls	r2, r2, #8
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bde:	0852      	lsrs	r2, r2, #1
 8002be0:	3a01      	subs	r2, #1
 8002be2:	0652      	lsls	r2, r2, #25
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bea:	06d2      	lsls	r2, r2, #27
 8002bec:	430a      	orrs	r2, r1
 8002bee:	493f      	ldr	r1, [pc, #252]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c0c:	f7ff f8f2 	bl	8001df4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff f8ee 	bl	8001df4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e067      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c32:	e05f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e05e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c38:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d157      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a28      	ldr	r2, [pc, #160]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5c:	f7ff f8ca 	bl	8001df4 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7ff f8c6 	bl	8001df4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e03f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x7a4>
 8002c82:	e037      	b.n	8002cf4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d02d      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c94:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a11      	ldr	r2, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002ca8:	f023 0303 	bic.w	r3, r3, #3
 8002cac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002cb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7ff f899 	bl	8001df4 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7ff f895 	bl	8001df4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e00e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCC_OscConfig+0x82c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x806>
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_OscConfig+0x836>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0c8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4961      	ldr	r1, [pc, #388]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d04c      	beq.n	8002dea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d121      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09e      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d115      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e092      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e086      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e07e      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	493f      	ldr	r1, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dba:	f7ff f81b 	bl	8001df4 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7ff f817 	bl	8001df4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e066      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 020c 	and.w	r2, r3, #12
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d1eb      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	492c      	ldr	r1, [pc, #176]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d210      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0207 	bic.w	r2, r3, #7
 8002e1e:	4924      	ldr	r1, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e036      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e76:	f000 f825 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ff5a 	bl	8001d54 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	080081d8 	.word	0x080081d8
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d11e      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3c:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e004      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d133      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa4>
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0xaa>
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6a:	617b      	str	r3, [r7, #20]
      break;
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	617b      	str	r3, [r7, #20]
      break;
 8002f78:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	3301      	adds	r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	fb02 f203 	mul.w	r2, r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0e5b      	lsrs	r3, r3, #25
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fba:	69bb      	ldr	r3, [r7, #24]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3724      	adds	r7, #36	; 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	080081f0 	.word	0x080081f0
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200

08002fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	080081e8 	.word	0x080081e8

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003020:	f7ff ffda 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003024:	4601      	mov	r1, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	080081e8 	.word	0x080081e8

08003048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003060:	f7ff f9ca 	bl	80023f8 <HAL_PWREx_GetVoltageRange>
 8003064:	6178      	str	r0, [r7, #20]
 8003066:	e014      	b.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f9ba 	bl	80023f8 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003098:	d10b      	bne.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d919      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2ba0      	cmp	r3, #160	; 0xa0
 80030a4:	d902      	bls.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a6:	2302      	movs	r3, #2
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e013      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	e010      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d902      	bls.n	80030be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b8:	2303      	movs	r3, #3
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e00a      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d102      	bne.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c4:	2302      	movs	r3, #2
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e004      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d101      	bne.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d0:	2301      	movs	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	4909      	ldr	r1, [pc, #36]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003110:	2300      	movs	r3, #0
 8003112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003114:	2300      	movs	r3, #0
 8003116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800312c:	d005      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800312e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003132:	d015      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003138:	e00f      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800313a:	4bac      	ldr	r3, [pc, #688]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4aab      	ldr	r2, [pc, #684]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f9cc 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003168:	4ba0      	ldr	r3, [pc, #640]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	499d      	ldr	r1, [pc, #628]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8099 	beq.w	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003196:	4b95      	ldr	r3, [pc, #596]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a8e      	ldr	r2, [pc, #568]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	; 0x58
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4b89      	ldr	r3, [pc, #548]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a88      	ldr	r2, [pc, #544]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fe0e 	bl	8001df4 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fe fe0a 	bl	8001df4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	74fb      	strb	r3, [r7, #19]
        break;
 80031ee:	e005      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f0:	4b7f      	ldr	r3, [pc, #508]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ef      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d155      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003202:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01e      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	429a      	cmp	r2, r3
 800321c:	d019      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800321e:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800322a:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a6a      	ldr	r2, [pc, #424]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800324a:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d016      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fdca 	bl	8001df4 <HAL_GetTick>
 8003260:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003262:	e00b      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fdc6 	bl	8001df4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d902      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	74fb      	strb	r3, [r7, #19]
            break;
 800327a:	e006      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	4b5b      	ldr	r3, [pc, #364]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ec      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003290:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	4953      	ldr	r1, [pc, #332]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
 80032ac:	e001      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b2:	7c7b      	ldrb	r3, [r7, #17]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	4a4b      	ldr	r2, [pc, #300]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d0:	4b46      	ldr	r3, [pc, #280]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4943      	ldr	r1, [pc, #268]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f2:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 020c 	bic.w	r2, r3, #12
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	493a      	ldr	r1, [pc, #232]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	4932      	ldr	r1, [pc, #200]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003336:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	4929      	ldr	r1, [pc, #164]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	4921      	ldr	r1, [pc, #132]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4918      	ldr	r1, [pc, #96]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4910      	ldr	r1, [pc, #64]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02c      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4907      	ldr	r1, [pc, #28]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033dc:	d10a      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a02      	ldr	r2, [pc, #8]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e8:	60d3      	str	r3, [r2, #12]
 80033ea:	e015      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f871 	bl	80034ec <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d028      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003424:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	492d      	ldr	r1, [pc, #180]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003442:	d106      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344e:	60d3      	str	r3, [r2, #12]
 8003450:	e011      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800345a:	d10c      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f842 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	4915      	ldr	r1, [pc, #84]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f81f 	bl	80034ec <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034de:	7cbb      	ldrb	r3, [r7, #18]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003506:	4b70      	ldr	r3, [pc, #448]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
       ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800351e:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
       ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d044      	beq.n	80035bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e041      	b.n	80035bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d00c      	beq.n	800355a <RCCEx_PLLSAI1_Config+0x6e>
 8003540:	2b03      	cmp	r3, #3
 8003542:	d013      	beq.n	800356c <RCCEx_PLLSAI1_Config+0x80>
 8003544:	2b01      	cmp	r3, #1
 8003546:	d120      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003548:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e01a      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800356a:	e013      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800356c:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003588:	e006      	b.n	8003598 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
      break;
 800358e:	e004      	b.n	800359a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003598:	bf00      	nop
    }

    if(status == HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035a0:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	430b      	orrs	r3, r1
 80035b6:	4944      	ldr	r1, [pc, #272]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d17c      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ce:	f7fe fc11 	bl	8001df4 <HAL_GetTick>
 80035d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035d4:	e009      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d6:	f7fe fc0d 	bl	8001df4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d902      	bls.n	80035ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	73fb      	strb	r3, [r7, #15]
        break;
 80035e8:	e005      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ef      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d15f      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d110      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800360a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6892      	ldr	r2, [r2, #8]
 8003612:	0211      	lsls	r1, r2, #8
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68d2      	ldr	r2, [r2, #12]
 8003618:	06d2      	lsls	r2, r2, #27
 800361a:	430a      	orrs	r2, r1
 800361c:	492a      	ldr	r1, [pc, #168]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	610b      	str	r3, [r1, #16]
 8003622:	e027      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d112      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	0211      	lsls	r1, r2, #8
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6912      	ldr	r2, [r2, #16]
 8003640:	0852      	lsrs	r2, r2, #1
 8003642:	3a01      	subs	r2, #1
 8003644:	0552      	lsls	r2, r2, #21
 8003646:	430a      	orrs	r2, r1
 8003648:	491f      	ldr	r1, [pc, #124]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	610b      	str	r3, [r1, #16]
 800364e:	e011      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6892      	ldr	r2, [r2, #8]
 8003660:	0211      	lsls	r1, r2, #8
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6952      	ldr	r2, [r2, #20]
 8003666:	0852      	lsrs	r2, r2, #1
 8003668:	3a01      	subs	r2, #1
 800366a:	0652      	lsls	r2, r2, #25
 800366c:	430a      	orrs	r2, r1
 800366e:	4916      	ldr	r1, [pc, #88]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800367a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800367e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fbb8 	bl	8001df4 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003686:	e009      	b.n	800369c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003688:	f7fe fbb4 	bl	8001df4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	73fb      	strb	r3, [r7, #15]
          break;
 800369a:	e005      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e095      	b.n	800380a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ee:	d009      	beq.n	8003704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
 80036f6:	e005      	b.n	8003704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe f8cc 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003744:	d902      	bls.n	800374c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e002      	b.n	8003752 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800374c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800375a:	d007      	beq.n	800376c <HAL_SPI_Init+0xa0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003764:	d002      	beq.n	800376c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	ea42 0103 	orr.w	r1, r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	f003 0204 	and.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_SPI_Transmit+0x22>
 8003830:	2302      	movs	r3, #2
 8003832:	e158      	b.n	8003ae6 <HAL_SPI_Transmit+0x2d4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800383c:	f7fe fada 	bl	8001df4 <HAL_GetTick>
 8003840:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003856:	e13d      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Transmit+0x52>
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003868:	e134      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2203      	movs	r2, #3
 800386e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d10f      	bne.n	80038d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038fc:	d94b      	bls.n	8003996 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0xfa>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13e      	bne.n	800398a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003930:	e02b      	b.n	800398a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d112      	bne.n	8003966 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003964:	e011      	b.n	800398a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fe fa45 	bl	8001df4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Transmit+0x16c>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Transmit+0x172>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003988:	e0a4      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ce      	bne.n	8003932 <HAL_SPI_Transmit+0x120>
 8003994:	e07c      	b.n	8003a90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x192>
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d170      	bne.n	8003a86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d912      	bls.n	80039d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b02      	subs	r3, #2
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039d2:	e058      	b.n	8003a86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039fa:	e044      	b.n	8003a86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d12b      	bne.n	8003a62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d912      	bls.n	8003a3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b02      	subs	r3, #2
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a38:	e025      	b.n	8003a86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a60:	e011      	b.n	8003a86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a62:	f7fe f9c7 	bl	8001df4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d803      	bhi.n	8003a7a <HAL_SPI_Transmit+0x268>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d102      	bne.n	8003a80 <HAL_SPI_Transmit+0x26e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a84:	e026      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1b5      	bne.n	80039fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f001 f991 	bl	8004dbc <SPI_EndRxTxTransaction>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e000      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ad2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0a:	d112      	bne.n	8003b32 <HAL_SPI_Receive+0x44>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10e      	bne.n	8003b32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2204      	movs	r2, #4
 8003b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f910 	bl	8003d4e <HAL_SPI_TransmitReceive>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e109      	b.n	8003d46 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_SPI_Receive+0x52>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e102      	b.n	8003d46 <HAL_SPI_Receive+0x258>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b48:	f7fe f954 	bl	8001df4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b5e:	e0e9      	b.n	8003d34 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Receive+0x7e>
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b70:	e0e0      	b.n	8003d34 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2204      	movs	r2, #4
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bbc:	d908      	bls.n	8003bd0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e007      	b.n	8003be0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be8:	d10f      	bne.n	8003c0a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d007      	beq.n	8003c28 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c30:	d867      	bhi.n	8003d02 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c32:	e030      	b.n	8003c96 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d117      	bne.n	8003c72 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f103 020c 	add.w	r2, r3, #12
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c70:	e011      	b.n	8003c96 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c72:	f7fe f8bf 	bl	8001df4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d803      	bhi.n	8003c8a <HAL_SPI_Receive+0x19c>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d102      	bne.n	8003c90 <HAL_SPI_Receive+0x1a2>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c94:	e04e      	b.n	8003d34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1c8      	bne.n	8003c34 <HAL_SPI_Receive+0x146>
 8003ca2:	e034      	b.n	8003d0e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d115      	bne.n	8003cde <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003cdc:	e011      	b.n	8003d02 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cde:	f7fe f889 	bl	8001df4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d803      	bhi.n	8003cf6 <HAL_SPI_Receive+0x208>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d102      	bne.n	8003cfc <HAL_SPI_Receive+0x20e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d00:	e018      	b.n	8003d34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ca      	bne.n	8003ca4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fffa 	bl	8004d0c <SPI_EndRxTransaction>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_Receive+0x246>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08a      	sub	sp, #40	; 0x28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x26>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e1fb      	b.n	800416c <HAL_SPI_TransmitReceive+0x41e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7c:	f7fe f83a 	bl	8001df4 <HAL_GetTick>
 8003d80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d98:	7efb      	ldrb	r3, [r7, #27]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d00e      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x6e>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da4:	d106      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x66>
 8003dae:	7efb      	ldrb	r3, [r7, #27]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d003      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dba:	e1cd      	b.n	8004158 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x80>
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dd4:	e1c0      	b.n	8004158 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d003      	beq.n	8003dea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2205      	movs	r2, #5
 8003de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	887a      	ldrh	r2, [r7, #2]
 8003dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	887a      	ldrh	r2, [r7, #2]
 8003e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e2c:	d802      	bhi.n	8003e34 <HAL_SPI_TransmitReceive+0xe6>
 8003e2e:	8a3b      	ldrh	r3, [r7, #16]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d908      	bls.n	8003e46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	e007      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d007      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7c:	d97c      	bls.n	8003f78 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x13e>
 8003e86:	8a7b      	ldrh	r3, [r7, #18]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d169      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb0:	e056      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x1aa>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x1aa>
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d113      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d11c      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x1f2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f40:	f7fd ff58 	bl	8001df4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d807      	bhi.n	8003f60 <HAL_SPI_TransmitReceive+0x212>
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d003      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f5e:	e0fb      	b.n	8004158 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1a3      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x164>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d19d      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x164>
 8003f76:	e0df      	b.n	8004138 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0x23a>
 8003f80:	8a7b      	ldrh	r3, [r7, #18]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	f040 80cb 	bne.w	800411e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d912      	bls.n	8003fb8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b02      	subs	r3, #2
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb6:	e0b2      	b.n	800411e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fde:	e09e      	b.n	800411e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d134      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x30a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02f      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x30a>
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d12c      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d912      	bls.n	800402e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b02      	subs	r3, #2
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800402c:	e012      	b.n	8004054 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d148      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x3aa>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d042      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d923      	bls.n	80040c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	b292      	uxth	r2, r2
 800408a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b02      	subs	r3, #2
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d81f      	bhi.n	80040f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	e016      	b.n	80040f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f103 020c 	add.w	r2, r3, #12
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f4:	2301      	movs	r3, #1
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040f8:	f7fd fe7c 	bl	8001df4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	429a      	cmp	r2, r3
 8004106:	d803      	bhi.n	8004110 <HAL_SPI_TransmitReceive+0x3c2>
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d102      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x3c8>
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800411c:	e01c      	b.n	8004158 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f af5b 	bne.w	8003fe0 <HAL_SPI_TransmitReceive+0x292>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f47f af54 	bne.w	8003fe0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fe3d 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	661a      	str	r2, [r3, #96]	; 0x60
 8004154:	e000      	b.n	8004158 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_Transmit_IT+0x20>
 8004190:	2302      	movs	r3, #2
 8004192:	e072      	b.n	800427a <HAL_SPI_Transmit_IT+0x106>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Transmit_IT+0x34>
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041ac:	e060      	b.n	8004270 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d002      	beq.n	80041c0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
 80041bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041be:	e057      	b.n	8004270 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2203      	movs	r2, #3
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004204:	d903      	bls.n	800420e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_SPI_Transmit_IT+0x114>)
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
 800420c:	e002      	b.n	8004214 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_SPI_Transmit_IT+0x118>)
 8004212:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421c:	d10f      	bne.n	800423e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800424c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d008      	beq.n	800426e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e000      	b.n	8004270 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800426e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	08004a9b 	.word	0x08004a9b
 800428c:	08004a55 	.word	0x08004a55

08004290 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d110      	bne.n	80042cc <HAL_SPI_Receive_IT+0x3c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d10b      	bne.n	80042cc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2204      	movs	r2, #4
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f894 	bl	80043f0 <HAL_SPI_TransmitReceive_IT>
 80042c8:	4603      	mov	r3, r0
 80042ca:	e089      	b.n	80043e0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Receive_IT+0x4a>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e082      	b.n	80043e0 <HAL_SPI_Receive_IT+0x150>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042f2:	e070      	b.n	80043d6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Receive_IT+0x70>
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004304:	e067      	b.n	80043d6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2204      	movs	r2, #4
 800430a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800434a:	d90b      	bls.n	8004364 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800435a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <HAL_SPI_Receive_IT+0x158>)
 8004360:	64da      	str	r2, [r3, #76]	; 0x4c
 8004362:	e00a      	b.n	800437a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004372:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_SPI_Receive_IT+0x15c>)
 8004378:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d10f      	bne.n	80043a4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043a2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80043b2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d008      	beq.n	80043d4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e000      	b.n	80043d6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80043d4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	08004a09 	.word	0x08004a09
 80043ec:	080049b9 	.word	0x080049b9

080043f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_SPI_TransmitReceive_IT+0x20>
 800440c:	2302      	movs	r3, #2
 800440e:	e091      	b.n	8004534 <HAL_SPI_TransmitReceive_IT+0x144>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800441e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004426:	7dbb      	ldrb	r3, [r7, #22]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d00d      	beq.n	8004448 <HAL_SPI_TransmitReceive_IT+0x58>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d106      	bne.n	8004442 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_TransmitReceive_IT+0x52>
 800443c:	7dbb      	ldrb	r3, [r7, #22]
 800443e:	2b04      	cmp	r3, #4
 8004440:	d002      	beq.n	8004448 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004446:	e070      	b.n	800452a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_SPI_TransmitReceive_IT+0x6a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800445e:	e064      	b.n	800452a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b04      	cmp	r3, #4
 800446a:	d003      	beq.n	8004474 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2205      	movs	r2, #5
 8004470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	887a      	ldrh	r2, [r7, #2]
 8004496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	887a      	ldrh	r2, [r7, #2]
 800449e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044aa:	d906      	bls.n	80044ba <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a24      	ldr	r2, [pc, #144]	; (8004540 <HAL_SPI_TransmitReceive_IT+0x150>)
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_SPI_TransmitReceive_IT+0x154>)
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
 80044b8:	e005      	b.n	80044c6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_SPI_TransmitReceive_IT+0x158>)
 80044be:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ce:	d802      	bhi.n	80044d6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d908      	bls.n	80044e8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	e007      	b.n	80044f8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044f6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004506:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d008      	beq.n	8004528 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e000      	b.n	800452a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004528:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	080048f3 	.word	0x080048f3
 8004544:	08004959 	.word	0x08004959
 8004548:	080047a3 	.word	0x080047a3
 800454c:	08004861 	.word	0x08004861

08004550 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
    return;
 8004592:	e0d8      	b.n	8004746 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_SPI_IRQHandler+0x66>
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	09db      	lsrs	r3, r3, #7
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
    return;
 80045b4:	e0c7      	b.n	8004746 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <HAL_SPI_IRQHandler+0x8c>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80b5 	beq.w	8004746 <HAL_SPI_IRQHandler+0x1f6>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80ae 	beq.w	8004746 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d023      	beq.n	800463e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d011      	beq.n	8004626 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	e00b      	b.n	800463e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]
        return;
 800463c:	e083      	b.n	8004746 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d014      	beq.n	8004674 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004684:	f043 0208 	orr.w	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d050      	beq.n	8004744 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_SPI_IRQHandler+0x17e>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d034      	beq.n	8004738 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0203 	bic.w	r2, r2, #3
 80046dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d011      	beq.n	800470a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_SPI_IRQHandler+0x1fc>)
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd fcbd 	bl	8002072 <HAL_DMA_Abort_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004702:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	4a0d      	ldr	r2, [pc, #52]	; (800474c <HAL_SPI_IRQHandler+0x1fc>)
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fca7 	bl	8002072 <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004736:	e003      	b.n	8004740 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f813 	bl	8004764 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800473e:	e000      	b.n	8004742 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004740:	bf00      	nop
    return;
 8004742:	bf00      	nop
 8004744:	bf00      	nop
  }
}
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08004779 	.word	0x08004779

08004750 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff ffe5 	bl	8004764 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d923      	bls.n	80047fe <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	b292      	uxth	r2, r2
 80047c2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b02      	subs	r3, #2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d11f      	bne.n	800482c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	e016      	b.n	800482c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f103 020c 	add.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004846:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 faf8 	bl	8004e48 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d912      	bls.n	8004898 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	881a      	ldrh	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b02      	subs	r3, #2
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004896:	e012      	b.n	80048be <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d110      	bne.n	80048ea <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 faaf 	bl	8004e48 <SPI_CloseRxTx_ISR>
    }
  }
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	b292      	uxth	r2, r2
 8004906:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10f      	bne.n	8004950 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa7c 	bl	8004e48 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d110      	bne.n	80049b0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa4c 	bl	8004e48 <SPI_CloseRxTx_ISR>
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f103 020c 	add.w	r2, r3, #12
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa66 	bl	8004ecc <SPI_CloseRx_ISR>
  }
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fa40 	bl	8004ecc <SPI_CloseRx_ISR>
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa4d 	bl	8004f2c <SPI_CloseTx_ISR>
  }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa2b 	bl	8004f2c <SPI_CloseTx_ISR>
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004af0:	f7fd f980 	bl	8001df4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b00:	f7fd f978 	bl	8001df4 <HAL_GetTick>
 8004b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	015b      	lsls	r3, r3, #5
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	e054      	b.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d050      	beq.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b20:	f7fd f968 	bl	8001df4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d902      	bls.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d13d      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4e:	d111      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d004      	beq.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d107      	bne.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7c:	d10f      	bne.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e017      	b.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d19b      	bne.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000

08004bf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bfe:	f7fd f8f9 	bl	8001df4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c0e:	f7fd f8f1 	bl	8001df4 <HAL_GetTick>
 8004c12:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c14:	4b3c      	ldr	r3, [pc, #240]	; (8004d08 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00da      	lsls	r2, r3, #3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	0d1b      	lsrs	r3, r3, #20
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c2c:	e05f      	b.n	8004cee <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c34:	d106      	bne.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d050      	beq.n	8004cee <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c4c:	f7fd f8d2 	bl	8001df4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d902      	bls.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13d      	bne.n	8004cde <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d111      	bne.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	d004      	beq.n	8004c90 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d107      	bne.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d10f      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e010      	b.n	8004d00 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d197      	bne.n	8004c2e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000000 	.word	0x20000000

08004d0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d20:	d111      	bne.n	8004d46 <SPI_EndRxTransaction+0x3a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2a:	d004      	beq.n	8004d36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d34:	d107      	bne.n	8004d46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fec5 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e023      	b.n	8004db4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d74:	d11d      	bne.n	8004db2 <SPI_EndRxTransaction+0xa6>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7e:	d004      	beq.n	8004d8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d113      	bne.n	8004db2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff2a 	bl	8004bf0 <SPI_WaitFifoStateUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e000      	b.n	8004db4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ff0b 	bl	8004bf0 <SPI_WaitFifoStateUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e027      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fe70 	bl	8004ae0 <SPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e014      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff fee4 	bl	8004bf0 <SPI_WaitFifoStateUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e000      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e50:	f7fc ffd0 	bl	8001df4 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0220 	bic.w	r2, r2, #32
 8004e64:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	2164      	movs	r1, #100	; 0x64
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ffa6 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d115      	bne.n	8004eb6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d107      	bne.n	8004ea6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fccc 	bl	800183c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004ea4:	e00e      	b.n	8004ec4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fc4e 	bl	8004750 <HAL_SPI_TxRxCpltCallback>
}
 8004eb4:	e006      	b.n	8004ec4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fc50 	bl	8004764 <HAL_SPI_ErrorCallback>
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004ee4:	f7fc ff86 	bl	8001df4 <HAL_GetTick>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	2164      	movs	r1, #100	; 0x64
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ff0c 	bl	8004d0c <SPI_EndRxTransaction>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fc90 	bl	800183c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004f1c:	e002      	b.n	8004f24 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff fc20 	bl	8004764 <HAL_SPI_ErrorCallback>
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f34:	f7fc ff5e 	bl	8001df4 <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f48:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	2164      	movs	r1, #100	; 0x64
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ff34 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fbe5 	bl	8004764 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004f9a:	e002      	b.n	8004fa2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc fc39 	bl	8001814 <HAL_SPI_TxCpltCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e049      	b.n	8005050 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fc fcf1 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f000 fd1d 	bl	8005a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e03b      	b.n	80050e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIM_Base_Start_IT+0x4e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d004      	beq.n	80050a6 <HAL_TIM_Base_Start_IT+0x4e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d115      	bne.n	80050d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_TIM_Base_Start_IT+0xa4>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d015      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x8c>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050be:	d011      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	e008      	b.n	80050e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	00010007 	.word	0x00010007

08005100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e049      	b.n	80051a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f841 	bl	80051ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fc72 	bl	8005a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x24>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e03c      	b.n	8005262 <HAL_TIM_PWM_Start+0x9e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d109      	bne.n	8005202 <HAL_TIM_PWM_Start+0x3e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e02f      	b.n	8005262 <HAL_TIM_PWM_Start+0x9e>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d109      	bne.n	800521c <HAL_TIM_PWM_Start+0x58>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	e022      	b.n	8005262 <HAL_TIM_PWM_Start+0x9e>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d109      	bne.n	8005236 <HAL_TIM_PWM_Start+0x72>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e015      	b.n	8005262 <HAL_TIM_PWM_Start+0x9e>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b10      	cmp	r3, #16
 800523a:	d109      	bne.n	8005250 <HAL_TIM_PWM_Start+0x8c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e008      	b.n	8005262 <HAL_TIM_PWM_Start+0x9e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07e      	b.n	8005368 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0xb6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005278:	e023      	b.n	80052c2 <HAL_TIM_PWM_Start+0xfe>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0xc6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005288:	e01b      	b.n	80052c2 <HAL_TIM_PWM_Start+0xfe>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005298:	e013      	b.n	80052c2 <HAL_TIM_PWM_Start+0xfe>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start+0xe6>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a8:	e00b      	b.n	80052c2 <HAL_TIM_PWM_Start+0xfe>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0xf6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b8:	e003      	b.n	80052c2 <HAL_TIM_PWM_Start+0xfe>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 ffb0 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <HAL_TIM_PWM_Start+0x1ac>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIM_PWM_Start+0x12a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a25      	ldr	r2, [pc, #148]	; (8005374 <HAL_TIM_PWM_Start+0x1b0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIM_PWM_Start+0x12a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <HAL_TIM_PWM_Start+0x1b4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x12e>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_TIM_PWM_Start+0x130>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_TIM_PWM_Start+0x1ac>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_TIM_PWM_Start+0x162>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d004      	beq.n	8005326 <HAL_TIM_PWM_Start+0x162>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a14      	ldr	r2, [pc, #80]	; (8005374 <HAL_TIM_PWM_Start+0x1b0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_TIM_PWM_Start+0x1b8>)
 800532e:	4013      	ands	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b06      	cmp	r3, #6
 8005336:	d015      	beq.n	8005364 <HAL_TIM_PWM_Start+0x1a0>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533e:	d011      	beq.n	8005364 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005350:	e008      	b.n	8005364 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e000      	b.n	8005366 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	00010007 	.word	0x00010007

08005380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0202 	mvn.w	r2, #2
 80053ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fb11 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fb03 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb14 	bl	80059fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0204 	mvn.w	r2, #4
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fae7 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fad9 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 faea 	bl	80059fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b08      	cmp	r3, #8
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b08      	cmp	r3, #8
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0208 	mvn.w	r2, #8
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2204      	movs	r2, #4
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fabd 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 faaf 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fac0 	bl	80059fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b10      	cmp	r3, #16
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b10      	cmp	r3, #16
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0210 	mvn.w	r2, #16
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2208      	movs	r2, #8
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa93 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa85 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fa96 	bl	80059fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10e      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0201 	mvn.w	r2, #1
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc f966 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b80      	cmp	r3, #128	; 0x80
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b80      	cmp	r3, #128	; 0x80
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 f82c 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 f81f 	bl	800659c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d10e      	bne.n	800558a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa44 	bl	8005a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0220 	mvn.w	r2, #32
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 ffdf 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e0fd      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b14      	cmp	r3, #20
 80055e6:	f200 80f0 	bhi.w	80057ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080057cb 	.word	0x080057cb
 80055f8:	080057cb 	.word	0x080057cb
 80055fc:	080057cb 	.word	0x080057cb
 8005600:	08005685 	.word	0x08005685
 8005604:	080057cb 	.word	0x080057cb
 8005608:	080057cb 	.word	0x080057cb
 800560c:	080057cb 	.word	0x080057cb
 8005610:	080056c7 	.word	0x080056c7
 8005614:	080057cb 	.word	0x080057cb
 8005618:	080057cb 	.word	0x080057cb
 800561c:	080057cb 	.word	0x080057cb
 8005620:	08005707 	.word	0x08005707
 8005624:	080057cb 	.word	0x080057cb
 8005628:	080057cb 	.word	0x080057cb
 800562c:	080057cb 	.word	0x080057cb
 8005630:	08005749 	.word	0x08005749
 8005634:	080057cb 	.word	0x080057cb
 8005638:	080057cb 	.word	0x080057cb
 800563c:	080057cb 	.word	0x080057cb
 8005640:	08005789 	.word	0x08005789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa50 	bl	8005af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0204 	bic.w	r2, r2, #4
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
      break;
 8005682:	e0a3      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 faac 	bl	8005be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]
      break;
 80056c4:	e082      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fb05 	bl	8005cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0208 	orr.w	r2, r2, #8
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0204 	bic.w	r2, r2, #4
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	61da      	str	r2, [r3, #28]
      break;
 8005704:	e062      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fb5d 	bl	8005dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	021a      	lsls	r2, r3, #8
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	61da      	str	r2, [r3, #28]
      break;
 8005746:	e041      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb9a 	bl	8005e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0208 	orr.w	r2, r2, #8
 8005762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005786:	e021      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fbd2 	bl	8005f38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057c8:	e000      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80057ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop

080057e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIM_ConfigClockSource+0x18>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e0a8      	b.n	800594a <HAL_TIM_ConfigClockSource+0x16a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d067      	beq.n	8005904 <HAL_TIM_ConfigClockSource+0x124>
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d80b      	bhi.n	8005850 <HAL_TIM_ConfigClockSource+0x70>
 8005838:	2b10      	cmp	r3, #16
 800583a:	d073      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0x144>
 800583c:	2b10      	cmp	r3, #16
 800583e:	d802      	bhi.n	8005846 <HAL_TIM_ConfigClockSource+0x66>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d06f      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005844:	e078      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005846:	2b20      	cmp	r3, #32
 8005848:	d06c      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0x144>
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d06a      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800584e:	e073      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005850:	2b70      	cmp	r3, #112	; 0x70
 8005852:	d00d      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0x90>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d804      	bhi.n	8005862 <HAL_TIM_ConfigClockSource+0x82>
 8005858:	2b50      	cmp	r3, #80	; 0x50
 800585a:	d033      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0xe4>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d041      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005860:	e06a      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d066      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x156>
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586c:	d017      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800586e:	e063      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f000 fcb6 	bl	80061f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005892:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
      break;
 800589c:	e04c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 fc9f 	bl	80061f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c0:	609a      	str	r2, [r3, #8]
      break;
 80058c2:	e039      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	461a      	mov	r2, r3
 80058d2:	f000 fc13 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2150      	movs	r1, #80	; 0x50
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fc6c 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 80058e2:	e029      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f000 fc32 	bl	800615a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2160      	movs	r1, #96	; 0x60
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fc5c 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005902:	e019      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	461a      	mov	r2, r3
 8005912:	f000 fbf3 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2140      	movs	r1, #64	; 0x40
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fc4c 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005922:	e009      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fc43 	bl	80061ba <TIM_ITRx_SetConfig>
        break;
 8005934:	e000      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005966:	2302      	movs	r3, #2
 8005968:	e031      	b.n	80059ce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb35 	bl	8005fec <TIM_SlaveTimer_SetConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e018      	b.n	80059ce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059aa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059ba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <TIM_Base_SetConfig+0xbc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0x20>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a46:	d108      	bne.n	8005a5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a21      	ldr	r2, [pc, #132]	; (8005ae4 <TIM_Base_SetConfig+0xbc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00b      	beq.n	8005a7a <TIM_Base_SetConfig+0x52>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d007      	beq.n	8005a7a <TIM_Base_SetConfig+0x52>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <TIM_Base_SetConfig+0xc0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_Base_SetConfig+0x52>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <TIM_Base_SetConfig+0xc4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d108      	bne.n	8005a8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <TIM_Base_SetConfig+0xbc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d007      	beq.n	8005ac8 <TIM_Base_SetConfig+0xa0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <TIM_Base_SetConfig+0xc0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_Base_SetConfig+0xa0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <TIM_Base_SetConfig+0xc4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400

08005af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0201 	bic.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 0302 	bic.w	r3, r3, #2
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a24      	ldr	r2, [pc, #144]	; (8005bdc <TIM_OC1_SetConfig+0xec>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC1_SetConfig+0x70>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <TIM_OC1_SetConfig+0xf0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC1_SetConfig+0x70>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <TIM_OC1_SetConfig+0xf4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10c      	bne.n	8005b7a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0308 	bic.w	r3, r3, #8
 8005b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0304 	bic.w	r3, r3, #4
 8005b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <TIM_OC1_SetConfig+0xec>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_OC1_SetConfig+0xa2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <TIM_OC1_SetConfig+0xf0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC1_SetConfig+0xa2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <TIM_OC1_SetConfig+0xf4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d111      	bne.n	8005bb6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400

08005be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0320 	bic.w	r3, r3, #32
 8005c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a22      	ldr	r2, [pc, #136]	; (8005cd0 <TIM_OC2_SetConfig+0xe8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10d      	bne.n	8005c68 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <TIM_OC2_SetConfig+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC2_SetConfig+0x98>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <TIM_OC2_SetConfig+0xec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC2_SetConfig+0x98>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <TIM_OC2_SetConfig+0xf0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d113      	bne.n	8005ca8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400

08005cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <TIM_OC3_SetConfig+0xe4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10d      	bne.n	8005d5a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <TIM_OC3_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_OC3_SetConfig+0x96>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <TIM_OC3_SetConfig+0xe8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_OC3_SetConfig+0x96>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <TIM_OC3_SetConfig+0xec>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d113      	bne.n	8005d9a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	621a      	str	r2, [r3, #32]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400

08005dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <TIM_OC4_SetConfig+0xb0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC4_SetConfig+0x74>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <TIM_OC4_SetConfig+0xb4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC4_SetConfig+0x74>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <TIM_OC4_SetConfig+0xb8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d109      	bne.n	8005e54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400

08005e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <TIM_OC5_SetConfig+0xa4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x6a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <TIM_OC5_SetConfig+0xa8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x6a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <TIM_OC5_SetConfig+0xac>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d109      	bne.n	8005f06 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400

08005f38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	051b      	lsls	r3, r3, #20
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <TIM_OC6_SetConfig+0xa8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d007      	beq.n	8005fa4 <TIM_OC6_SetConfig+0x6c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <TIM_OC6_SetConfig+0xac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC6_SetConfig+0x6c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <TIM_OC6_SetConfig+0xb0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d109      	bne.n	8005fb8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400

08005fec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006004:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b30      	cmp	r3, #48	; 0x30
 8006034:	d05c      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0x104>
 8006036:	2b30      	cmp	r3, #48	; 0x30
 8006038:	d806      	bhi.n	8006048 <TIM_SlaveTimer_SetConfig+0x5c>
 800603a:	2b10      	cmp	r3, #16
 800603c:	d058      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0x104>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d056      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0x104>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d054      	beq.n	80060f0 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006046:	e054      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006048:	2b50      	cmp	r3, #80	; 0x50
 800604a:	d03d      	beq.n	80060c8 <TIM_SlaveTimer_SetConfig+0xdc>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d802      	bhi.n	8006056 <TIM_SlaveTimer_SetConfig+0x6a>
 8006050:	2b40      	cmp	r3, #64	; 0x40
 8006052:	d010      	beq.n	8006076 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8006054:	e04d      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006056:	2b60      	cmp	r3, #96	; 0x60
 8006058:	d040      	beq.n	80060dc <TIM_SlaveTimer_SetConfig+0xf0>
 800605a:	2b70      	cmp	r3, #112	; 0x70
 800605c:	d000      	beq.n	8006060 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800605e:	e048      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68d9      	ldr	r1, [r3, #12]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f000 f8be 	bl	80061f0 <TIM_ETR_SetConfig>
      break;
 8006074:	e03d      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b05      	cmp	r3, #5
 800607c:	d101      	bne.n	8006082 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e038      	b.n	80060f4 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
      break;
 80060c6:	e014      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f000 f811 	bl	80060fc <TIM_TI1_ConfigInputStage>
      break;
 80060da:	e00a      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f000 f836 	bl	800615a <TIM_TI2_ConfigInputStage>
      break;
 80060ee:	e000      	b.n	80060f2 <TIM_SlaveTimer_SetConfig+0x106>
        break;
 80060f0:	bf00      	nop
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 030a 	bic.w	r3, r3, #10
 8006138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2201      	movs	r2, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_TIMEx_PWMN_Start+0x24>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e022      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d109      	bne.n	80062ba <HAL_TIMEx_PWMN_Start+0x3e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e015      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d109      	bne.n	80062d4 <HAL_TIMEx_PWMN_Start+0x58>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e008      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e05a      	b.n	80063a4 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_TIMEx_PWMN_Start+0x82>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fc:	e013      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b04      	cmp	r3, #4
 8006302:	d104      	bne.n	800630e <HAL_TIMEx_PWMN_Start+0x92>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800630c:	e00b      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d104      	bne.n	800631e <HAL_TIMEx_PWMN_Start+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800631c:	e003      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2204      	movs	r2, #4
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f93e 	bl	80065b0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006342:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_TIMEx_PWMN_Start+0x130>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_PWMN_Start+0xe6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_PWMN_Start+0xe6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_TIMEx_PWMN_Start+0x134>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d115      	bne.n	800638e <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <HAL_TIMEx_PWMN_Start+0x138>)
 800636a:	4013      	ands	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b06      	cmp	r3, #6
 8006372:	d015      	beq.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d011      	beq.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	e008      	b.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e000      	b.n	80063a2 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	00010007 	.word	0x00010007

080063b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e04f      	b.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a21      	ldr	r2, [pc, #132]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a14      	ldr	r2, [pc, #80]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d009      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d004      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40014000 	.word	0x40014000

08006484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800649c:	2302      	movs	r3, #2
 800649e:	e060      	b.n	8006562 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	041b      	lsls	r3, r3, #16
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a14      	ldr	r2, [pc, #80]	; (8006570 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d115      	bne.n	8006550 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	051b      	lsls	r3, r3, #20
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2204      	movs	r2, #4
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e040      	b.n	800668e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fb fa63 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	; 0x24
 8006626:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8bf 	bl	80067bc <UART_SetConfig>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e022      	b.n	800668e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fac3 	bl	8006bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006664:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006674:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fb4a 	bl	8006d20 <UART_CheckIdleState>
 800668c:	4603      	mov	r3, r0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08a      	sub	sp, #40	; 0x28
 800669a:	af02      	add	r7, sp, #8
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	f040 8081 	bne.w	80067b2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_UART_Transmit+0x26>
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e079      	b.n	80067b4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Transmit+0x38>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e072      	b.n	80067b4 <HAL_UART_Transmit+0x11e>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2221      	movs	r2, #33	; 0x21
 80066e0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80066e2:	f7fb fb87 	bl	8001df4 <HAL_GetTick>
 80066e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	d108      	bne.n	8006714 <HAL_UART_Transmit+0x7e>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e003      	b.n	800671c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006724:	e02d      	b.n	8006782 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fb3a 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e039      	b.n	80067b4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	881a      	ldrh	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006752:	b292      	uxth	r2, r2
 8006754:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	3302      	adds	r3, #2
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e008      	b.n	8006770 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	b292      	uxth	r2, r2
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3301      	adds	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1cb      	bne.n	8006726 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2200      	movs	r2, #0
 8006796:	2140      	movs	r1, #64	; 0x40
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fb06 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e005      	b.n	80067b4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e000      	b.n	80067b4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
  }
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4bb0      	ldr	r3, [pc, #704]	; (8006aac <UART_SetConfig+0x2f0>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	69f9      	ldr	r1, [r7, #28]
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4aa6      	ldr	r2, [pc, #664]	; (8006ab0 <UART_SetConfig+0x2f4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	4313      	orrs	r3, r2
 8006824:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	430a      	orrs	r2, r1
 8006838:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a9d      	ldr	r2, [pc, #628]	; (8006ab4 <UART_SetConfig+0x2f8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d121      	bne.n	8006888 <UART_SetConfig+0xcc>
 8006844:	4b9c      	ldr	r3, [pc, #624]	; (8006ab8 <UART_SetConfig+0x2fc>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b03      	cmp	r3, #3
 8006850:	d816      	bhi.n	8006880 <UART_SetConfig+0xc4>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x9c>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006869 	.word	0x08006869
 800685c:	08006875 	.word	0x08006875
 8006860:	0800686f 	.word	0x0800686f
 8006864:	0800687b 	.word	0x0800687b
 8006868:	2301      	movs	r3, #1
 800686a:	76fb      	strb	r3, [r7, #27]
 800686c:	e072      	b.n	8006954 <UART_SetConfig+0x198>
 800686e:	2302      	movs	r3, #2
 8006870:	76fb      	strb	r3, [r7, #27]
 8006872:	e06f      	b.n	8006954 <UART_SetConfig+0x198>
 8006874:	2304      	movs	r3, #4
 8006876:	76fb      	strb	r3, [r7, #27]
 8006878:	e06c      	b.n	8006954 <UART_SetConfig+0x198>
 800687a:	2308      	movs	r3, #8
 800687c:	76fb      	strb	r3, [r7, #27]
 800687e:	e069      	b.n	8006954 <UART_SetConfig+0x198>
 8006880:	2310      	movs	r3, #16
 8006882:	76fb      	strb	r3, [r7, #27]
 8006884:	bf00      	nop
 8006886:	e065      	b.n	8006954 <UART_SetConfig+0x198>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a8b      	ldr	r2, [pc, #556]	; (8006abc <UART_SetConfig+0x300>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d134      	bne.n	80068fc <UART_SetConfig+0x140>
 8006892:	4b89      	ldr	r3, [pc, #548]	; (8006ab8 <UART_SetConfig+0x2fc>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b0c      	cmp	r3, #12
 800689e:	d829      	bhi.n	80068f4 <UART_SetConfig+0x138>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <UART_SetConfig+0xec>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068f5 	.word	0x080068f5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068e9 	.word	0x080068e9
 80068bc:	080068f5 	.word	0x080068f5
 80068c0:	080068f5 	.word	0x080068f5
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	080068e3 	.word	0x080068e3
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068f5 	.word	0x080068f5
 80068d4:	080068f5 	.word	0x080068f5
 80068d8:	080068ef 	.word	0x080068ef
 80068dc:	2300      	movs	r3, #0
 80068de:	76fb      	strb	r3, [r7, #27]
 80068e0:	e038      	b.n	8006954 <UART_SetConfig+0x198>
 80068e2:	2302      	movs	r3, #2
 80068e4:	76fb      	strb	r3, [r7, #27]
 80068e6:	e035      	b.n	8006954 <UART_SetConfig+0x198>
 80068e8:	2304      	movs	r3, #4
 80068ea:	76fb      	strb	r3, [r7, #27]
 80068ec:	e032      	b.n	8006954 <UART_SetConfig+0x198>
 80068ee:	2308      	movs	r3, #8
 80068f0:	76fb      	strb	r3, [r7, #27]
 80068f2:	e02f      	b.n	8006954 <UART_SetConfig+0x198>
 80068f4:	2310      	movs	r3, #16
 80068f6:	76fb      	strb	r3, [r7, #27]
 80068f8:	bf00      	nop
 80068fa:	e02b      	b.n	8006954 <UART_SetConfig+0x198>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a6b      	ldr	r2, [pc, #428]	; (8006ab0 <UART_SetConfig+0x2f4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d124      	bne.n	8006950 <UART_SetConfig+0x194>
 8006906:	4b6c      	ldr	r3, [pc, #432]	; (8006ab8 <UART_SetConfig+0x2fc>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006914:	d012      	beq.n	800693c <UART_SetConfig+0x180>
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691a:	d802      	bhi.n	8006922 <UART_SetConfig+0x166>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <UART_SetConfig+0x174>
 8006920:	e012      	b.n	8006948 <UART_SetConfig+0x18c>
 8006922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006926:	d006      	beq.n	8006936 <UART_SetConfig+0x17a>
 8006928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800692c:	d009      	beq.n	8006942 <UART_SetConfig+0x186>
 800692e:	e00b      	b.n	8006948 <UART_SetConfig+0x18c>
 8006930:	2300      	movs	r3, #0
 8006932:	76fb      	strb	r3, [r7, #27]
 8006934:	e00e      	b.n	8006954 <UART_SetConfig+0x198>
 8006936:	2302      	movs	r3, #2
 8006938:	76fb      	strb	r3, [r7, #27]
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x198>
 800693c:	2304      	movs	r3, #4
 800693e:	76fb      	strb	r3, [r7, #27]
 8006940:	e008      	b.n	8006954 <UART_SetConfig+0x198>
 8006942:	2308      	movs	r3, #8
 8006944:	76fb      	strb	r3, [r7, #27]
 8006946:	e005      	b.n	8006954 <UART_SetConfig+0x198>
 8006948:	2310      	movs	r3, #16
 800694a:	76fb      	strb	r3, [r7, #27]
 800694c:	bf00      	nop
 800694e:	e001      	b.n	8006954 <UART_SetConfig+0x198>
 8006950:	2310      	movs	r3, #16
 8006952:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a55      	ldr	r2, [pc, #340]	; (8006ab0 <UART_SetConfig+0x2f4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d174      	bne.n	8006a48 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800695e:	7efb      	ldrb	r3, [r7, #27]
 8006960:	2b08      	cmp	r3, #8
 8006962:	d824      	bhi.n	80069ae <UART_SetConfig+0x1f2>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <UART_SetConfig+0x1b0>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006991 	.word	0x08006991
 8006970:	080069af 	.word	0x080069af
 8006974:	08006999 	.word	0x08006999
 8006978:	080069af 	.word	0x080069af
 800697c:	0800699f 	.word	0x0800699f
 8006980:	080069af 	.word	0x080069af
 8006984:	080069af 	.word	0x080069af
 8006988:	080069af 	.word	0x080069af
 800698c:	080069a7 	.word	0x080069a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006990:	f7fc fb2e 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8006994:	6178      	str	r0, [r7, #20]
        break;
 8006996:	e00f      	b.n	80069b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006998:	4b49      	ldr	r3, [pc, #292]	; (8006ac0 <UART_SetConfig+0x304>)
 800699a:	617b      	str	r3, [r7, #20]
        break;
 800699c:	e00c      	b.n	80069b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699e:	f7fc fa91 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 80069a2:	6178      	str	r0, [r7, #20]
        break;
 80069a4:	e008      	b.n	80069b8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069aa:	617b      	str	r3, [r7, #20]
        break;
 80069ac:	e004      	b.n	80069b8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	76bb      	strb	r3, [r7, #26]
        break;
 80069b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8100 	beq.w	8006bc0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d305      	bcc.n	80069dc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d902      	bls.n	80069e2 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	76bb      	strb	r3, [r7, #26]
 80069e0:	e0ee      	b.n	8006bc0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4619      	mov	r1, r3
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	0214      	lsls	r4, r2, #8
 80069f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069f8:	020b      	lsls	r3, r1, #8
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6852      	ldr	r2, [r2, #4]
 80069fe:	0852      	lsrs	r2, r2, #1
 8006a00:	4611      	mov	r1, r2
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	eb13 0b01 	adds.w	fp, r3, r1
 8006a0a:	eb44 0c02 	adc.w	ip, r4, r2
 8006a0e:	4658      	mov	r0, fp
 8006a10:	4661      	mov	r1, ip
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f04f 0400 	mov.w	r4, #0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	f7f9 fe33 	bl	8000688 <__aeabi_uldivmod>
 8006a22:	4603      	mov	r3, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a2e:	d308      	bcc.n	8006a42 <UART_SetConfig+0x286>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a36:	d204      	bcs.n	8006a42 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	e0be      	b.n	8006bc0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	76bb      	strb	r3, [r7, #26]
 8006a46:	e0bb      	b.n	8006bc0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a50:	d169      	bne.n	8006b26 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8006a52:	7efb      	ldrb	r3, [r7, #27]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d835      	bhi.n	8006ac4 <UART_SetConfig+0x308>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x2a4>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006ac5 	.word	0x08006ac5
 8006a70:	08006a9b 	.word	0x08006a9b
 8006a74:	08006ac5 	.word	0x08006ac5
 8006a78:	08006ac5 	.word	0x08006ac5
 8006a7c:	08006ac5 	.word	0x08006ac5
 8006a80:	08006aa3 	.word	0x08006aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a84:	f7fc fab4 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8006a88:	6178      	str	r0, [r7, #20]
        break;
 8006a8a:	e020      	b.n	8006ace <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fc fac6 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8006a90:	6178      	str	r0, [r7, #20]
        break;
 8006a92:	e01c      	b.n	8006ace <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <UART_SetConfig+0x304>)
 8006a96:	617b      	str	r3, [r7, #20]
        break;
 8006a98:	e019      	b.n	8006ace <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fc fa13 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8006a9e:	6178      	str	r0, [r7, #20]
        break;
 8006aa0:	e015      	b.n	8006ace <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa6:	617b      	str	r3, [r7, #20]
        break;
 8006aa8:	e011      	b.n	8006ace <UART_SetConfig+0x312>
 8006aaa:	bf00      	nop
 8006aac:	efff69f3 	.word	0xefff69f3
 8006ab0:	40008000 	.word	0x40008000
 8006ab4:	40013800 	.word	0x40013800
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	76bb      	strb	r3, [r7, #26]
        break;
 8006acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d075      	beq.n	8006bc0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	005a      	lsls	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	441a      	add	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x364>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e04f      	b.n	8006bc0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	76bb      	strb	r3, [r7, #26]
 8006b24:	e04c      	b.n	8006bc0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b26:	7efb      	ldrb	r3, [r7, #27]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d828      	bhi.n	8006b7e <UART_SetConfig+0x3c2>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x378>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b7f 	.word	0x08006b7f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006b7f 	.word	0x08006b7f
 8006b54:	08006b77 	.word	0x08006b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fc fa4a 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	6178      	str	r0, [r7, #20]
        break;
 8006b5e:	e013      	b.n	8006b88 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fc fa5c 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8006b64:	6178      	str	r0, [r7, #20]
        break;
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <UART_SetConfig+0x41c>)
 8006b6a:	617b      	str	r3, [r7, #20]
        break;
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fc f9a9 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8006b72:	6178      	str	r0, [r7, #20]
        break;
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	617b      	str	r3, [r7, #20]
        break;
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	76bb      	strb	r3, [r7, #26]
        break;
 8006b86:	bf00      	nop
    }

    if (pclk != 0U)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085a      	lsrs	r2, r3, #1
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d908      	bls.n	8006bbc <UART_SetConfig+0x400>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d204      	bcs.n	8006bbc <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e001      	b.n	8006bc0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006bcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cda:	d10a      	bne.n	8006cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d2e:	f7fb f861 	bl	8001df4 <HAL_GetTick>
 8006d32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d10e      	bne.n	8006d60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f82a 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e020      	b.n	8006da2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d10e      	bne.n	8006d8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f814 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e00a      	b.n	8006da2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dba:	e05d      	b.n	8006e78 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d059      	beq.n	8006e78 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc4:	f7fb f816 	bl	8001df4 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <UART_WaitOnFlagUntilTimeout+0x30>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d11b      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006de8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e042      	b.n	8006e98 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02b      	beq.n	8006e78 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d123      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0201 	bic.w	r2, r2, #1
 8006e58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e00f      	b.n	8006e98 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d092      	beq.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <__errno>:
 8006ea0:	4b01      	ldr	r3, [pc, #4]	; (8006ea8 <__errno+0x8>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	2000000c 	.word	0x2000000c

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4e0d      	ldr	r6, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1ba4      	subs	r4, r4, r6
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	42a5      	cmp	r5, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4e0b      	ldr	r6, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f001 f972 	bl	80081a8 <_init>
 8006ec4:	1ba4      	subs	r4, r4, r6
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2500      	movs	r5, #0
 8006eca:	42a5      	cmp	r5, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ed4:	4798      	blx	r3
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ede:	4798      	blx	r3
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	0800862c 	.word	0x0800862c
 8006ee8:	0800862c 	.word	0x0800862c
 8006eec:	0800862c 	.word	0x0800862c
 8006ef0:	08008630 	.word	0x08008630

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <siprintf>:
 8006f04:	b40e      	push	{r1, r2, r3}
 8006f06:	b500      	push	{lr}
 8006f08:	b09c      	sub	sp, #112	; 0x70
 8006f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	9006      	str	r0, [sp, #24]
 8006f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f14:	4809      	ldr	r0, [pc, #36]	; (8006f3c <siprintf+0x38>)
 8006f16:	9107      	str	r1, [sp, #28]
 8006f18:	9104      	str	r1, [sp, #16]
 8006f1a:	4909      	ldr	r1, [pc, #36]	; (8006f40 <siprintf+0x3c>)
 8006f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f20:	9105      	str	r1, [sp, #20]
 8006f22:	6800      	ldr	r0, [r0, #0]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	a902      	add	r1, sp, #8
 8006f28:	f000 f866 	bl	8006ff8 <_svfiprintf_r>
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	b01c      	add	sp, #112	; 0x70
 8006f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f38:	b003      	add	sp, #12
 8006f3a:	4770      	bx	lr
 8006f3c:	2000000c 	.word	0x2000000c
 8006f40:	ffff0208 	.word	0xffff0208

08006f44 <__ssputs_r>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	688e      	ldr	r6, [r1, #8]
 8006f4a:	429e      	cmp	r6, r3
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4690      	mov	r8, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	d837      	bhi.n	8006fc6 <__ssputs_r+0x82>
 8006f56:	898a      	ldrh	r2, [r1, #12]
 8006f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f5c:	d031      	beq.n	8006fc2 <__ssputs_r+0x7e>
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	6909      	ldr	r1, [r1, #16]
 8006f62:	1a6f      	subs	r7, r5, r1
 8006f64:	6965      	ldr	r5, [r4, #20]
 8006f66:	2302      	movs	r3, #2
 8006f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f70:	f109 0301 	add.w	r3, r9, #1
 8006f74:	443b      	add	r3, r7
 8006f76:	429d      	cmp	r5, r3
 8006f78:	bf38      	it	cc
 8006f7a:	461d      	movcc	r5, r3
 8006f7c:	0553      	lsls	r3, r2, #21
 8006f7e:	d530      	bpl.n	8006fe2 <__ssputs_r+0x9e>
 8006f80:	4629      	mov	r1, r5
 8006f82:	f000 fb2b 	bl	80075dc <_malloc_r>
 8006f86:	4606      	mov	r6, r0
 8006f88:	b950      	cbnz	r0, 8006fa0 <__ssputs_r+0x5c>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	f8ca 3000 	str.w	r3, [sl]
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa0:	463a      	mov	r2, r7
 8006fa2:	6921      	ldr	r1, [r4, #16]
 8006fa4:	f000 faa8 	bl	80074f8 <memcpy>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	6126      	str	r6, [r4, #16]
 8006fb6:	6165      	str	r5, [r4, #20]
 8006fb8:	443e      	add	r6, r7
 8006fba:	1bed      	subs	r5, r5, r7
 8006fbc:	6026      	str	r6, [r4, #0]
 8006fbe:	60a5      	str	r5, [r4, #8]
 8006fc0:	464e      	mov	r6, r9
 8006fc2:	454e      	cmp	r6, r9
 8006fc4:	d900      	bls.n	8006fc8 <__ssputs_r+0x84>
 8006fc6:	464e      	mov	r6, r9
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4641      	mov	r1, r8
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	f000 fa9e 	bl	800750e <memmove>
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	1b9b      	subs	r3, r3, r6
 8006fd6:	60a3      	str	r3, [r4, #8]
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	441e      	add	r6, r3
 8006fdc:	6026      	str	r6, [r4, #0]
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7dc      	b.n	8006f9c <__ssputs_r+0x58>
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	f000 fb54 	bl	8007690 <_realloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d1e2      	bne.n	8006fb4 <__ssputs_r+0x70>
 8006fee:	6921      	ldr	r1, [r4, #16]
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f000 faa5 	bl	8007540 <_free_r>
 8006ff6:	e7c8      	b.n	8006f8a <__ssputs_r+0x46>

08006ff8 <_svfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	898b      	ldrh	r3, [r1, #12]
 8007000:	061f      	lsls	r7, r3, #24
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4680      	mov	r8, r0
 8007006:	460c      	mov	r4, r1
 8007008:	4616      	mov	r6, r2
 800700a:	d50f      	bpl.n	800702c <_svfiprintf_r+0x34>
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	b96b      	cbnz	r3, 800702c <_svfiprintf_r+0x34>
 8007010:	2140      	movs	r1, #64	; 0x40
 8007012:	f000 fae3 	bl	80075dc <_malloc_r>
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	6120      	str	r0, [r4, #16]
 800701a:	b928      	cbnz	r0, 8007028 <_svfiprintf_r+0x30>
 800701c:	230c      	movs	r3, #12
 800701e:	f8c8 3000 	str.w	r3, [r8]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	e0c8      	b.n	80071ba <_svfiprintf_r+0x1c2>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	6163      	str	r3, [r4, #20]
 800702c:	2300      	movs	r3, #0
 800702e:	9309      	str	r3, [sp, #36]	; 0x24
 8007030:	2320      	movs	r3, #32
 8007032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007036:	2330      	movs	r3, #48	; 0x30
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703c:	9503      	str	r5, [sp, #12]
 800703e:	f04f 0b01 	mov.w	fp, #1
 8007042:	4637      	mov	r7, r6
 8007044:	463d      	mov	r5, r7
 8007046:	f815 3b01 	ldrb.w	r3, [r5], #1
 800704a:	b10b      	cbz	r3, 8007050 <_svfiprintf_r+0x58>
 800704c:	2b25      	cmp	r3, #37	; 0x25
 800704e:	d13e      	bne.n	80070ce <_svfiprintf_r+0xd6>
 8007050:	ebb7 0a06 	subs.w	sl, r7, r6
 8007054:	d00b      	beq.n	800706e <_svfiprintf_r+0x76>
 8007056:	4653      	mov	r3, sl
 8007058:	4632      	mov	r2, r6
 800705a:	4621      	mov	r1, r4
 800705c:	4640      	mov	r0, r8
 800705e:	f7ff ff71 	bl	8006f44 <__ssputs_r>
 8007062:	3001      	adds	r0, #1
 8007064:	f000 80a4 	beq.w	80071b0 <_svfiprintf_r+0x1b8>
 8007068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706a:	4453      	add	r3, sl
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	783b      	ldrb	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 809d 	beq.w	80071b0 <_svfiprintf_r+0x1b8>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007088:	931a      	str	r3, [sp, #104]	; 0x68
 800708a:	462f      	mov	r7, r5
 800708c:	2205      	movs	r2, #5
 800708e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007092:	4850      	ldr	r0, [pc, #320]	; (80071d4 <_svfiprintf_r+0x1dc>)
 8007094:	f7f9 f89c 	bl	80001d0 <memchr>
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	b9d0      	cbnz	r0, 80070d2 <_svfiprintf_r+0xda>
 800709c:	06d9      	lsls	r1, r3, #27
 800709e:	bf44      	itt	mi
 80070a0:	2220      	movmi	r2, #32
 80070a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070a6:	071a      	lsls	r2, r3, #28
 80070a8:	bf44      	itt	mi
 80070aa:	222b      	movmi	r2, #43	; 0x2b
 80070ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070b0:	782a      	ldrb	r2, [r5, #0]
 80070b2:	2a2a      	cmp	r2, #42	; 0x2a
 80070b4:	d015      	beq.n	80070e2 <_svfiprintf_r+0xea>
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	462f      	mov	r7, r5
 80070ba:	2000      	movs	r0, #0
 80070bc:	250a      	movs	r5, #10
 80070be:	4639      	mov	r1, r7
 80070c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c4:	3b30      	subs	r3, #48	; 0x30
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d94d      	bls.n	8007166 <_svfiprintf_r+0x16e>
 80070ca:	b1b8      	cbz	r0, 80070fc <_svfiprintf_r+0x104>
 80070cc:	e00f      	b.n	80070ee <_svfiprintf_r+0xf6>
 80070ce:	462f      	mov	r7, r5
 80070d0:	e7b8      	b.n	8007044 <_svfiprintf_r+0x4c>
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <_svfiprintf_r+0x1dc>)
 80070d4:	1a80      	subs	r0, r0, r2
 80070d6:	fa0b f000 	lsl.w	r0, fp, r0
 80070da:	4318      	orrs	r0, r3
 80070dc:	9004      	str	r0, [sp, #16]
 80070de:	463d      	mov	r5, r7
 80070e0:	e7d3      	b.n	800708a <_svfiprintf_r+0x92>
 80070e2:	9a03      	ldr	r2, [sp, #12]
 80070e4:	1d11      	adds	r1, r2, #4
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	9103      	str	r1, [sp, #12]
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	db01      	blt.n	80070f2 <_svfiprintf_r+0xfa>
 80070ee:	9207      	str	r2, [sp, #28]
 80070f0:	e004      	b.n	80070fc <_svfiprintf_r+0x104>
 80070f2:	4252      	negs	r2, r2
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	9207      	str	r2, [sp, #28]
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	783b      	ldrb	r3, [r7, #0]
 80070fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007100:	d10c      	bne.n	800711c <_svfiprintf_r+0x124>
 8007102:	787b      	ldrb	r3, [r7, #1]
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d133      	bne.n	8007170 <_svfiprintf_r+0x178>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfb8      	it	lt
 8007114:	f04f 33ff 	movlt.w	r3, #4294967295
 8007118:	3702      	adds	r7, #2
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	4d2e      	ldr	r5, [pc, #184]	; (80071d8 <_svfiprintf_r+0x1e0>)
 800711e:	7839      	ldrb	r1, [r7, #0]
 8007120:	2203      	movs	r2, #3
 8007122:	4628      	mov	r0, r5
 8007124:	f7f9 f854 	bl	80001d0 <memchr>
 8007128:	b138      	cbz	r0, 800713a <_svfiprintf_r+0x142>
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	1b40      	subs	r0, r0, r5
 800712e:	fa03 f000 	lsl.w	r0, r3, r0
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4303      	orrs	r3, r0
 8007136:	3701      	adds	r7, #1
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	7839      	ldrb	r1, [r7, #0]
 800713c:	4827      	ldr	r0, [pc, #156]	; (80071dc <_svfiprintf_r+0x1e4>)
 800713e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007142:	2206      	movs	r2, #6
 8007144:	1c7e      	adds	r6, r7, #1
 8007146:	f7f9 f843 	bl	80001d0 <memchr>
 800714a:	2800      	cmp	r0, #0
 800714c:	d038      	beq.n	80071c0 <_svfiprintf_r+0x1c8>
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <_svfiprintf_r+0x1e8>)
 8007150:	bb13      	cbnz	r3, 8007198 <_svfiprintf_r+0x1a0>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	3307      	adds	r3, #7
 8007156:	f023 0307 	bic.w	r3, r3, #7
 800715a:	3308      	adds	r3, #8
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	444b      	add	r3, r9
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
 8007164:	e76d      	b.n	8007042 <_svfiprintf_r+0x4a>
 8007166:	fb05 3202 	mla	r2, r5, r2, r3
 800716a:	2001      	movs	r0, #1
 800716c:	460f      	mov	r7, r1
 800716e:	e7a6      	b.n	80070be <_svfiprintf_r+0xc6>
 8007170:	2300      	movs	r3, #0
 8007172:	3701      	adds	r7, #1
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	4619      	mov	r1, r3
 8007178:	250a      	movs	r5, #10
 800717a:	4638      	mov	r0, r7
 800717c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007180:	3a30      	subs	r2, #48	; 0x30
 8007182:	2a09      	cmp	r2, #9
 8007184:	d903      	bls.n	800718e <_svfiprintf_r+0x196>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0c8      	beq.n	800711c <_svfiprintf_r+0x124>
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	e7c6      	b.n	800711c <_svfiprintf_r+0x124>
 800718e:	fb05 2101 	mla	r1, r5, r1, r2
 8007192:	2301      	movs	r3, #1
 8007194:	4607      	mov	r7, r0
 8007196:	e7f0      	b.n	800717a <_svfiprintf_r+0x182>
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4622      	mov	r2, r4
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <_svfiprintf_r+0x1ec>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4640      	mov	r0, r8
 80071a4:	f3af 8000 	nop.w
 80071a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071ac:	4681      	mov	r9, r0
 80071ae:	d1d6      	bne.n	800715e <_svfiprintf_r+0x166>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	065b      	lsls	r3, r3, #25
 80071b4:	f53f af35 	bmi.w	8007022 <_svfiprintf_r+0x2a>
 80071b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ba:	b01d      	add	sp, #116	; 0x74
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4622      	mov	r2, r4
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <_svfiprintf_r+0x1ec>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4640      	mov	r0, r8
 80071cc:	f000 f882 	bl	80072d4 <_printf_i>
 80071d0:	e7ea      	b.n	80071a8 <_svfiprintf_r+0x1b0>
 80071d2:	bf00      	nop
 80071d4:	08008220 	.word	0x08008220
 80071d8:	08008226 	.word	0x08008226
 80071dc:	0800822a 	.word	0x0800822a
 80071e0:	00000000 	.word	0x00000000
 80071e4:	08006f45 	.word	0x08006f45

080071e8 <_printf_common>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	4691      	mov	r9, r2
 80071ee:	461f      	mov	r7, r3
 80071f0:	688a      	ldr	r2, [r1, #8]
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	bfb8      	it	lt
 80071fc:	4613      	movlt	r3, r2
 80071fe:	f8c9 3000 	str.w	r3, [r9]
 8007202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007206:	4606      	mov	r6, r0
 8007208:	460c      	mov	r4, r1
 800720a:	b112      	cbz	r2, 8007212 <_printf_common+0x2a>
 800720c:	3301      	adds	r3, #1
 800720e:	f8c9 3000 	str.w	r3, [r9]
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	0699      	lsls	r1, r3, #26
 8007216:	bf42      	ittt	mi
 8007218:	f8d9 3000 	ldrmi.w	r3, [r9]
 800721c:	3302      	addmi	r3, #2
 800721e:	f8c9 3000 	strmi.w	r3, [r9]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	f015 0506 	ands.w	r5, r5, #6
 8007228:	d107      	bne.n	800723a <_printf_common+0x52>
 800722a:	f104 0a19 	add.w	sl, r4, #25
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	f8d9 2000 	ldr.w	r2, [r9]
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	42ab      	cmp	r3, r5
 8007238:	dc28      	bgt.n	800728c <_printf_common+0xa4>
 800723a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	3300      	adds	r3, #0
 8007242:	bf18      	it	ne
 8007244:	2301      	movne	r3, #1
 8007246:	0692      	lsls	r2, r2, #26
 8007248:	d42d      	bmi.n	80072a6 <_printf_common+0xbe>
 800724a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800724e:	4639      	mov	r1, r7
 8007250:	4630      	mov	r0, r6
 8007252:	47c0      	blx	r8
 8007254:	3001      	adds	r0, #1
 8007256:	d020      	beq.n	800729a <_printf_common+0xb2>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	68e5      	ldr	r5, [r4, #12]
 800725c:	f8d9 2000 	ldr.w	r2, [r9]
 8007260:	f003 0306 	and.w	r3, r3, #6
 8007264:	2b04      	cmp	r3, #4
 8007266:	bf08      	it	eq
 8007268:	1aad      	subeq	r5, r5, r2
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	bf0c      	ite	eq
 8007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007274:	2500      	movne	r5, #0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfc4      	itt	gt
 800727a:	1a9b      	subgt	r3, r3, r2
 800727c:	18ed      	addgt	r5, r5, r3
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	341a      	adds	r4, #26
 8007284:	454d      	cmp	r5, r9
 8007286:	d11a      	bne.n	80072be <_printf_common+0xd6>
 8007288:	2000      	movs	r0, #0
 800728a:	e008      	b.n	800729e <_printf_common+0xb6>
 800728c:	2301      	movs	r3, #1
 800728e:	4652      	mov	r2, sl
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d103      	bne.n	80072a2 <_printf_common+0xba>
 800729a:	f04f 30ff 	mov.w	r0, #4294967295
 800729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a2:	3501      	adds	r5, #1
 80072a4:	e7c3      	b.n	800722e <_printf_common+0x46>
 80072a6:	18e1      	adds	r1, r4, r3
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	2030      	movs	r0, #48	; 0x30
 80072ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072b0:	4422      	add	r2, r4
 80072b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ba:	3302      	adds	r3, #2
 80072bc:	e7c5      	b.n	800724a <_printf_common+0x62>
 80072be:	2301      	movs	r3, #1
 80072c0:	4622      	mov	r2, r4
 80072c2:	4639      	mov	r1, r7
 80072c4:	4630      	mov	r0, r6
 80072c6:	47c0      	blx	r8
 80072c8:	3001      	adds	r0, #1
 80072ca:	d0e6      	beq.n	800729a <_printf_common+0xb2>
 80072cc:	f109 0901 	add.w	r9, r9, #1
 80072d0:	e7d8      	b.n	8007284 <_printf_common+0x9c>
	...

080072d4 <_printf_i>:
 80072d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80072dc:	460c      	mov	r4, r1
 80072de:	7e09      	ldrb	r1, [r1, #24]
 80072e0:	b085      	sub	sp, #20
 80072e2:	296e      	cmp	r1, #110	; 0x6e
 80072e4:	4617      	mov	r7, r2
 80072e6:	4606      	mov	r6, r0
 80072e8:	4698      	mov	r8, r3
 80072ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ec:	f000 80b3 	beq.w	8007456 <_printf_i+0x182>
 80072f0:	d822      	bhi.n	8007338 <_printf_i+0x64>
 80072f2:	2963      	cmp	r1, #99	; 0x63
 80072f4:	d036      	beq.n	8007364 <_printf_i+0x90>
 80072f6:	d80a      	bhi.n	800730e <_printf_i+0x3a>
 80072f8:	2900      	cmp	r1, #0
 80072fa:	f000 80b9 	beq.w	8007470 <_printf_i+0x19c>
 80072fe:	2958      	cmp	r1, #88	; 0x58
 8007300:	f000 8083 	beq.w	800740a <_printf_i+0x136>
 8007304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007308:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800730c:	e032      	b.n	8007374 <_printf_i+0xa0>
 800730e:	2964      	cmp	r1, #100	; 0x64
 8007310:	d001      	beq.n	8007316 <_printf_i+0x42>
 8007312:	2969      	cmp	r1, #105	; 0x69
 8007314:	d1f6      	bne.n	8007304 <_printf_i+0x30>
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	0605      	lsls	r5, r0, #24
 800731c:	f103 0104 	add.w	r1, r3, #4
 8007320:	d52a      	bpl.n	8007378 <_printf_i+0xa4>
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	da03      	bge.n	8007332 <_printf_i+0x5e>
 800732a:	222d      	movs	r2, #45	; 0x2d
 800732c:	425b      	negs	r3, r3
 800732e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007332:	486f      	ldr	r0, [pc, #444]	; (80074f0 <_printf_i+0x21c>)
 8007334:	220a      	movs	r2, #10
 8007336:	e039      	b.n	80073ac <_printf_i+0xd8>
 8007338:	2973      	cmp	r1, #115	; 0x73
 800733a:	f000 809d 	beq.w	8007478 <_printf_i+0x1a4>
 800733e:	d808      	bhi.n	8007352 <_printf_i+0x7e>
 8007340:	296f      	cmp	r1, #111	; 0x6f
 8007342:	d020      	beq.n	8007386 <_printf_i+0xb2>
 8007344:	2970      	cmp	r1, #112	; 0x70
 8007346:	d1dd      	bne.n	8007304 <_printf_i+0x30>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f043 0320 	orr.w	r3, r3, #32
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	e003      	b.n	800735a <_printf_i+0x86>
 8007352:	2975      	cmp	r1, #117	; 0x75
 8007354:	d017      	beq.n	8007386 <_printf_i+0xb2>
 8007356:	2978      	cmp	r1, #120	; 0x78
 8007358:	d1d4      	bne.n	8007304 <_printf_i+0x30>
 800735a:	2378      	movs	r3, #120	; 0x78
 800735c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007360:	4864      	ldr	r0, [pc, #400]	; (80074f4 <_printf_i+0x220>)
 8007362:	e055      	b.n	8007410 <_printf_i+0x13c>
 8007364:	6813      	ldr	r3, [r2, #0]
 8007366:	1d19      	adds	r1, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6011      	str	r1, [r2, #0]
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007374:	2301      	movs	r3, #1
 8007376:	e08c      	b.n	8007492 <_printf_i+0x1be>
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6011      	str	r1, [r2, #0]
 800737c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007380:	bf18      	it	ne
 8007382:	b21b      	sxthne	r3, r3
 8007384:	e7cf      	b.n	8007326 <_printf_i+0x52>
 8007386:	6813      	ldr	r3, [r2, #0]
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	1d18      	adds	r0, r3, #4
 800738c:	6010      	str	r0, [r2, #0]
 800738e:	0628      	lsls	r0, r5, #24
 8007390:	d501      	bpl.n	8007396 <_printf_i+0xc2>
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	e002      	b.n	800739c <_printf_i+0xc8>
 8007396:	0668      	lsls	r0, r5, #25
 8007398:	d5fb      	bpl.n	8007392 <_printf_i+0xbe>
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	4854      	ldr	r0, [pc, #336]	; (80074f0 <_printf_i+0x21c>)
 800739e:	296f      	cmp	r1, #111	; 0x6f
 80073a0:	bf14      	ite	ne
 80073a2:	220a      	movne	r2, #10
 80073a4:	2208      	moveq	r2, #8
 80073a6:	2100      	movs	r1, #0
 80073a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ac:	6865      	ldr	r5, [r4, #4]
 80073ae:	60a5      	str	r5, [r4, #8]
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	f2c0 8095 	blt.w	80074e0 <_printf_i+0x20c>
 80073b6:	6821      	ldr	r1, [r4, #0]
 80073b8:	f021 0104 	bic.w	r1, r1, #4
 80073bc:	6021      	str	r1, [r4, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d13d      	bne.n	800743e <_printf_i+0x16a>
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	f040 808e 	bne.w	80074e4 <_printf_i+0x210>
 80073c8:	4665      	mov	r5, ip
 80073ca:	2a08      	cmp	r2, #8
 80073cc:	d10b      	bne.n	80073e6 <_printf_i+0x112>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	07db      	lsls	r3, r3, #31
 80073d2:	d508      	bpl.n	80073e6 <_printf_i+0x112>
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	6862      	ldr	r2, [r4, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	bfde      	ittt	le
 80073dc:	2330      	movle	r3, #48	; 0x30
 80073de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073e6:	ebac 0305 	sub.w	r3, ip, r5
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	f8cd 8000 	str.w	r8, [sp]
 80073f0:	463b      	mov	r3, r7
 80073f2:	aa03      	add	r2, sp, #12
 80073f4:	4621      	mov	r1, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff fef6 	bl	80071e8 <_printf_common>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d14d      	bne.n	800749c <_printf_i+0x1c8>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b005      	add	sp, #20
 8007406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740a:	4839      	ldr	r0, [pc, #228]	; (80074f0 <_printf_i+0x21c>)
 800740c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007410:	6813      	ldr	r3, [r2, #0]
 8007412:	6821      	ldr	r1, [r4, #0]
 8007414:	1d1d      	adds	r5, r3, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6015      	str	r5, [r2, #0]
 800741a:	060a      	lsls	r2, r1, #24
 800741c:	d50b      	bpl.n	8007436 <_printf_i+0x162>
 800741e:	07ca      	lsls	r2, r1, #31
 8007420:	bf44      	itt	mi
 8007422:	f041 0120 	orrmi.w	r1, r1, #32
 8007426:	6021      	strmi	r1, [r4, #0]
 8007428:	b91b      	cbnz	r3, 8007432 <_printf_i+0x15e>
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	f022 0220 	bic.w	r2, r2, #32
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	2210      	movs	r2, #16
 8007434:	e7b7      	b.n	80073a6 <_printf_i+0xd2>
 8007436:	064d      	lsls	r5, r1, #25
 8007438:	bf48      	it	mi
 800743a:	b29b      	uxthmi	r3, r3
 800743c:	e7ef      	b.n	800741e <_printf_i+0x14a>
 800743e:	4665      	mov	r5, ip
 8007440:	fbb3 f1f2 	udiv	r1, r3, r2
 8007444:	fb02 3311 	mls	r3, r2, r1, r3
 8007448:	5cc3      	ldrb	r3, [r0, r3]
 800744a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800744e:	460b      	mov	r3, r1
 8007450:	2900      	cmp	r1, #0
 8007452:	d1f5      	bne.n	8007440 <_printf_i+0x16c>
 8007454:	e7b9      	b.n	80073ca <_printf_i+0xf6>
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	6825      	ldr	r5, [r4, #0]
 800745a:	6961      	ldr	r1, [r4, #20]
 800745c:	1d18      	adds	r0, r3, #4
 800745e:	6010      	str	r0, [r2, #0]
 8007460:	0628      	lsls	r0, r5, #24
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	d501      	bpl.n	800746a <_printf_i+0x196>
 8007466:	6019      	str	r1, [r3, #0]
 8007468:	e002      	b.n	8007470 <_printf_i+0x19c>
 800746a:	066a      	lsls	r2, r5, #25
 800746c:	d5fb      	bpl.n	8007466 <_printf_i+0x192>
 800746e:	8019      	strh	r1, [r3, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	4665      	mov	r5, ip
 8007476:	e7b9      	b.n	80073ec <_printf_i+0x118>
 8007478:	6813      	ldr	r3, [r2, #0]
 800747a:	1d19      	adds	r1, r3, #4
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	681d      	ldr	r5, [r3, #0]
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	2100      	movs	r1, #0
 8007484:	4628      	mov	r0, r5
 8007486:	f7f8 fea3 	bl	80001d0 <memchr>
 800748a:	b108      	cbz	r0, 8007490 <_printf_i+0x1bc>
 800748c:	1b40      	subs	r0, r0, r5
 800748e:	6060      	str	r0, [r4, #4]
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	2300      	movs	r3, #0
 8007496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749a:	e7a7      	b.n	80073ec <_printf_i+0x118>
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	462a      	mov	r2, r5
 80074a0:	4639      	mov	r1, r7
 80074a2:	4630      	mov	r0, r6
 80074a4:	47c0      	blx	r8
 80074a6:	3001      	adds	r0, #1
 80074a8:	d0aa      	beq.n	8007400 <_printf_i+0x12c>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	079b      	lsls	r3, r3, #30
 80074ae:	d413      	bmi.n	80074d8 <_printf_i+0x204>
 80074b0:	68e0      	ldr	r0, [r4, #12]
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	4298      	cmp	r0, r3
 80074b6:	bfb8      	it	lt
 80074b8:	4618      	movlt	r0, r3
 80074ba:	e7a3      	b.n	8007404 <_printf_i+0x130>
 80074bc:	2301      	movs	r3, #1
 80074be:	464a      	mov	r2, r9
 80074c0:	4639      	mov	r1, r7
 80074c2:	4630      	mov	r0, r6
 80074c4:	47c0      	blx	r8
 80074c6:	3001      	adds	r0, #1
 80074c8:	d09a      	beq.n	8007400 <_printf_i+0x12c>
 80074ca:	3501      	adds	r5, #1
 80074cc:	68e3      	ldr	r3, [r4, #12]
 80074ce:	9a03      	ldr	r2, [sp, #12]
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	42ab      	cmp	r3, r5
 80074d4:	dcf2      	bgt.n	80074bc <_printf_i+0x1e8>
 80074d6:	e7eb      	b.n	80074b0 <_printf_i+0x1dc>
 80074d8:	2500      	movs	r5, #0
 80074da:	f104 0919 	add.w	r9, r4, #25
 80074de:	e7f5      	b.n	80074cc <_printf_i+0x1f8>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ac      	bne.n	800743e <_printf_i+0x16a>
 80074e4:	7803      	ldrb	r3, [r0, #0]
 80074e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ee:	e76c      	b.n	80073ca <_printf_i+0xf6>
 80074f0:	08008231 	.word	0x08008231
 80074f4:	08008242 	.word	0x08008242

080074f8 <memcpy>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	1e43      	subs	r3, r0, #1
 80074fc:	440a      	add	r2, r1
 80074fe:	4291      	cmp	r1, r2
 8007500:	d100      	bne.n	8007504 <memcpy+0xc>
 8007502:	bd10      	pop	{r4, pc}
 8007504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800750c:	e7f7      	b.n	80074fe <memcpy+0x6>

0800750e <memmove>:
 800750e:	4288      	cmp	r0, r1
 8007510:	b510      	push	{r4, lr}
 8007512:	eb01 0302 	add.w	r3, r1, r2
 8007516:	d807      	bhi.n	8007528 <memmove+0x1a>
 8007518:	1e42      	subs	r2, r0, #1
 800751a:	4299      	cmp	r1, r3
 800751c:	d00a      	beq.n	8007534 <memmove+0x26>
 800751e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007522:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007526:	e7f8      	b.n	800751a <memmove+0xc>
 8007528:	4283      	cmp	r3, r0
 800752a:	d9f5      	bls.n	8007518 <memmove+0xa>
 800752c:	1881      	adds	r1, r0, r2
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	42d3      	cmn	r3, r2
 8007532:	d100      	bne.n	8007536 <memmove+0x28>
 8007534:	bd10      	pop	{r4, pc}
 8007536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800753e:	e7f7      	b.n	8007530 <memmove+0x22>

08007540 <_free_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	2900      	cmp	r1, #0
 8007546:	d045      	beq.n	80075d4 <_free_r+0x94>
 8007548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754c:	1f0c      	subs	r4, r1, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb8      	it	lt
 8007552:	18e4      	addlt	r4, r4, r3
 8007554:	f000 f8d2 	bl	80076fc <__malloc_lock>
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <_free_r+0x98>)
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	4610      	mov	r0, r2
 800755e:	b933      	cbnz	r3, 800756e <_free_r+0x2e>
 8007560:	6063      	str	r3, [r4, #4]
 8007562:	6014      	str	r4, [r2, #0]
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756a:	f000 b8c8 	b.w	80076fe <__malloc_unlock>
 800756e:	42a3      	cmp	r3, r4
 8007570:	d90c      	bls.n	800758c <_free_r+0x4c>
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	1862      	adds	r2, r4, r1
 8007576:	4293      	cmp	r3, r2
 8007578:	bf04      	itt	eq
 800757a:	681a      	ldreq	r2, [r3, #0]
 800757c:	685b      	ldreq	r3, [r3, #4]
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	bf04      	itt	eq
 8007582:	1852      	addeq	r2, r2, r1
 8007584:	6022      	streq	r2, [r4, #0]
 8007586:	6004      	str	r4, [r0, #0]
 8007588:	e7ec      	b.n	8007564 <_free_r+0x24>
 800758a:	4613      	mov	r3, r2
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	b10a      	cbz	r2, 8007594 <_free_r+0x54>
 8007590:	42a2      	cmp	r2, r4
 8007592:	d9fa      	bls.n	800758a <_free_r+0x4a>
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	1858      	adds	r0, r3, r1
 8007598:	42a0      	cmp	r0, r4
 800759a:	d10b      	bne.n	80075b4 <_free_r+0x74>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	4401      	add	r1, r0
 80075a0:	1858      	adds	r0, r3, r1
 80075a2:	4282      	cmp	r2, r0
 80075a4:	6019      	str	r1, [r3, #0]
 80075a6:	d1dd      	bne.n	8007564 <_free_r+0x24>
 80075a8:	6810      	ldr	r0, [r2, #0]
 80075aa:	6852      	ldr	r2, [r2, #4]
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	4401      	add	r1, r0
 80075b0:	6019      	str	r1, [r3, #0]
 80075b2:	e7d7      	b.n	8007564 <_free_r+0x24>
 80075b4:	d902      	bls.n	80075bc <_free_r+0x7c>
 80075b6:	230c      	movs	r3, #12
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	e7d3      	b.n	8007564 <_free_r+0x24>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	1821      	adds	r1, r4, r0
 80075c0:	428a      	cmp	r2, r1
 80075c2:	bf04      	itt	eq
 80075c4:	6811      	ldreq	r1, [r2, #0]
 80075c6:	6852      	ldreq	r2, [r2, #4]
 80075c8:	6062      	str	r2, [r4, #4]
 80075ca:	bf04      	itt	eq
 80075cc:	1809      	addeq	r1, r1, r0
 80075ce:	6021      	streq	r1, [r4, #0]
 80075d0:	605c      	str	r4, [r3, #4]
 80075d2:	e7c7      	b.n	8007564 <_free_r+0x24>
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	bf00      	nop
 80075d8:	20000094 	.word	0x20000094

080075dc <_malloc_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	1ccd      	adds	r5, r1, #3
 80075e0:	f025 0503 	bic.w	r5, r5, #3
 80075e4:	3508      	adds	r5, #8
 80075e6:	2d0c      	cmp	r5, #12
 80075e8:	bf38      	it	cc
 80075ea:	250c      	movcc	r5, #12
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	db01      	blt.n	80075f6 <_malloc_r+0x1a>
 80075f2:	42a9      	cmp	r1, r5
 80075f4:	d903      	bls.n	80075fe <_malloc_r+0x22>
 80075f6:	230c      	movs	r3, #12
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	2000      	movs	r0, #0
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	f000 f87d 	bl	80076fc <__malloc_lock>
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <_malloc_r+0xac>)
 8007604:	6814      	ldr	r4, [r2, #0]
 8007606:	4621      	mov	r1, r4
 8007608:	b991      	cbnz	r1, 8007630 <_malloc_r+0x54>
 800760a:	4c20      	ldr	r4, [pc, #128]	; (800768c <_malloc_r+0xb0>)
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	b91b      	cbnz	r3, 8007618 <_malloc_r+0x3c>
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f863 	bl	80076dc <_sbrk_r>
 8007616:	6020      	str	r0, [r4, #0]
 8007618:	4629      	mov	r1, r5
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f85e 	bl	80076dc <_sbrk_r>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d124      	bne.n	800766e <_malloc_r+0x92>
 8007624:	230c      	movs	r3, #12
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f868 	bl	80076fe <__malloc_unlock>
 800762e:	e7e4      	b.n	80075fa <_malloc_r+0x1e>
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	1b5b      	subs	r3, r3, r5
 8007634:	d418      	bmi.n	8007668 <_malloc_r+0x8c>
 8007636:	2b0b      	cmp	r3, #11
 8007638:	d90f      	bls.n	800765a <_malloc_r+0x7e>
 800763a:	600b      	str	r3, [r1, #0]
 800763c:	50cd      	str	r5, [r1, r3]
 800763e:	18cc      	adds	r4, r1, r3
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f85c 	bl	80076fe <__malloc_unlock>
 8007646:	f104 000b 	add.w	r0, r4, #11
 800764a:	1d23      	adds	r3, r4, #4
 800764c:	f020 0007 	bic.w	r0, r0, #7
 8007650:	1ac3      	subs	r3, r0, r3
 8007652:	d0d3      	beq.n	80075fc <_malloc_r+0x20>
 8007654:	425a      	negs	r2, r3
 8007656:	50e2      	str	r2, [r4, r3]
 8007658:	e7d0      	b.n	80075fc <_malloc_r+0x20>
 800765a:	428c      	cmp	r4, r1
 800765c:	684b      	ldr	r3, [r1, #4]
 800765e:	bf16      	itet	ne
 8007660:	6063      	strne	r3, [r4, #4]
 8007662:	6013      	streq	r3, [r2, #0]
 8007664:	460c      	movne	r4, r1
 8007666:	e7eb      	b.n	8007640 <_malloc_r+0x64>
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	e7cc      	b.n	8007608 <_malloc_r+0x2c>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d005      	beq.n	8007684 <_malloc_r+0xa8>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4630      	mov	r0, r6
 800767c:	f000 f82e 	bl	80076dc <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d0cf      	beq.n	8007624 <_malloc_r+0x48>
 8007684:	6025      	str	r5, [r4, #0]
 8007686:	e7db      	b.n	8007640 <_malloc_r+0x64>
 8007688:	20000094 	.word	0x20000094
 800768c:	20000098 	.word	0x20000098

08007690 <_realloc_r>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	4607      	mov	r7, r0
 8007694:	4614      	mov	r4, r2
 8007696:	460e      	mov	r6, r1
 8007698:	b921      	cbnz	r1, 80076a4 <_realloc_r+0x14>
 800769a:	4611      	mov	r1, r2
 800769c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076a0:	f7ff bf9c 	b.w	80075dc <_malloc_r>
 80076a4:	b922      	cbnz	r2, 80076b0 <_realloc_r+0x20>
 80076a6:	f7ff ff4b 	bl	8007540 <_free_r>
 80076aa:	4625      	mov	r5, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b0:	f000 f826 	bl	8007700 <_malloc_usable_size_r>
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d20f      	bcs.n	80076d8 <_realloc_r+0x48>
 80076b8:	4621      	mov	r1, r4
 80076ba:	4638      	mov	r0, r7
 80076bc:	f7ff ff8e 	bl	80075dc <_malloc_r>
 80076c0:	4605      	mov	r5, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d0f2      	beq.n	80076ac <_realloc_r+0x1c>
 80076c6:	4631      	mov	r1, r6
 80076c8:	4622      	mov	r2, r4
 80076ca:	f7ff ff15 	bl	80074f8 <memcpy>
 80076ce:	4631      	mov	r1, r6
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ff35 	bl	8007540 <_free_r>
 80076d6:	e7e9      	b.n	80076ac <_realloc_r+0x1c>
 80076d8:	4635      	mov	r5, r6
 80076da:	e7e7      	b.n	80076ac <_realloc_r+0x1c>

080076dc <_sbrk_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4c06      	ldr	r4, [pc, #24]	; (80076f8 <_sbrk_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4605      	mov	r5, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	f7fa fa86 	bl	8001bf8 <_sbrk>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_sbrk_r+0x1a>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_sbrk_r+0x1a>
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20000308 	.word	0x20000308

080076fc <__malloc_lock>:
 80076fc:	4770      	bx	lr

080076fe <__malloc_unlock>:
 80076fe:	4770      	bx	lr

08007700 <_malloc_usable_size_r>:
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f18      	subs	r0, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfbc      	itt	lt
 800770a:	580b      	ldrlt	r3, [r1, r0]
 800770c:	18c0      	addlt	r0, r0, r3
 800770e:	4770      	bx	lr

08007710 <sinf>:
 8007710:	ee10 3a10 	vmov	r3, s0
 8007714:	b507      	push	{r0, r1, r2, lr}
 8007716:	4a1d      	ldr	r2, [pc, #116]	; (800778c <sinf+0x7c>)
 8007718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800771c:	4293      	cmp	r3, r2
 800771e:	dc05      	bgt.n	800772c <sinf+0x1c>
 8007720:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007790 <sinf+0x80>
 8007724:	2000      	movs	r0, #0
 8007726:	f000 fc41 	bl	8007fac <__kernel_sinf>
 800772a:	e004      	b.n	8007736 <sinf+0x26>
 800772c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007730:	db04      	blt.n	800773c <sinf+0x2c>
 8007732:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007736:	b003      	add	sp, #12
 8007738:	f85d fb04 	ldr.w	pc, [sp], #4
 800773c:	4668      	mov	r0, sp
 800773e:	f000 f829 	bl	8007794 <__ieee754_rem_pio2f>
 8007742:	f000 0003 	and.w	r0, r0, #3
 8007746:	2801      	cmp	r0, #1
 8007748:	d008      	beq.n	800775c <sinf+0x4c>
 800774a:	2802      	cmp	r0, #2
 800774c:	d00d      	beq.n	800776a <sinf+0x5a>
 800774e:	b9b0      	cbnz	r0, 800777e <sinf+0x6e>
 8007750:	2001      	movs	r0, #1
 8007752:	eddd 0a01 	vldr	s1, [sp, #4]
 8007756:	ed9d 0a00 	vldr	s0, [sp]
 800775a:	e7e4      	b.n	8007726 <sinf+0x16>
 800775c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007760:	ed9d 0a00 	vldr	s0, [sp]
 8007764:	f000 f942 	bl	80079ec <__kernel_cosf>
 8007768:	e7e5      	b.n	8007736 <sinf+0x26>
 800776a:	2001      	movs	r0, #1
 800776c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007770:	ed9d 0a00 	vldr	s0, [sp]
 8007774:	f000 fc1a 	bl	8007fac <__kernel_sinf>
 8007778:	eeb1 0a40 	vneg.f32	s0, s0
 800777c:	e7db      	b.n	8007736 <sinf+0x26>
 800777e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007782:	ed9d 0a00 	vldr	s0, [sp]
 8007786:	f000 f931 	bl	80079ec <__kernel_cosf>
 800778a:	e7f5      	b.n	8007778 <sinf+0x68>
 800778c:	3f490fd8 	.word	0x3f490fd8
 8007790:	00000000 	.word	0x00000000

08007794 <__ieee754_rem_pio2f>:
 8007794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007796:	ee10 6a10 	vmov	r6, s0
 800779a:	4b86      	ldr	r3, [pc, #536]	; (80079b4 <__ieee754_rem_pio2f+0x220>)
 800779c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80077a0:	429c      	cmp	r4, r3
 80077a2:	b087      	sub	sp, #28
 80077a4:	4605      	mov	r5, r0
 80077a6:	dc05      	bgt.n	80077b4 <__ieee754_rem_pio2f+0x20>
 80077a8:	2300      	movs	r3, #0
 80077aa:	ed85 0a00 	vstr	s0, [r5]
 80077ae:	6043      	str	r3, [r0, #4]
 80077b0:	2000      	movs	r0, #0
 80077b2:	e020      	b.n	80077f6 <__ieee754_rem_pio2f+0x62>
 80077b4:	4b80      	ldr	r3, [pc, #512]	; (80079b8 <__ieee754_rem_pio2f+0x224>)
 80077b6:	429c      	cmp	r4, r3
 80077b8:	dc38      	bgt.n	800782c <__ieee754_rem_pio2f+0x98>
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	f024 040f 	bic.w	r4, r4, #15
 80077c0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80079bc <__ieee754_rem_pio2f+0x228>
 80077c4:	4b7e      	ldr	r3, [pc, #504]	; (80079c0 <__ieee754_rem_pio2f+0x22c>)
 80077c6:	dd18      	ble.n	80077fa <__ieee754_rem_pio2f+0x66>
 80077c8:	429c      	cmp	r4, r3
 80077ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 80077ce:	bf09      	itett	eq
 80077d0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80079c4 <__ieee754_rem_pio2f+0x230>
 80077d4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80079c8 <__ieee754_rem_pio2f+0x234>
 80077d8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80077dc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80079cc <__ieee754_rem_pio2f+0x238>
 80077e0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80077e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077e8:	edc0 6a00 	vstr	s13, [r0]
 80077ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80077f4:	2001      	movs	r0, #1
 80077f6:	b007      	add	sp, #28
 80077f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fa:	429c      	cmp	r4, r3
 80077fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007800:	bf09      	itett	eq
 8007802:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80079c4 <__ieee754_rem_pio2f+0x230>
 8007806:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80079c8 <__ieee754_rem_pio2f+0x234>
 800780a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800780e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80079cc <__ieee754_rem_pio2f+0x238>
 8007812:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007816:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800781a:	edc0 6a00 	vstr	s13, [r0]
 800781e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007822:	edc0 7a01 	vstr	s15, [r0, #4]
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	e7e4      	b.n	80077f6 <__ieee754_rem_pio2f+0x62>
 800782c:	4b68      	ldr	r3, [pc, #416]	; (80079d0 <__ieee754_rem_pio2f+0x23c>)
 800782e:	429c      	cmp	r4, r3
 8007830:	dc71      	bgt.n	8007916 <__ieee754_rem_pio2f+0x182>
 8007832:	f000 fc03 	bl	800803c <fabsf>
 8007836:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80079d4 <__ieee754_rem_pio2f+0x240>
 800783a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800783e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007846:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800784a:	ee17 0a90 	vmov	r0, s15
 800784e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80079bc <__ieee754_rem_pio2f+0x228>
 8007852:	eeb1 7a46 	vneg.f32	s14, s12
 8007856:	eea7 0a27 	vfma.f32	s0, s14, s15
 800785a:	281f      	cmp	r0, #31
 800785c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80079c8 <__ieee754_rem_pio2f+0x234>
 8007860:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007864:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007868:	ee16 3a90 	vmov	r3, s13
 800786c:	dc1c      	bgt.n	80078a8 <__ieee754_rem_pio2f+0x114>
 800786e:	1e47      	subs	r7, r0, #1
 8007870:	4959      	ldr	r1, [pc, #356]	; (80079d8 <__ieee754_rem_pio2f+0x244>)
 8007872:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007876:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800787a:	428a      	cmp	r2, r1
 800787c:	d014      	beq.n	80078a8 <__ieee754_rem_pio2f+0x114>
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	ed95 7a00 	vldr	s14, [r5]
 8007884:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007888:	2e00      	cmp	r6, #0
 800788a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800788e:	ed85 0a01 	vstr	s0, [r5, #4]
 8007892:	dab0      	bge.n	80077f6 <__ieee754_rem_pio2f+0x62>
 8007894:	eeb1 7a47 	vneg.f32	s14, s14
 8007898:	eeb1 0a40 	vneg.f32	s0, s0
 800789c:	ed85 7a00 	vstr	s14, [r5]
 80078a0:	ed85 0a01 	vstr	s0, [r5, #4]
 80078a4:	4240      	negs	r0, r0
 80078a6:	e7a6      	b.n	80077f6 <__ieee754_rem_pio2f+0x62>
 80078a8:	15e4      	asrs	r4, r4, #23
 80078aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078ae:	1aa2      	subs	r2, r4, r2
 80078b0:	2a08      	cmp	r2, #8
 80078b2:	dde4      	ble.n	800787e <__ieee754_rem_pio2f+0xea>
 80078b4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80079c4 <__ieee754_rem_pio2f+0x230>
 80078b8:	eef0 6a40 	vmov.f32	s13, s0
 80078bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80078c0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80078c4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80078c8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80079cc <__ieee754_rem_pio2f+0x238>
 80078cc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80078d0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80078d4:	eef0 7a40 	vmov.f32	s15, s0
 80078d8:	ee15 3a90 	vmov	r3, s11
 80078dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078e0:	1aa4      	subs	r4, r4, r2
 80078e2:	2c19      	cmp	r4, #25
 80078e4:	dc04      	bgt.n	80078f0 <__ieee754_rem_pio2f+0x15c>
 80078e6:	edc5 5a00 	vstr	s11, [r5]
 80078ea:	eeb0 0a66 	vmov.f32	s0, s13
 80078ee:	e7c7      	b.n	8007880 <__ieee754_rem_pio2f+0xec>
 80078f0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80079dc <__ieee754_rem_pio2f+0x248>
 80078f4:	eeb0 0a66 	vmov.f32	s0, s13
 80078f8:	eea7 0a25 	vfma.f32	s0, s14, s11
 80078fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007900:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007904:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80079e0 <__ieee754_rem_pio2f+0x24c>
 8007908:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800790c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007910:	ed85 7a00 	vstr	s14, [r5]
 8007914:	e7b4      	b.n	8007880 <__ieee754_rem_pio2f+0xec>
 8007916:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800791a:	db06      	blt.n	800792a <__ieee754_rem_pio2f+0x196>
 800791c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007920:	edc0 7a01 	vstr	s15, [r0, #4]
 8007924:	edc0 7a00 	vstr	s15, [r0]
 8007928:	e742      	b.n	80077b0 <__ieee754_rem_pio2f+0x1c>
 800792a:	15e2      	asrs	r2, r4, #23
 800792c:	3a86      	subs	r2, #134	; 0x86
 800792e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800793a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80079e4 <__ieee754_rem_pio2f+0x250>
 800793e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007946:	ed8d 7a03 	vstr	s14, [sp, #12]
 800794a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800794e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007952:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800795a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800795e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007962:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796a:	edcd 7a05 	vstr	s15, [sp, #20]
 800796e:	d11e      	bne.n	80079ae <__ieee754_rem_pio2f+0x21a>
 8007970:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2302      	movne	r3, #2
 800797e:	491a      	ldr	r1, [pc, #104]	; (80079e8 <__ieee754_rem_pio2f+0x254>)
 8007980:	9101      	str	r1, [sp, #4]
 8007982:	2102      	movs	r1, #2
 8007984:	9100      	str	r1, [sp, #0]
 8007986:	a803      	add	r0, sp, #12
 8007988:	4629      	mov	r1, r5
 800798a:	f000 f88d 	bl	8007aa8 <__kernel_rem_pio2f>
 800798e:	2e00      	cmp	r6, #0
 8007990:	f6bf af31 	bge.w	80077f6 <__ieee754_rem_pio2f+0x62>
 8007994:	edd5 7a00 	vldr	s15, [r5]
 8007998:	eef1 7a67 	vneg.f32	s15, s15
 800799c:	edc5 7a00 	vstr	s15, [r5]
 80079a0:	edd5 7a01 	vldr	s15, [r5, #4]
 80079a4:	eef1 7a67 	vneg.f32	s15, s15
 80079a8:	edc5 7a01 	vstr	s15, [r5, #4]
 80079ac:	e77a      	b.n	80078a4 <__ieee754_rem_pio2f+0x110>
 80079ae:	2303      	movs	r3, #3
 80079b0:	e7e5      	b.n	800797e <__ieee754_rem_pio2f+0x1ea>
 80079b2:	bf00      	nop
 80079b4:	3f490fd8 	.word	0x3f490fd8
 80079b8:	4016cbe3 	.word	0x4016cbe3
 80079bc:	3fc90f80 	.word	0x3fc90f80
 80079c0:	3fc90fd0 	.word	0x3fc90fd0
 80079c4:	37354400 	.word	0x37354400
 80079c8:	37354443 	.word	0x37354443
 80079cc:	2e85a308 	.word	0x2e85a308
 80079d0:	43490f80 	.word	0x43490f80
 80079d4:	3f22f984 	.word	0x3f22f984
 80079d8:	08008254 	.word	0x08008254
 80079dc:	2e85a300 	.word	0x2e85a300
 80079e0:	248d3132 	.word	0x248d3132
 80079e4:	43800000 	.word	0x43800000
 80079e8:	080082d4 	.word	0x080082d4

080079ec <__kernel_cosf>:
 80079ec:	ee10 3a10 	vmov	r3, s0
 80079f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fc:	da05      	bge.n	8007a0a <__kernel_cosf+0x1e>
 80079fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a02:	ee17 2a90 	vmov	r2, s15
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d03b      	beq.n	8007a82 <__kernel_cosf+0x96>
 8007a0a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007a0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a88 <__kernel_cosf+0x9c>
 8007a16:	4a1d      	ldr	r2, [pc, #116]	; (8007a8c <__kernel_cosf+0xa0>)
 8007a18:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007a1c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007a90 <__kernel_cosf+0xa4>
 8007a20:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007a24:	4293      	cmp	r3, r2
 8007a26:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007a94 <__kernel_cosf+0xa8>
 8007a2a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007a2e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007a98 <__kernel_cosf+0xac>
 8007a32:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007a36:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007a9c <__kernel_cosf+0xb0>
 8007a3a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007a3e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007aa0 <__kernel_cosf+0xb4>
 8007a42:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007a46:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007a4a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007a4e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007a52:	dc04      	bgt.n	8007a5e <__kernel_cosf+0x72>
 8007a54:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007a58:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007a5c:	4770      	bx	lr
 8007a5e:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <__kernel_cosf+0xb8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bfda      	itte	le
 8007a64:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007a68:	ee07 3a10 	vmovle	s14, r3
 8007a6c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a74:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007a78:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007a7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a80:	4770      	bx	lr
 8007a82:	eeb0 0a66 	vmov.f32	s0, s13
 8007a86:	4770      	bx	lr
 8007a88:	ad47d74e 	.word	0xad47d74e
 8007a8c:	3e999999 	.word	0x3e999999
 8007a90:	310f74f6 	.word	0x310f74f6
 8007a94:	b493f27c 	.word	0xb493f27c
 8007a98:	37d00d01 	.word	0x37d00d01
 8007a9c:	bab60b61 	.word	0xbab60b61
 8007aa0:	3d2aaaab 	.word	0x3d2aaaab
 8007aa4:	3f480000 	.word	0x3f480000

08007aa8 <__kernel_rem_pio2f>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	ed2d 8b04 	vpush	{d8-d9}
 8007ab0:	b0d7      	sub	sp, #348	; 0x15c
 8007ab2:	469b      	mov	fp, r3
 8007ab4:	460e      	mov	r6, r1
 8007ab6:	4bbe      	ldr	r3, [pc, #760]	; (8007db0 <__kernel_rem_pio2f+0x308>)
 8007ab8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007aba:	9002      	str	r0, [sp, #8]
 8007abc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007ac0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007ac2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007ac6:	1ed1      	subs	r1, r2, #3
 8007ac8:	2308      	movs	r3, #8
 8007aca:	fb91 f1f3 	sdiv	r1, r1, r3
 8007ace:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007ad2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007ad6:	1c4c      	adds	r4, r1, #1
 8007ad8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007adc:	eba1 050a 	sub.w	r5, r1, sl
 8007ae0:	aa1a      	add	r2, sp, #104	; 0x68
 8007ae2:	eb09 070a 	add.w	r7, r9, sl
 8007ae6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007aea:	4696      	mov	lr, r2
 8007aec:	2300      	movs	r3, #0
 8007aee:	42bb      	cmp	r3, r7
 8007af0:	dd0f      	ble.n	8007b12 <__kernel_rem_pio2f+0x6a>
 8007af2:	af42      	add	r7, sp, #264	; 0x108
 8007af4:	2200      	movs	r2, #0
 8007af6:	454a      	cmp	r2, r9
 8007af8:	dc27      	bgt.n	8007b4a <__kernel_rem_pio2f+0xa2>
 8007afa:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007afe:	eb0b 0302 	add.w	r3, fp, r2
 8007b02:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007b06:	9d02      	ldr	r5, [sp, #8]
 8007b08:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007b0c:	f04f 0c00 	mov.w	ip, #0
 8007b10:	e015      	b.n	8007b3e <__kernel_rem_pio2f+0x96>
 8007b12:	42dd      	cmn	r5, r3
 8007b14:	bf5d      	ittte	pl
 8007b16:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007b1a:	ee07 2a90 	vmovpl	s15, r2
 8007b1e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007b22:	eef0 7a47 	vmovmi.f32	s15, s14
 8007b26:	ecee 7a01 	vstmia	lr!, {s15}
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	e7df      	b.n	8007aee <__kernel_rem_pio2f+0x46>
 8007b2e:	ecf5 6a01 	vldmia	r5!, {s13}
 8007b32:	ed33 7a01 	vldmdb	r3!, {s14}
 8007b36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b3a:	f10c 0c01 	add.w	ip, ip, #1
 8007b3e:	45d4      	cmp	ip, sl
 8007b40:	ddf5      	ble.n	8007b2e <__kernel_rem_pio2f+0x86>
 8007b42:	ece7 7a01 	vstmia	r7!, {s15}
 8007b46:	3201      	adds	r2, #1
 8007b48:	e7d5      	b.n	8007af6 <__kernel_rem_pio2f+0x4e>
 8007b4a:	ab06      	add	r3, sp, #24
 8007b4c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007dbc <__kernel_rem_pio2f+0x314>
 8007b56:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007db8 <__kernel_rem_pio2f+0x310>
 8007b5a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	464d      	mov	r5, r9
 8007b62:	ab56      	add	r3, sp, #344	; 0x158
 8007b64:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007b68:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007b6c:	3f01      	subs	r7, #1
 8007b6e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007b72:	00bf      	lsls	r7, r7, #2
 8007b74:	ab56      	add	r3, sp, #344	; 0x158
 8007b76:	19da      	adds	r2, r3, r7
 8007b78:	3a4c      	subs	r2, #76	; 0x4c
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	1ae9      	subs	r1, r5, r3
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	dc4c      	bgt.n	8007c1c <__kernel_rem_pio2f+0x174>
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 faa4 	bl	80080d0 <scalbnf>
 8007b88:	eeb0 8a40 	vmov.f32	s16, s0
 8007b8c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007b90:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007b94:	f000 fa5a 	bl	800804c <floorf>
 8007b98:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007b9c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007ba6:	edcd 7a01 	vstr	s15, [sp, #4]
 8007baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bae:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007bb2:	dd48      	ble.n	8007c46 <__kernel_rem_pio2f+0x19e>
 8007bb4:	1e69      	subs	r1, r5, #1
 8007bb6:	ab06      	add	r3, sp, #24
 8007bb8:	f1c4 0008 	rsb	r0, r4, #8
 8007bbc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	fa4c f300 	asr.w	r3, ip, r0
 8007bc6:	441a      	add	r2, r3
 8007bc8:	4083      	lsls	r3, r0
 8007bca:	9201      	str	r2, [sp, #4]
 8007bcc:	ebac 0203 	sub.w	r2, ip, r3
 8007bd0:	ab06      	add	r3, sp, #24
 8007bd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007bd6:	f1c4 0307 	rsb	r3, r4, #7
 8007bda:	fa42 f803 	asr.w	r8, r2, r3
 8007bde:	f1b8 0f00 	cmp.w	r8, #0
 8007be2:	dd41      	ble.n	8007c68 <__kernel_rem_pio2f+0x1c0>
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	2000      	movs	r0, #0
 8007be8:	3301      	adds	r3, #1
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	4601      	mov	r1, r0
 8007bee:	4285      	cmp	r5, r0
 8007bf0:	dc6d      	bgt.n	8007cce <__kernel_rem_pio2f+0x226>
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	dd04      	ble.n	8007c00 <__kernel_rem_pio2f+0x158>
 8007bf6:	2c01      	cmp	r4, #1
 8007bf8:	d07e      	beq.n	8007cf8 <__kernel_rem_pio2f+0x250>
 8007bfa:	2c02      	cmp	r4, #2
 8007bfc:	f000 8086 	beq.w	8007d0c <__kernel_rem_pio2f+0x264>
 8007c00:	f1b8 0f02 	cmp.w	r8, #2
 8007c04:	d130      	bne.n	8007c68 <__kernel_rem_pio2f+0x1c0>
 8007c06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c0a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007c0e:	b359      	cbz	r1, 8007c68 <__kernel_rem_pio2f+0x1c0>
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fa5d 	bl	80080d0 <scalbnf>
 8007c16:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007c1a:	e025      	b.n	8007c68 <__kernel_rem_pio2f+0x1c0>
 8007c1c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007c20:	a806      	add	r0, sp, #24
 8007c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007c2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c32:	ee10 1a10 	vmov	r1, s0
 8007c36:	ed32 0a01 	vldmdb	r2!, {s0}
 8007c3a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007c3e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c42:	3301      	adds	r3, #1
 8007c44:	e79a      	b.n	8007b7c <__kernel_rem_pio2f+0xd4>
 8007c46:	d106      	bne.n	8007c56 <__kernel_rem_pio2f+0x1ae>
 8007c48:	1e6b      	subs	r3, r5, #1
 8007c4a:	aa06      	add	r2, sp, #24
 8007c4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c50:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007c54:	e7c3      	b.n	8007bde <__kernel_rem_pio2f+0x136>
 8007c56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c62:	da31      	bge.n	8007cc8 <__kernel_rem_pio2f+0x220>
 8007c64:	f04f 0800 	mov.w	r8, #0
 8007c68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c70:	f040 80a8 	bne.w	8007dc4 <__kernel_rem_pio2f+0x31c>
 8007c74:	1e6b      	subs	r3, r5, #1
 8007c76:	4618      	mov	r0, r3
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4548      	cmp	r0, r9
 8007c7c:	da4d      	bge.n	8007d1a <__kernel_rem_pio2f+0x272>
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	f000 8087 	beq.w	8007d92 <__kernel_rem_pio2f+0x2ea>
 8007c84:	aa06      	add	r2, sp, #24
 8007c86:	3c08      	subs	r4, #8
 8007c88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	f000 808d 	beq.w	8007dac <__kernel_rem_pio2f+0x304>
 8007c92:	4620      	mov	r0, r4
 8007c94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	f000 fa19 	bl	80080d0 <scalbnf>
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007dbc <__kernel_rem_pio2f+0x314>
 8007ca4:	0099      	lsls	r1, r3, #2
 8007ca6:	aa42      	add	r2, sp, #264	; 0x108
 8007ca8:	1850      	adds	r0, r2, r1
 8007caa:	1d05      	adds	r5, r0, #4
 8007cac:	461c      	mov	r4, r3
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	f280 80b8 	bge.w	8007e24 <__kernel_rem_pio2f+0x37c>
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	1b5c      	subs	r4, r3, r5
 8007cb8:	2c00      	cmp	r4, #0
 8007cba:	f2c0 80d8 	blt.w	8007e6e <__kernel_rem_pio2f+0x3c6>
 8007cbe:	4f3d      	ldr	r7, [pc, #244]	; (8007db4 <__kernel_rem_pio2f+0x30c>)
 8007cc0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007cc4:	2400      	movs	r4, #0
 8007cc6:	e0c6      	b.n	8007e56 <__kernel_rem_pio2f+0x3ae>
 8007cc8:	f04f 0802 	mov.w	r8, #2
 8007ccc:	e78a      	b.n	8007be4 <__kernel_rem_pio2f+0x13c>
 8007cce:	ab06      	add	r3, sp, #24
 8007cd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007cd4:	b949      	cbnz	r1, 8007cea <__kernel_rem_pio2f+0x242>
 8007cd6:	b12b      	cbz	r3, 8007ce4 <__kernel_rem_pio2f+0x23c>
 8007cd8:	aa06      	add	r2, sp, #24
 8007cda:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007cde:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	e781      	b.n	8007bee <__kernel_rem_pio2f+0x146>
 8007cea:	aa06      	add	r2, sp, #24
 8007cec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007cf0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e7f5      	b.n	8007ce4 <__kernel_rem_pio2f+0x23c>
 8007cf8:	1e68      	subs	r0, r5, #1
 8007cfa:	ab06      	add	r3, sp, #24
 8007cfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d04:	aa06      	add	r2, sp, #24
 8007d06:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007d0a:	e779      	b.n	8007c00 <__kernel_rem_pio2f+0x158>
 8007d0c:	1e68      	subs	r0, r5, #1
 8007d0e:	ab06      	add	r3, sp, #24
 8007d10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d18:	e7f4      	b.n	8007d04 <__kernel_rem_pio2f+0x25c>
 8007d1a:	a906      	add	r1, sp, #24
 8007d1c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007d20:	3801      	subs	r0, #1
 8007d22:	430a      	orrs	r2, r1
 8007d24:	e7a9      	b.n	8007c7a <__kernel_rem_pio2f+0x1d2>
 8007d26:	f10c 0c01 	add.w	ip, ip, #1
 8007d2a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d0f9      	beq.n	8007d26 <__kernel_rem_pio2f+0x27e>
 8007d32:	eb0b 0305 	add.w	r3, fp, r5
 8007d36:	aa1a      	add	r2, sp, #104	; 0x68
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	1898      	adds	r0, r3, r2
 8007d3c:	3004      	adds	r0, #4
 8007d3e:	1c69      	adds	r1, r5, #1
 8007d40:	3704      	adds	r7, #4
 8007d42:	2200      	movs	r2, #0
 8007d44:	4465      	add	r5, ip
 8007d46:	9005      	str	r0, [sp, #20]
 8007d48:	428d      	cmp	r5, r1
 8007d4a:	f6ff af0a 	blt.w	8007b62 <__kernel_rem_pio2f+0xba>
 8007d4e:	a81a      	add	r0, sp, #104	; 0x68
 8007d50:	eb02 0c03 	add.w	ip, r2, r3
 8007d54:	4484      	add	ip, r0
 8007d56:	9803      	ldr	r0, [sp, #12]
 8007d58:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007d5c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007d60:	9001      	str	r0, [sp, #4]
 8007d62:	ee07 0a90 	vmov	s15, r0
 8007d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	edcc 7a00 	vstr	s15, [ip]
 8007d70:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007d74:	eb00 0802 	add.w	r8, r0, r2
 8007d78:	f04f 0c00 	mov.w	ip, #0
 8007d7c:	45d4      	cmp	ip, sl
 8007d7e:	dd0c      	ble.n	8007d9a <__kernel_rem_pio2f+0x2f2>
 8007d80:	eb02 0c07 	add.w	ip, r2, r7
 8007d84:	a842      	add	r0, sp, #264	; 0x108
 8007d86:	4484      	add	ip, r0
 8007d88:	edcc 7a01 	vstr	s15, [ip, #4]
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	3204      	adds	r2, #4
 8007d90:	e7da      	b.n	8007d48 <__kernel_rem_pio2f+0x2a0>
 8007d92:	9b04      	ldr	r3, [sp, #16]
 8007d94:	f04f 0c01 	mov.w	ip, #1
 8007d98:	e7c7      	b.n	8007d2a <__kernel_rem_pio2f+0x282>
 8007d9a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d9e:	ed38 7a01 	vldmdb	r8!, {s14}
 8007da2:	f10c 0c01 	add.w	ip, ip, #1
 8007da6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007daa:	e7e7      	b.n	8007d7c <__kernel_rem_pio2f+0x2d4>
 8007dac:	3b01      	subs	r3, #1
 8007dae:	e769      	b.n	8007c84 <__kernel_rem_pio2f+0x1dc>
 8007db0:	08008618 	.word	0x08008618
 8007db4:	080085ec 	.word	0x080085ec
 8007db8:	43800000 	.word	0x43800000
 8007dbc:	3b800000 	.word	0x3b800000
 8007dc0:	00000000 	.word	0x00000000
 8007dc4:	4260      	negs	r0, r4
 8007dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dca:	f000 f981 	bl	80080d0 <scalbnf>
 8007dce:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007db8 <__kernel_rem_pio2f+0x310>
 8007dd2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dda:	db1a      	blt.n	8007e12 <__kernel_rem_pio2f+0x36a>
 8007ddc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007dbc <__kernel_rem_pio2f+0x314>
 8007de0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007de4:	aa06      	add	r2, sp, #24
 8007de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dea:	a906      	add	r1, sp, #24
 8007dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007df0:	3408      	adds	r4, #8
 8007df2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007dfe:	ee10 3a10 	vmov	r3, s0
 8007e02:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007e06:	1c6b      	adds	r3, r5, #1
 8007e08:	ee17 2a90 	vmov	r2, s15
 8007e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e10:	e73f      	b.n	8007c92 <__kernel_rem_pio2f+0x1ea>
 8007e12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e16:	aa06      	add	r2, sp, #24
 8007e18:	ee10 3a10 	vmov	r3, s0
 8007e1c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007e20:	462b      	mov	r3, r5
 8007e22:	e736      	b.n	8007c92 <__kernel_rem_pio2f+0x1ea>
 8007e24:	aa06      	add	r2, sp, #24
 8007e26:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007e2a:	9202      	str	r2, [sp, #8]
 8007e2c:	ee07 2a90 	vmov	s15, r2
 8007e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e34:	3c01      	subs	r4, #1
 8007e36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e3a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007e3e:	ed65 7a01 	vstmdb	r5!, {s15}
 8007e42:	e734      	b.n	8007cae <__kernel_rem_pio2f+0x206>
 8007e44:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007e48:	ecf7 6a01 	vldmia	r7!, {s13}
 8007e4c:	ed9c 7a00 	vldr	s14, [ip]
 8007e50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e54:	3401      	adds	r4, #1
 8007e56:	454c      	cmp	r4, r9
 8007e58:	dc01      	bgt.n	8007e5e <__kernel_rem_pio2f+0x3b6>
 8007e5a:	42a5      	cmp	r5, r4
 8007e5c:	daf2      	bge.n	8007e44 <__kernel_rem_pio2f+0x39c>
 8007e5e:	aa56      	add	r2, sp, #344	; 0x158
 8007e60:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007e64:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007e68:	3501      	adds	r5, #1
 8007e6a:	3804      	subs	r0, #4
 8007e6c:	e723      	b.n	8007cb6 <__kernel_rem_pio2f+0x20e>
 8007e6e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007e70:	2a03      	cmp	r2, #3
 8007e72:	d84d      	bhi.n	8007f10 <__kernel_rem_pio2f+0x468>
 8007e74:	e8df f002 	tbb	[pc, r2]
 8007e78:	021f1f3e 	.word	0x021f1f3e
 8007e7c:	aa56      	add	r2, sp, #344	; 0x158
 8007e7e:	4411      	add	r1, r2
 8007e80:	399c      	subs	r1, #156	; 0x9c
 8007e82:	4608      	mov	r0, r1
 8007e84:	461c      	mov	r4, r3
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	dc5f      	bgt.n	8007f4a <__kernel_rem_pio2f+0x4a2>
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	461c      	mov	r4, r3
 8007e8e:	2c01      	cmp	r4, #1
 8007e90:	dc6b      	bgt.n	8007f6a <__kernel_rem_pio2f+0x4c2>
 8007e92:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	dc77      	bgt.n	8007f8a <__kernel_rem_pio2f+0x4e2>
 8007e9a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007e9e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007ea2:	f1b8 0f00 	cmp.w	r8, #0
 8007ea6:	d176      	bne.n	8007f96 <__kernel_rem_pio2f+0x4ee>
 8007ea8:	edc6 6a00 	vstr	s13, [r6]
 8007eac:	ed86 7a01 	vstr	s14, [r6, #4]
 8007eb0:	edc6 7a02 	vstr	s15, [r6, #8]
 8007eb4:	e02c      	b.n	8007f10 <__kernel_rem_pio2f+0x468>
 8007eb6:	aa56      	add	r2, sp, #344	; 0x158
 8007eb8:	4411      	add	r1, r2
 8007eba:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007ebe:	399c      	subs	r1, #156	; 0x9c
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	da32      	bge.n	8007f2c <__kernel_rem_pio2f+0x484>
 8007ec6:	f1b8 0f00 	cmp.w	r8, #0
 8007eca:	d035      	beq.n	8007f38 <__kernel_rem_pio2f+0x490>
 8007ecc:	eef1 7a47 	vneg.f32	s15, s14
 8007ed0:	edc6 7a00 	vstr	s15, [r6]
 8007ed4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007edc:	a82f      	add	r0, sp, #188	; 0xbc
 8007ede:	2101      	movs	r1, #1
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	da2c      	bge.n	8007f3e <__kernel_rem_pio2f+0x496>
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	d001      	beq.n	8007eee <__kernel_rem_pio2f+0x446>
 8007eea:	eef1 7a67 	vneg.f32	s15, s15
 8007eee:	edc6 7a01 	vstr	s15, [r6, #4]
 8007ef2:	e00d      	b.n	8007f10 <__kernel_rem_pio2f+0x468>
 8007ef4:	aa56      	add	r2, sp, #344	; 0x158
 8007ef6:	4411      	add	r1, r2
 8007ef8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007dc0 <__kernel_rem_pio2f+0x318>
 8007efc:	399c      	subs	r1, #156	; 0x9c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da0e      	bge.n	8007f20 <__kernel_rem_pio2f+0x478>
 8007f02:	f1b8 0f00 	cmp.w	r8, #0
 8007f06:	d001      	beq.n	8007f0c <__kernel_rem_pio2f+0x464>
 8007f08:	eef1 7a67 	vneg.f32	s15, s15
 8007f0c:	edc6 7a00 	vstr	s15, [r6]
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	f003 0007 	and.w	r0, r3, #7
 8007f16:	b057      	add	sp, #348	; 0x15c
 8007f18:	ecbd 8b04 	vpop	{d8-d9}
 8007f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f20:	ed31 7a01 	vldmdb	r1!, {s14}
 8007f24:	3b01      	subs	r3, #1
 8007f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f2a:	e7e8      	b.n	8007efe <__kernel_rem_pio2f+0x456>
 8007f2c:	ed71 7a01 	vldmdb	r1!, {s15}
 8007f30:	3801      	subs	r0, #1
 8007f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f36:	e7c4      	b.n	8007ec2 <__kernel_rem_pio2f+0x41a>
 8007f38:	eef0 7a47 	vmov.f32	s15, s14
 8007f3c:	e7c8      	b.n	8007ed0 <__kernel_rem_pio2f+0x428>
 8007f3e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007f42:	3101      	adds	r1, #1
 8007f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f48:	e7ca      	b.n	8007ee0 <__kernel_rem_pio2f+0x438>
 8007f4a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007f4e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007f52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f56:	3c01      	subs	r4, #1
 8007f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f5c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f64:	edc0 7a00 	vstr	s15, [r0]
 8007f68:	e78d      	b.n	8007e86 <__kernel_rem_pio2f+0x3de>
 8007f6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007f6e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007f72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f76:	3c01      	subs	r4, #1
 8007f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f7c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f84:	edc0 7a00 	vstr	s15, [r0]
 8007f88:	e781      	b.n	8007e8e <__kernel_rem_pio2f+0x3e6>
 8007f8a:	ed31 7a01 	vldmdb	r1!, {s14}
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f94:	e77f      	b.n	8007e96 <__kernel_rem_pio2f+0x3ee>
 8007f96:	eef1 6a66 	vneg.f32	s13, s13
 8007f9a:	eeb1 7a47 	vneg.f32	s14, s14
 8007f9e:	edc6 6a00 	vstr	s13, [r6]
 8007fa2:	ed86 7a01 	vstr	s14, [r6, #4]
 8007fa6:	eef1 7a67 	vneg.f32	s15, s15
 8007faa:	e781      	b.n	8007eb0 <__kernel_rem_pio2f+0x408>

08007fac <__kernel_sinf>:
 8007fac:	ee10 3a10 	vmov	r3, s0
 8007fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007fb8:	da04      	bge.n	8007fc4 <__kernel_sinf+0x18>
 8007fba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007fbe:	ee17 3a90 	vmov	r3, s15
 8007fc2:	b35b      	cbz	r3, 800801c <__kernel_sinf+0x70>
 8007fc4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007fc8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008020 <__kernel_sinf+0x74>
 8007fcc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008024 <__kernel_sinf+0x78>
 8007fd0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fd4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008028 <__kernel_sinf+0x7c>
 8007fd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fdc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800802c <__kernel_sinf+0x80>
 8007fe0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007fe4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008030 <__kernel_sinf+0x84>
 8007fe8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007fec:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ff0:	b930      	cbnz	r0, 8008000 <__kernel_sinf+0x54>
 8007ff2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008034 <__kernel_sinf+0x88>
 8007ff6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ffa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007ffe:	4770      	bx	lr
 8008000:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008004:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008008:	eee0 7a86 	vfma.f32	s15, s1, s12
 800800c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008010:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008038 <__kernel_sinf+0x8c>
 8008014:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008018:	ee30 0a60 	vsub.f32	s0, s0, s1
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	2f2ec9d3 	.word	0x2f2ec9d3
 8008024:	b2d72f34 	.word	0xb2d72f34
 8008028:	3638ef1b 	.word	0x3638ef1b
 800802c:	b9500d01 	.word	0xb9500d01
 8008030:	3c088889 	.word	0x3c088889
 8008034:	be2aaaab 	.word	0xbe2aaaab
 8008038:	3e2aaaab 	.word	0x3e2aaaab

0800803c <fabsf>:
 800803c:	ee10 3a10 	vmov	r3, s0
 8008040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008044:	ee00 3a10 	vmov	s0, r3
 8008048:	4770      	bx	lr
	...

0800804c <floorf>:
 800804c:	ee10 3a10 	vmov	r3, s0
 8008050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008054:	0dca      	lsrs	r2, r1, #23
 8008056:	3a7f      	subs	r2, #127	; 0x7f
 8008058:	2a16      	cmp	r2, #22
 800805a:	dc2a      	bgt.n	80080b2 <floorf+0x66>
 800805c:	2a00      	cmp	r2, #0
 800805e:	da11      	bge.n	8008084 <floorf+0x38>
 8008060:	eddf 7a18 	vldr	s15, [pc, #96]	; 80080c4 <floorf+0x78>
 8008064:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008068:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008070:	dd05      	ble.n	800807e <floorf+0x32>
 8008072:	2b00      	cmp	r3, #0
 8008074:	da23      	bge.n	80080be <floorf+0x72>
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <floorf+0x7c>)
 8008078:	2900      	cmp	r1, #0
 800807a:	bf18      	it	ne
 800807c:	4613      	movne	r3, r2
 800807e:	ee00 3a10 	vmov	s0, r3
 8008082:	4770      	bx	lr
 8008084:	4911      	ldr	r1, [pc, #68]	; (80080cc <floorf+0x80>)
 8008086:	4111      	asrs	r1, r2
 8008088:	420b      	tst	r3, r1
 800808a:	d0fa      	beq.n	8008082 <floorf+0x36>
 800808c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80080c4 <floorf+0x78>
 8008090:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008094:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	ddef      	ble.n	800807e <floorf+0x32>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bfbe      	ittt	lt
 80080a2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80080a6:	fa40 f202 	asrlt.w	r2, r0, r2
 80080aa:	189b      	addlt	r3, r3, r2
 80080ac:	ea23 0301 	bic.w	r3, r3, r1
 80080b0:	e7e5      	b.n	800807e <floorf+0x32>
 80080b2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80080b6:	d3e4      	bcc.n	8008082 <floorf+0x36>
 80080b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080bc:	4770      	bx	lr
 80080be:	2300      	movs	r3, #0
 80080c0:	e7dd      	b.n	800807e <floorf+0x32>
 80080c2:	bf00      	nop
 80080c4:	7149f2ca 	.word	0x7149f2ca
 80080c8:	bf800000 	.word	0xbf800000
 80080cc:	007fffff 	.word	0x007fffff

080080d0 <scalbnf>:
 80080d0:	b508      	push	{r3, lr}
 80080d2:	ee10 2a10 	vmov	r2, s0
 80080d6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80080da:	ed2d 8b02 	vpush	{d8}
 80080de:	eef0 0a40 	vmov.f32	s1, s0
 80080e2:	d004      	beq.n	80080ee <scalbnf+0x1e>
 80080e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80080e8:	d306      	bcc.n	80080f8 <scalbnf+0x28>
 80080ea:	ee70 0a00 	vadd.f32	s1, s0, s0
 80080ee:	ecbd 8b02 	vpop	{d8}
 80080f2:	eeb0 0a60 	vmov.f32	s0, s1
 80080f6:	bd08      	pop	{r3, pc}
 80080f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080fc:	d21c      	bcs.n	8008138 <scalbnf+0x68>
 80080fe:	4b1f      	ldr	r3, [pc, #124]	; (800817c <scalbnf+0xac>)
 8008100:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008180 <scalbnf+0xb0>
 8008104:	4298      	cmp	r0, r3
 8008106:	ee60 0a27 	vmul.f32	s1, s0, s15
 800810a:	db10      	blt.n	800812e <scalbnf+0x5e>
 800810c:	ee10 2a90 	vmov	r2, s1
 8008110:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008114:	3b19      	subs	r3, #25
 8008116:	4403      	add	r3, r0
 8008118:	2bfe      	cmp	r3, #254	; 0xfe
 800811a:	dd0f      	ble.n	800813c <scalbnf+0x6c>
 800811c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008184 <scalbnf+0xb4>
 8008120:	eeb0 0a48 	vmov.f32	s0, s16
 8008124:	f000 f834 	bl	8008190 <copysignf>
 8008128:	ee60 0a08 	vmul.f32	s1, s0, s16
 800812c:	e7df      	b.n	80080ee <scalbnf+0x1e>
 800812e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008188 <scalbnf+0xb8>
 8008132:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008136:	e7da      	b.n	80080ee <scalbnf+0x1e>
 8008138:	0ddb      	lsrs	r3, r3, #23
 800813a:	e7ec      	b.n	8008116 <scalbnf+0x46>
 800813c:	2b00      	cmp	r3, #0
 800813e:	dd06      	ble.n	800814e <scalbnf+0x7e>
 8008140:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008144:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008148:	ee00 3a90 	vmov	s1, r3
 800814c:	e7cf      	b.n	80080ee <scalbnf+0x1e>
 800814e:	f113 0f16 	cmn.w	r3, #22
 8008152:	da06      	bge.n	8008162 <scalbnf+0x92>
 8008154:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008158:	4298      	cmp	r0, r3
 800815a:	dcdf      	bgt.n	800811c <scalbnf+0x4c>
 800815c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008188 <scalbnf+0xb8>
 8008160:	e7de      	b.n	8008120 <scalbnf+0x50>
 8008162:	3319      	adds	r3, #25
 8008164:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008168:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800816c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800818c <scalbnf+0xbc>
 8008170:	ee07 3a10 	vmov	s14, r3
 8008174:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008178:	e7b9      	b.n	80080ee <scalbnf+0x1e>
 800817a:	bf00      	nop
 800817c:	ffff3cb0 	.word	0xffff3cb0
 8008180:	4c000000 	.word	0x4c000000
 8008184:	7149f2ca 	.word	0x7149f2ca
 8008188:	0da24260 	.word	0x0da24260
 800818c:	33000000 	.word	0x33000000

08008190 <copysignf>:
 8008190:	ee10 3a10 	vmov	r3, s0
 8008194:	ee10 2a90 	vmov	r2, s1
 8008198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800819c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80081a0:	4313      	orrs	r3, r2
 80081a2:	ee00 3a10 	vmov	s0, r3
 80081a6:	4770      	bx	lr

080081a8 <_init>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr

080081b4 <_fini>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr
