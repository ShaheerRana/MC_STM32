
MC_SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f50  08006f50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006f50  08006f50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f50  08006f50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08006fc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006fc8  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e0d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002556  00000000  00000000  00033ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00036408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00037508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023166  00000000  00000000  000384d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e808  00000000  00000000  0005b636  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9b69  00000000  00000000  00069e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001439a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  00143a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aec 	.word	0x08006aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006aec 	.word	0x08006aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid, float Kp, float Ki, float LimMin, float LimMax, float LimMinInt, float LimMaxInt, float T) {
 8000270:	b480      	push	{r7}
 8000272:	b089      	sub	sp, #36	; 0x24
 8000274:	af00      	add	r7, sp, #0
 8000276:	61f8      	str	r0, [r7, #28]
 8000278:	ed87 0a06 	vstr	s0, [r7, #24]
 800027c:	edc7 0a05 	vstr	s1, [r7, #20]
 8000280:	ed87 1a04 	vstr	s2, [r7, #16]
 8000284:	edc7 1a03 	vstr	s3, [r7, #12]
 8000288:	ed87 2a02 	vstr	s4, [r7, #8]
 800028c:	edc7 2a01 	vstr	s5, [r7, #4]
 8000290:	ed87 3a00 	vstr	s6, [r7]
	/* Clear controller variables */
	pid->Integrator = 0.0f;
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f04f 0200 	mov.w	r2, #0
 800029a:	61da      	str	r2, [r3, #28]
	pid->PrevError  = 0.0f;
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	f04f 0200 	mov.w	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
	pid->Out = 0.0f;
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	f04f 0200 	mov.w	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Kp = Kp;
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	69ba      	ldr	r2, [r7, #24]
 80002b0:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	697a      	ldr	r2, [r7, #20]
 80002b6:	605a      	str	r2, [r3, #4]
	pid->LimMin = LimMin;
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	609a      	str	r2, [r3, #8]
	pid->LimMax = LimMax;
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	60da      	str	r2, [r3, #12]
	pid->LimMinInt = LimMinInt;
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	611a      	str	r2, [r3, #16]
	pid->LimMaxInt = LimMaxInt;
 80002ca:	69fb      	ldr	r3, [r7, #28]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	615a      	str	r2, [r3, #20]
}
 80002d0:	bf00      	nop
 80002d2:	3724      	adds	r7, #36	; 0x24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f04f 0200 	mov.w	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f04f 0200 	mov.w	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f04f 0200 	mov.w	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f04f 0200 	mov.w	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f04f 0200 	mov.w	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f04f 0200 	mov.w	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f04f 0200 	mov.w	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f04f 0200 	mov.w	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f04f 0200 	mov.w	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f04f 0200 	mov.w	r2, #0
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f04f 0200 	mov.w	r2, #0
 800034c:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f04f 0200 	mov.w	r2, #0
 8000354:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
	...

08000364 <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	4aba      	ldr	r2, [pc, #744]	; (800065c <SVPWM_Update+0x2f8>)
 8000374:	601a      	str	r2, [r3, #0]
	svm->Freq = 0.01; /*vhz->Freq;*/
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4ab9      	ldr	r2, [pc, #740]	; (8000660 <SVPWM_Update+0x2fc>)
 800037a:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000382:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8000664 <SVPWM_Update+0x300>
 8000386:	ee67 6a87 	vmul.f32	s13, s15, s14
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	691a      	ldr	r2, [r3, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80003ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80003be:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8000668 <SVPWM_Update+0x304>
 80003c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ca:	db09      	blt.n	80003e0 <SVPWM_Update+0x7c>
		svm->Alpha = svm->Alpha-PI_THIRD;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80003d2:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8000668 <SVPWM_Update+0x304>
 80003d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80003ee:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8000668 <SVPWM_Update+0x304>
 80003f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003f6:	eeb0 0a67 	vmov.f32	s0, s15
 80003fa:	f005 fe2b 	bl	8006054 <sinf>
 80003fe:	eeb0 7a40 	vmov.f32	s14, s0
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	edd3 7a00 	vldr	s15, [r3]
 8000408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000422:	eeb0 0a67 	vmov.f32	s0, s15
 8000426:	f005 fe15 	bl	8006054 <sinf>
 800042a:	eeb0 7a40 	vmov.f32	s14, s0
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	edd3 7a00 	vldr	s15, [r3]
 8000434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	edd3 7a02 	vldr	s15, [r3, #8]
 800043e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	ed93 7a02 	vldr	s14, [r3, #8]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800045e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	ed93 7a04 	vldr	s14, [r3, #16]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800047c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000488:	d518      	bpl.n	80004bc <SVPWM_Update+0x158>
      	if (svm->SectorPointer == 5){
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000490:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000494:	eef4 7a47 	vcmp.f32	s15, s14
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	d104      	bne.n	80004a8 <SVPWM_Update+0x144>
         	svm->SectorPointer = 0;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f04f 0200 	mov.w	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
 80004a6:	e009      	b.n	80004bc <SVPWM_Update+0x158>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80004ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80004b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	edd3 7a05 	vldr	s15, [r3, #20]
 80004c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80004c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ca:	d11f      	bne.n	800050c <SVPWM_Update+0x1a8>
		svm->U = svm->ta + svm->tb + svm->to;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80004d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80004e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80004f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	621a      	str	r2, [r3, #32]
 800050a:	e0d8      	b.n	80006be <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000516:	eef4 7a47 	vcmp.f32	s15, s14
 800051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800051e:	d11f      	bne.n	8000560 <SVPWM_Update+0x1fc>
    	svm->U= svm->ta + svm->to;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800052c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800054c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	621a      	str	r2, [r3, #32]
 800055e:	e0ae      	b.n	80006be <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	edd3 7a05 	vldr	s15, [r3, #20]
 8000566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800056a:	eef4 7a47 	vcmp.f32	s15, s14
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	d11f      	bne.n	80005b4 <SVPWM_Update+0x250>
    	svm->U = svm->to;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80005a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	edc3 7a08 	vstr	s15, [r3, #32]
 80005b2:	e084      	b.n	80006be <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80005ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80005be:	eef4 7a47 	vcmp.f32	s15, s14
 80005c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c6:	d11f      	bne.n	8000608 <SVPWM_Update+0x2a4>
    	svm->U = svm->to;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80005dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80005f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80005fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	edc3 7a08 	vstr	s15, [r3, #32]
 8000606:	e05a      	b.n	80006be <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	edd3 7a05 	vldr	s15, [r3, #20]
 800060e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000612:	eef4 7a47 	vcmp.f32	s15, s14
 8000616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061a:	d127      	bne.n	800066c <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	edc3 7a08 	vstr	s15, [r3, #32]
 800065a:	e030      	b.n	80006be <SVPWM_Update+0x35a>
 800065c:	3f666666 	.word	0x3f666666
 8000660:	3c23d70a 	.word	0x3c23d70a
 8000664:	40c90fdb 	.word	0x40c90fdb
 8000668:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000672:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000676:	eef4 7a47 	vcmp.f32	s15, s14
 800067a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067e:	d11e      	bne.n	80006be <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800068c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80006b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	edd3 6a06 	vldr	s13, [r3, #24]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80006ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <SVPWM_Update+0x3ec>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	3301      	adds	r3, #1
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <SVPWM_Update+0x3ec>)
 80006e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e6:	ee17 2a90 	vmov	r2, s15
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	edd3 6a07 	vldr	s13, [r3, #28]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80006f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <SVPWM_Update+0x3ec>)
 80006fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000700:	3301      	adds	r3, #1
 8000702:	ee07 3a90 	vmov	s15, r3
 8000706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800070a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <SVPWM_Update+0x3ec>)
 8000710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000714:	ee17 2a90 	vmov	r2, s15
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	edd3 7a02 	vldr	s15, [r3, #8]
 8000726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <SVPWM_Update+0x3ec>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	3301      	adds	r3, #1
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SVPWM_Update+0x3ec>)
 800073e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000742:	ee17 2a90 	vmov	r2, s15
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012c00 	.word	0x40012c00

08000754 <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6178      	str	r0, [r7, #20]
 800075c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000760:	edc7 0a03 	vstr	s1, [r7, #12]
 8000764:	ed87 1a02 	vstr	s2, [r7, #8]
 8000768:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8000784:	ed97 7a01 	vldr	s14, [r7, #4]
 8000788:	edd7 7a02 	vldr	s15, [r7, #8]
 800078c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000790:	ed97 7a03 	vldr	s14, [r7, #12]
 8000794:	edd7 7a04 	vldr	s15, [r7, #16]
 8000798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800079c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	619a      	str	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edd3 7a00 	vldr	s15, [r3]
 80007d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007dc:	d804      	bhi.n	80007e8 <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 80007e6:	e03b      	b.n	8000860 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	ed93 7a06 	vldr	s14, [r3, #24]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	edd3 7a00 	vldr	s15, [r3]
 80007f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fc:	dd20      	ble.n	8000840 <VHZ_Update+0x80>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	ed93 7a06 	vldr	s14, [r3, #24]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edd3 7a01 	vldr	s15, [r3, #4]
 800080a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d815      	bhi.n	8000840 <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	ed93 7a02 	vldr	s14, [r3, #8]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 6a06 	vldr	s12, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800083e:	e00f      	b.n	8000860 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	ed93 7a06 	vldr	s14, [r3, #24]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	edd3 7a01 	vldr	s15, [r3, #4]
 800084c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	dc00      	bgt.n	8000858 <VHZ_Update+0x98>
}
 8000856:	e003      	b.n	8000860 <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	615a      	str	r2, [r3, #20]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	; 0x50
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8000872:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8000968 <main+0xfc>
 8000876:	483d      	ldr	r0, [pc, #244]	; (800096c <main+0x100>)
 8000878:	f7ff fd30 	bl	80002dc <SVPWM_Init>
  VHZ_Init(&vhz1, 1, 0.1, 10, 100);
 800087c:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8000970 <main+0x104>
 8000880:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000884:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8000974 <main+0x108>
 8000888:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800088c:	483a      	ldr	r0, [pc, #232]	; (8000978 <main+0x10c>)
 800088e:	f7ff ff61 	bl	8000754 <VHZ_Init>
  PIDController_Init(&slip, 5, 0, -500, 500, 0, 0, 10000);
 8000892:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8000968 <main+0xfc>
 8000896:	eddf 2a39 	vldr	s5, [pc, #228]	; 800097c <main+0x110>
 800089a:	ed9f 2a38 	vldr	s4, [pc, #224]	; 800097c <main+0x110>
 800089e:	eddf 1a38 	vldr	s3, [pc, #224]	; 8000980 <main+0x114>
 80008a2:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8000984 <main+0x118>
 80008a6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800097c <main+0x110>
 80008aa:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80008ae:	4836      	ldr	r0, [pc, #216]	; (8000988 <main+0x11c>)
 80008b0:	f7ff fcde 	bl	8000270 <PIDController_Init>
  char spi_buf[20];
  char uart_buf[50];
  int uart_buf_len;
  uint8_t addr;
  uint8_t wip;
  uint8_t state = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fdb4 	bl	8001426 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f873 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fabf 	bl	8000e44 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c6:	f000 f991 	bl	8000bec <MX_TIM1_Init>
  MX_TIM15_Init();
 80008ca:	f000 fa69 	bl	8000da0 <MX_TIM15_Init>
  MX_SPI1_Init();
 80008ce:	f000 f94f 	bl	8000b70 <MX_SPI1_Init>
  MX_ADC1_Init();
 80008d2:	f000 f8e9 	bl	8000aa8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Chip select pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	482c      	ldr	r0, [pc, #176]	; (800098c <main+0x120>)
 80008dc:	f002 f94c 	bl	8002b78 <HAL_GPIO_WritePin>
  //uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);

  // Set starting address in EEPROM (arbitrarily set to 5). Note that for the
  // 25AA040A, we can't do sequential writes outside of page (16 bytes)
  addr = 0x05;
 80008e0:	2305      	movs	r3, #5
 80008e2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//  HAL_SPI_Transmit(&hspi1, (uint8_t*)&EEPROM_WREN, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
//

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	4829      	ldr	r0, [pc, #164]	; (8000990 <main+0x124>)
 80008ea:	f003 fd5f 	bl	80043ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	4827      	ldr	r0, [pc, #156]	; (8000990 <main+0x124>)
 80008f2:	f004 fdb7 	bl	8005464 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008f6:	2104      	movs	r1, #4
 80008f8:	4825      	ldr	r0, [pc, #148]	; (8000990 <main+0x124>)
 80008fa:	f003 fd57 	bl	80043ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008fe:	2104      	movs	r1, #4
 8000900:	4823      	ldr	r0, [pc, #140]	; (8000990 <main+0x124>)
 8000902:	f004 fdaf 	bl	8005464 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000906:	2108      	movs	r1, #8
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <main+0x124>)
 800090a:	f003 fd4f 	bl	80043ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800090e:	2108      	movs	r1, #8
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <main+0x124>)
 8000912:	f004 fda7 	bl	8005464 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8000916:	481f      	ldr	r0, [pc, #124]	; (8000994 <main+0x128>)
 8000918:	f003 fc92 	bl	8004240 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while(1){
	nFaultData = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800091c:	2101      	movs	r1, #1
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f002 f911 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <main+0x12c>)
 800092c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc1);
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <main+0x130>)
 8000930:	f001 f91e 	bl	8001b70 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <main+0x130>)
 800093a:	f001 f97c 	bl	8001c36 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 800093e:	4817      	ldr	r0, [pc, #92]	; (800099c <main+0x130>)
 8000940:	f001 fa01 	bl	8001d46 <HAL_ADC_GetValue>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0x134>)
 800094a:	801a      	strh	r2, [r3, #0]
	pwrGood = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f002 f8f9 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <main+0x138>)
 800095c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fdd5 	bl	8001510 <HAL_Delay>
	nFaultData = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000966:	e7d9      	b.n	800091c <main+0xb0>
 8000968:	461c4000 	.word	0x461c4000
 800096c:	2000024c 	.word	0x2000024c
 8000970:	42c80000 	.word	0x42c80000
 8000974:	3dcccccd 	.word	0x3dcccccd
 8000978:	20000180 	.word	0x20000180
 800097c:	00000000 	.word	0x00000000
 8000980:	43fa0000 	.word	0x43fa0000
 8000984:	c3fa0000 	.word	0xc3fa0000
 8000988:	200000f4 	.word	0x200000f4
 800098c:	48000400 	.word	0x48000400
 8000990:	2000019c 	.word	0x2000019c
 8000994:	200000a8 	.word	0x200000a8
 8000998:	2000008e 	.word	0x2000008e
 800099c:	2000011c 	.word	0x2000011c
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	20000090 	.word	0x20000090

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ac      	sub	sp, #176	; 0xb0
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009b2:	2244      	movs	r2, #68	; 0x44
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 ff3e 	bl	8005838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2254      	movs	r2, #84	; 0x54
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 ff30 	bl	8005838 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009f8:	230a      	movs	r3, #10
 80009fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009fe:	2307      	movs	r3, #7
 8000a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f92b 	bl	8002c70 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a20:	f000 fabc 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a30:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fd34 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a4e:	f000 faa5 	bl	8000f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a66:	2308      	movs	r3, #8
 8000a68:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fee2 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a8a:	f000 fa87 	bl	8000f9c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a92:	f002 f897 	bl	8002bc4 <HAL_PWREx_ControlVoltageScaling>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a9c:	f000 fa7e 	bl	8000f9c <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	37b0      	adds	r7, #176	; 0xb0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ac0:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <MX_ADC1_Init+0xc0>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b20:	f000 fee0 	bl	80018e4 <HAL_ADC_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f000 fa37 	bl	8000f9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_ADC1_Init+0xc4>)
 8000b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b32:	2306      	movs	r3, #6
 8000b34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b3a:	237f      	movs	r3, #127	; 0x7f
 8000b3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_ADC1_Init+0xbc>)
 8000b4c:	f001 f908 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b56:	f000 fa21 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000011c 	.word	0x2000011c
 8000b68:	50040000 	.word	0x50040000
 8000b6c:	25b00200 	.word	0x25b00200

08000b70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <MX_SPI1_Init+0x78>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000ba6:	2228      	movs	r2, #40	; 0x28
 8000ba8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_SPI1_Init+0x74>)
 8000bd0:	f003 f91c 	bl	8003e0c <HAL_SPI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bda:	f000 f9df 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001e8 	.word	0x200001e8
 8000be8:	40013000 	.word	0x40013000

08000bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b09e      	sub	sp, #120	; 0x78
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	222c      	movs	r2, #44	; 0x2c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fdfe 	bl	8005838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c3c:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c3e:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <MX_TIM1_Init+0x1b0>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000c42:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c44:	224f      	movs	r2, #79	; 0x4f
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c4a:	2260      	movs	r2, #96	; 0x60
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c4e:	4b52      	ldr	r3, [pc, #328]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c50:	2263      	movs	r2, #99	; 0x63
 8000c52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5a:	4b4f      	ldr	r3, [pc, #316]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c66:	484c      	ldr	r0, [pc, #304]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c68:	f003 fa93 	bl	8004192 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c72:	f000 f993 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c80:	4619      	mov	r1, r3
 8000c82:	4845      	ldr	r0, [pc, #276]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c84:	f003 fea0 	bl	80049c8 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c8e:	f000 f985 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c92:	4841      	ldr	r0, [pc, #260]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000c94:	f003 fb28 	bl	80042e8 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000c9e:	f000 f97d 	bl	8000f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000caa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4839      	ldr	r0, [pc, #228]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000cb2:	f003 ff42 	bl	8004b3a <HAL_TIM_SlaveConfigSynchro>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000cbc:	f000 f96e 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4831      	ldr	r0, [pc, #196]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000cd4:	f004 fc64 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cde:	f000 f95d 	bl	8000f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	; 0x60
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000d08:	f003 fd4e 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d12:	f000 f943 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481e      	ldr	r0, [pc, #120]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000d20:	f003 fd42 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d2a:	f000 f937 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	2208      	movs	r2, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000d38:	f003 fd36 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d42:	f000 f92b 	bl	8000f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000d7c:	f004 fc76 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000d86:	f000 f909 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM1_Init+0x1ac>)
 8000d8c:	f000 fa1a 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000d90:	bf00      	nop
 8000d92:	3778      	adds	r7, #120	; 0x78
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000019c 	.word	0x2000019c
 8000d9c:	40012c00 	.word	0x40012c00

08000da0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <MX_TIM15_Init+0xa0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dc8:	224f      	movs	r2, #79	; 0x4f
 8000dca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dd4:	2263      	movs	r2, #99	; 0x63
 8000dd6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000dec:	f003 f9d1 	bl	8004192 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 f8d1 	bl	8000f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000e0a:	f003 fe96 	bl	8004b3a <HAL_TIM_SlaveConfigSynchro>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000e14:	f000 f8c2 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_TIM15_Init+0x9c>)
 8000e26:	f004 fbbb 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000e30:	f000 f8b4 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	40014000 	.word	0x40014000

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f001 fe71 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	4828      	ldr	r0, [pc, #160]	; (8000f3c <MX_GPIO_Init+0xf8>)
 8000e9c:	f001 fe6c 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f001 fcdd 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f001 fcce 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f001 fcbc 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <MX_GPIO_Init+0xf8>)
 8000f14:	f001 fcae 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0xf8>)
 8000f2c:	f001 fca2 	bl	8002874 <HAL_GPIO_Init>

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_TIM_PeriodElapsedCallback>:

}
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	char msg[10];

	OldSector = svpwm1.SectorPointer;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f52:	ee17 2a90 	vmov	r2, s15
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f58:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f5c:	f7ff fc30 	bl	80007c0 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f66:	f7ff f9fd 	bl	8000364 <SVPWM_Update>
	//Count_Up(&svpwm1, OldSector);



	sprintf(msg, "%hu\r\n",raw);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fc66 	bl	8005848 <siprintf>
	//HAL_UART_Transmit(&huart1,(uint8_t)msg, strlen(msg), HAL_MAX_DELAY);

}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000024c 	.word	0x2000024c
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	20000180 	.word	0x20000180
 8000f90:	2000019c 	.word	0x2000019c
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	08006b04 	.word	0x08006b04

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <HAL_ADC_MspInit+0x74>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d124      	bne.n	8001060 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_ADC_MspInit+0x78>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_ADC_MspInit+0x78>)
 800101c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_ADC_MspInit+0x78>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_ADC_MspInit+0x78>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_ADC_MspInit+0x78>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_ADC_MspInit+0x78>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001046:	2338      	movs	r3, #56	; 0x38
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104a:	230b      	movs	r3, #11
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 fc0a 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	50040000 	.word	0x50040000
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a29      	ldr	r2, [pc, #164]	; (8001134 <HAL_SPI_MspInit+0xc4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d14c      	bne.n	800112c <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 8001098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109c:	6613      	str	r3, [r2, #96]	; 0x60
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_SPI_MspInit+0xc8>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80010da:	2342      	movs	r3, #66	; 0x42
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ea:	2305      	movs	r3, #5
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f001 fbbc 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010fc:	2320      	movs	r3, #32
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110c:	2305      	movs	r3, #5
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4809      	ldr	r0, [pc, #36]	; (800113c <HAL_SPI_MspInit+0xcc>)
 8001118:	f001 fbac 	bl	8002874 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2023      	movs	r0, #35	; 0x23
 8001122:	f001 fb30 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001126:	2023      	movs	r0, #35	; 0x23
 8001128:	f001 fb49 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013000 	.word	0x40013000
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_TIM_Base_MspInit+0x78>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d114      	bne.n	800117c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 8001158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2018      	movs	r0, #24
 8001170:	f001 fb09 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001174:	2018      	movs	r0, #24
 8001176:	f001 fb22 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800117a:	e018      	b.n	80011ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_TIM_Base_MspInit+0x80>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d113      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6613      	str	r3, [r2, #96]	; 0x60
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x7c>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 faef 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80011a8:	2018      	movs	r0, #24
 80011aa:	f001 fb08 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40014000 	.word	0x40014000

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <HAL_TIM_MspPostInit+0xa0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d139      	bne.n	800125a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_TIM_MspPostInit+0xa4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001216:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001228:	2301      	movs	r3, #1
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f001 fb1d 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800123a:	2303      	movs	r3, #3
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800124a:	2301      	movs	r3, #1
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_TIM_MspPostInit+0xa8>)
 8001256:	f001 fb0d 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40012c00 	.word	0x40012c00
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f904 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80012d2:	f003 f949 	bl	8004568 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80012d8:	f003 f946 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000019c 	.word	0x2000019c
 80012e4:	200000a8 	.word	0x200000a8

080012e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <SPI1_IRQHandler+0x10>)
 80012ee:	f002 fe31 	bl	8003f54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001e8 	.word	0x200001e8

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f004 fa5a 	bl	80057e4 <__errno>
 8001330:	4602      	mov	r2, r0
 8001332:	230c      	movs	r3, #12
 8001334:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20010000 	.word	0x20010000
 800135c:	00000400 	.word	0x00000400
 8001360:	20000094 	.word	0x20000094
 8001364:	20000290 	.word	0x20000290

08001368 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <SystemInit+0x64>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <SystemInit+0x64>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <SystemInit+0x68>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <SystemInit+0x68>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <SystemInit+0x68>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <SystemInit+0x68>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <SystemInit+0x68>)
 8001394:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001398:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800139c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <SystemInit+0x68>)
 80013a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <SystemInit+0x68>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <SystemInit+0x68>)
 80013ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <SystemInit+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SystemInit+0x64>)
 80013ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013be:	609a      	str	r2, [r3, #8]
#endif
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	40021000 	.word	0x40021000

080013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d8:	f7ff ffc6 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013de:	e003      	b.n	80013e8 <LoopCopyDataInit>

080013e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013e6:	3104      	adds	r1, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013f0:	d3f6      	bcc.n	80013e0 <CopyDataInit>
	ldr	r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
	b	LoopFillZerobss
 80013f4:	e002      	b.n	80013fc <LoopFillZerobss>

080013f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013f8:	f842 3b04 	str.w	r3, [r2], #4

080013fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <LoopForever+0x16>)
	cmp	r2, r3
 80013fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001400:	d3f9      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f004 f9f5 	bl	80057f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001406:	f7ff fa31 	bl	800086c <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001410:	08006f58 	.word	0x08006f58
	ldr	r0, =_sdata
 8001414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001418:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800141c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001420:	20000290 	.word	0x20000290

08001424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_IRQHandler>

08001426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f001 f99d 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f80e 	bl	8001458 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e001      	b.n	800144c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001448:	f7ff fdb0 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_InitTick+0x70>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f001 f9a9 	bl	80027da <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d809      	bhi.n	80014a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f001 f973 	bl	8002786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_InitTick+0x74>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e004      	b.n	80014b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000288 	.word	0x20000288

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000288 	.word	0x20000288

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_Delay+0x40>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000008 	.word	0x20000008

08001554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3360      	adds	r3, #96	; 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LL_ADC_SetOffset+0x44>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	03fff000 	.word	0x03fff000

08001604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3360      	adds	r3, #96	; 0x60
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3360      	adds	r3, #96	; 0x60
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3330      	adds	r3, #48	; 0x30
 800169c:	461a      	mov	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	4413      	add	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	211f      	movs	r1, #31
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	f003 011f 	and.w	r1, r3, #31
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	431a      	orrs	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3314      	adds	r3, #20
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0e5b      	lsrs	r3, r3, #25
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0d1b      	lsrs	r3, r3, #20
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2107      	movs	r1, #7
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0d1b      	lsrs	r3, r3, #20
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0318 	and.w	r3, r3, #24
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001760:	40d9      	lsrs	r1, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	400b      	ands	r3, r1
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	431a      	orrs	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0007ffff 	.word	0x0007ffff

08001784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6093      	str	r3, [r2, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <LL_ADC_IsEnabled+0x18>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_ADC_IsEnabled+0x1a>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001882:	f043 0204 	orr.w	r2, r3, #4
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d101      	bne.n	80018ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d101      	bne.n	80018d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12a      	b.n	8001b54 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fb71 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff3f 	bl	80017a8 <LL_ADC_IsDeepPowerDownEnabled>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff25 	bl	8001784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff5a 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d113      	bne.n	8001972 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff3e 	bl	80017d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001954:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_ADC_Init+0x278>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	4a81      	ldr	r2, [pc, #516]	; (8001b60 <HAL_ADC_Init+0x27c>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001964:	e002      	b.n	800196c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3b01      	subs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f9      	bne.n	8001966 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff3e 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f043 0210 	orr.w	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff77 	bl	8001896 <LL_ADC_REG_IsConversionOngoing>
 80019a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 80c5 	bne.w	8001b42 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80c1 	bne.w	8001b42 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019c8:	f043 0202 	orr.w	r2, r3, #2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff37 	bl	8001848 <LL_ADC_IsEnabled>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019e0:	4860      	ldr	r0, [pc, #384]	; (8001b64 <HAL_ADC_Init+0x280>)
 80019e2:	f7ff ff31 	bl	8001848 <LL_ADC_IsEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	485d      	ldr	r0, [pc, #372]	; (8001b68 <HAL_ADC_Init+0x284>)
 80019f4:	f7ff fdae 	bl	8001554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e5b      	ldrb	r3, [r3, #25]
 80019fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d106      	bne.n	8001a34 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	045b      	lsls	r3, r3, #17
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <HAL_ADC_Init+0x288>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff14 	bl	8001896 <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff21 	bl	80018bc <LL_ADC_INJ_IsConversionOngoing>
 8001a7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13d      	bne.n	8001afe <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d13a      	bne.n	8001afe <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa4:	f023 0302 	bic.w	r3, r3, #2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d118      	bne.n	8001aee <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	e007      	b.n	8001afe <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10c      	bne.n	8001b20 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f023 010f 	bic.w	r1, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 020f 	bic.w	r2, r2, #15
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	053e2d63 	.word	0x053e2d63
 8001b64:	50040000 	.word	0x50040000
 8001b68:	50040300 	.word	0x50040300
 8001b6c:	fff0c007 	.word	0xfff0c007

08001b70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe8a 	bl	8001896 <LL_ADC_REG_IsConversionOngoing>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d14f      	bne.n	8001c28 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Start+0x26>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e04b      	b.n	8001c2e <HAL_ADC_Start+0xbe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fcbc 	bl	800251c <ADC_Enable>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d137      	bne.n	8001c1e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bce:	d106      	bne.n	8001bde <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f023 0206 	bic.w	r2, r3, #6
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	221c      	movs	r2, #28
 8001bea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fe29 	bl	800186e <LL_ADC_REG_StartConversion>
 8001c1c:	e006      	b.n	8001c2c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d102      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e010      	b.n	8001c70 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e068      	b.n	8001d3e <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c70:	f7ff fc42 	bl	80014f8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c76:	e01a      	b.n	8001cae <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d016      	beq.n	8001cae <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c80:	f7ff fc3a 	bl	80014f8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d302      	bcc.n	8001c96 <HAL_ADC_PollForConversion+0x60>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e047      	b.n	8001d3e <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0dd      	beq.n	8001c78 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fcca 	bl	8001666 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01c      	beq.n	8001d12 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e5b      	ldrb	r3, [r3, #25]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d118      	bne.n	8001d12 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d104      	bne.n	8001d2a <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2208      	movs	r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e008      	b.n	8001d3c <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	220c      	movs	r2, #12
 8001d3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0b6      	sub	sp, #216	; 0xd8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x22>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e3b8      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x794>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fd81 	bl	8001896 <LL_ADC_REG_IsConversionOngoing>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 839d 	bne.w	80024d6 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d824      	bhi.n	8001dee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	3b02      	subs	r3, #2
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d81b      	bhi.n	8001de6 <HAL_ADC_ConfigChannel+0x86>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_ADC_ConfigChannel+0x54>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dc5 	.word	0x08001dc5
 8001db8:	08001dcd 	.word	0x08001dcd
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001ddd 	.word	0x08001ddd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	605a      	str	r2, [r3, #4]
          break;
 8001dca:	e011      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2212      	movs	r2, #18
 8001dd0:	605a      	str	r2, [r3, #4]
          break;
 8001dd2:	e00d      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2218      	movs	r2, #24
 8001dd8:	605a      	str	r2, [r3, #4]
          break;
 8001dda:	e009      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de2:	605a      	str	r2, [r3, #4]
          break;
 8001de4:	e004      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2206      	movs	r2, #6
 8001dea:	605a      	str	r2, [r3, #4]
          break;
 8001dec:	e000      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001dee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f7ff fc45 	bl	800168c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fd45 	bl	8001896 <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fd51 	bl	80018bc <LL_ADC_INJ_IsConversionOngoing>
 8001e1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 81a6 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 81a1 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f7ff fc50 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d00a      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e76:	f7ff fba1 	bl	80015bc <LL_ADC_SetOffset>
 8001e7a:	e17b      	b.n	8002174 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fbbe 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x148>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fbb3 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	e01e      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x186>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fba8 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e004      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x19e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	e018      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1d0>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e004      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fb77 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fb5b 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x20e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb50 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	e01e      	b.n	8001fac <HAL_ADC_ConfigChannel+0x24c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb45 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e004      	b.n	8001faa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x264>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	e018      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x296>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e004      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fb14 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff faf8 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2d4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff faed 	bl	8001604 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	e01e      	b.n	8002072 <HAL_ADC_ConfigChannel+0x312>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fae2 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800205a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e004      	b.n	8002070 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002066:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x32a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e016      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x358>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800209c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e004      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2102      	movs	r1, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fab3 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2103      	movs	r1, #3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fa97 	bl	8001604 <LL_ADC_GetOffsetChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x396>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2103      	movs	r1, #3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fa8c 	bl	8001604 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	e017      	b.n	8002126 <HAL_ADC_ConfigChannel+0x3c6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2103      	movs	r1, #3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa81 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800210e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002110:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800211c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_ADC_ConfigChannel+0x3de>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	e011      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800214c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e003      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002162:	429a      	cmp	r2, r3
 8002164:	d106      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	2103      	movs	r1, #3
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fa5e 	bl	8001630 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fb65 	bl	8001848 <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 813f 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fad2 	bl	800173c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a8e      	ldr	r2, [pc, #568]	; (80023d8 <HAL_ADC_ConfigChannel+0x678>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f040 8130 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x46c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e019      	b.n	8002200 <HAL_ADC_ConfigChannel+0x4a0>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e003      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	bf94      	ite	ls
 80021fa:	2301      	movls	r3, #1
 80021fc:	2300      	movhi	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002200:	2b00      	cmp	r3, #0
 8002202:	d079      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x4c0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	3301      	adds	r3, #1
 8002218:	069b      	lsls	r3, r3, #26
 800221a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221e:	e015      	b.n	800224c <HAL_ADC_ConfigChannel+0x4ec>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	069b      	lsls	r3, r3, #26
 8002248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_ConfigChannel+0x50c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	3301      	adds	r3, #1
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	e017      	b.n	800229c <HAL_ADC_ConfigChannel+0x53c>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800227a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	ea42 0103 	orr.w	r1, r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x562>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	051b      	lsls	r3, r3, #20
 80022c0:	e018      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x594>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e003      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	430b      	orrs	r3, r1
 80022f6:	e080      	b.n	80023fa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x5b4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002312:	e015      	b.n	8002340 <HAL_ADC_ConfigChannel+0x5e0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x600>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	e017      	b.n	8002390 <HAL_ADC_ConfigChannel+0x630>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	61fb      	str	r3, [r7, #28]
  return result;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x65c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ba:	e01d      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x698>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	613b      	str	r3, [r7, #16]
  return result;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e005      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x684>
 80023d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	3b1e      	subs	r3, #30
 80023f2:	051b      	lsls	r3, r3, #20
 80023f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	4619      	mov	r1, r3
 8002400:	f7ff f970 	bl	80016e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <HAL_ADC_ConfigChannel+0x79c>)
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06b      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002410:	483b      	ldr	r0, [pc, #236]	; (8002500 <HAL_ADC_ConfigChannel+0x7a0>)
 8002412:	f7ff f8c5 	bl	80015a0 <LL_ADC_GetCommonPathInternalCh>
 8002416:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a39      	ldr	r2, [pc, #228]	; (8002504 <HAL_ADC_ConfigChannel+0x7a4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d126      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d120      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a34      	ldr	r2, [pc, #208]	; (8002508 <HAL_ADC_ConfigChannel+0x7a8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d156      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002442:	4619      	mov	r1, r3
 8002444:	482e      	ldr	r0, [pc, #184]	; (8002500 <HAL_ADC_ConfigChannel+0x7a0>)
 8002446:	f7ff f898 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_ADC_ConfigChannel+0x7ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <HAL_ADC_ConfigChannel+0x7b0>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099a      	lsrs	r2, r3, #6
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002462:	e002      	b.n	800246a <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3b01      	subs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002470:	e03a      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_ADC_ConfigChannel+0x7b4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d113      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x744>
 800247c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_ADC_ConfigChannel+0x7a8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	4619      	mov	r1, r3
 800249c:	4818      	ldr	r0, [pc, #96]	; (8002500 <HAL_ADC_ConfigChannel+0x7a0>)
 800249e:	f7ff f86c 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a2:	e021      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_ADC_ConfigChannel+0x7b8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11c      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_ADC_ConfigChannel+0x7a8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024cc:	4619      	mov	r1, r3
 80024ce:	480c      	ldr	r0, [pc, #48]	; (8002500 <HAL_ADC_ConfigChannel+0x7a0>)
 80024d0:	f7ff f853 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
 80024d4:	e008      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	37d8      	adds	r7, #216	; 0xd8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	80080000 	.word	0x80080000
 8002500:	50040300 	.word	0x50040300
 8002504:	c7520000 	.word	0xc7520000
 8002508:	50040000 	.word	0x50040000
 800250c:	20000000 	.word	0x20000000
 8002510:	053e2d63 	.word	0x053e2d63
 8002514:	cb840000 	.word	0xcb840000
 8002518:	80000001 	.word	0x80000001

0800251c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f98d 	bl	8001848 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d146      	bne.n	80025c2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <ADC_Enable+0xb0>)
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e032      	b.n	80025c4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f95c 	bl	8001820 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002568:	f7fe ffc6 	bl	80014f8 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256e:	e021      	b.n	80025b4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f967 	bl	8001848 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f94b 	bl	8001820 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258a:	f7fe ffb5 	bl	80014f8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d90d      	bls.n	80025b4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d1d6      	bne.n	8002570 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	8000003f 	.word	0x8000003f

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d005      	beq.n	8002816 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e029      	b.n	800286a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020e 	bic.w	r2, r2, #14
 8002824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 021c 	and.w	r2, r3, #28
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
    }
  }
  return status;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e148      	b.n	8002b16 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 813a 	beq.w	8002b10 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d00b      	beq.n	80028bc <HAL_GPIO_Init+0x48>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	d130      	bne.n	800291e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0201 	and.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0xea>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b12      	cmp	r3, #18
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8094 	beq.w	8002b10 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6613      	str	r3, [r2, #96]	; 0x60
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a00:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <HAL_GPIO_Init+0x2c4>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d00d      	beq.n	8002a48 <HAL_GPIO_Init+0x1d4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a43      	ldr	r2, [pc, #268]	; (8002b3c <HAL_GPIO_Init+0x2c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <HAL_GPIO_Init+0x1d0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_GPIO_Init+0x1cc>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a40:	2307      	movs	r3, #7
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a5a:	4937      	ldr	r1, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a68:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f aeaf 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	48000800 	.word	0x48000800
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40007000 	.word	0x40007000

08002bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd2:	d130      	bne.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d038      	beq.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2232      	movs	r2, #50	; 0x32
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0c9b      	lsrs	r3, r3, #18
 8002c04:	3301      	adds	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c08:	e002      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1c:	d102      	bne.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f2      	bne.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d110      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e00f      	b.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d007      	beq.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4c:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40007000 	.word	0x40007000
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	431bde83 	.word	0x431bde83

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f000 bc11 	b.w	80034a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c84:	4ba0      	ldr	r3, [pc, #640]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c8e:	4b9e      	ldr	r3, [pc, #632]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80e4 	beq.w	8002e6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4c>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	f040 808b 	bne.w	8002dca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 8087 	bne.w	8002dca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x64>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e3e8      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_RCC_OscConfig+0x7e>
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cec:	e005      	b.n	8002cfa <HAL_RCC_OscConfig+0x8a>
 8002cee:	4b86      	ldr	r3, [pc, #536]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d223      	bcs.n	8002d46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fd40 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e3c9      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d12:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b7a      	ldr	r3, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4977      	ldr	r1, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d30:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	4972      	ldr	r1, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
 8002d44:	e025      	b.n	8002d92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6f      	ldr	r2, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	496a      	ldr	r1, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4965      	ldr	r1, [pc, #404]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fd00 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e389      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d92:	f000 fc6f 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8002d96:	4601      	mov	r1, r0
 8002d98:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	4a5a      	ldr	r2, [pc, #360]	; (8002f0c <HAL_RCC_OscConfig+0x29c>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_RCC_OscConfig+0x2a0>)
 8002db0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002db2:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <HAL_RCC_OscConfig+0x2a4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fb4e 	bl	8001458 <HAL_InitTick>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d052      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	e36d      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d032      	beq.n	8002e38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fb8b 	bl	80014f8 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de6:	f7fe fb87 	bl	80014f8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e356      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3f      	ldr	r2, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	493a      	ldr	r1, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	4935      	ldr	r1, [pc, #212]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
 8002e36:	e01a      	b.n	8002e6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fb58 	bl	80014f8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fb54 	bl	80014f8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e323      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1dc>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d073      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x21c>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d10e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d063      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d15f      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e300      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x24c>
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x288>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x270>
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x288>
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x298>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fafa 	bl	80014f8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	e010      	b.n	8002f2a <HAL_RCC_OscConfig+0x2ba>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	08006b0c 	.word	0x08006b0c
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe faee 	bl	80014f8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e2bd      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	4baf      	ldr	r3, [pc, #700]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2a8>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fade 	bl	80014f8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fada 	bl	80014f8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e2a9      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f52:	4ba5      	ldr	r3, [pc, #660]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2d0>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d060      	beq.n	8003030 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_OscConfig+0x310>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d116      	bne.n	8002fae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f80:	4b99      	ldr	r3, [pc, #612]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_OscConfig+0x328>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e286      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b93      	ldr	r3, [pc, #588]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	4990      	ldr	r1, [pc, #576]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fac:	e040      	b.n	8003030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d023      	beq.n	8002ffe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb6:	4b8c      	ldr	r3, [pc, #560]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8b      	ldr	r2, [pc, #556]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fa99 	bl	80014f8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fa95 	bl	80014f8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e264      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fdc:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	497c      	ldr	r1, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	e018      	b.n	8003030 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a79      	ldr	r2, [pc, #484]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fa75 	bl	80014f8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe fa71 	bl	80014f8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e240      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003024:	4b70      	ldr	r3, [pc, #448]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d03c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01c      	beq.n	800307e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003044:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	4a67      	ldr	r2, [pc, #412]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fa50 	bl	80014f8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fa4c 	bl	80014f8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e21b      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306e:	4b5e      	ldr	r3, [pc, #376]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ef      	beq.n	800305c <HAL_RCC_OscConfig+0x3ec>
 800307c:	e01b      	b.n	80030b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fa33 	bl	80014f8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe fa2f 	bl	80014f8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1fe      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a8:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ef      	bne.n	8003096 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80a6 	beq.w	8003210 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c8:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10d      	bne.n	80030f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f0:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <HAL_RCC_OscConfig+0x57c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d118      	bne.n	800312e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x57c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0x57c>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003108:	f7fe f9f6 	bl	80014f8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe f9f2 	bl	80014f8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1c1      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003122:	4b32      	ldr	r3, [pc, #200]	; (80031ec <HAL_RCC_OscConfig+0x57c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d108      	bne.n	8003148 <HAL_RCC_OscConfig+0x4d8>
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003146:	e024      	b.n	8003192 <HAL_RCC_OscConfig+0x522>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b05      	cmp	r3, #5
 800314e:	d110      	bne.n	8003172 <HAL_RCC_OscConfig+0x502>
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003170:	e00f      	b.n	8003192 <HAL_RCC_OscConfig+0x522>
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe f9ad 	bl	80014f8 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe f9a9 	bl	80014f8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e176      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x578>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ed      	beq.n	80031a2 <HAL_RCC_OscConfig+0x532>
 80031c6:	e01a      	b.n	80031fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe f996 	bl	80014f8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe f992 	bl	80014f8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d906      	bls.n	80031f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e15f      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f0:	4baa      	ldr	r3, [pc, #680]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e8      	bne.n	80031d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fe:	7ffb      	ldrb	r3, [r7, #31]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4ba5      	ldr	r3, [pc, #660]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4aa4      	ldr	r2, [pc, #656]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03c      	beq.n	8003296 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01c      	beq.n	800325e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003224:	4b9d      	ldr	r3, [pc, #628]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800322a:	4a9c      	ldr	r2, [pc, #624]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe f960 	bl	80014f8 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800323c:	f7fe f95c 	bl	80014f8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e12b      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324e:	4b93      	ldr	r3, [pc, #588]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ef      	beq.n	800323c <HAL_RCC_OscConfig+0x5cc>
 800325c:	e01b      	b.n	8003296 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800325e:	4b8f      	ldr	r3, [pc, #572]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003264:	4a8d      	ldr	r2, [pc, #564]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe f943 	bl	80014f8 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003276:	f7fe f93f 	bl	80014f8 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e10e      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003288:	4b84      	ldr	r3, [pc, #528]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 800328a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ef      	bne.n	8003276 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8102 	beq.w	80034a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f040 80c5 	bne.w	8003434 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032aa:	4b7c      	ldr	r3, [pc, #496]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d12c      	bne.n	8003318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	3b01      	subs	r3, #1
 80032ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d123      	bne.n	8003318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d11b      	bne.n	8003318 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d113      	bne.n	8003318 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d109      	bne.n	8003318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d067      	beq.n	80033e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d062      	beq.n	80033e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0bb      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800332e:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5a      	ldr	r2, [pc, #360]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003338:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333a:	f7fe f8dd 	bl	80014f8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe f8d9 	bl	80014f8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0a8      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003360:	4b4e      	ldr	r3, [pc, #312]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCC_OscConfig+0x830>)
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003370:	3a01      	subs	r2, #1
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800337a:	0212      	lsls	r2, r2, #8
 800337c:	4311      	orrs	r1, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003382:	0852      	lsrs	r2, r2, #1
 8003384:	3a01      	subs	r2, #1
 8003386:	0552      	lsls	r2, r2, #21
 8003388:	4311      	orrs	r1, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	0652      	lsls	r2, r2, #25
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800339a:	06d2      	lsls	r2, r2, #27
 800339c:	430a      	orrs	r2, r1
 800339e:	493f      	ldr	r1, [pc, #252]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033a4:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3c      	ldr	r2, [pc, #240]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a39      	ldr	r2, [pc, #228]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033bc:	f7fe f89c 	bl	80014f8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe f898 	bl	80014f8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e067      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e2:	e05f      	b.n	80034a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e05e      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d157      	bne.n	80034a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003400:	4b26      	ldr	r3, [pc, #152]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a25      	ldr	r2, [pc, #148]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800340c:	f7fe f874 	bl	80014f8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe f870 	bl	80014f8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e03f      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x7a4>
 8003432:	e037      	b.n	80034a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d02d      	beq.n	8003496 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003444:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003458:	f023 0303 	bic.w	r3, r3, #3
 800345c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 8003464:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe f843 	bl	80014f8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe f83f 	bl	80014f8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e00e      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCC_OscConfig+0x82c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x806>
 8003494:	e006      	b.n	80034a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e005      	b.n	80034a6 <HAL_RCC_OscConfig+0x836>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0c8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b66      	ldr	r3, [pc, #408]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0207 	bic.w	r2, r3, #7
 80034da:	4961      	ldr	r1, [pc, #388]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d04c      	beq.n	800359a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d107      	bne.n	8003518 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003508:	4b56      	ldr	r3, [pc, #344]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d121      	bne.n	8003558 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e09e      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d107      	bne.n	8003530 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d115      	bne.n	8003558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e092      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e086      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003548:	4b46      	ldr	r3, [pc, #280]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e07e      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	493f      	ldr	r1, [pc, #252]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356a:	f7fd ffc5 	bl	80014f8 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003570:	e00a      	b.n	8003588 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003572:	f7fd ffc1 	bl	80014f8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e066      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 020c 	and.w	r2, r3, #12
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	429a      	cmp	r2, r3
 8003598:	d1eb      	bne.n	8003572 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	492c      	ldr	r1, [pc, #176]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d210      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0207 	bic.w	r2, r3, #7
 80035ce:	4924      	ldr	r1, [pc, #144]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e036      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4918      	ldr	r1, [pc, #96]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4910      	ldr	r1, [pc, #64]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003626:	f000 f825 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 800362a:	4601      	mov	r1, r0
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <HAL_RCC_ClockConfig+0x1b4>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	fa21 f303 	lsr.w	r3, r1, r3
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd ff04 	bl	8001458 <HAL_InitTick>
 8003650:	4603      	mov	r3, r0
 8003652:	72fb      	strb	r3, [r7, #11]

  return status;
 8003654:	7afb      	ldrb	r3, [r7, #11]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	08006b0c 	.word	0x08006b0c
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003682:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368c:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x34>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d121      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d11e      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036b4:	4b30      	ldr	r3, [pc, #192]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e004      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_GetSysClockFreq+0x110>)
 80036fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d133      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xa4>
 8003712:	2b03      	cmp	r3, #3
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0xaa>
 8003716:	e005      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_GetSysClockFreq+0x10c>)
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e005      	b.n	800372a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_GetSysClockFreq+0x110>)
 8003720:	617b      	str	r3, [r7, #20]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	617b      	str	r3, [r7, #20]
      break;
 8003728:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800372a:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	3301      	adds	r3, #1
 8003736:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	fb02 f203 	mul.w	r2, r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_GetSysClockFreq+0x104>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0e5b      	lsrs	r3, r3, #25
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800376a:	69bb      	ldr	r3, [r7, #24]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3724      	adds	r7, #36	; 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	08006b1c 	.word	0x08006b1c
 8003780:	00f42400 	.word	0x00f42400
 8003784:	007a1200 	.word	0x007a1200

08003788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a0:	f7ff fa02 	bl	8002ba8 <HAL_PWREx_GetVoltageRange>
 80037a4:	6178      	str	r0, [r7, #20]
 80037a6:	e014      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	; 0x58
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c0:	f7ff f9f2 	bl	8002ba8 <HAL_PWREx_GetVoltageRange>
 80037c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d10b      	bne.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d919      	bls.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2ba0      	cmp	r3, #160	; 0xa0
 80037e4:	d902      	bls.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e6:	2302      	movs	r3, #2
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e013      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e010      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d902      	bls.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037f8:	2303      	movs	r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e00a      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d102      	bne.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003804:	2302      	movs	r3, #2
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e004      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d101      	bne.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	4909      	ldr	r1, [pc, #36]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	40022000 	.word	0x40022000

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003850:	2300      	movs	r3, #0
 8003852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003854:	2300      	movs	r3, #0
 8003856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02f      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800386c:	d005      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800386e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003872:	d015      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003878:	e00f      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800387a:	4bac      	ldr	r3, [pc, #688]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4aab      	ldr	r2, [pc, #684]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003886:	e00c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f9cc 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	74fb      	strb	r3, [r7, #19]
      break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80038a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a8:	4ba0      	ldr	r3, [pc, #640]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	499d      	ldr	r1, [pc, #628]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038be:	e001      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8099 	beq.w	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a8e      	ldr	r2, [pc, #568]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003904:	2301      	movs	r3, #1
 8003906:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003908:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a88      	ldr	r2, [pc, #544]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800390e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003914:	f7fd fdf0 	bl	80014f8 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800391a:	e009      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fd fdec 	bl	80014f8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	74fb      	strb	r3, [r7, #19]
        break;
 800392e:	e005      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003930:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d155      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003942:	4b7a      	ldr	r3, [pc, #488]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d019      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800397a:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	4a6a      	ldr	r2, [pc, #424]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800398a:	4a68      	ldr	r2, [pc, #416]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fdac 	bl	80014f8 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a2:	e00b      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fda8 	bl	80014f8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d902      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	74fb      	strb	r3, [r7, #19]
            break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039bc:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ec      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039de:	4953      	ldr	r1, [pc, #332]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
 80039ec:	e001      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f2:	7c7b      	ldrb	r3, [r7, #17]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a4b      	ldr	r2, [pc, #300]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a10:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4943      	ldr	r1, [pc, #268]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a32:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 020c 	bic.w	r2, r3, #12
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	493a      	ldr	r1, [pc, #232]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a54:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	4932      	ldr	r1, [pc, #200]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	4929      	ldr	r1, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4921      	ldr	r1, [pc, #132]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4918      	ldr	r1, [pc, #96]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4910      	ldr	r1, [pc, #64]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02c      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1c:	d10a      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1e:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b28:	60d3      	str	r3, [r2, #12]
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f871 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d028      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	492d      	ldr	r1, [pc, #180]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b82:	d106      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
 8003b90:	e011      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f842 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01c      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	4915      	ldr	r1, [pc, #84]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f81f 	bl	8003c2c <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4904      	ldr	r1, [pc, #16]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000

08003c2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3a:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d044      	beq.n	8003cfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e041      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00c      	beq.n	8003c9a <RCCEx_PLLSAI1_Config+0x6e>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d013      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x80>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d120      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c88:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d11d      	bne.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c98:	e01a      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003caa:	e013      	b.n	8003cd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cac:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cc8:	e006      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cce:	e004      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003cd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ce0:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	4944      	ldr	r1, [pc, #272]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d17c      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fbf3 	bl	80014f8 <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d14:	e009      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d16:	f7fd fbef 	bl	80014f8 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	73fb      	strb	r3, [r7, #15]
        break;
 8003d28:	e005      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d15f      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d110      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	0211      	lsls	r1, r2, #8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68d2      	ldr	r2, [r2, #12]
 8003d58:	06d2      	lsls	r2, r2, #27
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	492a      	ldr	r1, [pc, #168]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	610b      	str	r3, [r1, #16]
 8003d62:	e027      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d112      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6892      	ldr	r2, [r2, #8]
 8003d7a:	0211      	lsls	r1, r2, #8
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6912      	ldr	r2, [r2, #16]
 8003d80:	0852      	lsrs	r2, r2, #1
 8003d82:	3a01      	subs	r2, #1
 8003d84:	0552      	lsls	r2, r2, #21
 8003d86:	430a      	orrs	r2, r1
 8003d88:	491f      	ldr	r1, [pc, #124]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	610b      	str	r3, [r1, #16]
 8003d8e:	e011      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6952      	ldr	r2, [r2, #20]
 8003da6:	0852      	lsrs	r2, r2, #1
 8003da8:	3a01      	subs	r2, #1
 8003daa:	0652      	lsls	r2, r2, #25
 8003dac:	430a      	orrs	r2, r1
 8003dae:	4916      	ldr	r1, [pc, #88]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fb9a 	bl	80014f8 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc6:	e009      	b.n	8003ddc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dc8:	f7fd fb96 	bl	80014f8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d902      	bls.n	8003ddc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dda:	e005      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4904      	ldr	r1, [pc, #16]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e095      	b.n	8003f4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2e:	d009      	beq.n	8003e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
 8003e36:	e005      	b.n	8003e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f906 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e84:	d902      	bls.n	8003e8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e002      	b.n	8003e92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e9a:	d007      	beq.n	8003eac <HAL_SPI_Init+0xa0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	f003 0204 	and.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
    return;
 8003f96:	e0d8      	b.n	800414a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_SPI_IRQHandler+0x66>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	09db      	lsrs	r3, r3, #7
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
    return;
 8003fb8:	e0c7      	b.n	800414a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_SPI_IRQHandler+0x8c>
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80b5 	beq.w	800414a <HAL_SPI_IRQHandler+0x1f6>
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80ae 	beq.w	800414a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d023      	beq.n	8004042 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b03      	cmp	r3, #3
 8004004:	d011      	beq.n	800402a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400a:	f043 0204 	orr.w	r2, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e00b      	b.n	8004042 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
        return;
 8004040:	e083      	b.n	800414a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d014      	beq.n	8004078 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	f043 0208 	orr.w	r2, r3, #8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d050      	beq.n	8004148 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_SPI_IRQHandler+0x17e>
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d034      	beq.n	800413c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0203 	bic.w	r2, r2, #3
 80040e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d011      	beq.n	800410e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_SPI_IRQHandler+0x1fc>)
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fb7b 	bl	80027f2 <HAL_DMA_Abort_IT>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <HAL_SPI_IRQHandler+0x1fc>)
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fb65 	bl	80027f2 <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800413a:	e003      	b.n	8004144 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f809 	bl	8004154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004142:	e000      	b.n	8004146 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004144:	bf00      	nop
    return;
 8004146:	bf00      	nop
 8004148:	bf00      	nop
  }
}
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	08004169 	.word	0x08004169

08004154 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff ffe5 	bl	8004154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e049      	b.n	8004238 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fc ffc1 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f000 fd1d 	bl	8004c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e03b      	b.n	80042d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_TIM_Base_Start_IT+0x9c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIM_Base_Start_IT+0x4e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d004      	beq.n	800428e <HAL_TIM_Base_Start_IT+0x4e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d115      	bne.n	80042ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b06      	cmp	r3, #6
 800429e:	d015      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x8c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d011      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	e008      	b.n	80042cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e000      	b.n	80042ce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014000 	.word	0x40014000
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e049      	b.n	800438e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f841 	bl	8004396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 fc72 	bl	8004c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_PWM_Start+0x24>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e03c      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d109      	bne.n	80043ea <HAL_TIM_PWM_Start+0x3e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e02f      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x58>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e022      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start+0x72>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e015      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x8c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e07e      	b.n	8004550 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xb6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	e023      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xc6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	e01b      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xd6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	e013      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_Start+0xe6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004490:	e00b      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b10      	cmp	r3, #16
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xf6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	e003      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 ffb0 	bl	8005418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_TIM_PWM_Start+0x1ac>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_TIM_PWM_Start+0x12a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <HAL_TIM_PWM_Start+0x1b0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIM_PWM_Start+0x12a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_TIM_PWM_Start+0x1b4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_TIM_PWM_Start+0x12e>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_TIM_PWM_Start+0x130>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_TIM_PWM_Start+0x1ac>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIM_PWM_Start+0x162>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004502:	d004      	beq.n	800450e <HAL_TIM_PWM_Start+0x162>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <HAL_TIM_PWM_Start+0x1b0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d115      	bne.n	800453a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_TIM_PWM_Start+0x1b8>)
 8004516:	4013      	ands	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d015      	beq.n	800454c <HAL_TIM_PWM_Start+0x1a0>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d011      	beq.n	800454c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e008      	b.n	800454c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e000      	b.n	800454e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	00010007 	.word	0x00010007

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fb11 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fb03 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fb14 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fae7 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fad9 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 faea 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fabd 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 faaf 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fac0 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa93 	bl	8004bd2 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa85 	bl	8004bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa96 	bl	8004be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fc2a 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 f82c 	bl	8005770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d10e      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 f81f 	bl	8005784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d107      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa44 	bl	8004bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d10e      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d107      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0220 	mvn.w	r2, #32
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 ffdf 	bl	800575c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e0fd      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x216>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b14      	cmp	r3, #20
 80047ce:	f200 80f0 	bhi.w	80049b2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	080049b3 	.word	0x080049b3
 80047e0:	080049b3 	.word	0x080049b3
 80047e4:	080049b3 	.word	0x080049b3
 80047e8:	0800486d 	.word	0x0800486d
 80047ec:	080049b3 	.word	0x080049b3
 80047f0:	080049b3 	.word	0x080049b3
 80047f4:	080049b3 	.word	0x080049b3
 80047f8:	080048af 	.word	0x080048af
 80047fc:	080049b3 	.word	0x080049b3
 8004800:	080049b3 	.word	0x080049b3
 8004804:	080049b3 	.word	0x080049b3
 8004808:	080048ef 	.word	0x080048ef
 800480c:	080049b3 	.word	0x080049b3
 8004810:	080049b3 	.word	0x080049b3
 8004814:	080049b3 	.word	0x080049b3
 8004818:	08004931 	.word	0x08004931
 800481c:	080049b3 	.word	0x080049b3
 8004820:	080049b3 	.word	0x080049b3
 8004824:	080049b3 	.word	0x080049b3
 8004828:	08004971 	.word	0x08004971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa50 	bl	8004cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0208 	orr.w	r2, r2, #8
 8004846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6999      	ldr	r1, [r3, #24]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	619a      	str	r2, [r3, #24]
      break;
 800486a:	e0a3      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 faac 	bl	8004dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6999      	ldr	r1, [r3, #24]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	021a      	lsls	r2, r3, #8
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	619a      	str	r2, [r3, #24]
      break;
 80048ac:	e082      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fb05 	bl	8004ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0208 	orr.w	r2, r2, #8
 80048c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0204 	bic.w	r2, r2, #4
 80048d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69d9      	ldr	r1, [r3, #28]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	61da      	str	r2, [r3, #28]
      break;
 80048ec:	e062      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb5d 	bl	8004fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69d9      	ldr	r1, [r3, #28]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	021a      	lsls	r2, r3, #8
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	61da      	str	r2, [r3, #28]
      break;
 800492e:	e041      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb9a 	bl	8005070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0208 	orr.w	r2, r2, #8
 800494a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800496e:	e021      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fbd2 	bl	8005120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800498a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	021a      	lsls	r2, r3, #8
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80049b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop

080049c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_ConfigClockSource+0x18>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0a8      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x16a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d067      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x124>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d80b      	bhi.n	8004a38 <HAL_TIM_ConfigClockSource+0x70>
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d073      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0x144>
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d802      	bhi.n	8004a2e <HAL_TIM_ConfigClockSource+0x66>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d06f      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a2c:	e078      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d06c      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0x144>
 8004a32:	2b30      	cmp	r3, #48	; 0x30
 8004a34:	d06a      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004a36:	e073      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d00d      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x90>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d804      	bhi.n	8004a4a <HAL_TIM_ConfigClockSource+0x82>
 8004a40:	2b50      	cmp	r3, #80	; 0x50
 8004a42:	d033      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0xe4>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d041      	beq.n	8004acc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004a48:	e06a      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d066      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x156>
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a54:	d017      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004a56:	e063      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f000 fcb6 	bl	80053d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
      break;
 8004a84:	e04c      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f000 fc9f 	bl	80053d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa8:	609a      	str	r2, [r3, #8]
      break;
 8004aaa:	e039      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f000 fc13 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2150      	movs	r1, #80	; 0x50
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fc6c 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004aca:	e029      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f000 fc32 	bl	8005342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2160      	movs	r1, #96	; 0x60
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fc5c 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004aea:	e019      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	461a      	mov	r2, r3
 8004afa:	f000 fbf3 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2140      	movs	r1, #64	; 0x40
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fc4c 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8004b0a:	e009      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fc43 	bl	80053a2 <TIM_ITRx_SetConfig>
        break;
 8004b1c:	e000      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e031      	b.n	8004bb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb35 	bl	80051d4 <TIM_SlaveTimer_SetConfig>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e018      	b.n	8004bb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ba2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0xbc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0x20>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d108      	bne.n	8004c42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <TIM_Base_SetConfig+0xbc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0x52>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0x52>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <TIM_Base_SetConfig+0xc0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0x52>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <TIM_Base_SetConfig+0xc4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <TIM_Base_SetConfig+0xbc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0xa0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <TIM_Base_SetConfig+0xc0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0xa0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <TIM_Base_SetConfig+0xc4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400

08004cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0302 	bic.w	r3, r3, #2
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <TIM_OC1_SetConfig+0xec>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC1_SetConfig+0x70>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <TIM_OC1_SetConfig+0xf0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC1_SetConfig+0x70>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <TIM_OC1_SetConfig+0xf4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10c      	bne.n	8004d62 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0308 	bic.w	r3, r3, #8
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <TIM_OC1_SetConfig+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_OC1_SetConfig+0xa2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC1_SetConfig+0xf0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_OC1_SetConfig+0xa2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC1_SetConfig+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d111      	bne.n	8004d9e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	621a      	str	r2, [r3, #32]
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400

08004dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0210 	bic.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <TIM_OC2_SetConfig+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10d      	bne.n	8004e50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <TIM_OC2_SetConfig+0xe8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_OC2_SetConfig+0x98>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <TIM_OC2_SetConfig+0xec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x98>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <TIM_OC2_SetConfig+0xf0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400

08004ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <TIM_OC3_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_OC3_SetConfig+0xe4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_OC3_SetConfig+0x96>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a17      	ldr	r2, [pc, #92]	; (8004fac <TIM_OC3_SetConfig+0xe8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_OC3_SetConfig+0x96>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <TIM_OC3_SetConfig+0xec>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d113      	bne.n	8004f82 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	031b      	lsls	r3, r3, #12
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC4_SetConfig+0xb0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC4_SetConfig+0x74>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_OC4_SetConfig+0xb4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC4_SetConfig+0x74>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a12      	ldr	r2, [pc, #72]	; (800506c <TIM_OC4_SetConfig+0xb8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400

08005070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a13      	ldr	r2, [pc, #76]	; (8005114 <TIM_OC5_SetConfig+0xa4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_OC5_SetConfig+0x6a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a12      	ldr	r2, [pc, #72]	; (8005118 <TIM_OC5_SetConfig+0xa8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC5_SetConfig+0x6a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a11      	ldr	r2, [pc, #68]	; (800511c <TIM_OC5_SetConfig+0xac>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d109      	bne.n	80050ee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400

08005120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	051b      	lsls	r3, r3, #20
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a14      	ldr	r2, [pc, #80]	; (80051c8 <TIM_OC6_SetConfig+0xa8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC6_SetConfig+0x6c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <TIM_OC6_SetConfig+0xac>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC6_SetConfig+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_OC6_SetConfig+0xb0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d109      	bne.n	80051a0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	029b      	lsls	r3, r3, #10
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400

080051d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fe:	f023 0307 	bic.w	r3, r3, #7
 8005202:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b30      	cmp	r3, #48	; 0x30
 800521c:	d05c      	beq.n	80052d8 <TIM_SlaveTimer_SetConfig+0x104>
 800521e:	2b30      	cmp	r3, #48	; 0x30
 8005220:	d806      	bhi.n	8005230 <TIM_SlaveTimer_SetConfig+0x5c>
 8005222:	2b10      	cmp	r3, #16
 8005224:	d058      	beq.n	80052d8 <TIM_SlaveTimer_SetConfig+0x104>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d056      	beq.n	80052d8 <TIM_SlaveTimer_SetConfig+0x104>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d054      	beq.n	80052d8 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800522e:	e054      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8005230:	2b50      	cmp	r3, #80	; 0x50
 8005232:	d03d      	beq.n	80052b0 <TIM_SlaveTimer_SetConfig+0xdc>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d802      	bhi.n	800523e <TIM_SlaveTimer_SetConfig+0x6a>
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d010      	beq.n	800525e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800523c:	e04d      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800523e:	2b60      	cmp	r3, #96	; 0x60
 8005240:	d040      	beq.n	80052c4 <TIM_SlaveTimer_SetConfig+0xf0>
 8005242:	2b70      	cmp	r3, #112	; 0x70
 8005244:	d000      	beq.n	8005248 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8005246:	e048      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68d9      	ldr	r1, [r3, #12]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f000 f8be 	bl	80053d8 <TIM_ETR_SetConfig>
      break;
 800525c:	e03d      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b05      	cmp	r3, #5
 8005264:	d101      	bne.n	800526a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e038      	b.n	80052dc <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005290:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
      break;
 80052ae:	e014      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6899      	ldr	r1, [r3, #8]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	461a      	mov	r2, r3
 80052be:	f000 f811 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      break;
 80052c2:	e00a      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	461a      	mov	r2, r3
 80052d2:	f000 f836 	bl	8005342 <TIM_TI2_ConfigInputStage>
      break;
 80052d6:	e000      	b.n	80052da <TIM_SlaveTimer_SetConfig+0x106>
        break;
 80052d8:	bf00      	nop
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f043 0307 	orr.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_TIMEx_PWMN_Start+0x24>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e022      	b.n	80054ce <HAL_TIMEx_PWMN_Start+0x6a>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d109      	bne.n	80054a2 <HAL_TIMEx_PWMN_Start+0x3e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	bf14      	ite	ne
 800549a:	2301      	movne	r3, #1
 800549c:	2300      	moveq	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e015      	b.n	80054ce <HAL_TIMEx_PWMN_Start+0x6a>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d109      	bne.n	80054bc <HAL_TIMEx_PWMN_Start+0x58>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e008      	b.n	80054ce <HAL_TIMEx_PWMN_Start+0x6a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e05a      	b.n	800558c <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <HAL_TIMEx_PWMN_Start+0x82>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e4:	e013      	b.n	800550e <HAL_TIMEx_PWMN_Start+0xaa>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d104      	bne.n	80054f6 <HAL_TIMEx_PWMN_Start+0x92>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f4:	e00b      	b.n	800550e <HAL_TIMEx_PWMN_Start+0xaa>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d104      	bne.n	8005506 <HAL_TIMEx_PWMN_Start+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005504:	e003      	b.n	800550e <HAL_TIMEx_PWMN_Start+0xaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2204      	movs	r2, #4
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f93e 	bl	8005798 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIMEx_PWMN_Start+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_PWMN_Start+0xe6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_PWMN_Start+0xe6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <HAL_TIMEx_PWMN_Start+0x134>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d115      	bne.n	8005576 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_TIMEx_PWMN_Start+0x138>)
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b06      	cmp	r3, #6
 800555a:	d015      	beq.n	8005588 <HAL_TIMEx_PWMN_Start+0x124>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d011      	beq.n	8005588 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	e008      	b.n	8005588 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e000      	b.n	800558a <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40014000 	.word	0x40014000
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04f      	b.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a14      	ldr	r2, [pc, #80]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d004      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a10      	ldr	r2, [pc, #64]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10c      	bne.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40014000 	.word	0x40014000

0800566c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e060      	b.n	800574a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d115      	bne.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	051b      	lsls	r3, r3, #20
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00

0800575c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2204      	movs	r2, #4
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <__errno>:
 80057e4:	4b01      	ldr	r3, [pc, #4]	; (80057ec <__errno+0x8>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <__libc_init_array>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0d      	ldr	r6, [pc, #52]	; (8005828 <__libc_init_array+0x38>)
 80057f4:	4c0d      	ldr	r4, [pc, #52]	; (800582c <__libc_init_array+0x3c>)
 80057f6:	1ba4      	subs	r4, r4, r6
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	2500      	movs	r5, #0
 80057fc:	42a5      	cmp	r5, r4
 80057fe:	d109      	bne.n	8005814 <__libc_init_array+0x24>
 8005800:	4e0b      	ldr	r6, [pc, #44]	; (8005830 <__libc_init_array+0x40>)
 8005802:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x44>)
 8005804:	f001 f972 	bl	8006aec <_init>
 8005808:	1ba4      	subs	r4, r4, r6
 800580a:	10a4      	asrs	r4, r4, #2
 800580c:	2500      	movs	r5, #0
 800580e:	42a5      	cmp	r5, r4
 8005810:	d105      	bne.n	800581e <__libc_init_array+0x2e>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005818:	4798      	blx	r3
 800581a:	3501      	adds	r5, #1
 800581c:	e7ee      	b.n	80057fc <__libc_init_array+0xc>
 800581e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005822:	4798      	blx	r3
 8005824:	3501      	adds	r5, #1
 8005826:	e7f2      	b.n	800580e <__libc_init_array+0x1e>
 8005828:	08006f50 	.word	0x08006f50
 800582c:	08006f50 	.word	0x08006f50
 8005830:	08006f50 	.word	0x08006f50
 8005834:	08006f54 	.word	0x08006f54

08005838 <memset>:
 8005838:	4402      	add	r2, r0
 800583a:	4603      	mov	r3, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	f803 1b01 	strb.w	r1, [r3], #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <siprintf>:
 8005848:	b40e      	push	{r1, r2, r3}
 800584a:	b500      	push	{lr}
 800584c:	b09c      	sub	sp, #112	; 0x70
 800584e:	ab1d      	add	r3, sp, #116	; 0x74
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	9006      	str	r0, [sp, #24]
 8005854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005858:	4809      	ldr	r0, [pc, #36]	; (8005880 <siprintf+0x38>)
 800585a:	9107      	str	r1, [sp, #28]
 800585c:	9104      	str	r1, [sp, #16]
 800585e:	4909      	ldr	r1, [pc, #36]	; (8005884 <siprintf+0x3c>)
 8005860:	f853 2b04 	ldr.w	r2, [r3], #4
 8005864:	9105      	str	r1, [sp, #20]
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	a902      	add	r1, sp, #8
 800586c:	f000 f866 	bl	800593c <_svfiprintf_r>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	b01c      	add	sp, #112	; 0x70
 8005878:	f85d eb04 	ldr.w	lr, [sp], #4
 800587c:	b003      	add	sp, #12
 800587e:	4770      	bx	lr
 8005880:	2000000c 	.word	0x2000000c
 8005884:	ffff0208 	.word	0xffff0208

08005888 <__ssputs_r>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	688e      	ldr	r6, [r1, #8]
 800588e:	429e      	cmp	r6, r3
 8005890:	4682      	mov	sl, r0
 8005892:	460c      	mov	r4, r1
 8005894:	4690      	mov	r8, r2
 8005896:	4699      	mov	r9, r3
 8005898:	d837      	bhi.n	800590a <__ssputs_r+0x82>
 800589a:	898a      	ldrh	r2, [r1, #12]
 800589c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058a0:	d031      	beq.n	8005906 <__ssputs_r+0x7e>
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	6909      	ldr	r1, [r1, #16]
 80058a6:	1a6f      	subs	r7, r5, r1
 80058a8:	6965      	ldr	r5, [r4, #20]
 80058aa:	2302      	movs	r3, #2
 80058ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80058b4:	f109 0301 	add.w	r3, r9, #1
 80058b8:	443b      	add	r3, r7
 80058ba:	429d      	cmp	r5, r3
 80058bc:	bf38      	it	cc
 80058be:	461d      	movcc	r5, r3
 80058c0:	0553      	lsls	r3, r2, #21
 80058c2:	d530      	bpl.n	8005926 <__ssputs_r+0x9e>
 80058c4:	4629      	mov	r1, r5
 80058c6:	f000 fb2b 	bl	8005f20 <_malloc_r>
 80058ca:	4606      	mov	r6, r0
 80058cc:	b950      	cbnz	r0, 80058e4 <__ssputs_r+0x5c>
 80058ce:	230c      	movs	r3, #12
 80058d0:	f8ca 3000 	str.w	r3, [sl]
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e4:	463a      	mov	r2, r7
 80058e6:	6921      	ldr	r1, [r4, #16]
 80058e8:	f000 faa8 	bl	8005e3c <memcpy>
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	6126      	str	r6, [r4, #16]
 80058fa:	6165      	str	r5, [r4, #20]
 80058fc:	443e      	add	r6, r7
 80058fe:	1bed      	subs	r5, r5, r7
 8005900:	6026      	str	r6, [r4, #0]
 8005902:	60a5      	str	r5, [r4, #8]
 8005904:	464e      	mov	r6, r9
 8005906:	454e      	cmp	r6, r9
 8005908:	d900      	bls.n	800590c <__ssputs_r+0x84>
 800590a:	464e      	mov	r6, r9
 800590c:	4632      	mov	r2, r6
 800590e:	4641      	mov	r1, r8
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	f000 fa9e 	bl	8005e52 <memmove>
 8005916:	68a3      	ldr	r3, [r4, #8]
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	60a3      	str	r3, [r4, #8]
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	441e      	add	r6, r3
 8005920:	6026      	str	r6, [r4, #0]
 8005922:	2000      	movs	r0, #0
 8005924:	e7dc      	b.n	80058e0 <__ssputs_r+0x58>
 8005926:	462a      	mov	r2, r5
 8005928:	f000 fb54 	bl	8005fd4 <_realloc_r>
 800592c:	4606      	mov	r6, r0
 800592e:	2800      	cmp	r0, #0
 8005930:	d1e2      	bne.n	80058f8 <__ssputs_r+0x70>
 8005932:	6921      	ldr	r1, [r4, #16]
 8005934:	4650      	mov	r0, sl
 8005936:	f000 faa5 	bl	8005e84 <_free_r>
 800593a:	e7c8      	b.n	80058ce <__ssputs_r+0x46>

0800593c <_svfiprintf_r>:
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	461d      	mov	r5, r3
 8005942:	898b      	ldrh	r3, [r1, #12]
 8005944:	061f      	lsls	r7, r3, #24
 8005946:	b09d      	sub	sp, #116	; 0x74
 8005948:	4680      	mov	r8, r0
 800594a:	460c      	mov	r4, r1
 800594c:	4616      	mov	r6, r2
 800594e:	d50f      	bpl.n	8005970 <_svfiprintf_r+0x34>
 8005950:	690b      	ldr	r3, [r1, #16]
 8005952:	b96b      	cbnz	r3, 8005970 <_svfiprintf_r+0x34>
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	f000 fae3 	bl	8005f20 <_malloc_r>
 800595a:	6020      	str	r0, [r4, #0]
 800595c:	6120      	str	r0, [r4, #16]
 800595e:	b928      	cbnz	r0, 800596c <_svfiprintf_r+0x30>
 8005960:	230c      	movs	r3, #12
 8005962:	f8c8 3000 	str.w	r3, [r8]
 8005966:	f04f 30ff 	mov.w	r0, #4294967295
 800596a:	e0c8      	b.n	8005afe <_svfiprintf_r+0x1c2>
 800596c:	2340      	movs	r3, #64	; 0x40
 800596e:	6163      	str	r3, [r4, #20]
 8005970:	2300      	movs	r3, #0
 8005972:	9309      	str	r3, [sp, #36]	; 0x24
 8005974:	2320      	movs	r3, #32
 8005976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800597a:	2330      	movs	r3, #48	; 0x30
 800597c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005980:	9503      	str	r5, [sp, #12]
 8005982:	f04f 0b01 	mov.w	fp, #1
 8005986:	4637      	mov	r7, r6
 8005988:	463d      	mov	r5, r7
 800598a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800598e:	b10b      	cbz	r3, 8005994 <_svfiprintf_r+0x58>
 8005990:	2b25      	cmp	r3, #37	; 0x25
 8005992:	d13e      	bne.n	8005a12 <_svfiprintf_r+0xd6>
 8005994:	ebb7 0a06 	subs.w	sl, r7, r6
 8005998:	d00b      	beq.n	80059b2 <_svfiprintf_r+0x76>
 800599a:	4653      	mov	r3, sl
 800599c:	4632      	mov	r2, r6
 800599e:	4621      	mov	r1, r4
 80059a0:	4640      	mov	r0, r8
 80059a2:	f7ff ff71 	bl	8005888 <__ssputs_r>
 80059a6:	3001      	adds	r0, #1
 80059a8:	f000 80a4 	beq.w	8005af4 <_svfiprintf_r+0x1b8>
 80059ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ae:	4453      	add	r3, sl
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	783b      	ldrb	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 809d 	beq.w	8005af4 <_svfiprintf_r+0x1b8>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059cc:	931a      	str	r3, [sp, #104]	; 0x68
 80059ce:	462f      	mov	r7, r5
 80059d0:	2205      	movs	r2, #5
 80059d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80059d6:	4850      	ldr	r0, [pc, #320]	; (8005b18 <_svfiprintf_r+0x1dc>)
 80059d8:	f7fa fbfa 	bl	80001d0 <memchr>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	b9d0      	cbnz	r0, 8005a16 <_svfiprintf_r+0xda>
 80059e0:	06d9      	lsls	r1, r3, #27
 80059e2:	bf44      	itt	mi
 80059e4:	2220      	movmi	r2, #32
 80059e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059ea:	071a      	lsls	r2, r3, #28
 80059ec:	bf44      	itt	mi
 80059ee:	222b      	movmi	r2, #43	; 0x2b
 80059f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059f4:	782a      	ldrb	r2, [r5, #0]
 80059f6:	2a2a      	cmp	r2, #42	; 0x2a
 80059f8:	d015      	beq.n	8005a26 <_svfiprintf_r+0xea>
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	462f      	mov	r7, r5
 80059fe:	2000      	movs	r0, #0
 8005a00:	250a      	movs	r5, #10
 8005a02:	4639      	mov	r1, r7
 8005a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a08:	3b30      	subs	r3, #48	; 0x30
 8005a0a:	2b09      	cmp	r3, #9
 8005a0c:	d94d      	bls.n	8005aaa <_svfiprintf_r+0x16e>
 8005a0e:	b1b8      	cbz	r0, 8005a40 <_svfiprintf_r+0x104>
 8005a10:	e00f      	b.n	8005a32 <_svfiprintf_r+0xf6>
 8005a12:	462f      	mov	r7, r5
 8005a14:	e7b8      	b.n	8005988 <_svfiprintf_r+0x4c>
 8005a16:	4a40      	ldr	r2, [pc, #256]	; (8005b18 <_svfiprintf_r+0x1dc>)
 8005a18:	1a80      	subs	r0, r0, r2
 8005a1a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a1e:	4318      	orrs	r0, r3
 8005a20:	9004      	str	r0, [sp, #16]
 8005a22:	463d      	mov	r5, r7
 8005a24:	e7d3      	b.n	80059ce <_svfiprintf_r+0x92>
 8005a26:	9a03      	ldr	r2, [sp, #12]
 8005a28:	1d11      	adds	r1, r2, #4
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	9103      	str	r1, [sp, #12]
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	db01      	blt.n	8005a36 <_svfiprintf_r+0xfa>
 8005a32:	9207      	str	r2, [sp, #28]
 8005a34:	e004      	b.n	8005a40 <_svfiprintf_r+0x104>
 8005a36:	4252      	negs	r2, r2
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	9207      	str	r2, [sp, #28]
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	783b      	ldrb	r3, [r7, #0]
 8005a42:	2b2e      	cmp	r3, #46	; 0x2e
 8005a44:	d10c      	bne.n	8005a60 <_svfiprintf_r+0x124>
 8005a46:	787b      	ldrb	r3, [r7, #1]
 8005a48:	2b2a      	cmp	r3, #42	; 0x2a
 8005a4a:	d133      	bne.n	8005ab4 <_svfiprintf_r+0x178>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	1d1a      	adds	r2, r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	9203      	str	r2, [sp, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfb8      	it	lt
 8005a58:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a5c:	3702      	adds	r7, #2
 8005a5e:	9305      	str	r3, [sp, #20]
 8005a60:	4d2e      	ldr	r5, [pc, #184]	; (8005b1c <_svfiprintf_r+0x1e0>)
 8005a62:	7839      	ldrb	r1, [r7, #0]
 8005a64:	2203      	movs	r2, #3
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7fa fbb2 	bl	80001d0 <memchr>
 8005a6c:	b138      	cbz	r0, 8005a7e <_svfiprintf_r+0x142>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	1b40      	subs	r0, r0, r5
 8005a72:	fa03 f000 	lsl.w	r0, r3, r0
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	4303      	orrs	r3, r0
 8005a7a:	3701      	adds	r7, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	7839      	ldrb	r1, [r7, #0]
 8005a80:	4827      	ldr	r0, [pc, #156]	; (8005b20 <_svfiprintf_r+0x1e4>)
 8005a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a86:	2206      	movs	r2, #6
 8005a88:	1c7e      	adds	r6, r7, #1
 8005a8a:	f7fa fba1 	bl	80001d0 <memchr>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d038      	beq.n	8005b04 <_svfiprintf_r+0x1c8>
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <_svfiprintf_r+0x1e8>)
 8005a94:	bb13      	cbnz	r3, 8005adc <_svfiprintf_r+0x1a0>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	3307      	adds	r3, #7
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa4:	444b      	add	r3, r9
 8005aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa8:	e76d      	b.n	8005986 <_svfiprintf_r+0x4a>
 8005aaa:	fb05 3202 	mla	r2, r5, r2, r3
 8005aae:	2001      	movs	r0, #1
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	e7a6      	b.n	8005a02 <_svfiprintf_r+0xc6>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	3701      	adds	r7, #1
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	4619      	mov	r1, r3
 8005abc:	250a      	movs	r5, #10
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac4:	3a30      	subs	r2, #48	; 0x30
 8005ac6:	2a09      	cmp	r2, #9
 8005ac8:	d903      	bls.n	8005ad2 <_svfiprintf_r+0x196>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0c8      	beq.n	8005a60 <_svfiprintf_r+0x124>
 8005ace:	9105      	str	r1, [sp, #20]
 8005ad0:	e7c6      	b.n	8005a60 <_svfiprintf_r+0x124>
 8005ad2:	fb05 2101 	mla	r1, r5, r1, r2
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4607      	mov	r7, r0
 8005ada:	e7f0      	b.n	8005abe <_svfiprintf_r+0x182>
 8005adc:	ab03      	add	r3, sp, #12
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <_svfiprintf_r+0x1ec>)
 8005ae4:	a904      	add	r1, sp, #16
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f3af 8000 	nop.w
 8005aec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005af0:	4681      	mov	r9, r0
 8005af2:	d1d6      	bne.n	8005aa2 <_svfiprintf_r+0x166>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	065b      	lsls	r3, r3, #25
 8005af8:	f53f af35 	bmi.w	8005966 <_svfiprintf_r+0x2a>
 8005afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afe:	b01d      	add	sp, #116	; 0x74
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <_svfiprintf_r+0x1ec>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	4640      	mov	r0, r8
 8005b10:	f000 f882 	bl	8005c18 <_printf_i>
 8005b14:	e7ea      	b.n	8005aec <_svfiprintf_r+0x1b0>
 8005b16:	bf00      	nop
 8005b18:	08006b4c 	.word	0x08006b4c
 8005b1c:	08006b52 	.word	0x08006b52
 8005b20:	08006b56 	.word	0x08006b56
 8005b24:	00000000 	.word	0x00000000
 8005b28:	08005889 	.word	0x08005889

08005b2c <_printf_common>:
 8005b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	4691      	mov	r9, r2
 8005b32:	461f      	mov	r7, r3
 8005b34:	688a      	ldr	r2, [r1, #8]
 8005b36:	690b      	ldr	r3, [r1, #16]
 8005b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bfb8      	it	lt
 8005b40:	4613      	movlt	r3, r2
 8005b42:	f8c9 3000 	str.w	r3, [r9]
 8005b46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	b112      	cbz	r2, 8005b56 <_printf_common+0x2a>
 8005b50:	3301      	adds	r3, #1
 8005b52:	f8c9 3000 	str.w	r3, [r9]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b60:	3302      	addmi	r3, #2
 8005b62:	f8c9 3000 	strmi.w	r3, [r9]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	f015 0506 	ands.w	r5, r5, #6
 8005b6c:	d107      	bne.n	8005b7e <_printf_common+0x52>
 8005b6e:	f104 0a19 	add.w	sl, r4, #25
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	f8d9 2000 	ldr.w	r2, [r9]
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	42ab      	cmp	r3, r5
 8005b7c:	dc28      	bgt.n	8005bd0 <_printf_common+0xa4>
 8005b7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	3300      	adds	r3, #0
 8005b86:	bf18      	it	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	0692      	lsls	r2, r2, #26
 8005b8c:	d42d      	bmi.n	8005bea <_printf_common+0xbe>
 8005b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b92:	4639      	mov	r1, r7
 8005b94:	4630      	mov	r0, r6
 8005b96:	47c0      	blx	r8
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d020      	beq.n	8005bde <_printf_common+0xb2>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	68e5      	ldr	r5, [r4, #12]
 8005ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ba4:	f003 0306 	and.w	r3, r3, #6
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	bf08      	it	eq
 8005bac:	1aad      	subeq	r5, r5, r2
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	bf0c      	ite	eq
 8005bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb8:	2500      	movne	r5, #0
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bfc4      	itt	gt
 8005bbe:	1a9b      	subgt	r3, r3, r2
 8005bc0:	18ed      	addgt	r5, r5, r3
 8005bc2:	f04f 0900 	mov.w	r9, #0
 8005bc6:	341a      	adds	r4, #26
 8005bc8:	454d      	cmp	r5, r9
 8005bca:	d11a      	bne.n	8005c02 <_printf_common+0xd6>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e008      	b.n	8005be2 <_printf_common+0xb6>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	47c0      	blx	r8
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d103      	bne.n	8005be6 <_printf_common+0xba>
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be6:	3501      	adds	r5, #1
 8005be8:	e7c3      	b.n	8005b72 <_printf_common+0x46>
 8005bea:	18e1      	adds	r1, r4, r3
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	2030      	movs	r0, #48	; 0x30
 8005bf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bf4:	4422      	add	r2, r4
 8005bf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bfe:	3302      	adds	r3, #2
 8005c00:	e7c5      	b.n	8005b8e <_printf_common+0x62>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4622      	mov	r2, r4
 8005c06:	4639      	mov	r1, r7
 8005c08:	4630      	mov	r0, r6
 8005c0a:	47c0      	blx	r8
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d0e6      	beq.n	8005bde <_printf_common+0xb2>
 8005c10:	f109 0901 	add.w	r9, r9, #1
 8005c14:	e7d8      	b.n	8005bc8 <_printf_common+0x9c>
	...

08005c18 <_printf_i>:
 8005c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c20:	460c      	mov	r4, r1
 8005c22:	7e09      	ldrb	r1, [r1, #24]
 8005c24:	b085      	sub	sp, #20
 8005c26:	296e      	cmp	r1, #110	; 0x6e
 8005c28:	4617      	mov	r7, r2
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c30:	f000 80b3 	beq.w	8005d9a <_printf_i+0x182>
 8005c34:	d822      	bhi.n	8005c7c <_printf_i+0x64>
 8005c36:	2963      	cmp	r1, #99	; 0x63
 8005c38:	d036      	beq.n	8005ca8 <_printf_i+0x90>
 8005c3a:	d80a      	bhi.n	8005c52 <_printf_i+0x3a>
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	f000 80b9 	beq.w	8005db4 <_printf_i+0x19c>
 8005c42:	2958      	cmp	r1, #88	; 0x58
 8005c44:	f000 8083 	beq.w	8005d4e <_printf_i+0x136>
 8005c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c50:	e032      	b.n	8005cb8 <_printf_i+0xa0>
 8005c52:	2964      	cmp	r1, #100	; 0x64
 8005c54:	d001      	beq.n	8005c5a <_printf_i+0x42>
 8005c56:	2969      	cmp	r1, #105	; 0x69
 8005c58:	d1f6      	bne.n	8005c48 <_printf_i+0x30>
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	6813      	ldr	r3, [r2, #0]
 8005c5e:	0605      	lsls	r5, r0, #24
 8005c60:	f103 0104 	add.w	r1, r3, #4
 8005c64:	d52a      	bpl.n	8005cbc <_printf_i+0xa4>
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6011      	str	r1, [r2, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da03      	bge.n	8005c76 <_printf_i+0x5e>
 8005c6e:	222d      	movs	r2, #45	; 0x2d
 8005c70:	425b      	negs	r3, r3
 8005c72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c76:	486f      	ldr	r0, [pc, #444]	; (8005e34 <_printf_i+0x21c>)
 8005c78:	220a      	movs	r2, #10
 8005c7a:	e039      	b.n	8005cf0 <_printf_i+0xd8>
 8005c7c:	2973      	cmp	r1, #115	; 0x73
 8005c7e:	f000 809d 	beq.w	8005dbc <_printf_i+0x1a4>
 8005c82:	d808      	bhi.n	8005c96 <_printf_i+0x7e>
 8005c84:	296f      	cmp	r1, #111	; 0x6f
 8005c86:	d020      	beq.n	8005cca <_printf_i+0xb2>
 8005c88:	2970      	cmp	r1, #112	; 0x70
 8005c8a:	d1dd      	bne.n	8005c48 <_printf_i+0x30>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	f043 0320 	orr.w	r3, r3, #32
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	e003      	b.n	8005c9e <_printf_i+0x86>
 8005c96:	2975      	cmp	r1, #117	; 0x75
 8005c98:	d017      	beq.n	8005cca <_printf_i+0xb2>
 8005c9a:	2978      	cmp	r1, #120	; 0x78
 8005c9c:	d1d4      	bne.n	8005c48 <_printf_i+0x30>
 8005c9e:	2378      	movs	r3, #120	; 0x78
 8005ca0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca4:	4864      	ldr	r0, [pc, #400]	; (8005e38 <_printf_i+0x220>)
 8005ca6:	e055      	b.n	8005d54 <_printf_i+0x13c>
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	1d19      	adds	r1, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6011      	str	r1, [r2, #0]
 8005cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e08c      	b.n	8005dd6 <_printf_i+0x1be>
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6011      	str	r1, [r2, #0]
 8005cc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cc4:	bf18      	it	ne
 8005cc6:	b21b      	sxthne	r3, r3
 8005cc8:	e7cf      	b.n	8005c6a <_printf_i+0x52>
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	6825      	ldr	r5, [r4, #0]
 8005cce:	1d18      	adds	r0, r3, #4
 8005cd0:	6010      	str	r0, [r2, #0]
 8005cd2:	0628      	lsls	r0, r5, #24
 8005cd4:	d501      	bpl.n	8005cda <_printf_i+0xc2>
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	e002      	b.n	8005ce0 <_printf_i+0xc8>
 8005cda:	0668      	lsls	r0, r5, #25
 8005cdc:	d5fb      	bpl.n	8005cd6 <_printf_i+0xbe>
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	4854      	ldr	r0, [pc, #336]	; (8005e34 <_printf_i+0x21c>)
 8005ce2:	296f      	cmp	r1, #111	; 0x6f
 8005ce4:	bf14      	ite	ne
 8005ce6:	220a      	movne	r2, #10
 8005ce8:	2208      	moveq	r2, #8
 8005cea:	2100      	movs	r1, #0
 8005cec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf0:	6865      	ldr	r5, [r4, #4]
 8005cf2:	60a5      	str	r5, [r4, #8]
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	f2c0 8095 	blt.w	8005e24 <_printf_i+0x20c>
 8005cfa:	6821      	ldr	r1, [r4, #0]
 8005cfc:	f021 0104 	bic.w	r1, r1, #4
 8005d00:	6021      	str	r1, [r4, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d13d      	bne.n	8005d82 <_printf_i+0x16a>
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	f040 808e 	bne.w	8005e28 <_printf_i+0x210>
 8005d0c:	4665      	mov	r5, ip
 8005d0e:	2a08      	cmp	r2, #8
 8005d10:	d10b      	bne.n	8005d2a <_printf_i+0x112>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	07db      	lsls	r3, r3, #31
 8005d16:	d508      	bpl.n	8005d2a <_printf_i+0x112>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bfde      	ittt	le
 8005d20:	2330      	movle	r3, #48	; 0x30
 8005d22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d2a:	ebac 0305 	sub.w	r3, ip, r5
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	f8cd 8000 	str.w	r8, [sp]
 8005d34:	463b      	mov	r3, r7
 8005d36:	aa03      	add	r2, sp, #12
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff fef6 	bl	8005b2c <_printf_common>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d14d      	bne.n	8005de0 <_printf_i+0x1c8>
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295
 8005d48:	b005      	add	sp, #20
 8005d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	4839      	ldr	r0, [pc, #228]	; (8005e34 <_printf_i+0x21c>)
 8005d50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	6821      	ldr	r1, [r4, #0]
 8005d58:	1d1d      	adds	r5, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6015      	str	r5, [r2, #0]
 8005d5e:	060a      	lsls	r2, r1, #24
 8005d60:	d50b      	bpl.n	8005d7a <_printf_i+0x162>
 8005d62:	07ca      	lsls	r2, r1, #31
 8005d64:	bf44      	itt	mi
 8005d66:	f041 0120 	orrmi.w	r1, r1, #32
 8005d6a:	6021      	strmi	r1, [r4, #0]
 8005d6c:	b91b      	cbnz	r3, 8005d76 <_printf_i+0x15e>
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	f022 0220 	bic.w	r2, r2, #32
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	2210      	movs	r2, #16
 8005d78:	e7b7      	b.n	8005cea <_printf_i+0xd2>
 8005d7a:	064d      	lsls	r5, r1, #25
 8005d7c:	bf48      	it	mi
 8005d7e:	b29b      	uxthmi	r3, r3
 8005d80:	e7ef      	b.n	8005d62 <_printf_i+0x14a>
 8005d82:	4665      	mov	r5, ip
 8005d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d88:	fb02 3311 	mls	r3, r2, r1, r3
 8005d8c:	5cc3      	ldrb	r3, [r0, r3]
 8005d8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d92:	460b      	mov	r3, r1
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d1f5      	bne.n	8005d84 <_printf_i+0x16c>
 8005d98:	e7b9      	b.n	8005d0e <_printf_i+0xf6>
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	6825      	ldr	r5, [r4, #0]
 8005d9e:	6961      	ldr	r1, [r4, #20]
 8005da0:	1d18      	adds	r0, r3, #4
 8005da2:	6010      	str	r0, [r2, #0]
 8005da4:	0628      	lsls	r0, r5, #24
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	d501      	bpl.n	8005dae <_printf_i+0x196>
 8005daa:	6019      	str	r1, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <_printf_i+0x19c>
 8005dae:	066a      	lsls	r2, r5, #25
 8005db0:	d5fb      	bpl.n	8005daa <_printf_i+0x192>
 8005db2:	8019      	strh	r1, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	4665      	mov	r5, ip
 8005dba:	e7b9      	b.n	8005d30 <_printf_i+0x118>
 8005dbc:	6813      	ldr	r3, [r2, #0]
 8005dbe:	1d19      	adds	r1, r3, #4
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	681d      	ldr	r5, [r3, #0]
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f7fa fa01 	bl	80001d0 <memchr>
 8005dce:	b108      	cbz	r0, 8005dd4 <_printf_i+0x1bc>
 8005dd0:	1b40      	subs	r0, r0, r5
 8005dd2:	6060      	str	r0, [r4, #4]
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dde:	e7a7      	b.n	8005d30 <_printf_i+0x118>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	462a      	mov	r2, r5
 8005de4:	4639      	mov	r1, r7
 8005de6:	4630      	mov	r0, r6
 8005de8:	47c0      	blx	r8
 8005dea:	3001      	adds	r0, #1
 8005dec:	d0aa      	beq.n	8005d44 <_printf_i+0x12c>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	079b      	lsls	r3, r3, #30
 8005df2:	d413      	bmi.n	8005e1c <_printf_i+0x204>
 8005df4:	68e0      	ldr	r0, [r4, #12]
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	4298      	cmp	r0, r3
 8005dfa:	bfb8      	it	lt
 8005dfc:	4618      	movlt	r0, r3
 8005dfe:	e7a3      	b.n	8005d48 <_printf_i+0x130>
 8005e00:	2301      	movs	r3, #1
 8005e02:	464a      	mov	r2, r9
 8005e04:	4639      	mov	r1, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	47c0      	blx	r8
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d09a      	beq.n	8005d44 <_printf_i+0x12c>
 8005e0e:	3501      	adds	r5, #1
 8005e10:	68e3      	ldr	r3, [r4, #12]
 8005e12:	9a03      	ldr	r2, [sp, #12]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	dcf2      	bgt.n	8005e00 <_printf_i+0x1e8>
 8005e1a:	e7eb      	b.n	8005df4 <_printf_i+0x1dc>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	f104 0919 	add.w	r9, r4, #25
 8005e22:	e7f5      	b.n	8005e10 <_printf_i+0x1f8>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ac      	bne.n	8005d82 <_printf_i+0x16a>
 8005e28:	7803      	ldrb	r3, [r0, #0]
 8005e2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e32:	e76c      	b.n	8005d0e <_printf_i+0xf6>
 8005e34:	08006b5d 	.word	0x08006b5d
 8005e38:	08006b6e 	.word	0x08006b6e

08005e3c <memcpy>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	1e43      	subs	r3, r0, #1
 8005e40:	440a      	add	r2, r1
 8005e42:	4291      	cmp	r1, r2
 8005e44:	d100      	bne.n	8005e48 <memcpy+0xc>
 8005e46:	bd10      	pop	{r4, pc}
 8005e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e50:	e7f7      	b.n	8005e42 <memcpy+0x6>

08005e52 <memmove>:
 8005e52:	4288      	cmp	r0, r1
 8005e54:	b510      	push	{r4, lr}
 8005e56:	eb01 0302 	add.w	r3, r1, r2
 8005e5a:	d807      	bhi.n	8005e6c <memmove+0x1a>
 8005e5c:	1e42      	subs	r2, r0, #1
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	d00a      	beq.n	8005e78 <memmove+0x26>
 8005e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e6a:	e7f8      	b.n	8005e5e <memmove+0xc>
 8005e6c:	4283      	cmp	r3, r0
 8005e6e:	d9f5      	bls.n	8005e5c <memmove+0xa>
 8005e70:	1881      	adds	r1, r0, r2
 8005e72:	1ad2      	subs	r2, r2, r3
 8005e74:	42d3      	cmn	r3, r2
 8005e76:	d100      	bne.n	8005e7a <memmove+0x28>
 8005e78:	bd10      	pop	{r4, pc}
 8005e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e82:	e7f7      	b.n	8005e74 <memmove+0x22>

08005e84 <_free_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d045      	beq.n	8005f18 <_free_r+0x94>
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f0c      	subs	r4, r1, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	18e4      	addlt	r4, r4, r3
 8005e98:	f000 f8d2 	bl	8006040 <__malloc_lock>
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <_free_r+0x98>)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	b933      	cbnz	r3, 8005eb2 <_free_r+0x2e>
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	6014      	str	r4, [r2, #0]
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eae:	f000 b8c8 	b.w	8006042 <__malloc_unlock>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d90c      	bls.n	8005ed0 <_free_r+0x4c>
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	1862      	adds	r2, r4, r1
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	bf04      	itt	eq
 8005ebe:	681a      	ldreq	r2, [r3, #0]
 8005ec0:	685b      	ldreq	r3, [r3, #4]
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	bf04      	itt	eq
 8005ec6:	1852      	addeq	r2, r2, r1
 8005ec8:	6022      	streq	r2, [r4, #0]
 8005eca:	6004      	str	r4, [r0, #0]
 8005ecc:	e7ec      	b.n	8005ea8 <_free_r+0x24>
 8005ece:	4613      	mov	r3, r2
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	b10a      	cbz	r2, 8005ed8 <_free_r+0x54>
 8005ed4:	42a2      	cmp	r2, r4
 8005ed6:	d9fa      	bls.n	8005ece <_free_r+0x4a>
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	1858      	adds	r0, r3, r1
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d10b      	bne.n	8005ef8 <_free_r+0x74>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	1858      	adds	r0, r3, r1
 8005ee6:	4282      	cmp	r2, r0
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	d1dd      	bne.n	8005ea8 <_free_r+0x24>
 8005eec:	6810      	ldr	r0, [r2, #0]
 8005eee:	6852      	ldr	r2, [r2, #4]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e7d7      	b.n	8005ea8 <_free_r+0x24>
 8005ef8:	d902      	bls.n	8005f00 <_free_r+0x7c>
 8005efa:	230c      	movs	r3, #12
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	e7d3      	b.n	8005ea8 <_free_r+0x24>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	1821      	adds	r1, r4, r0
 8005f04:	428a      	cmp	r2, r1
 8005f06:	bf04      	itt	eq
 8005f08:	6811      	ldreq	r1, [r2, #0]
 8005f0a:	6852      	ldreq	r2, [r2, #4]
 8005f0c:	6062      	str	r2, [r4, #4]
 8005f0e:	bf04      	itt	eq
 8005f10:	1809      	addeq	r1, r1, r0
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	605c      	str	r4, [r3, #4]
 8005f16:	e7c7      	b.n	8005ea8 <_free_r+0x24>
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000098 	.word	0x20000098

08005f20 <_malloc_r>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	1ccd      	adds	r5, r1, #3
 8005f24:	f025 0503 	bic.w	r5, r5, #3
 8005f28:	3508      	adds	r5, #8
 8005f2a:	2d0c      	cmp	r5, #12
 8005f2c:	bf38      	it	cc
 8005f2e:	250c      	movcc	r5, #12
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	4606      	mov	r6, r0
 8005f34:	db01      	blt.n	8005f3a <_malloc_r+0x1a>
 8005f36:	42a9      	cmp	r1, r5
 8005f38:	d903      	bls.n	8005f42 <_malloc_r+0x22>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	2000      	movs	r0, #0
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	f000 f87d 	bl	8006040 <__malloc_lock>
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <_malloc_r+0xac>)
 8005f48:	6814      	ldr	r4, [r2, #0]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	b991      	cbnz	r1, 8005f74 <_malloc_r+0x54>
 8005f4e:	4c20      	ldr	r4, [pc, #128]	; (8005fd0 <_malloc_r+0xb0>)
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	b91b      	cbnz	r3, 8005f5c <_malloc_r+0x3c>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 f863 	bl	8006020 <_sbrk_r>
 8005f5a:	6020      	str	r0, [r4, #0]
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f85e 	bl	8006020 <_sbrk_r>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d124      	bne.n	8005fb2 <_malloc_r+0x92>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f000 f868 	bl	8006042 <__malloc_unlock>
 8005f72:	e7e4      	b.n	8005f3e <_malloc_r+0x1e>
 8005f74:	680b      	ldr	r3, [r1, #0]
 8005f76:	1b5b      	subs	r3, r3, r5
 8005f78:	d418      	bmi.n	8005fac <_malloc_r+0x8c>
 8005f7a:	2b0b      	cmp	r3, #11
 8005f7c:	d90f      	bls.n	8005f9e <_malloc_r+0x7e>
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	50cd      	str	r5, [r1, r3]
 8005f82:	18cc      	adds	r4, r1, r3
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f85c 	bl	8006042 <__malloc_unlock>
 8005f8a:	f104 000b 	add.w	r0, r4, #11
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	f020 0007 	bic.w	r0, r0, #7
 8005f94:	1ac3      	subs	r3, r0, r3
 8005f96:	d0d3      	beq.n	8005f40 <_malloc_r+0x20>
 8005f98:	425a      	negs	r2, r3
 8005f9a:	50e2      	str	r2, [r4, r3]
 8005f9c:	e7d0      	b.n	8005f40 <_malloc_r+0x20>
 8005f9e:	428c      	cmp	r4, r1
 8005fa0:	684b      	ldr	r3, [r1, #4]
 8005fa2:	bf16      	itet	ne
 8005fa4:	6063      	strne	r3, [r4, #4]
 8005fa6:	6013      	streq	r3, [r2, #0]
 8005fa8:	460c      	movne	r4, r1
 8005faa:	e7eb      	b.n	8005f84 <_malloc_r+0x64>
 8005fac:	460c      	mov	r4, r1
 8005fae:	6849      	ldr	r1, [r1, #4]
 8005fb0:	e7cc      	b.n	8005f4c <_malloc_r+0x2c>
 8005fb2:	1cc4      	adds	r4, r0, #3
 8005fb4:	f024 0403 	bic.w	r4, r4, #3
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d005      	beq.n	8005fc8 <_malloc_r+0xa8>
 8005fbc:	1a21      	subs	r1, r4, r0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f000 f82e 	bl	8006020 <_sbrk_r>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0cf      	beq.n	8005f68 <_malloc_r+0x48>
 8005fc8:	6025      	str	r5, [r4, #0]
 8005fca:	e7db      	b.n	8005f84 <_malloc_r+0x64>
 8005fcc:	20000098 	.word	0x20000098
 8005fd0:	2000009c 	.word	0x2000009c

08005fd4 <_realloc_r>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	4614      	mov	r4, r2
 8005fda:	460e      	mov	r6, r1
 8005fdc:	b921      	cbnz	r1, 8005fe8 <_realloc_r+0x14>
 8005fde:	4611      	mov	r1, r2
 8005fe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fe4:	f7ff bf9c 	b.w	8005f20 <_malloc_r>
 8005fe8:	b922      	cbnz	r2, 8005ff4 <_realloc_r+0x20>
 8005fea:	f7ff ff4b 	bl	8005e84 <_free_r>
 8005fee:	4625      	mov	r5, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff4:	f000 f826 	bl	8006044 <_malloc_usable_size_r>
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d20f      	bcs.n	800601c <_realloc_r+0x48>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4638      	mov	r0, r7
 8006000:	f7ff ff8e 	bl	8005f20 <_malloc_r>
 8006004:	4605      	mov	r5, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	d0f2      	beq.n	8005ff0 <_realloc_r+0x1c>
 800600a:	4631      	mov	r1, r6
 800600c:	4622      	mov	r2, r4
 800600e:	f7ff ff15 	bl	8005e3c <memcpy>
 8006012:	4631      	mov	r1, r6
 8006014:	4638      	mov	r0, r7
 8006016:	f7ff ff35 	bl	8005e84 <_free_r>
 800601a:	e7e9      	b.n	8005ff0 <_realloc_r+0x1c>
 800601c:	4635      	mov	r5, r6
 800601e:	e7e7      	b.n	8005ff0 <_realloc_r+0x1c>

08006020 <_sbrk_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4c06      	ldr	r4, [pc, #24]	; (800603c <_sbrk_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4605      	mov	r5, r0
 8006028:	4608      	mov	r0, r1
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	f7fb f966 	bl	80012fc <_sbrk>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_sbrk_r+0x1a>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	b103      	cbz	r3, 800603a <_sbrk_r+0x1a>
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	2000028c 	.word	0x2000028c

08006040 <__malloc_lock>:
 8006040:	4770      	bx	lr

08006042 <__malloc_unlock>:
 8006042:	4770      	bx	lr

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <sinf>:
 8006054:	ee10 3a10 	vmov	r3, s0
 8006058:	b507      	push	{r0, r1, r2, lr}
 800605a:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <sinf+0x7c>)
 800605c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006060:	4293      	cmp	r3, r2
 8006062:	dc05      	bgt.n	8006070 <sinf+0x1c>
 8006064:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80060d4 <sinf+0x80>
 8006068:	2000      	movs	r0, #0
 800606a:	f000 fc41 	bl	80068f0 <__kernel_sinf>
 800606e:	e004      	b.n	800607a <sinf+0x26>
 8006070:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006074:	db04      	blt.n	8006080 <sinf+0x2c>
 8006076:	ee30 0a40 	vsub.f32	s0, s0, s0
 800607a:	b003      	add	sp, #12
 800607c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006080:	4668      	mov	r0, sp
 8006082:	f000 f829 	bl	80060d8 <__ieee754_rem_pio2f>
 8006086:	f000 0003 	and.w	r0, r0, #3
 800608a:	2801      	cmp	r0, #1
 800608c:	d008      	beq.n	80060a0 <sinf+0x4c>
 800608e:	2802      	cmp	r0, #2
 8006090:	d00d      	beq.n	80060ae <sinf+0x5a>
 8006092:	b9b0      	cbnz	r0, 80060c2 <sinf+0x6e>
 8006094:	2001      	movs	r0, #1
 8006096:	eddd 0a01 	vldr	s1, [sp, #4]
 800609a:	ed9d 0a00 	vldr	s0, [sp]
 800609e:	e7e4      	b.n	800606a <sinf+0x16>
 80060a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80060a4:	ed9d 0a00 	vldr	s0, [sp]
 80060a8:	f000 f942 	bl	8006330 <__kernel_cosf>
 80060ac:	e7e5      	b.n	800607a <sinf+0x26>
 80060ae:	2001      	movs	r0, #1
 80060b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80060b4:	ed9d 0a00 	vldr	s0, [sp]
 80060b8:	f000 fc1a 	bl	80068f0 <__kernel_sinf>
 80060bc:	eeb1 0a40 	vneg.f32	s0, s0
 80060c0:	e7db      	b.n	800607a <sinf+0x26>
 80060c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80060c6:	ed9d 0a00 	vldr	s0, [sp]
 80060ca:	f000 f931 	bl	8006330 <__kernel_cosf>
 80060ce:	e7f5      	b.n	80060bc <sinf+0x68>
 80060d0:	3f490fd8 	.word	0x3f490fd8
 80060d4:	00000000 	.word	0x00000000

080060d8 <__ieee754_rem_pio2f>:
 80060d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060da:	ee10 6a10 	vmov	r6, s0
 80060de:	4b86      	ldr	r3, [pc, #536]	; (80062f8 <__ieee754_rem_pio2f+0x220>)
 80060e0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80060e4:	429c      	cmp	r4, r3
 80060e6:	b087      	sub	sp, #28
 80060e8:	4605      	mov	r5, r0
 80060ea:	dc05      	bgt.n	80060f8 <__ieee754_rem_pio2f+0x20>
 80060ec:	2300      	movs	r3, #0
 80060ee:	ed85 0a00 	vstr	s0, [r5]
 80060f2:	6043      	str	r3, [r0, #4]
 80060f4:	2000      	movs	r0, #0
 80060f6:	e020      	b.n	800613a <__ieee754_rem_pio2f+0x62>
 80060f8:	4b80      	ldr	r3, [pc, #512]	; (80062fc <__ieee754_rem_pio2f+0x224>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	dc38      	bgt.n	8006170 <__ieee754_rem_pio2f+0x98>
 80060fe:	2e00      	cmp	r6, #0
 8006100:	f024 040f 	bic.w	r4, r4, #15
 8006104:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006300 <__ieee754_rem_pio2f+0x228>
 8006108:	4b7e      	ldr	r3, [pc, #504]	; (8006304 <__ieee754_rem_pio2f+0x22c>)
 800610a:	dd18      	ble.n	800613e <__ieee754_rem_pio2f+0x66>
 800610c:	429c      	cmp	r4, r3
 800610e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006112:	bf09      	itett	eq
 8006114:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8006308 <__ieee754_rem_pio2f+0x230>
 8006118:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800630c <__ieee754_rem_pio2f+0x234>
 800611c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006120:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8006310 <__ieee754_rem_pio2f+0x238>
 8006124:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006128:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800612c:	edc0 6a00 	vstr	s13, [r0]
 8006130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006134:	edc0 7a01 	vstr	s15, [r0, #4]
 8006138:	2001      	movs	r0, #1
 800613a:	b007      	add	sp, #28
 800613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613e:	429c      	cmp	r4, r3
 8006140:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006144:	bf09      	itett	eq
 8006146:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8006308 <__ieee754_rem_pio2f+0x230>
 800614a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800630c <__ieee754_rem_pio2f+0x234>
 800614e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006152:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8006310 <__ieee754_rem_pio2f+0x238>
 8006156:	ee77 6a87 	vadd.f32	s13, s15, s14
 800615a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800615e:	edc0 6a00 	vstr	s13, [r0]
 8006162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006166:	edc0 7a01 	vstr	s15, [r0, #4]
 800616a:	f04f 30ff 	mov.w	r0, #4294967295
 800616e:	e7e4      	b.n	800613a <__ieee754_rem_pio2f+0x62>
 8006170:	4b68      	ldr	r3, [pc, #416]	; (8006314 <__ieee754_rem_pio2f+0x23c>)
 8006172:	429c      	cmp	r4, r3
 8006174:	dc71      	bgt.n	800625a <__ieee754_rem_pio2f+0x182>
 8006176:	f000 fc03 	bl	8006980 <fabsf>
 800617a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006318 <__ieee754_rem_pio2f+0x240>
 800617e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006182:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800618a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800618e:	ee17 0a90 	vmov	r0, s15
 8006192:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006300 <__ieee754_rem_pio2f+0x228>
 8006196:	eeb1 7a46 	vneg.f32	s14, s12
 800619a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800619e:	281f      	cmp	r0, #31
 80061a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800630c <__ieee754_rem_pio2f+0x234>
 80061a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80061a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80061ac:	ee16 3a90 	vmov	r3, s13
 80061b0:	dc1c      	bgt.n	80061ec <__ieee754_rem_pio2f+0x114>
 80061b2:	1e47      	subs	r7, r0, #1
 80061b4:	4959      	ldr	r1, [pc, #356]	; (800631c <__ieee754_rem_pio2f+0x244>)
 80061b6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80061ba:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80061be:	428a      	cmp	r2, r1
 80061c0:	d014      	beq.n	80061ec <__ieee754_rem_pio2f+0x114>
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	ed95 7a00 	vldr	s14, [r5]
 80061c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061cc:	2e00      	cmp	r6, #0
 80061ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061d2:	ed85 0a01 	vstr	s0, [r5, #4]
 80061d6:	dab0      	bge.n	800613a <__ieee754_rem_pio2f+0x62>
 80061d8:	eeb1 7a47 	vneg.f32	s14, s14
 80061dc:	eeb1 0a40 	vneg.f32	s0, s0
 80061e0:	ed85 7a00 	vstr	s14, [r5]
 80061e4:	ed85 0a01 	vstr	s0, [r5, #4]
 80061e8:	4240      	negs	r0, r0
 80061ea:	e7a6      	b.n	800613a <__ieee754_rem_pio2f+0x62>
 80061ec:	15e4      	asrs	r4, r4, #23
 80061ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80061f2:	1aa2      	subs	r2, r4, r2
 80061f4:	2a08      	cmp	r2, #8
 80061f6:	dde4      	ble.n	80061c2 <__ieee754_rem_pio2f+0xea>
 80061f8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006308 <__ieee754_rem_pio2f+0x230>
 80061fc:	eef0 6a40 	vmov.f32	s13, s0
 8006200:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006204:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006208:	eea7 0a27 	vfma.f32	s0, s14, s15
 800620c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006310 <__ieee754_rem_pio2f+0x238>
 8006210:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8006214:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8006218:	eef0 7a40 	vmov.f32	s15, s0
 800621c:	ee15 3a90 	vmov	r3, s11
 8006220:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006224:	1aa4      	subs	r4, r4, r2
 8006226:	2c19      	cmp	r4, #25
 8006228:	dc04      	bgt.n	8006234 <__ieee754_rem_pio2f+0x15c>
 800622a:	edc5 5a00 	vstr	s11, [r5]
 800622e:	eeb0 0a66 	vmov.f32	s0, s13
 8006232:	e7c7      	b.n	80061c4 <__ieee754_rem_pio2f+0xec>
 8006234:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006320 <__ieee754_rem_pio2f+0x248>
 8006238:	eeb0 0a66 	vmov.f32	s0, s13
 800623c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8006240:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006244:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006248:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006324 <__ieee754_rem_pio2f+0x24c>
 800624c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8006250:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006254:	ed85 7a00 	vstr	s14, [r5]
 8006258:	e7b4      	b.n	80061c4 <__ieee754_rem_pio2f+0xec>
 800625a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800625e:	db06      	blt.n	800626e <__ieee754_rem_pio2f+0x196>
 8006260:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006264:	edc0 7a01 	vstr	s15, [r0, #4]
 8006268:	edc0 7a00 	vstr	s15, [r0]
 800626c:	e742      	b.n	80060f4 <__ieee754_rem_pio2f+0x1c>
 800626e:	15e2      	asrs	r2, r4, #23
 8006270:	3a86      	subs	r2, #134	; 0x86
 8006272:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800627e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006328 <__ieee754_rem_pio2f+0x250>
 8006282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006286:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800628a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800628e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006292:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800629a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800629e:	ed8d 7a04 	vstr	s14, [sp, #16]
 80062a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80062a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80062b2:	d11e      	bne.n	80062f2 <__ieee754_rem_pio2f+0x21a>
 80062b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80062b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062bc:	bf0c      	ite	eq
 80062be:	2301      	moveq	r3, #1
 80062c0:	2302      	movne	r3, #2
 80062c2:	491a      	ldr	r1, [pc, #104]	; (800632c <__ieee754_rem_pio2f+0x254>)
 80062c4:	9101      	str	r1, [sp, #4]
 80062c6:	2102      	movs	r1, #2
 80062c8:	9100      	str	r1, [sp, #0]
 80062ca:	a803      	add	r0, sp, #12
 80062cc:	4629      	mov	r1, r5
 80062ce:	f000 f88d 	bl	80063ec <__kernel_rem_pio2f>
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	f6bf af31 	bge.w	800613a <__ieee754_rem_pio2f+0x62>
 80062d8:	edd5 7a00 	vldr	s15, [r5]
 80062dc:	eef1 7a67 	vneg.f32	s15, s15
 80062e0:	edc5 7a00 	vstr	s15, [r5]
 80062e4:	edd5 7a01 	vldr	s15, [r5, #4]
 80062e8:	eef1 7a67 	vneg.f32	s15, s15
 80062ec:	edc5 7a01 	vstr	s15, [r5, #4]
 80062f0:	e77a      	b.n	80061e8 <__ieee754_rem_pio2f+0x110>
 80062f2:	2303      	movs	r3, #3
 80062f4:	e7e5      	b.n	80062c2 <__ieee754_rem_pio2f+0x1ea>
 80062f6:	bf00      	nop
 80062f8:	3f490fd8 	.word	0x3f490fd8
 80062fc:	4016cbe3 	.word	0x4016cbe3
 8006300:	3fc90f80 	.word	0x3fc90f80
 8006304:	3fc90fd0 	.word	0x3fc90fd0
 8006308:	37354400 	.word	0x37354400
 800630c:	37354443 	.word	0x37354443
 8006310:	2e85a308 	.word	0x2e85a308
 8006314:	43490f80 	.word	0x43490f80
 8006318:	3f22f984 	.word	0x3f22f984
 800631c:	08006b80 	.word	0x08006b80
 8006320:	2e85a300 	.word	0x2e85a300
 8006324:	248d3132 	.word	0x248d3132
 8006328:	43800000 	.word	0x43800000
 800632c:	08006c00 	.word	0x08006c00

08006330 <__kernel_cosf>:
 8006330:	ee10 3a10 	vmov	r3, s0
 8006334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006338:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800633c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006340:	da05      	bge.n	800634e <__kernel_cosf+0x1e>
 8006342:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006346:	ee17 2a90 	vmov	r2, s15
 800634a:	2a00      	cmp	r2, #0
 800634c:	d03b      	beq.n	80063c6 <__kernel_cosf+0x96>
 800634e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006356:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80063cc <__kernel_cosf+0x9c>
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <__kernel_cosf+0xa0>)
 800635c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8006360:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80063d4 <__kernel_cosf+0xa4>
 8006364:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006368:	4293      	cmp	r3, r2
 800636a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80063d8 <__kernel_cosf+0xa8>
 800636e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006372:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80063dc <__kernel_cosf+0xac>
 8006376:	eea5 7a86 	vfma.f32	s14, s11, s12
 800637a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80063e0 <__kernel_cosf+0xb0>
 800637e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006382:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80063e4 <__kernel_cosf+0xb4>
 8006386:	eea5 7a86 	vfma.f32	s14, s11, s12
 800638a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800638e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006392:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006396:	dc04      	bgt.n	80063a2 <__kernel_cosf+0x72>
 8006398:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800639c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80063a0:	4770      	bx	lr
 80063a2:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <__kernel_cosf+0xb8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bfda      	itte	le
 80063a8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80063ac:	ee07 3a10 	vmovle	s14, r3
 80063b0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80063b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063b8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80063bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063c4:	4770      	bx	lr
 80063c6:	eeb0 0a66 	vmov.f32	s0, s13
 80063ca:	4770      	bx	lr
 80063cc:	ad47d74e 	.word	0xad47d74e
 80063d0:	3e999999 	.word	0x3e999999
 80063d4:	310f74f6 	.word	0x310f74f6
 80063d8:	b493f27c 	.word	0xb493f27c
 80063dc:	37d00d01 	.word	0x37d00d01
 80063e0:	bab60b61 	.word	0xbab60b61
 80063e4:	3d2aaaab 	.word	0x3d2aaaab
 80063e8:	3f480000 	.word	0x3f480000

080063ec <__kernel_rem_pio2f>:
 80063ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	ed2d 8b04 	vpush	{d8-d9}
 80063f4:	b0d7      	sub	sp, #348	; 0x15c
 80063f6:	469b      	mov	fp, r3
 80063f8:	460e      	mov	r6, r1
 80063fa:	4bbe      	ldr	r3, [pc, #760]	; (80066f4 <__kernel_rem_pio2f+0x308>)
 80063fc:	9964      	ldr	r1, [sp, #400]	; 0x190
 80063fe:	9002      	str	r0, [sp, #8]
 8006400:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006404:	9865      	ldr	r0, [sp, #404]	; 0x194
 8006406:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8006704 <__kernel_rem_pio2f+0x318>
 800640a:	1ed1      	subs	r1, r2, #3
 800640c:	2308      	movs	r3, #8
 800640e:	fb91 f1f3 	sdiv	r1, r1, r3
 8006412:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006416:	f10b 3aff 	add.w	sl, fp, #4294967295
 800641a:	1c4c      	adds	r4, r1, #1
 800641c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8006420:	eba1 050a 	sub.w	r5, r1, sl
 8006424:	aa1a      	add	r2, sp, #104	; 0x68
 8006426:	eb09 070a 	add.w	r7, r9, sl
 800642a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800642e:	4696      	mov	lr, r2
 8006430:	2300      	movs	r3, #0
 8006432:	42bb      	cmp	r3, r7
 8006434:	dd0f      	ble.n	8006456 <__kernel_rem_pio2f+0x6a>
 8006436:	af42      	add	r7, sp, #264	; 0x108
 8006438:	2200      	movs	r2, #0
 800643a:	454a      	cmp	r2, r9
 800643c:	dc27      	bgt.n	800648e <__kernel_rem_pio2f+0xa2>
 800643e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8006442:	eb0b 0302 	add.w	r3, fp, r2
 8006446:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800644a:	9d02      	ldr	r5, [sp, #8]
 800644c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8006704 <__kernel_rem_pio2f+0x318>
 8006450:	f04f 0c00 	mov.w	ip, #0
 8006454:	e015      	b.n	8006482 <__kernel_rem_pio2f+0x96>
 8006456:	42dd      	cmn	r5, r3
 8006458:	bf5d      	ittte	pl
 800645a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800645e:	ee07 2a90 	vmovpl	s15, r2
 8006462:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006466:	eef0 7a47 	vmovmi.f32	s15, s14
 800646a:	ecee 7a01 	vstmia	lr!, {s15}
 800646e:	3301      	adds	r3, #1
 8006470:	e7df      	b.n	8006432 <__kernel_rem_pio2f+0x46>
 8006472:	ecf5 6a01 	vldmia	r5!, {s13}
 8006476:	ed33 7a01 	vldmdb	r3!, {s14}
 800647a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800647e:	f10c 0c01 	add.w	ip, ip, #1
 8006482:	45d4      	cmp	ip, sl
 8006484:	ddf5      	ble.n	8006472 <__kernel_rem_pio2f+0x86>
 8006486:	ece7 7a01 	vstmia	r7!, {s15}
 800648a:	3201      	adds	r2, #1
 800648c:	e7d5      	b.n	800643a <__kernel_rem_pio2f+0x4e>
 800648e:	ab06      	add	r3, sp, #24
 8006490:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8006700 <__kernel_rem_pio2f+0x314>
 800649a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80066fc <__kernel_rem_pio2f+0x310>
 800649e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	464d      	mov	r5, r9
 80064a6:	ab56      	add	r3, sp, #344	; 0x158
 80064a8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80064ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80064b0:	3f01      	subs	r7, #1
 80064b2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80064b6:	00bf      	lsls	r7, r7, #2
 80064b8:	ab56      	add	r3, sp, #344	; 0x158
 80064ba:	19da      	adds	r2, r3, r7
 80064bc:	3a4c      	subs	r2, #76	; 0x4c
 80064be:	2300      	movs	r3, #0
 80064c0:	1ae9      	subs	r1, r5, r3
 80064c2:	2900      	cmp	r1, #0
 80064c4:	dc4c      	bgt.n	8006560 <__kernel_rem_pio2f+0x174>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 faa4 	bl	8006a14 <scalbnf>
 80064cc:	eeb0 8a40 	vmov.f32	s16, s0
 80064d0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80064d4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80064d8:	f000 fa5a 	bl	8006990 <floorf>
 80064dc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80064e0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80064ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80064ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80064f6:	dd48      	ble.n	800658a <__kernel_rem_pio2f+0x19e>
 80064f8:	1e69      	subs	r1, r5, #1
 80064fa:	ab06      	add	r3, sp, #24
 80064fc:	f1c4 0008 	rsb	r0, r4, #8
 8006500:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8006504:	9a01      	ldr	r2, [sp, #4]
 8006506:	fa4c f300 	asr.w	r3, ip, r0
 800650a:	441a      	add	r2, r3
 800650c:	4083      	lsls	r3, r0
 800650e:	9201      	str	r2, [sp, #4]
 8006510:	ebac 0203 	sub.w	r2, ip, r3
 8006514:	ab06      	add	r3, sp, #24
 8006516:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800651a:	f1c4 0307 	rsb	r3, r4, #7
 800651e:	fa42 f803 	asr.w	r8, r2, r3
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	dd41      	ble.n	80065ac <__kernel_rem_pio2f+0x1c0>
 8006528:	9b01      	ldr	r3, [sp, #4]
 800652a:	2000      	movs	r0, #0
 800652c:	3301      	adds	r3, #1
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	4601      	mov	r1, r0
 8006532:	4285      	cmp	r5, r0
 8006534:	dc6d      	bgt.n	8006612 <__kernel_rem_pio2f+0x226>
 8006536:	2c00      	cmp	r4, #0
 8006538:	dd04      	ble.n	8006544 <__kernel_rem_pio2f+0x158>
 800653a:	2c01      	cmp	r4, #1
 800653c:	d07e      	beq.n	800663c <__kernel_rem_pio2f+0x250>
 800653e:	2c02      	cmp	r4, #2
 8006540:	f000 8086 	beq.w	8006650 <__kernel_rem_pio2f+0x264>
 8006544:	f1b8 0f02 	cmp.w	r8, #2
 8006548:	d130      	bne.n	80065ac <__kernel_rem_pio2f+0x1c0>
 800654a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800654e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006552:	b359      	cbz	r1, 80065ac <__kernel_rem_pio2f+0x1c0>
 8006554:	4620      	mov	r0, r4
 8006556:	f000 fa5d 	bl	8006a14 <scalbnf>
 800655a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800655e:	e025      	b.n	80065ac <__kernel_rem_pio2f+0x1c0>
 8006560:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006564:	a806      	add	r0, sp, #24
 8006566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800656a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800656e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006572:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006576:	ee10 1a10 	vmov	r1, s0
 800657a:	ed32 0a01 	vldmdb	r2!, {s0}
 800657e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8006582:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006586:	3301      	adds	r3, #1
 8006588:	e79a      	b.n	80064c0 <__kernel_rem_pio2f+0xd4>
 800658a:	d106      	bne.n	800659a <__kernel_rem_pio2f+0x1ae>
 800658c:	1e6b      	subs	r3, r5, #1
 800658e:	aa06      	add	r2, sp, #24
 8006590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006594:	ea4f 2822 	mov.w	r8, r2, asr #8
 8006598:	e7c3      	b.n	8006522 <__kernel_rem_pio2f+0x136>
 800659a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800659e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	da31      	bge.n	800660c <__kernel_rem_pio2f+0x220>
 80065a8:	f04f 0800 	mov.w	r8, #0
 80065ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	f040 80a8 	bne.w	8006708 <__kernel_rem_pio2f+0x31c>
 80065b8:	1e6b      	subs	r3, r5, #1
 80065ba:	4618      	mov	r0, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	4548      	cmp	r0, r9
 80065c0:	da4d      	bge.n	800665e <__kernel_rem_pio2f+0x272>
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	f000 8087 	beq.w	80066d6 <__kernel_rem_pio2f+0x2ea>
 80065c8:	aa06      	add	r2, sp, #24
 80065ca:	3c08      	subs	r4, #8
 80065cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	f000 808d 	beq.w	80066f0 <__kernel_rem_pio2f+0x304>
 80065d6:	4620      	mov	r0, r4
 80065d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80065dc:	9302      	str	r3, [sp, #8]
 80065de:	f000 fa19 	bl	8006a14 <scalbnf>
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006700 <__kernel_rem_pio2f+0x314>
 80065e8:	0099      	lsls	r1, r3, #2
 80065ea:	aa42      	add	r2, sp, #264	; 0x108
 80065ec:	1850      	adds	r0, r2, r1
 80065ee:	1d05      	adds	r5, r0, #4
 80065f0:	461c      	mov	r4, r3
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	f280 80b8 	bge.w	8006768 <__kernel_rem_pio2f+0x37c>
 80065f8:	2500      	movs	r5, #0
 80065fa:	1b5c      	subs	r4, r3, r5
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	f2c0 80d8 	blt.w	80067b2 <__kernel_rem_pio2f+0x3c6>
 8006602:	4f3d      	ldr	r7, [pc, #244]	; (80066f8 <__kernel_rem_pio2f+0x30c>)
 8006604:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8006704 <__kernel_rem_pio2f+0x318>
 8006608:	2400      	movs	r4, #0
 800660a:	e0c6      	b.n	800679a <__kernel_rem_pio2f+0x3ae>
 800660c:	f04f 0802 	mov.w	r8, #2
 8006610:	e78a      	b.n	8006528 <__kernel_rem_pio2f+0x13c>
 8006612:	ab06      	add	r3, sp, #24
 8006614:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006618:	b949      	cbnz	r1, 800662e <__kernel_rem_pio2f+0x242>
 800661a:	b12b      	cbz	r3, 8006628 <__kernel_rem_pio2f+0x23c>
 800661c:	aa06      	add	r2, sp, #24
 800661e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006622:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006626:	2301      	movs	r3, #1
 8006628:	3001      	adds	r0, #1
 800662a:	4619      	mov	r1, r3
 800662c:	e781      	b.n	8006532 <__kernel_rem_pio2f+0x146>
 800662e:	aa06      	add	r2, sp, #24
 8006630:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006634:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006638:	460b      	mov	r3, r1
 800663a:	e7f5      	b.n	8006628 <__kernel_rem_pio2f+0x23c>
 800663c:	1e68      	subs	r0, r5, #1
 800663e:	ab06      	add	r3, sp, #24
 8006640:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	aa06      	add	r2, sp, #24
 800664a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800664e:	e779      	b.n	8006544 <__kernel_rem_pio2f+0x158>
 8006650:	1e68      	subs	r0, r5, #1
 8006652:	ab06      	add	r3, sp, #24
 8006654:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665c:	e7f4      	b.n	8006648 <__kernel_rem_pio2f+0x25c>
 800665e:	a906      	add	r1, sp, #24
 8006660:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006664:	3801      	subs	r0, #1
 8006666:	430a      	orrs	r2, r1
 8006668:	e7a9      	b.n	80065be <__kernel_rem_pio2f+0x1d2>
 800666a:	f10c 0c01 	add.w	ip, ip, #1
 800666e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006672:	2a00      	cmp	r2, #0
 8006674:	d0f9      	beq.n	800666a <__kernel_rem_pio2f+0x27e>
 8006676:	eb0b 0305 	add.w	r3, fp, r5
 800667a:	aa1a      	add	r2, sp, #104	; 0x68
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	1898      	adds	r0, r3, r2
 8006680:	3004      	adds	r0, #4
 8006682:	1c69      	adds	r1, r5, #1
 8006684:	3704      	adds	r7, #4
 8006686:	2200      	movs	r2, #0
 8006688:	4465      	add	r5, ip
 800668a:	9005      	str	r0, [sp, #20]
 800668c:	428d      	cmp	r5, r1
 800668e:	f6ff af0a 	blt.w	80064a6 <__kernel_rem_pio2f+0xba>
 8006692:	a81a      	add	r0, sp, #104	; 0x68
 8006694:	eb02 0c03 	add.w	ip, r2, r3
 8006698:	4484      	add	ip, r0
 800669a:	9803      	ldr	r0, [sp, #12]
 800669c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80066a0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80066a4:	9001      	str	r0, [sp, #4]
 80066a6:	ee07 0a90 	vmov	s15, r0
 80066aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ae:	9805      	ldr	r0, [sp, #20]
 80066b0:	edcc 7a00 	vstr	s15, [ip]
 80066b4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006704 <__kernel_rem_pio2f+0x318>
 80066b8:	eb00 0802 	add.w	r8, r0, r2
 80066bc:	f04f 0c00 	mov.w	ip, #0
 80066c0:	45d4      	cmp	ip, sl
 80066c2:	dd0c      	ble.n	80066de <__kernel_rem_pio2f+0x2f2>
 80066c4:	eb02 0c07 	add.w	ip, r2, r7
 80066c8:	a842      	add	r0, sp, #264	; 0x108
 80066ca:	4484      	add	ip, r0
 80066cc:	edcc 7a01 	vstr	s15, [ip, #4]
 80066d0:	3101      	adds	r1, #1
 80066d2:	3204      	adds	r2, #4
 80066d4:	e7da      	b.n	800668c <__kernel_rem_pio2f+0x2a0>
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	f04f 0c01 	mov.w	ip, #1
 80066dc:	e7c7      	b.n	800666e <__kernel_rem_pio2f+0x282>
 80066de:	ecfe 6a01 	vldmia	lr!, {s13}
 80066e2:	ed38 7a01 	vldmdb	r8!, {s14}
 80066e6:	f10c 0c01 	add.w	ip, ip, #1
 80066ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80066ee:	e7e7      	b.n	80066c0 <__kernel_rem_pio2f+0x2d4>
 80066f0:	3b01      	subs	r3, #1
 80066f2:	e769      	b.n	80065c8 <__kernel_rem_pio2f+0x1dc>
 80066f4:	08006f44 	.word	0x08006f44
 80066f8:	08006f18 	.word	0x08006f18
 80066fc:	43800000 	.word	0x43800000
 8006700:	3b800000 	.word	0x3b800000
 8006704:	00000000 	.word	0x00000000
 8006708:	4260      	negs	r0, r4
 800670a:	eeb0 0a48 	vmov.f32	s0, s16
 800670e:	f000 f981 	bl	8006a14 <scalbnf>
 8006712:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80066fc <__kernel_rem_pio2f+0x310>
 8006716:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	db1a      	blt.n	8006756 <__kernel_rem_pio2f+0x36a>
 8006720:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006700 <__kernel_rem_pio2f+0x314>
 8006724:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006728:	aa06      	add	r2, sp, #24
 800672a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800672e:	a906      	add	r1, sp, #24
 8006730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006734:	3408      	adds	r4, #8
 8006736:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800673a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800673e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006742:	ee10 3a10 	vmov	r3, s0
 8006746:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800674a:	1c6b      	adds	r3, r5, #1
 800674c:	ee17 2a90 	vmov	r2, s15
 8006750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006754:	e73f      	b.n	80065d6 <__kernel_rem_pio2f+0x1ea>
 8006756:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800675a:	aa06      	add	r2, sp, #24
 800675c:	ee10 3a10 	vmov	r3, s0
 8006760:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006764:	462b      	mov	r3, r5
 8006766:	e736      	b.n	80065d6 <__kernel_rem_pio2f+0x1ea>
 8006768:	aa06      	add	r2, sp, #24
 800676a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800676e:	9202      	str	r2, [sp, #8]
 8006770:	ee07 2a90 	vmov	s15, r2
 8006774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006778:	3c01      	subs	r4, #1
 800677a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800677e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006782:	ed65 7a01 	vstmdb	r5!, {s15}
 8006786:	e734      	b.n	80065f2 <__kernel_rem_pio2f+0x206>
 8006788:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800678c:	ecf7 6a01 	vldmia	r7!, {s13}
 8006790:	ed9c 7a00 	vldr	s14, [ip]
 8006794:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006798:	3401      	adds	r4, #1
 800679a:	454c      	cmp	r4, r9
 800679c:	dc01      	bgt.n	80067a2 <__kernel_rem_pio2f+0x3b6>
 800679e:	42a5      	cmp	r5, r4
 80067a0:	daf2      	bge.n	8006788 <__kernel_rem_pio2f+0x39c>
 80067a2:	aa56      	add	r2, sp, #344	; 0x158
 80067a4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80067a8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80067ac:	3501      	adds	r5, #1
 80067ae:	3804      	subs	r0, #4
 80067b0:	e723      	b.n	80065fa <__kernel_rem_pio2f+0x20e>
 80067b2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80067b4:	2a03      	cmp	r2, #3
 80067b6:	d84d      	bhi.n	8006854 <__kernel_rem_pio2f+0x468>
 80067b8:	e8df f002 	tbb	[pc, r2]
 80067bc:	021f1f3e 	.word	0x021f1f3e
 80067c0:	aa56      	add	r2, sp, #344	; 0x158
 80067c2:	4411      	add	r1, r2
 80067c4:	399c      	subs	r1, #156	; 0x9c
 80067c6:	4608      	mov	r0, r1
 80067c8:	461c      	mov	r4, r3
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	dc5f      	bgt.n	800688e <__kernel_rem_pio2f+0x4a2>
 80067ce:	4608      	mov	r0, r1
 80067d0:	461c      	mov	r4, r3
 80067d2:	2c01      	cmp	r4, #1
 80067d4:	dc6b      	bgt.n	80068ae <__kernel_rem_pio2f+0x4c2>
 80067d6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8006704 <__kernel_rem_pio2f+0x318>
 80067da:	2b01      	cmp	r3, #1
 80067dc:	dc77      	bgt.n	80068ce <__kernel_rem_pio2f+0x4e2>
 80067de:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80067e2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80067e6:	f1b8 0f00 	cmp.w	r8, #0
 80067ea:	d176      	bne.n	80068da <__kernel_rem_pio2f+0x4ee>
 80067ec:	edc6 6a00 	vstr	s13, [r6]
 80067f0:	ed86 7a01 	vstr	s14, [r6, #4]
 80067f4:	edc6 7a02 	vstr	s15, [r6, #8]
 80067f8:	e02c      	b.n	8006854 <__kernel_rem_pio2f+0x468>
 80067fa:	aa56      	add	r2, sp, #344	; 0x158
 80067fc:	4411      	add	r1, r2
 80067fe:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8006704 <__kernel_rem_pio2f+0x318>
 8006802:	399c      	subs	r1, #156	; 0x9c
 8006804:	4618      	mov	r0, r3
 8006806:	2800      	cmp	r0, #0
 8006808:	da32      	bge.n	8006870 <__kernel_rem_pio2f+0x484>
 800680a:	f1b8 0f00 	cmp.w	r8, #0
 800680e:	d035      	beq.n	800687c <__kernel_rem_pio2f+0x490>
 8006810:	eef1 7a47 	vneg.f32	s15, s14
 8006814:	edc6 7a00 	vstr	s15, [r6]
 8006818:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800681c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006820:	a82f      	add	r0, sp, #188	; 0xbc
 8006822:	2101      	movs	r1, #1
 8006824:	428b      	cmp	r3, r1
 8006826:	da2c      	bge.n	8006882 <__kernel_rem_pio2f+0x496>
 8006828:	f1b8 0f00 	cmp.w	r8, #0
 800682c:	d001      	beq.n	8006832 <__kernel_rem_pio2f+0x446>
 800682e:	eef1 7a67 	vneg.f32	s15, s15
 8006832:	edc6 7a01 	vstr	s15, [r6, #4]
 8006836:	e00d      	b.n	8006854 <__kernel_rem_pio2f+0x468>
 8006838:	aa56      	add	r2, sp, #344	; 0x158
 800683a:	4411      	add	r1, r2
 800683c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8006704 <__kernel_rem_pio2f+0x318>
 8006840:	399c      	subs	r1, #156	; 0x9c
 8006842:	2b00      	cmp	r3, #0
 8006844:	da0e      	bge.n	8006864 <__kernel_rem_pio2f+0x478>
 8006846:	f1b8 0f00 	cmp.w	r8, #0
 800684a:	d001      	beq.n	8006850 <__kernel_rem_pio2f+0x464>
 800684c:	eef1 7a67 	vneg.f32	s15, s15
 8006850:	edc6 7a00 	vstr	s15, [r6]
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	f003 0007 	and.w	r0, r3, #7
 800685a:	b057      	add	sp, #348	; 0x15c
 800685c:	ecbd 8b04 	vpop	{d8-d9}
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	ed31 7a01 	vldmdb	r1!, {s14}
 8006868:	3b01      	subs	r3, #1
 800686a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800686e:	e7e8      	b.n	8006842 <__kernel_rem_pio2f+0x456>
 8006870:	ed71 7a01 	vldmdb	r1!, {s15}
 8006874:	3801      	subs	r0, #1
 8006876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800687a:	e7c4      	b.n	8006806 <__kernel_rem_pio2f+0x41a>
 800687c:	eef0 7a47 	vmov.f32	s15, s14
 8006880:	e7c8      	b.n	8006814 <__kernel_rem_pio2f+0x428>
 8006882:	ecb0 7a01 	vldmia	r0!, {s14}
 8006886:	3101      	adds	r1, #1
 8006888:	ee77 7a87 	vadd.f32	s15, s15, s14
 800688c:	e7ca      	b.n	8006824 <__kernel_rem_pio2f+0x438>
 800688e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006892:	ed70 6a01 	vldmdb	r0!, {s13}
 8006896:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800689a:	3c01      	subs	r4, #1
 800689c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068a0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80068a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a8:	edc0 7a00 	vstr	s15, [r0]
 80068ac:	e78d      	b.n	80067ca <__kernel_rem_pio2f+0x3de>
 80068ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 80068b2:	ed70 6a01 	vldmdb	r0!, {s13}
 80068b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80068ba:	3c01      	subs	r4, #1
 80068bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068c0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80068c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c8:	edc0 7a00 	vstr	s15, [r0]
 80068cc:	e781      	b.n	80067d2 <__kernel_rem_pio2f+0x3e6>
 80068ce:	ed31 7a01 	vldmdb	r1!, {s14}
 80068d2:	3b01      	subs	r3, #1
 80068d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068d8:	e77f      	b.n	80067da <__kernel_rem_pio2f+0x3ee>
 80068da:	eef1 6a66 	vneg.f32	s13, s13
 80068de:	eeb1 7a47 	vneg.f32	s14, s14
 80068e2:	edc6 6a00 	vstr	s13, [r6]
 80068e6:	ed86 7a01 	vstr	s14, [r6, #4]
 80068ea:	eef1 7a67 	vneg.f32	s15, s15
 80068ee:	e781      	b.n	80067f4 <__kernel_rem_pio2f+0x408>

080068f0 <__kernel_sinf>:
 80068f0:	ee10 3a10 	vmov	r3, s0
 80068f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80068fc:	da04      	bge.n	8006908 <__kernel_sinf+0x18>
 80068fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006902:	ee17 3a90 	vmov	r3, s15
 8006906:	b35b      	cbz	r3, 8006960 <__kernel_sinf+0x70>
 8006908:	ee20 7a00 	vmul.f32	s14, s0, s0
 800690c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006964 <__kernel_sinf+0x74>
 8006910:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006968 <__kernel_sinf+0x78>
 8006914:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006918:	eddf 7a14 	vldr	s15, [pc, #80]	; 800696c <__kernel_sinf+0x7c>
 800691c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006920:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006970 <__kernel_sinf+0x80>
 8006924:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006928:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006974 <__kernel_sinf+0x84>
 800692c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006930:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006934:	b930      	cbnz	r0, 8006944 <__kernel_sinf+0x54>
 8006936:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006978 <__kernel_sinf+0x88>
 800693a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800693e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006942:	4770      	bx	lr
 8006944:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006948:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800694c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006950:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006954:	eddf 7a09 	vldr	s15, [pc, #36]	; 800697c <__kernel_sinf+0x8c>
 8006958:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800695c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2f2ec9d3 	.word	0x2f2ec9d3
 8006968:	b2d72f34 	.word	0xb2d72f34
 800696c:	3638ef1b 	.word	0x3638ef1b
 8006970:	b9500d01 	.word	0xb9500d01
 8006974:	3c088889 	.word	0x3c088889
 8006978:	be2aaaab 	.word	0xbe2aaaab
 800697c:	3e2aaaab 	.word	0x3e2aaaab

08006980 <fabsf>:
 8006980:	ee10 3a10 	vmov	r3, s0
 8006984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006988:	ee00 3a10 	vmov	s0, r3
 800698c:	4770      	bx	lr
	...

08006990 <floorf>:
 8006990:	ee10 3a10 	vmov	r3, s0
 8006994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006998:	0dca      	lsrs	r2, r1, #23
 800699a:	3a7f      	subs	r2, #127	; 0x7f
 800699c:	2a16      	cmp	r2, #22
 800699e:	dc2a      	bgt.n	80069f6 <floorf+0x66>
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	da11      	bge.n	80069c8 <floorf+0x38>
 80069a4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006a08 <floorf+0x78>
 80069a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b4:	dd05      	ble.n	80069c2 <floorf+0x32>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da23      	bge.n	8006a02 <floorf+0x72>
 80069ba:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <floorf+0x7c>)
 80069bc:	2900      	cmp	r1, #0
 80069be:	bf18      	it	ne
 80069c0:	4613      	movne	r3, r2
 80069c2:	ee00 3a10 	vmov	s0, r3
 80069c6:	4770      	bx	lr
 80069c8:	4911      	ldr	r1, [pc, #68]	; (8006a10 <floorf+0x80>)
 80069ca:	4111      	asrs	r1, r2
 80069cc:	420b      	tst	r3, r1
 80069ce:	d0fa      	beq.n	80069c6 <floorf+0x36>
 80069d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006a08 <floorf+0x78>
 80069d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e0:	ddef      	ble.n	80069c2 <floorf+0x32>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bfbe      	ittt	lt
 80069e6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80069ea:	fa40 f202 	asrlt.w	r2, r0, r2
 80069ee:	189b      	addlt	r3, r3, r2
 80069f0:	ea23 0301 	bic.w	r3, r3, r1
 80069f4:	e7e5      	b.n	80069c2 <floorf+0x32>
 80069f6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80069fa:	d3e4      	bcc.n	80069c6 <floorf+0x36>
 80069fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a00:	4770      	bx	lr
 8006a02:	2300      	movs	r3, #0
 8006a04:	e7dd      	b.n	80069c2 <floorf+0x32>
 8006a06:	bf00      	nop
 8006a08:	7149f2ca 	.word	0x7149f2ca
 8006a0c:	bf800000 	.word	0xbf800000
 8006a10:	007fffff 	.word	0x007fffff

08006a14 <scalbnf>:
 8006a14:	b508      	push	{r3, lr}
 8006a16:	ee10 2a10 	vmov	r2, s0
 8006a1a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8006a1e:	ed2d 8b02 	vpush	{d8}
 8006a22:	eef0 0a40 	vmov.f32	s1, s0
 8006a26:	d004      	beq.n	8006a32 <scalbnf+0x1e>
 8006a28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006a2c:	d306      	bcc.n	8006a3c <scalbnf+0x28>
 8006a2e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8006a32:	ecbd 8b02 	vpop	{d8}
 8006a36:	eeb0 0a60 	vmov.f32	s0, s1
 8006a3a:	bd08      	pop	{r3, pc}
 8006a3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a40:	d21c      	bcs.n	8006a7c <scalbnf+0x68>
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <scalbnf+0xac>)
 8006a44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006ac4 <scalbnf+0xb0>
 8006a48:	4298      	cmp	r0, r3
 8006a4a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8006a4e:	db10      	blt.n	8006a72 <scalbnf+0x5e>
 8006a50:	ee10 2a90 	vmov	r2, s1
 8006a54:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006a58:	3b19      	subs	r3, #25
 8006a5a:	4403      	add	r3, r0
 8006a5c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a5e:	dd0f      	ble.n	8006a80 <scalbnf+0x6c>
 8006a60:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8006ac8 <scalbnf+0xb4>
 8006a64:	eeb0 0a48 	vmov.f32	s0, s16
 8006a68:	f000 f834 	bl	8006ad4 <copysignf>
 8006a6c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006a70:	e7df      	b.n	8006a32 <scalbnf+0x1e>
 8006a72:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006acc <scalbnf+0xb8>
 8006a76:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006a7a:	e7da      	b.n	8006a32 <scalbnf+0x1e>
 8006a7c:	0ddb      	lsrs	r3, r3, #23
 8006a7e:	e7ec      	b.n	8006a5a <scalbnf+0x46>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dd06      	ble.n	8006a92 <scalbnf+0x7e>
 8006a84:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006a88:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006a8c:	ee00 3a90 	vmov	s1, r3
 8006a90:	e7cf      	b.n	8006a32 <scalbnf+0x1e>
 8006a92:	f113 0f16 	cmn.w	r3, #22
 8006a96:	da06      	bge.n	8006aa6 <scalbnf+0x92>
 8006a98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a9c:	4298      	cmp	r0, r3
 8006a9e:	dcdf      	bgt.n	8006a60 <scalbnf+0x4c>
 8006aa0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8006acc <scalbnf+0xb8>
 8006aa4:	e7de      	b.n	8006a64 <scalbnf+0x50>
 8006aa6:	3319      	adds	r3, #25
 8006aa8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006aac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006ab0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006ad0 <scalbnf+0xbc>
 8006ab4:	ee07 3a10 	vmov	s14, r3
 8006ab8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8006abc:	e7b9      	b.n	8006a32 <scalbnf+0x1e>
 8006abe:	bf00      	nop
 8006ac0:	ffff3cb0 	.word	0xffff3cb0
 8006ac4:	4c000000 	.word	0x4c000000
 8006ac8:	7149f2ca 	.word	0x7149f2ca
 8006acc:	0da24260 	.word	0x0da24260
 8006ad0:	33000000 	.word	0x33000000

08006ad4 <copysignf>:
 8006ad4:	ee10 3a10 	vmov	r3, s0
 8006ad8:	ee10 2a90 	vmov	r2, s1
 8006adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ae0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	ee00 3a10 	vmov	s0, r3
 8006aea:	4770      	bx	lr

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
