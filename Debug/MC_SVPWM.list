
MC_SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045dc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b7c  08004b7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b7c  08004b7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b7c  08004b7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004b90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004b90  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d136  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ae0  00000000  00000000  0002d172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002f798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000204b5  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d38  00000000  00000000  000506a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c51f1  00000000  00000000  0005a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f5ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  0011f64c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004754 	.word	0x08004754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08004754 	.word	0x08004754

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_d2f>:
 8000548:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800054c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000550:	bf24      	itt	cs
 8000552:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000556:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800055a:	d90d      	bls.n	8000578 <__aeabi_d2f+0x30>
 800055c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000560:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000564:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000568:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800056c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800057c:	d121      	bne.n	80005c2 <__aeabi_d2f+0x7a>
 800057e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000582:	bfbc      	itt	lt
 8000584:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000588:	4770      	bxlt	lr
 800058a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000592:	f1c2 0218 	rsb	r2, r2, #24
 8000596:	f1c2 0c20 	rsb	ip, r2, #32
 800059a:	fa10 f30c 	lsls.w	r3, r0, ip
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	bf18      	it	ne
 80005a4:	f040 0001 	orrne.w	r0, r0, #1
 80005a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005b4:	ea40 000c 	orr.w	r0, r0, ip
 80005b8:	fa23 f302 	lsr.w	r3, r3, r2
 80005bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c0:	e7cc      	b.n	800055c <__aeabi_d2f+0x14>
 80005c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005c6:	d107      	bne.n	80005d8 <__aeabi_d2f+0x90>
 80005c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005cc:	bf1e      	ittt	ne
 80005ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bxne	lr
 80005d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid, float Kp, float Ki, float LimMin, float LimMax, float LimMinInt, float LimMaxInt, float T) {
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	61f8      	str	r0, [r7, #28]
 80005f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80005f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80005f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80005fc:	edc7 1a03 	vstr	s3, [r7, #12]
 8000600:	ed87 2a02 	vstr	s4, [r7, #8]
 8000604:	edc7 2a01 	vstr	s5, [r7, #4]
 8000608:	ed87 3a00 	vstr	s6, [r7]
	/* Clear controller variables */
	pid->Integrator = 0.0f;
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
	pid->PrevError  = 0.0f;
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
	pid->Out = 0.0f;
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Kp = Kp;
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	605a      	str	r2, [r3, #4]
	pid->LimMin = LimMin;
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	609a      	str	r2, [r3, #8]
	pid->LimMax = LimMax;
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	60da      	str	r2, [r3, #12]
	pid->LimMinInt = LimMinInt;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	611a      	str	r2, [r3, #16]
	pid->LimMaxInt = LimMaxInt;
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	615a      	str	r2, [r3, #20]
}
 8000648:	bf00      	nop
 800064a:	3724      	adds	r7, #36	; 0x24
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <SVPWM_Init>:
 *      Author: Chawthri
 */
#include "SVPWM.h"
#include "math.h"

void SVPWM_Init(SVPWM *svm, float SwitchFreq) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	ed87 0a00 	vstr	s0, [r7]
	svm->ModIndex = 0;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f04f 0200 	mov.w	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
	svm->Freq = 0;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
	svm->SwitchFreq = SwitchFreq;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	609a      	str	r2, [r3, #8]
	svm->Alpha = 0;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	svm->NewEntry = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
	svm->SectorPointer = 0;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f04f 0200 	mov.w	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
	svm->U = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f04f 0200 	mov.w	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
	svm->V = 0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
	svm->W = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
	svm->StepAngle = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
	svm->EntryOld = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
	svm->ta = 0;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	62da      	str	r2, [r3, #44]	; 0x2c
	svm->tb = 0;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
	svm->to = 0;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <SVPWM_Update>:

void SVPWM_Update(SVPWM *svm, VHZPROFILE *vhz, TIM_HandleTypeDef *htim) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	svm->ModIndex = 0.9; /*vhz->Volt / vhz->VoltRated;*/
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4aba      	ldr	r2, [pc, #744]	; (80009d4 <SVPWM_Update+0x2f8>)
 80006ec:	601a      	str	r2, [r3, #0]
	svm->Freq = 0.01; /*vhz->Freq;*/
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4ab9      	ldr	r2, [pc, #740]	; (80009d8 <SVPWM_Update+0x2fc>)
 80006f2:	605a      	str	r2, [r3, #4]
	svm->StepAngle = (RADIANS * svm->Freq) / svm->SwitchFreq;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80006fa:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80009dc <SVPWM_Update+0x300>
 80006fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	ed93 7a02 	vldr	s14, [r3, #8]
 8000708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svm->EntryOld = svm->NewEntry;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	691a      	ldr	r2, [r3, #16]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
    svm->Alpha = svm->Alpha + svm->StepAngle;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	edc3 7a03 	vstr	s15, [r3, #12]

	if (svm->Alpha >= PI_THIRD) {
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	edd3 7a03 	vldr	s15, [r3, #12]
 8000736:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80009e0 <SVPWM_Update+0x304>
 800073a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	db09      	blt.n	8000758 <SVPWM_Update+0x7c>
		svm->Alpha = svm->Alpha-PI_THIRD;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	edd3 7a03 	vldr	s15, [r3, #12]
 800074a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80009e0 <SVPWM_Update+0x304>
 800074e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	svm->NewEntry = svm->Alpha;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	611a      	str	r2, [r3, #16]
	svm->ta = sinf(PI_THIRD - svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	edd3 7a04 	vldr	s15, [r3, #16]
 8000766:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80009e0 <SVPWM_Update+0x304>
 800076a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	f003 faa3 	bl	8003cbc <sinf>
 8000776:	eeb0 7a40 	vmov.f32	s14, s0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	edd3 7a00 	vldr	s15, [r3]
 8000780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	edd3 7a02 	vldr	s15, [r3, #8]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	svm->tb = sinf(svm->NewEntry) * svm->ModIndex * svm->SwitchFreq;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	edd3 7a04 	vldr	s15, [r3, #16]
 800079a:	eeb0 0a67 	vmov.f32	s0, s15
 800079e:	f003 fa8d 	bl	8003cbc <sinf>
 80007a2:	eeb0 7a40 	vmov.f32	s14, s0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	edd3 7a00 	vldr	s15, [r3]
 80007ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80007b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	svm->to = (svm->SwitchFreq - svm->ta - svm->tb) / 2;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80007cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80007d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80007de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (svm->NewEntry - svm->EntryOld < 0) {
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80007f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	d518      	bpl.n	8000834 <SVPWM_Update+0x158>
      	if (svm->SectorPointer == 5){
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	edd3 7a05 	vldr	s15, [r3, #20]
 8000808:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800080c:	eef4 7a47 	vcmp.f32	s15, s14
 8000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000814:	d104      	bne.n	8000820 <SVPWM_Update+0x144>
         	svm->SectorPointer = 0;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f04f 0200 	mov.w	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	e009      	b.n	8000834 <SVPWM_Update+0x158>
      	}
      	else {
         	svm->SectorPointer = svm->SectorPointer + 1;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	edd3 7a05 	vldr	s15, [r3, #20]
 8000826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800082a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	edc3 7a05 	vstr	s15, [r3, #20]
      	}
    }


	if (svm->SectorPointer==0){
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	edd3 7a05 	vldr	s15, [r3, #20]
 800083a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000842:	d11f      	bne.n	8000884 <SVPWM_Update+0x1a8>
		svm->U = svm->ta + svm->tb + svm->to;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800085a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	edc3 7a06 	vstr	s15, [r3, #24]
		svm->V = svm->tb + svm->to;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edc3 7a07 	vstr	s15, [r3, #28]
		svm->W = svm->to;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	621a      	str	r2, [r3, #32]
 8000882:	e0d8      	b.n	8000a36 <SVPWM_Update+0x35a>
	}

	else if (svm->SectorPointer==1){
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	edd3 7a05 	vldr	s15, [r3, #20]
 800088a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800088e:	eef4 7a47 	vcmp.f32	s15, s14
 8000892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000896:	d11f      	bne.n	80008d8 <SVPWM_Update+0x1fc>
    	svm->U= svm->ta + svm->to;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80008a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80008ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80008c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->to;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	621a      	str	r2, [r3, #32]
 80008d6:	e0ae      	b.n	8000a36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==2){
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	edd3 7a05 	vldr	s15, [r3, #20]
 80008de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80008e2:	eef4 7a47 	vcmp.f32	s15, s14
 80008e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ea:	d11f      	bne.n	800092c <SVPWM_Update+0x250>
    	svm->U = svm->to;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->tb + svm->to;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800090a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->tb + svm->to;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	edc3 7a08 	vstr	s15, [r3, #32]
 800092a:	e084      	b.n	8000a36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==3){
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000932:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000936:	eef4 7a47 	vcmp.f32	s15, s14
 800093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093e:	d11f      	bne.n	8000980 <SVPWM_Update+0x2a4>
    	svm->U = svm->to;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	619a      	str	r2, [r3, #24]
    	svm->V = svm->ta + svm->to;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	edc3 7a07 	vstr	s15, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800096a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	edc3 7a08 	vstr	s15, [r3, #32]
 800097e:	e05a      	b.n	8000a36 <SVPWM_Update+0x35a>
    }

    else if (svm->SectorPointer==4){
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	edd3 7a05 	vldr	s15, [r3, #20]
 8000986:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800098a:	eef4 7a47 	vcmp.f32	s15, s14
 800098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000992:	d127      	bne.n	80009e4 <SVPWM_Update+0x308>
    	svm->U = svm->tb + svm->to;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80009a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->tb + svm->to;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80009be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80009c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	edc3 7a08 	vstr	s15, [r3, #32]
 80009d2:	e030      	b.n	8000a36 <SVPWM_Update+0x35a>
 80009d4:	3f666666 	.word	0x3f666666
 80009d8:	3c23d70a 	.word	0x3c23d70a
 80009dc:	40c90fdb 	.word	0x40c90fdb
 80009e0:	3f860a92 	.word	0x3f860a92
    }

    else if (svm->SectorPointer==5){
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80009ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80009ee:	eef4 7a47 	vcmp.f32	s15, s14
 80009f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f6:	d11e      	bne.n	8000a36 <SVPWM_Update+0x35a>
    	svm->U = svm->ta + svm->tb + svm->to;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edc3 7a06 	vstr	s15, [r3, #24]
    	svm->V = svm->to;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	61da      	str	r2, [r3, #28]
    	svm->W = svm->ta + svm->to;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	edc3 7a08 	vstr	s15, [r3, #32]
    }

	TIM1->CCR1 = (svm->U/svm->SwitchFreq)*(TIM1->ARR+1);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	edd3 6a06 	vldr	s13, [r3, #24]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5e:	ee17 2a90 	vmov	r2, s15
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (svm->V/svm->SwitchFreq)*(TIM1->ARR+1);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	edd3 6a07 	vldr	s13, [r3, #28]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	3301      	adds	r3, #1
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8c:	ee17 2a90 	vmov	r2, s15
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (svm->W/svm->SwitchFreq)*(TIM1->ARR+1);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	edd3 6a08 	vldr	s13, [r3, #32]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SVPWM_Update+0x3ec>)
 8000ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aba:	ee17 2a90 	vmov	r2, s15
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40012c00 	.word	0x40012c00

08000acc <VHZ_Init>:
 */

#include "VHZ.h"
#include "math.h"

void VHZ_Init(VHZPROFILE *vhz, float FreqMin, float FreqRated, float VoltMin, float VoltRated) {
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6178      	str	r0, [r7, #20]
 8000ad4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ad8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000adc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ae0:	edc7 1a01 	vstr	s3, [r7, #4]
	vhz->FreqMin = FreqMin;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	601a      	str	r2, [r3, #0]
	vhz->FreqRated = FreqRated;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	605a      	str	r2, [r3, #4]
	vhz->VoltMin = VoltMin;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	609a      	str	r2, [r3, #8]
	vhz->VoltRated = VoltRated;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	60da      	str	r2, [r3, #12]
	vhz->VfSlope = (VoltRated - VoltMin) / (FreqRated - FreqMin);
 8000afc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	edc3 7a04 	vstr	s15, [r3, #16]
	vhz->Volt = 0;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
	vhz->Freq = FreqMin;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	619a      	str	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	371c      	adds	r7, #28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <VHZ_Update>:

void VHZ_Update(VHZPROFILE *vhz){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if (vhz->Freq <= vhz->FreqMin){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b54:	d804      	bhi.n	8000b60 <VHZ_Update+0x28>
		vhz->Volt = vhz->VoltMin;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	615a      	str	r2, [r3, #20]
    }

	else if ((vhz->Freq > vhz->FreqRated)){
       	vhz->Volt = vhz->VoltRated;
    }
}
 8000b5e:	e03b      	b.n	8000bd8 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqMin) && (vhz->Freq <= vhz->FreqRated)){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	dd20      	ble.n	8000bb8 <VHZ_Update+0x80>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	d815      	bhi.n	8000bb8 <VHZ_Update+0x80>
		vhz->Volt = vhz->VoltMin + vhz->VfSlope * (vhz->Freq - vhz->FreqMin);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	ed93 6a06 	vldr	s12, [r3, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000bb6:	e00f      	b.n	8000bd8 <VHZ_Update+0xa0>
	else if ((vhz->Freq > vhz->FreqRated)){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	ed93 7a06 	vldr	s14, [r3, #24]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bcc:	dc00      	bgt.n	8000bd0 <VHZ_Update+0x98>
}
 8000bce:	e003      	b.n	8000bd8 <VHZ_Update+0xa0>
       	vhz->Volt = vhz->VoltRated;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	615a      	str	r2, [r3, #20]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	0000      	movs	r0, r0
	...

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b598      	push	{r3, r4, r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SVPWM_Init(&svpwm1, 10000);
 8000bec:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8000cd0 <main+0xe8>
 8000bf0:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <main+0xec>)
 8000bf2:	f7ff fd2f 	bl	8000654 <SVPWM_Init>
  VHZ_Init(&vhz1, 1, 0.1, 10, 100);
 8000bf6:	eddf 1a38 	vldr	s3, [pc, #224]	; 8000cd8 <main+0xf0>
 8000bfa:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000bfe:	eddf 0a37 	vldr	s1, [pc, #220]	; 8000cdc <main+0xf4>
 8000c02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c06:	4836      	ldr	r0, [pc, #216]	; (8000ce0 <main+0xf8>)
 8000c08:	f7ff ff60 	bl	8000acc <VHZ_Init>
  PIDController_Init(&slip, 5, 0, -500, 500, 0, 0, 10000);
 8000c0c:	ed9f 3a30 	vldr	s6, [pc, #192]	; 8000cd0 <main+0xe8>
 8000c10:	eddf 2a34 	vldr	s5, [pc, #208]	; 8000ce4 <main+0xfc>
 8000c14:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8000ce4 <main+0xfc>
 8000c18:	eddf 1a33 	vldr	s3, [pc, #204]	; 8000ce8 <main+0x100>
 8000c1c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8000cec <main+0x104>
 8000c20:	eddf 0a30 	vldr	s1, [pc, #192]	; 8000ce4 <main+0xfc>
 8000c24:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000c28:	4831      	ldr	r0, [pc, #196]	; (8000cf0 <main+0x108>)
 8000c2a:	f7ff fcdd 	bl	80005e8 <PIDController_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fb8c 	bl	800134a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f865 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 f9e3 	bl	8001000 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c3a:	f000 f8b5 	bl	8000da8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000c3e:	f000 f98d 	bl	8000f5c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c42:	2100      	movs	r1, #0
 8000c44:	482b      	ldr	r0, [pc, #172]	; (8000cf4 <main+0x10c>)
 8000c46:	f001 fdf1 	bl	800282c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <main+0x10c>)
 8000c4e:	f002 fe49 	bl	80038e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c52:	2104      	movs	r1, #4
 8000c54:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <main+0x10c>)
 8000c56:	f001 fde9 	bl	800282c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	4825      	ldr	r0, [pc, #148]	; (8000cf4 <main+0x10c>)
 8000c5e:	f002 fe41 	bl	80038e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c62:	2108      	movs	r1, #8
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <main+0x10c>)
 8000c66:	f001 fde1 	bl	800282c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <main+0x10c>)
 8000c6e:	f002 fe39 	bl	80038e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <main+0x110>)
 8000c74:	f001 fd24 	bl	80026c0 <HAL_TIM_Base_Start_IT>
		vhz1.Freq = 0.01;
	}
	else{
		vhz1.Freq += 0.001;
	}*/
	if(a >= 10){
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <main+0x114>)
 8000c7a:	edd3 7a00 	vldr	s15, [r3]
 8000c7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8a:	db04      	blt.n	8000c96 <main+0xae>
		a = 0;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0x114>)
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e012      	b.n	8000cbc <main+0xd4>
	}
	else{
		a += 0.001;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <main+0x114>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbfc 	bl	8000498 <__aeabi_f2d>
 8000ca0:	a309      	add	r3, pc, #36	; (adr r3, 8000cc8 <main+0xe0>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff fa99 	bl	80001dc <__adddf3>
 8000caa:	4603      	mov	r3, r0
 8000cac:	460c      	mov	r4, r1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	f7ff fc49 	bl	8000548 <__aeabi_d2f>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <main+0x114>)
 8000cba:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 fbb9 	bl	8001434 <HAL_Delay>
	if(a >= 10){
 8000cc2:	e7d9      	b.n	8000c78 <main+0x90>
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ccc:	3f50624d 	.word	0x3f50624d
 8000cd0:	461c4000 	.word	0x461c4000
 8000cd4:	2000010c 	.word	0x2000010c
 8000cd8:	42c80000 	.word	0x42c80000
 8000cdc:	3dcccccd 	.word	0x3dcccccd
 8000ce0:	200000a4 	.word	0x200000a4
 8000ce4:	00000000 	.word	0x00000000
 8000ce8:	43fa0000 	.word	0x43fa0000
 8000cec:	c3fa0000 	.word	0xc3fa0000
 8000cf0:	2000007c 	.word	0x2000007c
 8000cf4:	200000c0 	.word	0x200000c0
 8000cf8:	20000030 	.word	0x20000030
 8000cfc:	20000144 	.word	0x20000144

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b096      	sub	sp, #88	; 0x58
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2244      	movs	r2, #68	; 0x44
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 ffcc 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	2302      	movs	r3, #2
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d40:	2307      	movs	r3, #7
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fe71 	bl	8001a38 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000d5c:	f000 f996 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fa7b 	bl	8002278 <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f980 	bl	800108c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d90:	f000 fdfc 	bl	800198c <HAL_PWREx_ControlVoltageScaling>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d9a:	f000 f977 	bl	800108c <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3758      	adds	r7, #88	; 0x58
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09e      	sub	sp, #120	; 0x78
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	222c      	movs	r2, #44	; 0x2c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 ff5a 	bl	8003cac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df8:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000dfa:	4a57      	ldr	r2, [pc, #348]	; (8000f58 <MX_TIM1_Init+0x1b0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000dfe:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e00:	224f      	movs	r2, #79	; 0x4f
 8000e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000e04:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e06:	2260      	movs	r2, #96	; 0x60
 8000e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e0a:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e0c:	2263      	movs	r2, #99	; 0x63
 8000e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e16:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e22:	484c      	ldr	r0, [pc, #304]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e24:	f001 fbf4 	bl	8002610 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 f92d 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4845      	ldr	r0, [pc, #276]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e40:	f002 f802 	bl	8002e48 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e4a:	f000 f91f 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e4e:	4841      	ldr	r0, [pc, #260]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e50:	f001 fc8a 	bl	8002768 <HAL_TIM_PWM_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000e5a:	f000 f917 	bl	800108c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4839      	ldr	r0, [pc, #228]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e6e:	f002 f8a4 	bl	8002fba <HAL_TIM_SlaveConfigSynchro>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000e78:	f000 f908 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4831      	ldr	r0, [pc, #196]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000e90:	f002 fdc6 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e9a:	f000 f8f7 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	; 0x60
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4824      	ldr	r0, [pc, #144]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000ec4:	f001 feb0 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ece:	f000 f8dd 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000edc:	f001 fea4 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ee6:	f000 f8d1 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000ef4:	f001 fe98 	bl	8002c28 <HAL_TIM_PWM_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000efe:	f000 f8c5 	bl	800108c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 100;
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000f38:	f002 fdd8 	bl	8003aec <HAL_TIMEx_ConfigBreakDeadTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000f42:	f000 f8a3 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM1_Init+0x1ac>)
 8000f48:	f000 f90e 	bl	8001168 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3778      	adds	r7, #120	; 0x78
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000c0 	.word	0x200000c0
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <MX_TIM15_Init+0xa0>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f84:	224f      	movs	r2, #79	; 0x4f
 8000f86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f90:	2263      	movs	r2, #99	; 0x63
 8000f92:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000fa8:	f001 fb32 	bl	8002610 <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000fb2:	f000 f86b 	bl	800108c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000fc6:	f001 fff8 	bl	8002fba <HAL_TIM_SlaveConfigSynchro>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000fd0:	f000 f85c 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_TIM15_Init+0x9c>)
 8000fe2:	f002 fd1d 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000fec:	f000 f84e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	40014000 	.word	0x40014000

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_GPIO_Init+0x44>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <MX_GPIO_Init+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_GPIO_Init+0x44>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_GPIO_Init+0x44>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <MX_GPIO_Init+0x44>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_GPIO_Init+0x44>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_TIM_PeriodElapsedCallback>:

}
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	OldSector = svpwm1.SectorPointer;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001052:	edd3 7a05 	vldr	s15, [r3, #20]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001060:	601a      	str	r2, [r3, #0]
	VHZ_Update(&vhz1);
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001064:	f7ff fd68 	bl	8000b38 <VHZ_Update>
	SVPWM_Update(&svpwm1, &vhz1, &htim1);
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800106a:	4906      	ldr	r1, [pc, #24]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800106e:	f7ff fb35 	bl	80006dc <SVPWM_Update>
	//Count_Up(&svpwm1, OldSector);

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000010c 	.word	0x2000010c
 8001080:	20000028 	.word	0x20000028
 8001084:	200000a4 	.word	0x200000a4
 8001088:	200000c0 	.word	0x200000c0

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_MspInit+0x44>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_MspInit+0x44>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6613      	str	r3, [r2, #96]	; 0x60
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x44>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6593      	str	r3, [r2, #88]	; 0x58
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_TIM_Base_MspInit+0x78>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d114      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 80010fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2018      	movs	r0, #24
 8001114:	f000 fa8b 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001118:	2018      	movs	r0, #24
 800111a:	f000 faa4 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800111e:	e018      	b.n	8001152 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_TIM_Base_MspInit+0x80>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d113      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_TIM_Base_MspInit+0x7c>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2018      	movs	r0, #24
 8001148:	f000 fa71 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800114c:	2018      	movs	r0, #24
 800114e:	f000 fa8a 	bl	8001666 <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40014000 	.word	0x40014000

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <HAL_TIM_MspPostInit+0xa0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d139      	bne.n	80011fe <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_TIM_MspPostInit+0xa4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011ba:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f000 fa5f 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011de:	2303      	movs	r3, #3
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_TIM_MspPostInit+0xa8>)
 80011fa:	f000 fa4f 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f8c4 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001276:	f001 fbb7 	bl	80029e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800127c:	f001 fbb4 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000c0 	.word	0x200000c0
 8001288:	20000030 	.word	0x20000030

0800128c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <SystemInit+0x64>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <SystemInit+0x64>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <SystemInit+0x68>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <SystemInit+0x68>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <SystemInit+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <SystemInit+0x68>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <SystemInit+0x68>)
 80012b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <SystemInit+0x68>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <SystemInit+0x68>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <SystemInit+0x68>)
 80012d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <SystemInit+0x68>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SystemInit+0x64>)
 80012de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e2:	609a      	str	r2, [r3, #8]
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	40021000 	.word	0x40021000

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff ffc6 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001300:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001302:	e003      	b.n	800130c <LoopCopyDataInit>

08001304 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001306:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001308:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800130a:	3104      	adds	r1, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <LoopForever+0xa>)
	ldr	r3, =_edata
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001310:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001312:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001314:	d3f6      	bcc.n	8001304 <CopyDataInit>
	ldr	r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001318:	e002      	b.n	8001320 <LoopFillZerobss>

0800131a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800131a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800131c:	f842 3b04 	str.w	r3, [r2], #4

08001320 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LoopForever+0x16>)
	cmp	r2, r3
 8001322:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001324:	d3f9      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f002 fc9d 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fc5d 	bl	8000be8 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001334:	08004b84 	.word	0x08004b84
	ldr	r0, =_sdata
 8001338:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800133c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001340:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001344:	2000014c 	.word	0x2000014c

08001348 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_IRQHandler>

0800134a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f95f 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f80e 	bl	800137c <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e001      	b.n	8001370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136c:	f7ff fe96 	bl	800109c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_InitTick+0x6c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d023      	beq.n	80013d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x70>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_InitTick+0x6c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f96b 	bl	8001682 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10f      	bne.n	80013d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d809      	bhi.n	80013cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f935 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_InitTick+0x74>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e007      	b.n	80013dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e004      	b.n	80013dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e001      	b.n	80013dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	20000148 	.word	0x20000148

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000148 	.word	0x20000148

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_Delay+0x40>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000008 	.word	0x20000008

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e148      	b.n	800193e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 813a 	beq.w	8001938 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d00b      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d8:	2b11      	cmp	r3, #17
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b12      	cmp	r3, #18
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0xea>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b12      	cmp	r3, #18
 8001784:	d123      	bne.n	80017ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8094 	beq.w	8001938 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_GPIO_Init+0x2c0>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x2c0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6613      	str	r3, [r2, #96]	; 0x60
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <HAL_GPIO_Init+0x2c0>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1d4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1d0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1cc>
 8001864:	2302      	movs	r3, #2
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 8001868:	2307      	movs	r3, #7
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1d6>
 8001870:	2300      	movs	r3, #0
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001882:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aeaf 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_PWREx_GetVoltageRange+0x18>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40007000 	.word	0x40007000

0800198c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199a:	d130      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a8:	d038      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2232      	movs	r2, #50	; 0x32
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d0:	e002      	b.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d102      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f2      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d110      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e00f      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	d007      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	20000000 	.word	0x20000000
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc11 	b.w	800226e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4c:	4ba0      	ldr	r3, [pc, #640]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a56:	4b9e      	ldr	r3, [pc, #632]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80e4 	beq.w	8001c36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	f040 808b 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 8087 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x64>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e3e8      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x7e>
 8001aac:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab4:	e005      	b.n	8001ac2 <HAL_RCC_OscConfig+0x8a>
 8001ab6:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d223      	bcs.n	8001b0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fd40 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3c9      	b.n	800226e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7c      	ldr	r2, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4977      	ldr	r1, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af8:	4b75      	ldr	r3, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	4972      	ldr	r1, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e025      	b.n	8001b5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	496a      	ldr	r1, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	4965      	ldr	r1, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fd00 	bl	8002550 <RCC_SetFlashLatencyFromMSIRange>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e389      	b.n	800226e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5a:	f000 fc6f 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4a5a      	ldr	r2, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x29c>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa21 f303 	lsr.w	r3, r1, r3
 8001b76:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x2a0>)
 8001b78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_RCC_OscConfig+0x2a4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fbfc 	bl	800137c <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d052      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	e36d      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d032      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fc39 	bl	800141c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bae:	f7ff fc35 	bl	800141c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e356      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc0:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bcc:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	493a      	ldr	r1, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4935      	ldr	r1, [pc, #212]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
 8001bfe:	e01a      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc06 	bl	800141c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c14:	f7ff fc02 	bl	800141c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e323      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1dc>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d073      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x21c>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d063      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d15f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e300      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x24c>
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x288>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x270>
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x288>
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <HAL_RCC_OscConfig+0x298>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fba8 	bl	800141c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	e010      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	0800476c 	.word	0x0800476c
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fb9c 	bl	800141c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2bd      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf2:	4baf      	ldr	r3, [pc, #700]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fb8c 	bl	800141c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb88 	bl	800141c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e2a9      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	4ba5      	ldr	r3, [pc, #660]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2d0>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x310>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d119      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d116      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x328>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e286      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4990      	ldr	r1, [pc, #576]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	e040      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7e:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a8b      	ldr	r2, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb47 	bl	800141c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7ff fb43 	bl	800141c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e264      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	497c      	ldr	r1, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fb23 	bl	800141c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fb1f 	bl	800141c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e240      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fafe 	bl	800141c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fafa 	bl	800141c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e21b      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ef      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001e44:	e01b      	b.n	8001e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fae1 	bl	800141c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fadd 	bl	800141c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1fe      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d118      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff faa4 	bl	800141c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7ff faa0 	bl	800141c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1c1      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_RCC_OscConfig+0x57c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d8>
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0e:	e024      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d110      	bne.n	8001f3a <HAL_RCC_OscConfig+0x502>
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	e00f      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fa5b 	bl	800141c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fa57 	bl	800141c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e176      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ed      	beq.n	8001f6a <HAL_RCC_OscConfig+0x532>
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff fa44 	bl	800141c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f96:	e00f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff fa40 	bl	800141c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d906      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e15f      	b.n	800226e <HAL_RCC_OscConfig+0x836>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	4baa      	ldr	r3, [pc, #680]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e8      	bne.n	8001f98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4aa4      	ldr	r2, [pc, #656]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fec:	4b9d      	ldr	r3, [pc, #628]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	4a9c      	ldr	r2, [pc, #624]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fa0e 	bl	800141c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002004:	f7ff fa0a 	bl	800141c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e12b      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002016:	4b93      	ldr	r3, [pc, #588]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCC_OscConfig+0x5cc>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002026:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202c:	4a8d      	ldr	r2, [pc, #564]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff f9f1 	bl	800141c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203e:	f7ff f9ed 	bl	800141c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e10e      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002050:	4b84      	ldr	r3, [pc, #528]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ef      	bne.n	800203e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8102 	beq.w	800226c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80c5 	bne.w	80021fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0203 	and.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	429a      	cmp	r2, r3
 8002084:	d12c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	3b01      	subs	r3, #1
 8002092:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d123      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d11b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d113      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d109      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d067      	beq.n	80021b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d062      	beq.n	80021ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0bb      	b.n	800226e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80020fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002100:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002102:	f7ff f98b 	bl	800141c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff f987 	bl	800141c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0a8      	b.n	800226e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b4e      	ldr	r3, [pc, #312]	; (8002268 <HAL_RCC_OscConfig+0x830>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002138:	3a01      	subs	r2, #1
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002142:	0212      	lsls	r2, r2, #8
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0552      	lsls	r2, r2, #21
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0652      	lsls	r2, r2, #25
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002162:	06d2      	lsls	r2, r2, #27
 8002164:	430a      	orrs	r2, r1
 8002166:	493f      	ldr	r1, [pc, #252]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a39      	ldr	r2, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002184:	f7ff f94a 	bl	800141c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f946 	bl	800141c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e067      	b.n	800226e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021aa:	e05f      	b.n	800226c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e05e      	b.n	800226e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d4:	f7ff f922 	bl	800141c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f91e 	bl	800141c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e03f      	b.n	800226e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x7a4>
 80021fa:	e037      	b.n	800226c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d02d      	beq.n	800225e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002220:	f023 0303 	bic.w	r3, r3, #3
 8002224:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 800222c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff f8f1 	bl	800141c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff f8ed 	bl	800141c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e00e      	b.n	800226e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_RCC_OscConfig+0x82c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x806>
 800225c:	e006      	b.n	800226c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e005      	b.n	800226e <HAL_RCC_OscConfig+0x836>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0c8      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4961      	ldr	r1, [pc, #388]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b0      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d04c      	beq.n	8002362 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d121      	bne.n	8002320 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e09e      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d115      	bne.n	8002320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e092      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e086      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e07e      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	493f      	ldr	r1, [pc, #252]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002332:	f7ff f873 	bl	800141c <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002338:	e00a      	b.n	8002350 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233a:	f7ff f86f 	bl	800141c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e066      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 020c 	and.w	r2, r3, #12
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	429a      	cmp	r2, r3
 8002360:	d1eb      	bne.n	800233a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	492c      	ldr	r1, [pc, #176]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d210      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 0207 	bic.w	r2, r3, #7
 8002396:	4924      	ldr	r1, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_ClockConfig+0x1b0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e036      	b.n	800241e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4918      	ldr	r1, [pc, #96]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4910      	ldr	r1, [pc, #64]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ee:	f000 f825 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	fa21 f303 	lsr.w	r3, r1, r3
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe ffb2 	bl	800137c <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	72fb      	strb	r3, [r7, #11]

  return status;
 800241c:	7afb      	ldrb	r3, [r7, #11]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	0800476c 	.word	0x0800476c
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x34>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d121      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d11e      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	e005      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e004      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d133      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80024de:	e005      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024e2:	617b      	str	r3, [r7, #20]
      break;
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_GetSysClockFreq+0x110>)
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	3301      	adds	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	fb02 f203 	mul.w	r2, r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0e5b      	lsrs	r3, r3, #25
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002532:	69bb      	ldr	r3, [r7, #24]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3724      	adds	r7, #36	; 0x24
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40021000 	.word	0x40021000
 8002544:	0800477c 	.word	0x0800477c
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002568:	f7ff fa02 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 800256c:	6178      	str	r0, [r7, #20]
 800256e:	e014      	b.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6593      	str	r3, [r2, #88]	; 0x58
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7ff f9f2 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d10b      	bne.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d919      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2ba0      	cmp	r3, #160	; 0xa0
 80025ac:	d902      	bls.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ae:	2302      	movs	r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	e013      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e010      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b80      	cmp	r3, #128	; 0x80
 80025be:	d902      	bls.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025c0:	2303      	movs	r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e00a      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d102      	bne.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025cc:	2302      	movs	r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e004      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d101      	bne.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 0207 	bic.w	r2, r3, #7
 80025e4:	4909      	ldr	r1, [pc, #36]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	40022000 	.word	0x40022000

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e049      	b.n	80026b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fd54 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 fd1e 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e03b      	b.n	8002750 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_TIM_Base_Start_IT+0x9c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_TIM_Base_Start_IT+0x4e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d004      	beq.n	800270e <HAL_TIM_Base_Start_IT+0x4e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_TIM_Base_Start_IT+0xa0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_TIM_Base_Start_IT+0xa4>)
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d015      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x8c>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d011      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	e008      	b.n	800274c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e000      	b.n	800274e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40014000 	.word	0x40014000
 8002764:	00010007 	.word	0x00010007

08002768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e049      	b.n	800280e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f841 	bl	8002816 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 fc72 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_TIM_PWM_Start+0x24>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e03c      	b.n	80028ca <HAL_TIM_PWM_Start+0x9e>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d109      	bne.n	800286a <HAL_TIM_PWM_Start+0x3e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e02f      	b.n	80028ca <HAL_TIM_PWM_Start+0x9e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d109      	bne.n	8002884 <HAL_TIM_PWM_Start+0x58>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e022      	b.n	80028ca <HAL_TIM_PWM_Start+0x9e>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d109      	bne.n	800289e <HAL_TIM_PWM_Start+0x72>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e015      	b.n	80028ca <HAL_TIM_PWM_Start+0x9e>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d109      	bne.n	80028b8 <HAL_TIM_PWM_Start+0x8c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e008      	b.n	80028ca <HAL_TIM_PWM_Start+0x9e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07e      	b.n	80029d0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Start+0xb6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e0:	e023      	b.n	800292a <HAL_TIM_PWM_Start+0xfe>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_PWM_Start+0xc6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f0:	e01b      	b.n	800292a <HAL_TIM_PWM_Start+0xfe>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d104      	bne.n	8002902 <HAL_TIM_PWM_Start+0xd6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002900:	e013      	b.n	800292a <HAL_TIM_PWM_Start+0xfe>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d104      	bne.n	8002912 <HAL_TIM_PWM_Start+0xe6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002910:	e00b      	b.n	800292a <HAL_TIM_PWM_Start+0xfe>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b10      	cmp	r3, #16
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Start+0xf6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002920:	e003      	b.n	800292a <HAL_TIM_PWM_Start+0xfe>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 ffb0 	bl	8003898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <HAL_TIM_PWM_Start+0x1ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_TIM_PWM_Start+0x12a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_TIM_PWM_Start+0x1b0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_TIM_PWM_Start+0x12a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <HAL_TIM_PWM_Start+0x1b4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_TIM_PWM_Start+0x12e>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_TIM_PWM_Start+0x130>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_PWM_Start+0x1ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_TIM_PWM_Start+0x162>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d004      	beq.n	800298e <HAL_TIM_PWM_Start+0x162>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <HAL_TIM_PWM_Start+0x1b0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d115      	bne.n	80029ba <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_TIM_PWM_Start+0x1b8>)
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d015      	beq.n	80029cc <HAL_TIM_PWM_Start+0x1a0>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d011      	beq.n	80029cc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	e008      	b.n	80029cc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e000      	b.n	80029ce <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	00010007 	.word	0x00010007

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb11 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fb03 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fb14 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fae7 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fad9 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 faea 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0208 	mvn.w	r2, #8
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fabd 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 faaf 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fac0 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa93 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa85 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fa96 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0201 	mvn.w	r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe fa6e 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f001 f82c 	bl	8003bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d107      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 f81f 	bl	8003c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa44 	bl	800307a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0220 	mvn.w	r2, #32
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 ffdf 	bl	8003bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0fd      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x216>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b14      	cmp	r3, #20
 8002c4e:	f200 80f0 	bhi.w	8002e32 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002e33 	.word	0x08002e33
 8002c60:	08002e33 	.word	0x08002e33
 8002c64:	08002e33 	.word	0x08002e33
 8002c68:	08002ced 	.word	0x08002ced
 8002c6c:	08002e33 	.word	0x08002e33
 8002c70:	08002e33 	.word	0x08002e33
 8002c74:	08002e33 	.word	0x08002e33
 8002c78:	08002d2f 	.word	0x08002d2f
 8002c7c:	08002e33 	.word	0x08002e33
 8002c80:	08002e33 	.word	0x08002e33
 8002c84:	08002e33 	.word	0x08002e33
 8002c88:	08002d6f 	.word	0x08002d6f
 8002c8c:	08002e33 	.word	0x08002e33
 8002c90:	08002e33 	.word	0x08002e33
 8002c94:	08002e33 	.word	0x08002e33
 8002c98:	08002db1 	.word	0x08002db1
 8002c9c:	08002e33 	.word	0x08002e33
 8002ca0:	08002e33 	.word	0x08002e33
 8002ca4:	08002e33 	.word	0x08002e33
 8002ca8:	08002df1 	.word	0x08002df1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fa50 	bl	8003158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      break;
 8002cea:	e0a3      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 faac 	bl	8003250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      break;
 8002d2c:	e082      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fb05 	bl	8003344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e062      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fb5d 	bl	8003434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	61da      	str	r2, [r3, #28]
      break;
 8002dae:	e041      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb9a 	bl	80034f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dee:	e021      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbd2 	bl	80035a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e30:	e000      	b.n	8002e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop

08002e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIM_ConfigClockSource+0x18>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0a8      	b.n	8002fb2 <HAL_TIM_ConfigClockSource+0x16a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d067      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0x124>
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d80b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x70>
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d073      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0x144>
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d802      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x66>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d06f      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eac:	e078      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d06c      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0x144>
 8002eb2:	2b30      	cmp	r3, #48	; 0x30
 8002eb4:	d06a      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002eb6:	e073      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d00d      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x90>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d804      	bhi.n	8002eca <HAL_TIM_ConfigClockSource+0x82>
 8002ec0:	2b50      	cmp	r3, #80	; 0x50
 8002ec2:	d033      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0xe4>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d041      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002ec8:	e06a      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d066      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x156>
 8002ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed4:	d017      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ed6:	e063      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f000 fcb6 	bl	8003858 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002efa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e04c      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f000 fc9f 	bl	8003858 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f28:	609a      	str	r2, [r3, #8]
      break;
 8002f2a:	e039      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f000 fc13 	bl	8003764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2150      	movs	r1, #80	; 0x50
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fc6c 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 8002f4a:	e029      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f000 fc32 	bl	80037c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2160      	movs	r1, #96	; 0x60
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fc5c 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 8002f6a:	e019      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f000 fbf3 	bl	8003764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fc4c 	bl	8003822 <TIM_ITRx_SetConfig>
      break;
 8002f8a:	e009      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 fc43 	bl	8003822 <TIM_ITRx_SetConfig>
        break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e031      	b.n	8003036 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb35 	bl	8003654 <TIM_SlaveTimer_SetConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e018      	b.n	8003036 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003012:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003022:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2a      	ldr	r2, [pc, #168]	; (800314c <TIM_Base_SetConfig+0xbc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x20>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <TIM_Base_SetConfig+0xbc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x52>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x52>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <TIM_Base_SetConfig+0xc0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x52>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <TIM_Base_SetConfig+0xc4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <TIM_Base_SetConfig+0xbc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <TIM_Base_SetConfig+0xc0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0xa0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <TIM_Base_SetConfig+0xc4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d103      	bne.n	8003138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	615a      	str	r2, [r3, #20]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400

08003158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0201 	bic.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a24      	ldr	r2, [pc, #144]	; (8003244 <TIM_OC1_SetConfig+0xec>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_OC1_SetConfig+0x70>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <TIM_OC1_SetConfig+0xf0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_OC1_SetConfig+0x70>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a22      	ldr	r2, [pc, #136]	; (800324c <TIM_OC1_SetConfig+0xf4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10c      	bne.n	80031e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0308 	bic.w	r3, r3, #8
 80031ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <TIM_OC1_SetConfig+0xec>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_OC1_SetConfig+0xa2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a16      	ldr	r2, [pc, #88]	; (8003248 <TIM_OC1_SetConfig+0xf0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_OC1_SetConfig+0xa2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a15      	ldr	r2, [pc, #84]	; (800324c <TIM_OC1_SetConfig+0xf4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400

08003250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0320 	bic.w	r3, r3, #32
 800329e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a22      	ldr	r2, [pc, #136]	; (8003338 <TIM_OC2_SetConfig+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a19      	ldr	r2, [pc, #100]	; (8003338 <TIM_OC2_SetConfig+0xe8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_OC2_SetConfig+0x98>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <TIM_OC2_SetConfig+0xec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC2_SetConfig+0x98>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a17      	ldr	r2, [pc, #92]	; (8003340 <TIM_OC2_SetConfig+0xf0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d113      	bne.n	8003310 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40014000 	.word	0x40014000
 8003340:	40014400 	.word	0x40014400

08003344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <TIM_OC3_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10d      	bne.n	80033c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <TIM_OC3_SetConfig+0xe4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <TIM_OC3_SetConfig+0x96>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <TIM_OC3_SetConfig+0xe8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_OC3_SetConfig+0x96>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <TIM_OC3_SetConfig+0xec>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d113      	bne.n	8003402 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400

08003434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	031b      	lsls	r3, r3, #12
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <TIM_OC4_SetConfig+0xb0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_OC4_SetConfig+0x74>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <TIM_OC4_SetConfig+0xb4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC4_SetConfig+0x74>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <TIM_OC4_SetConfig+0xb8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d109      	bne.n	80034bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	019b      	lsls	r3, r3, #6
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400

080034f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <TIM_OC5_SetConfig+0xa4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_OC5_SetConfig+0x6a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <TIM_OC5_SetConfig+0xa8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_OC5_SetConfig+0x6a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a11      	ldr	r2, [pc, #68]	; (800359c <TIM_OC5_SetConfig+0xac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d109      	bne.n	800356e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400

080035a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	051b      	lsls	r3, r3, #20
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <TIM_OC6_SetConfig+0xa8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_OC6_SetConfig+0x6c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <TIM_OC6_SetConfig+0xac>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_OC6_SetConfig+0x6c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <TIM_OC6_SetConfig+0xb0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d109      	bne.n	8003620 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400

08003654 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b30      	cmp	r3, #48	; 0x30
 800369c:	d05c      	beq.n	8003758 <TIM_SlaveTimer_SetConfig+0x104>
 800369e:	2b30      	cmp	r3, #48	; 0x30
 80036a0:	d806      	bhi.n	80036b0 <TIM_SlaveTimer_SetConfig+0x5c>
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d058      	beq.n	8003758 <TIM_SlaveTimer_SetConfig+0x104>
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d056      	beq.n	8003758 <TIM_SlaveTimer_SetConfig+0x104>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d054      	beq.n	8003758 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80036ae:	e054      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80036b0:	2b50      	cmp	r3, #80	; 0x50
 80036b2:	d03d      	beq.n	8003730 <TIM_SlaveTimer_SetConfig+0xdc>
 80036b4:	2b50      	cmp	r3, #80	; 0x50
 80036b6:	d802      	bhi.n	80036be <TIM_SlaveTimer_SetConfig+0x6a>
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d010      	beq.n	80036de <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80036bc:	e04d      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80036be:	2b60      	cmp	r3, #96	; 0x60
 80036c0:	d040      	beq.n	8003744 <TIM_SlaveTimer_SetConfig+0xf0>
 80036c2:	2b70      	cmp	r3, #112	; 0x70
 80036c4:	d000      	beq.n	80036c8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80036c6:	e048      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68d9      	ldr	r1, [r3, #12]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f000 f8be 	bl	8003858 <TIM_ETR_SetConfig>
      break;
 80036dc:	e03d      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d101      	bne.n	80036ea <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e038      	b.n	800375c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003710:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	621a      	str	r2, [r3, #32]
      break;
 800372e:	e014      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 f811 	bl	8003764 <TIM_TI1_ConfigInputStage>
      break;
 8003742:	e00a      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6899      	ldr	r1, [r3, #8]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	461a      	mov	r2, r3
 8003752:	f000 f836 	bl	80037c2 <TIM_TI2_ConfigInputStage>
      break;
 8003756:	e000      	b.n	800375a <TIM_SlaveTimer_SetConfig+0x106>
        break;
 8003758:	bf00      	nop
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0201 	bic.w	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 030a 	bic.w	r3, r3, #10
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b087      	sub	sp, #28
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0210 	bic.w	r2, r3, #16
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	031b      	lsls	r3, r3, #12
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	f043 0307 	orr.w	r3, r3, #7
 8003844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	431a      	orrs	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2201      	movs	r2, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	401a      	ands	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_TIMEx_PWMN_Start+0x24>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e022      	b.n	800394e <HAL_TIMEx_PWMN_Start+0x6a>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d109      	bne.n	8003922 <HAL_TIMEx_PWMN_Start+0x3e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e015      	b.n	800394e <HAL_TIMEx_PWMN_Start+0x6a>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d109      	bne.n	800393c <HAL_TIMEx_PWMN_Start+0x58>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <HAL_TIMEx_PWMN_Start+0x6a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e05a      	b.n	8003a0c <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_TIMEx_PWMN_Start+0x82>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003964:	e013      	b.n	800398e <HAL_TIMEx_PWMN_Start+0xaa>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d104      	bne.n	8003976 <HAL_TIMEx_PWMN_Start+0x92>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003974:	e00b      	b.n	800398e <HAL_TIMEx_PWMN_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d104      	bne.n	8003986 <HAL_TIMEx_PWMN_Start+0xa2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003984:	e003      	b.n	800398e <HAL_TIMEx_PWMN_Start+0xaa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2204      	movs	r2, #4
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f93e 	bl	8003c18 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_TIMEx_PWMN_Start+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_TIMEx_PWMN_Start+0xe6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d004      	beq.n	80039ca <HAL_TIMEx_PWMN_Start+0xe6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_TIMEx_PWMN_Start+0x134>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d115      	bne.n	80039f6 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_TIMEx_PWMN_Start+0x138>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d015      	beq.n	8003a08 <HAL_TIMEx_PWMN_Start+0x124>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e2:	d011      	beq.n	8003a08 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	e008      	b.n	8003a08 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e000      	b.n	8003a0a <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	00010007 	.word	0x00010007

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e04f      	b.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d004      	beq.n	8003aac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000

08003aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e060      	b.n	8003bca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d115      	bne.n	8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	051b      	lsls	r3, r3, #20
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	4e0d      	ldr	r6, [pc, #52]	; (8003c9c <__libc_init_array+0x38>)
 8003c68:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6a:	1ba4      	subs	r4, r4, r6
 8003c6c:	10a4      	asrs	r4, r4, #2
 8003c6e:	2500      	movs	r5, #0
 8003c70:	42a5      	cmp	r5, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	4e0b      	ldr	r6, [pc, #44]	; (8003ca4 <__libc_init_array+0x40>)
 8003c76:	4c0c      	ldr	r4, [pc, #48]	; (8003ca8 <__libc_init_array+0x44>)
 8003c78:	f000 fd6c 	bl	8004754 <_init>
 8003c7c:	1ba4      	subs	r4, r4, r6
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	2500      	movs	r5, #0
 8003c82:	42a5      	cmp	r5, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c8c:	4798      	blx	r3
 8003c8e:	3501      	adds	r5, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c96:	4798      	blx	r3
 8003c98:	3501      	adds	r5, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08004b7c 	.word	0x08004b7c
 8003ca0:	08004b7c 	.word	0x08004b7c
 8003ca4:	08004b7c 	.word	0x08004b7c
 8003ca8:	08004b80 	.word	0x08004b80

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <sinf>:
 8003cbc:	ee10 3a10 	vmov	r3, s0
 8003cc0:	b507      	push	{r0, r1, r2, lr}
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <sinf+0x7c>)
 8003cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	dc05      	bgt.n	8003cd8 <sinf+0x1c>
 8003ccc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003d3c <sinf+0x80>
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f000 fc41 	bl	8004558 <__kernel_sinf>
 8003cd6:	e004      	b.n	8003ce2 <sinf+0x26>
 8003cd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003cdc:	db04      	blt.n	8003ce8 <sinf+0x2c>
 8003cde:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003ce2:	b003      	add	sp, #12
 8003ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ce8:	4668      	mov	r0, sp
 8003cea:	f000 f829 	bl	8003d40 <__ieee754_rem_pio2f>
 8003cee:	f000 0003 	and.w	r0, r0, #3
 8003cf2:	2801      	cmp	r0, #1
 8003cf4:	d008      	beq.n	8003d08 <sinf+0x4c>
 8003cf6:	2802      	cmp	r0, #2
 8003cf8:	d00d      	beq.n	8003d16 <sinf+0x5a>
 8003cfa:	b9b0      	cbnz	r0, 8003d2a <sinf+0x6e>
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d02:	ed9d 0a00 	vldr	s0, [sp]
 8003d06:	e7e4      	b.n	8003cd2 <sinf+0x16>
 8003d08:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d0c:	ed9d 0a00 	vldr	s0, [sp]
 8003d10:	f000 f942 	bl	8003f98 <__kernel_cosf>
 8003d14:	e7e5      	b.n	8003ce2 <sinf+0x26>
 8003d16:	2001      	movs	r0, #1
 8003d18:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d1c:	ed9d 0a00 	vldr	s0, [sp]
 8003d20:	f000 fc1a 	bl	8004558 <__kernel_sinf>
 8003d24:	eeb1 0a40 	vneg.f32	s0, s0
 8003d28:	e7db      	b.n	8003ce2 <sinf+0x26>
 8003d2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d2e:	ed9d 0a00 	vldr	s0, [sp]
 8003d32:	f000 f931 	bl	8003f98 <__kernel_cosf>
 8003d36:	e7f5      	b.n	8003d24 <sinf+0x68>
 8003d38:	3f490fd8 	.word	0x3f490fd8
 8003d3c:	00000000 	.word	0x00000000

08003d40 <__ieee754_rem_pio2f>:
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	ee10 6a10 	vmov	r6, s0
 8003d46:	4b86      	ldr	r3, [pc, #536]	; (8003f60 <__ieee754_rem_pio2f+0x220>)
 8003d48:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	b087      	sub	sp, #28
 8003d50:	4605      	mov	r5, r0
 8003d52:	dc05      	bgt.n	8003d60 <__ieee754_rem_pio2f+0x20>
 8003d54:	2300      	movs	r3, #0
 8003d56:	ed85 0a00 	vstr	s0, [r5]
 8003d5a:	6043      	str	r3, [r0, #4]
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e020      	b.n	8003da2 <__ieee754_rem_pio2f+0x62>
 8003d60:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <__ieee754_rem_pio2f+0x224>)
 8003d62:	429c      	cmp	r4, r3
 8003d64:	dc38      	bgt.n	8003dd8 <__ieee754_rem_pio2f+0x98>
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	f024 040f 	bic.w	r4, r4, #15
 8003d6c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003f68 <__ieee754_rem_pio2f+0x228>
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <__ieee754_rem_pio2f+0x22c>)
 8003d72:	dd18      	ble.n	8003da6 <__ieee754_rem_pio2f+0x66>
 8003d74:	429c      	cmp	r4, r3
 8003d76:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003d7a:	bf09      	itett	eq
 8003d7c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003f70 <__ieee754_rem_pio2f+0x230>
 8003d80:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8003f74 <__ieee754_rem_pio2f+0x234>
 8003d84:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003d88:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003f78 <__ieee754_rem_pio2f+0x238>
 8003d8c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003d90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d94:	edc0 6a00 	vstr	s13, [r0]
 8003d98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003da0:	2001      	movs	r0, #1
 8003da2:	b007      	add	sp, #28
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da6:	429c      	cmp	r4, r3
 8003da8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003dac:	bf09      	itett	eq
 8003dae:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003f70 <__ieee754_rem_pio2f+0x230>
 8003db2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8003f74 <__ieee754_rem_pio2f+0x234>
 8003db6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003dba:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003f78 <__ieee754_rem_pio2f+0x238>
 8003dbe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003dc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003dc6:	edc0 6a00 	vstr	s13, [r0]
 8003dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dce:	edc0 7a01 	vstr	s15, [r0, #4]
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	e7e4      	b.n	8003da2 <__ieee754_rem_pio2f+0x62>
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <__ieee754_rem_pio2f+0x23c>)
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	dc71      	bgt.n	8003ec2 <__ieee754_rem_pio2f+0x182>
 8003dde:	f000 fc03 	bl	80045e8 <fabsf>
 8003de2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003f80 <__ieee754_rem_pio2f+0x240>
 8003de6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003dea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003df2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003df6:	ee17 0a90 	vmov	r0, s15
 8003dfa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003f68 <__ieee754_rem_pio2f+0x228>
 8003dfe:	eeb1 7a46 	vneg.f32	s14, s12
 8003e02:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003e06:	281f      	cmp	r0, #31
 8003e08:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003f74 <__ieee754_rem_pio2f+0x234>
 8003e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e10:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003e14:	ee16 3a90 	vmov	r3, s13
 8003e18:	dc1c      	bgt.n	8003e54 <__ieee754_rem_pio2f+0x114>
 8003e1a:	1e47      	subs	r7, r0, #1
 8003e1c:	4959      	ldr	r1, [pc, #356]	; (8003f84 <__ieee754_rem_pio2f+0x244>)
 8003e1e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003e22:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8003e26:	428a      	cmp	r2, r1
 8003e28:	d014      	beq.n	8003e54 <__ieee754_rem_pio2f+0x114>
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	ed95 7a00 	vldr	s14, [r5]
 8003e30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003e34:	2e00      	cmp	r6, #0
 8003e36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e3a:	ed85 0a01 	vstr	s0, [r5, #4]
 8003e3e:	dab0      	bge.n	8003da2 <__ieee754_rem_pio2f+0x62>
 8003e40:	eeb1 7a47 	vneg.f32	s14, s14
 8003e44:	eeb1 0a40 	vneg.f32	s0, s0
 8003e48:	ed85 7a00 	vstr	s14, [r5]
 8003e4c:	ed85 0a01 	vstr	s0, [r5, #4]
 8003e50:	4240      	negs	r0, r0
 8003e52:	e7a6      	b.n	8003da2 <__ieee754_rem_pio2f+0x62>
 8003e54:	15e4      	asrs	r4, r4, #23
 8003e56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003e5a:	1aa2      	subs	r2, r4, r2
 8003e5c:	2a08      	cmp	r2, #8
 8003e5e:	dde4      	ble.n	8003e2a <__ieee754_rem_pio2f+0xea>
 8003e60:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003f70 <__ieee754_rem_pio2f+0x230>
 8003e64:	eef0 6a40 	vmov.f32	s13, s0
 8003e68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003e6c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003e70:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003e74:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003f78 <__ieee754_rem_pio2f+0x238>
 8003e78:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003e7c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003e80:	eef0 7a40 	vmov.f32	s15, s0
 8003e84:	ee15 3a90 	vmov	r3, s11
 8003e88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003e8c:	1aa4      	subs	r4, r4, r2
 8003e8e:	2c19      	cmp	r4, #25
 8003e90:	dc04      	bgt.n	8003e9c <__ieee754_rem_pio2f+0x15c>
 8003e92:	edc5 5a00 	vstr	s11, [r5]
 8003e96:	eeb0 0a66 	vmov.f32	s0, s13
 8003e9a:	e7c7      	b.n	8003e2c <__ieee754_rem_pio2f+0xec>
 8003e9c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003f88 <__ieee754_rem_pio2f+0x248>
 8003ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8003ea4:	eea7 0a25 	vfma.f32	s0, s14, s11
 8003ea8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003eac:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003eb0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f8c <__ieee754_rem_pio2f+0x24c>
 8003eb4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003eb8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003ebc:	ed85 7a00 	vstr	s14, [r5]
 8003ec0:	e7b4      	b.n	8003e2c <__ieee754_rem_pio2f+0xec>
 8003ec2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003ec6:	db06      	blt.n	8003ed6 <__ieee754_rem_pio2f+0x196>
 8003ec8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003ecc:	edc0 7a01 	vstr	s15, [r0, #4]
 8003ed0:	edc0 7a00 	vstr	s15, [r0]
 8003ed4:	e742      	b.n	8003d5c <__ieee754_rem_pio2f+0x1c>
 8003ed6:	15e2      	asrs	r2, r4, #23
 8003ed8:	3a86      	subs	r2, #134	; 0x86
 8003eda:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003ee6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003f90 <__ieee754_rem_pio2f+0x250>
 8003eea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ef2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003ef6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003efa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003efe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f06:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003f0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003f0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	edcd 7a05 	vstr	s15, [sp, #20]
 8003f1a:	d11e      	bne.n	8003f5a <__ieee754_rem_pio2f+0x21a>
 8003f1c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2302      	movne	r3, #2
 8003f2a:	491a      	ldr	r1, [pc, #104]	; (8003f94 <__ieee754_rem_pio2f+0x254>)
 8003f2c:	9101      	str	r1, [sp, #4]
 8003f2e:	2102      	movs	r1, #2
 8003f30:	9100      	str	r1, [sp, #0]
 8003f32:	a803      	add	r0, sp, #12
 8003f34:	4629      	mov	r1, r5
 8003f36:	f000 f88d 	bl	8004054 <__kernel_rem_pio2f>
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	f6bf af31 	bge.w	8003da2 <__ieee754_rem_pio2f+0x62>
 8003f40:	edd5 7a00 	vldr	s15, [r5]
 8003f44:	eef1 7a67 	vneg.f32	s15, s15
 8003f48:	edc5 7a00 	vstr	s15, [r5]
 8003f4c:	edd5 7a01 	vldr	s15, [r5, #4]
 8003f50:	eef1 7a67 	vneg.f32	s15, s15
 8003f54:	edc5 7a01 	vstr	s15, [r5, #4]
 8003f58:	e77a      	b.n	8003e50 <__ieee754_rem_pio2f+0x110>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e7e5      	b.n	8003f2a <__ieee754_rem_pio2f+0x1ea>
 8003f5e:	bf00      	nop
 8003f60:	3f490fd8 	.word	0x3f490fd8
 8003f64:	4016cbe3 	.word	0x4016cbe3
 8003f68:	3fc90f80 	.word	0x3fc90f80
 8003f6c:	3fc90fd0 	.word	0x3fc90fd0
 8003f70:	37354400 	.word	0x37354400
 8003f74:	37354443 	.word	0x37354443
 8003f78:	2e85a308 	.word	0x2e85a308
 8003f7c:	43490f80 	.word	0x43490f80
 8003f80:	3f22f984 	.word	0x3f22f984
 8003f84:	080047ac 	.word	0x080047ac
 8003f88:	2e85a300 	.word	0x2e85a300
 8003f8c:	248d3132 	.word	0x248d3132
 8003f90:	43800000 	.word	0x43800000
 8003f94:	0800482c 	.word	0x0800482c

08003f98 <__kernel_cosf>:
 8003f98:	ee10 3a10 	vmov	r3, s0
 8003f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa8:	da05      	bge.n	8003fb6 <__kernel_cosf+0x1e>
 8003faa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003fae:	ee17 2a90 	vmov	r2, s15
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	d03b      	beq.n	800402e <__kernel_cosf+0x96>
 8003fb6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8003fba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004034 <__kernel_cosf+0x9c>
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <__kernel_cosf+0xa0>)
 8003fc4:	ee66 7a07 	vmul.f32	s15, s12, s14
 8003fc8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800403c <__kernel_cosf+0xa4>
 8003fcc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004040 <__kernel_cosf+0xa8>
 8003fd6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003fda:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004044 <__kernel_cosf+0xac>
 8003fde:	eea5 7a86 	vfma.f32	s14, s11, s12
 8003fe2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004048 <__kernel_cosf+0xb0>
 8003fe6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003fea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800404c <__kernel_cosf+0xb4>
 8003fee:	eea5 7a86 	vfma.f32	s14, s11, s12
 8003ff2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8003ff6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003ffa:	eee6 0a07 	vfma.f32	s1, s12, s14
 8003ffe:	dc04      	bgt.n	800400a <__kernel_cosf+0x72>
 8004000:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8004004:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004008:	4770      	bx	lr
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <__kernel_cosf+0xb8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	bfda      	itte	le
 8004010:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004014:	ee07 3a10 	vmovle	s14, r3
 8004018:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800401c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004020:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004024:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004028:	ee30 0a67 	vsub.f32	s0, s0, s15
 800402c:	4770      	bx	lr
 800402e:	eeb0 0a66 	vmov.f32	s0, s13
 8004032:	4770      	bx	lr
 8004034:	ad47d74e 	.word	0xad47d74e
 8004038:	3e999999 	.word	0x3e999999
 800403c:	310f74f6 	.word	0x310f74f6
 8004040:	b493f27c 	.word	0xb493f27c
 8004044:	37d00d01 	.word	0x37d00d01
 8004048:	bab60b61 	.word	0xbab60b61
 800404c:	3d2aaaab 	.word	0x3d2aaaab
 8004050:	3f480000 	.word	0x3f480000

08004054 <__kernel_rem_pio2f>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	ed2d 8b04 	vpush	{d8-d9}
 800405c:	b0d7      	sub	sp, #348	; 0x15c
 800405e:	469b      	mov	fp, r3
 8004060:	460e      	mov	r6, r1
 8004062:	4bbe      	ldr	r3, [pc, #760]	; (800435c <__kernel_rem_pio2f+0x308>)
 8004064:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004066:	9002      	str	r0, [sp, #8]
 8004068:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800406c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800406e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800436c <__kernel_rem_pio2f+0x318>
 8004072:	1ed1      	subs	r1, r2, #3
 8004074:	2308      	movs	r3, #8
 8004076:	fb91 f1f3 	sdiv	r1, r1, r3
 800407a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800407e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004082:	1c4c      	adds	r4, r1, #1
 8004084:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004088:	eba1 050a 	sub.w	r5, r1, sl
 800408c:	aa1a      	add	r2, sp, #104	; 0x68
 800408e:	eb09 070a 	add.w	r7, r9, sl
 8004092:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8004096:	4696      	mov	lr, r2
 8004098:	2300      	movs	r3, #0
 800409a:	42bb      	cmp	r3, r7
 800409c:	dd0f      	ble.n	80040be <__kernel_rem_pio2f+0x6a>
 800409e:	af42      	add	r7, sp, #264	; 0x108
 80040a0:	2200      	movs	r2, #0
 80040a2:	454a      	cmp	r2, r9
 80040a4:	dc27      	bgt.n	80040f6 <__kernel_rem_pio2f+0xa2>
 80040a6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80040aa:	eb0b 0302 	add.w	r3, fp, r2
 80040ae:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80040b2:	9d02      	ldr	r5, [sp, #8]
 80040b4:	eddf 7aad 	vldr	s15, [pc, #692]	; 800436c <__kernel_rem_pio2f+0x318>
 80040b8:	f04f 0c00 	mov.w	ip, #0
 80040bc:	e015      	b.n	80040ea <__kernel_rem_pio2f+0x96>
 80040be:	42dd      	cmn	r5, r3
 80040c0:	bf5d      	ittte	pl
 80040c2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80040c6:	ee07 2a90 	vmovpl	s15, r2
 80040ca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80040ce:	eef0 7a47 	vmovmi.f32	s15, s14
 80040d2:	ecee 7a01 	vstmia	lr!, {s15}
 80040d6:	3301      	adds	r3, #1
 80040d8:	e7df      	b.n	800409a <__kernel_rem_pio2f+0x46>
 80040da:	ecf5 6a01 	vldmia	r5!, {s13}
 80040de:	ed33 7a01 	vldmdb	r3!, {s14}
 80040e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80040e6:	f10c 0c01 	add.w	ip, ip, #1
 80040ea:	45d4      	cmp	ip, sl
 80040ec:	ddf5      	ble.n	80040da <__kernel_rem_pio2f+0x86>
 80040ee:	ece7 7a01 	vstmia	r7!, {s15}
 80040f2:	3201      	adds	r2, #1
 80040f4:	e7d5      	b.n	80040a2 <__kernel_rem_pio2f+0x4e>
 80040f6:	ab06      	add	r3, sp, #24
 80040f8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8004368 <__kernel_rem_pio2f+0x314>
 8004102:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004364 <__kernel_rem_pio2f+0x310>
 8004106:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	464d      	mov	r5, r9
 800410e:	ab56      	add	r3, sp, #344	; 0x158
 8004110:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004114:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004118:	3f01      	subs	r7, #1
 800411a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800411e:	00bf      	lsls	r7, r7, #2
 8004120:	ab56      	add	r3, sp, #344	; 0x158
 8004122:	19da      	adds	r2, r3, r7
 8004124:	3a4c      	subs	r2, #76	; 0x4c
 8004126:	2300      	movs	r3, #0
 8004128:	1ae9      	subs	r1, r5, r3
 800412a:	2900      	cmp	r1, #0
 800412c:	dc4c      	bgt.n	80041c8 <__kernel_rem_pio2f+0x174>
 800412e:	4620      	mov	r0, r4
 8004130:	f000 faa4 	bl	800467c <scalbnf>
 8004134:	eeb0 8a40 	vmov.f32	s16, s0
 8004138:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800413c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004140:	f000 fa5a 	bl	80045f8 <floorf>
 8004144:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004148:	eea0 8a67 	vfms.f32	s16, s0, s15
 800414c:	2c00      	cmp	r4, #0
 800414e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004152:	edcd 7a01 	vstr	s15, [sp, #4]
 8004156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800415e:	dd48      	ble.n	80041f2 <__kernel_rem_pio2f+0x19e>
 8004160:	1e69      	subs	r1, r5, #1
 8004162:	ab06      	add	r3, sp, #24
 8004164:	f1c4 0008 	rsb	r0, r4, #8
 8004168:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800416c:	9a01      	ldr	r2, [sp, #4]
 800416e:	fa4c f300 	asr.w	r3, ip, r0
 8004172:	441a      	add	r2, r3
 8004174:	4083      	lsls	r3, r0
 8004176:	9201      	str	r2, [sp, #4]
 8004178:	ebac 0203 	sub.w	r2, ip, r3
 800417c:	ab06      	add	r3, sp, #24
 800417e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004182:	f1c4 0307 	rsb	r3, r4, #7
 8004186:	fa42 f803 	asr.w	r8, r2, r3
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	dd41      	ble.n	8004214 <__kernel_rem_pio2f+0x1c0>
 8004190:	9b01      	ldr	r3, [sp, #4]
 8004192:	2000      	movs	r0, #0
 8004194:	3301      	adds	r3, #1
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	4601      	mov	r1, r0
 800419a:	4285      	cmp	r5, r0
 800419c:	dc6d      	bgt.n	800427a <__kernel_rem_pio2f+0x226>
 800419e:	2c00      	cmp	r4, #0
 80041a0:	dd04      	ble.n	80041ac <__kernel_rem_pio2f+0x158>
 80041a2:	2c01      	cmp	r4, #1
 80041a4:	d07e      	beq.n	80042a4 <__kernel_rem_pio2f+0x250>
 80041a6:	2c02      	cmp	r4, #2
 80041a8:	f000 8086 	beq.w	80042b8 <__kernel_rem_pio2f+0x264>
 80041ac:	f1b8 0f02 	cmp.w	r8, #2
 80041b0:	d130      	bne.n	8004214 <__kernel_rem_pio2f+0x1c0>
 80041b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041b6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80041ba:	b359      	cbz	r1, 8004214 <__kernel_rem_pio2f+0x1c0>
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 fa5d 	bl	800467c <scalbnf>
 80041c2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80041c6:	e025      	b.n	8004214 <__kernel_rem_pio2f+0x1c0>
 80041c8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80041cc:	a806      	add	r0, sp, #24
 80041ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80041da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80041de:	ee10 1a10 	vmov	r1, s0
 80041e2:	ed32 0a01 	vldmdb	r2!, {s0}
 80041e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80041ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 80041ee:	3301      	adds	r3, #1
 80041f0:	e79a      	b.n	8004128 <__kernel_rem_pio2f+0xd4>
 80041f2:	d106      	bne.n	8004202 <__kernel_rem_pio2f+0x1ae>
 80041f4:	1e6b      	subs	r3, r5, #1
 80041f6:	aa06      	add	r2, sp, #24
 80041f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041fc:	ea4f 2822 	mov.w	r8, r2, asr #8
 8004200:	e7c3      	b.n	800418a <__kernel_rem_pio2f+0x136>
 8004202:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004206:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	da31      	bge.n	8004274 <__kernel_rem_pio2f+0x220>
 8004210:	f04f 0800 	mov.w	r8, #0
 8004214:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	f040 80a8 	bne.w	8004370 <__kernel_rem_pio2f+0x31c>
 8004220:	1e6b      	subs	r3, r5, #1
 8004222:	4618      	mov	r0, r3
 8004224:	2200      	movs	r2, #0
 8004226:	4548      	cmp	r0, r9
 8004228:	da4d      	bge.n	80042c6 <__kernel_rem_pio2f+0x272>
 800422a:	2a00      	cmp	r2, #0
 800422c:	f000 8087 	beq.w	800433e <__kernel_rem_pio2f+0x2ea>
 8004230:	aa06      	add	r2, sp, #24
 8004232:	3c08      	subs	r4, #8
 8004234:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004238:	2900      	cmp	r1, #0
 800423a:	f000 808d 	beq.w	8004358 <__kernel_rem_pio2f+0x304>
 800423e:	4620      	mov	r0, r4
 8004240:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004244:	9302      	str	r3, [sp, #8]
 8004246:	f000 fa19 	bl	800467c <scalbnf>
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004368 <__kernel_rem_pio2f+0x314>
 8004250:	0099      	lsls	r1, r3, #2
 8004252:	aa42      	add	r2, sp, #264	; 0x108
 8004254:	1850      	adds	r0, r2, r1
 8004256:	1d05      	adds	r5, r0, #4
 8004258:	461c      	mov	r4, r3
 800425a:	2c00      	cmp	r4, #0
 800425c:	f280 80b8 	bge.w	80043d0 <__kernel_rem_pio2f+0x37c>
 8004260:	2500      	movs	r5, #0
 8004262:	1b5c      	subs	r4, r3, r5
 8004264:	2c00      	cmp	r4, #0
 8004266:	f2c0 80d8 	blt.w	800441a <__kernel_rem_pio2f+0x3c6>
 800426a:	4f3d      	ldr	r7, [pc, #244]	; (8004360 <__kernel_rem_pio2f+0x30c>)
 800426c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800436c <__kernel_rem_pio2f+0x318>
 8004270:	2400      	movs	r4, #0
 8004272:	e0c6      	b.n	8004402 <__kernel_rem_pio2f+0x3ae>
 8004274:	f04f 0802 	mov.w	r8, #2
 8004278:	e78a      	b.n	8004190 <__kernel_rem_pio2f+0x13c>
 800427a:	ab06      	add	r3, sp, #24
 800427c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004280:	b949      	cbnz	r1, 8004296 <__kernel_rem_pio2f+0x242>
 8004282:	b12b      	cbz	r3, 8004290 <__kernel_rem_pio2f+0x23c>
 8004284:	aa06      	add	r2, sp, #24
 8004286:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800428a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800428e:	2301      	movs	r3, #1
 8004290:	3001      	adds	r0, #1
 8004292:	4619      	mov	r1, r3
 8004294:	e781      	b.n	800419a <__kernel_rem_pio2f+0x146>
 8004296:	aa06      	add	r2, sp, #24
 8004298:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800429c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80042a0:	460b      	mov	r3, r1
 80042a2:	e7f5      	b.n	8004290 <__kernel_rem_pio2f+0x23c>
 80042a4:	1e68      	subs	r0, r5, #1
 80042a6:	ab06      	add	r3, sp, #24
 80042a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80042ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b0:	aa06      	add	r2, sp, #24
 80042b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80042b6:	e779      	b.n	80041ac <__kernel_rem_pio2f+0x158>
 80042b8:	1e68      	subs	r0, r5, #1
 80042ba:	ab06      	add	r3, sp, #24
 80042bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80042c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c4:	e7f4      	b.n	80042b0 <__kernel_rem_pio2f+0x25c>
 80042c6:	a906      	add	r1, sp, #24
 80042c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80042cc:	3801      	subs	r0, #1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	e7a9      	b.n	8004226 <__kernel_rem_pio2f+0x1d2>
 80042d2:	f10c 0c01 	add.w	ip, ip, #1
 80042d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d0f9      	beq.n	80042d2 <__kernel_rem_pio2f+0x27e>
 80042de:	eb0b 0305 	add.w	r3, fp, r5
 80042e2:	aa1a      	add	r2, sp, #104	; 0x68
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	1898      	adds	r0, r3, r2
 80042e8:	3004      	adds	r0, #4
 80042ea:	1c69      	adds	r1, r5, #1
 80042ec:	3704      	adds	r7, #4
 80042ee:	2200      	movs	r2, #0
 80042f0:	4465      	add	r5, ip
 80042f2:	9005      	str	r0, [sp, #20]
 80042f4:	428d      	cmp	r5, r1
 80042f6:	f6ff af0a 	blt.w	800410e <__kernel_rem_pio2f+0xba>
 80042fa:	a81a      	add	r0, sp, #104	; 0x68
 80042fc:	eb02 0c03 	add.w	ip, r2, r3
 8004300:	4484      	add	ip, r0
 8004302:	9803      	ldr	r0, [sp, #12]
 8004304:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004308:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800430c:	9001      	str	r0, [sp, #4]
 800430e:	ee07 0a90 	vmov	s15, r0
 8004312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004316:	9805      	ldr	r0, [sp, #20]
 8004318:	edcc 7a00 	vstr	s15, [ip]
 800431c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800436c <__kernel_rem_pio2f+0x318>
 8004320:	eb00 0802 	add.w	r8, r0, r2
 8004324:	f04f 0c00 	mov.w	ip, #0
 8004328:	45d4      	cmp	ip, sl
 800432a:	dd0c      	ble.n	8004346 <__kernel_rem_pio2f+0x2f2>
 800432c:	eb02 0c07 	add.w	ip, r2, r7
 8004330:	a842      	add	r0, sp, #264	; 0x108
 8004332:	4484      	add	ip, r0
 8004334:	edcc 7a01 	vstr	s15, [ip, #4]
 8004338:	3101      	adds	r1, #1
 800433a:	3204      	adds	r2, #4
 800433c:	e7da      	b.n	80042f4 <__kernel_rem_pio2f+0x2a0>
 800433e:	9b04      	ldr	r3, [sp, #16]
 8004340:	f04f 0c01 	mov.w	ip, #1
 8004344:	e7c7      	b.n	80042d6 <__kernel_rem_pio2f+0x282>
 8004346:	ecfe 6a01 	vldmia	lr!, {s13}
 800434a:	ed38 7a01 	vldmdb	r8!, {s14}
 800434e:	f10c 0c01 	add.w	ip, ip, #1
 8004352:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004356:	e7e7      	b.n	8004328 <__kernel_rem_pio2f+0x2d4>
 8004358:	3b01      	subs	r3, #1
 800435a:	e769      	b.n	8004230 <__kernel_rem_pio2f+0x1dc>
 800435c:	08004b70 	.word	0x08004b70
 8004360:	08004b44 	.word	0x08004b44
 8004364:	43800000 	.word	0x43800000
 8004368:	3b800000 	.word	0x3b800000
 800436c:	00000000 	.word	0x00000000
 8004370:	4260      	negs	r0, r4
 8004372:	eeb0 0a48 	vmov.f32	s0, s16
 8004376:	f000 f981 	bl	800467c <scalbnf>
 800437a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004364 <__kernel_rem_pio2f+0x310>
 800437e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004386:	db1a      	blt.n	80043be <__kernel_rem_pio2f+0x36a>
 8004388:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004368 <__kernel_rem_pio2f+0x314>
 800438c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004390:	aa06      	add	r2, sp, #24
 8004392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004396:	a906      	add	r1, sp, #24
 8004398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439c:	3408      	adds	r4, #8
 800439e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80043a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80043aa:	ee10 3a10 	vmov	r3, s0
 80043ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80043b2:	1c6b      	adds	r3, r5, #1
 80043b4:	ee17 2a90 	vmov	r2, s15
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043bc:	e73f      	b.n	800423e <__kernel_rem_pio2f+0x1ea>
 80043be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80043c2:	aa06      	add	r2, sp, #24
 80043c4:	ee10 3a10 	vmov	r3, s0
 80043c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80043cc:	462b      	mov	r3, r5
 80043ce:	e736      	b.n	800423e <__kernel_rem_pio2f+0x1ea>
 80043d0:	aa06      	add	r2, sp, #24
 80043d2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80043d6:	9202      	str	r2, [sp, #8]
 80043d8:	ee07 2a90 	vmov	s15, r2
 80043dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e0:	3c01      	subs	r4, #1
 80043e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80043e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80043ea:	ed65 7a01 	vstmdb	r5!, {s15}
 80043ee:	e734      	b.n	800425a <__kernel_rem_pio2f+0x206>
 80043f0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80043f4:	ecf7 6a01 	vldmia	r7!, {s13}
 80043f8:	ed9c 7a00 	vldr	s14, [ip]
 80043fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004400:	3401      	adds	r4, #1
 8004402:	454c      	cmp	r4, r9
 8004404:	dc01      	bgt.n	800440a <__kernel_rem_pio2f+0x3b6>
 8004406:	42a5      	cmp	r5, r4
 8004408:	daf2      	bge.n	80043f0 <__kernel_rem_pio2f+0x39c>
 800440a:	aa56      	add	r2, sp, #344	; 0x158
 800440c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8004410:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8004414:	3501      	adds	r5, #1
 8004416:	3804      	subs	r0, #4
 8004418:	e723      	b.n	8004262 <__kernel_rem_pio2f+0x20e>
 800441a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800441c:	2a03      	cmp	r2, #3
 800441e:	d84d      	bhi.n	80044bc <__kernel_rem_pio2f+0x468>
 8004420:	e8df f002 	tbb	[pc, r2]
 8004424:	021f1f3e 	.word	0x021f1f3e
 8004428:	aa56      	add	r2, sp, #344	; 0x158
 800442a:	4411      	add	r1, r2
 800442c:	399c      	subs	r1, #156	; 0x9c
 800442e:	4608      	mov	r0, r1
 8004430:	461c      	mov	r4, r3
 8004432:	2c00      	cmp	r4, #0
 8004434:	dc5f      	bgt.n	80044f6 <__kernel_rem_pio2f+0x4a2>
 8004436:	4608      	mov	r0, r1
 8004438:	461c      	mov	r4, r3
 800443a:	2c01      	cmp	r4, #1
 800443c:	dc6b      	bgt.n	8004516 <__kernel_rem_pio2f+0x4c2>
 800443e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800436c <__kernel_rem_pio2f+0x318>
 8004442:	2b01      	cmp	r3, #1
 8004444:	dc77      	bgt.n	8004536 <__kernel_rem_pio2f+0x4e2>
 8004446:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800444a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800444e:	f1b8 0f00 	cmp.w	r8, #0
 8004452:	d176      	bne.n	8004542 <__kernel_rem_pio2f+0x4ee>
 8004454:	edc6 6a00 	vstr	s13, [r6]
 8004458:	ed86 7a01 	vstr	s14, [r6, #4]
 800445c:	edc6 7a02 	vstr	s15, [r6, #8]
 8004460:	e02c      	b.n	80044bc <__kernel_rem_pio2f+0x468>
 8004462:	aa56      	add	r2, sp, #344	; 0x158
 8004464:	4411      	add	r1, r2
 8004466:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800436c <__kernel_rem_pio2f+0x318>
 800446a:	399c      	subs	r1, #156	; 0x9c
 800446c:	4618      	mov	r0, r3
 800446e:	2800      	cmp	r0, #0
 8004470:	da32      	bge.n	80044d8 <__kernel_rem_pio2f+0x484>
 8004472:	f1b8 0f00 	cmp.w	r8, #0
 8004476:	d035      	beq.n	80044e4 <__kernel_rem_pio2f+0x490>
 8004478:	eef1 7a47 	vneg.f32	s15, s14
 800447c:	edc6 7a00 	vstr	s15, [r6]
 8004480:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004488:	a82f      	add	r0, sp, #188	; 0xbc
 800448a:	2101      	movs	r1, #1
 800448c:	428b      	cmp	r3, r1
 800448e:	da2c      	bge.n	80044ea <__kernel_rem_pio2f+0x496>
 8004490:	f1b8 0f00 	cmp.w	r8, #0
 8004494:	d001      	beq.n	800449a <__kernel_rem_pio2f+0x446>
 8004496:	eef1 7a67 	vneg.f32	s15, s15
 800449a:	edc6 7a01 	vstr	s15, [r6, #4]
 800449e:	e00d      	b.n	80044bc <__kernel_rem_pio2f+0x468>
 80044a0:	aa56      	add	r2, sp, #344	; 0x158
 80044a2:	4411      	add	r1, r2
 80044a4:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800436c <__kernel_rem_pio2f+0x318>
 80044a8:	399c      	subs	r1, #156	; 0x9c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da0e      	bge.n	80044cc <__kernel_rem_pio2f+0x478>
 80044ae:	f1b8 0f00 	cmp.w	r8, #0
 80044b2:	d001      	beq.n	80044b8 <__kernel_rem_pio2f+0x464>
 80044b4:	eef1 7a67 	vneg.f32	s15, s15
 80044b8:	edc6 7a00 	vstr	s15, [r6]
 80044bc:	9b01      	ldr	r3, [sp, #4]
 80044be:	f003 0007 	and.w	r0, r3, #7
 80044c2:	b057      	add	sp, #348	; 0x15c
 80044c4:	ecbd 8b04 	vpop	{d8-d9}
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044cc:	ed31 7a01 	vldmdb	r1!, {s14}
 80044d0:	3b01      	subs	r3, #1
 80044d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d6:	e7e8      	b.n	80044aa <__kernel_rem_pio2f+0x456>
 80044d8:	ed71 7a01 	vldmdb	r1!, {s15}
 80044dc:	3801      	subs	r0, #1
 80044de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e2:	e7c4      	b.n	800446e <__kernel_rem_pio2f+0x41a>
 80044e4:	eef0 7a47 	vmov.f32	s15, s14
 80044e8:	e7c8      	b.n	800447c <__kernel_rem_pio2f+0x428>
 80044ea:	ecb0 7a01 	vldmia	r0!, {s14}
 80044ee:	3101      	adds	r1, #1
 80044f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f4:	e7ca      	b.n	800448c <__kernel_rem_pio2f+0x438>
 80044f6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80044fa:	ed70 6a01 	vldmdb	r0!, {s13}
 80044fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004502:	3c01      	subs	r4, #1
 8004504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004508:	ed00 7a01 	vstr	s14, [r0, #-4]
 800450c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004510:	edc0 7a00 	vstr	s15, [r0]
 8004514:	e78d      	b.n	8004432 <__kernel_rem_pio2f+0x3de>
 8004516:	ed50 7a02 	vldr	s15, [r0, #-8]
 800451a:	ed70 6a01 	vldmdb	r0!, {s13}
 800451e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004522:	3c01      	subs	r4, #1
 8004524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004528:	ed00 7a01 	vstr	s14, [r0, #-4]
 800452c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004530:	edc0 7a00 	vstr	s15, [r0]
 8004534:	e781      	b.n	800443a <__kernel_rem_pio2f+0x3e6>
 8004536:	ed31 7a01 	vldmdb	r1!, {s14}
 800453a:	3b01      	subs	r3, #1
 800453c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004540:	e77f      	b.n	8004442 <__kernel_rem_pio2f+0x3ee>
 8004542:	eef1 6a66 	vneg.f32	s13, s13
 8004546:	eeb1 7a47 	vneg.f32	s14, s14
 800454a:	edc6 6a00 	vstr	s13, [r6]
 800454e:	ed86 7a01 	vstr	s14, [r6, #4]
 8004552:	eef1 7a67 	vneg.f32	s15, s15
 8004556:	e781      	b.n	800445c <__kernel_rem_pio2f+0x408>

08004558 <__kernel_sinf>:
 8004558:	ee10 3a10 	vmov	r3, s0
 800455c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004560:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004564:	da04      	bge.n	8004570 <__kernel_sinf+0x18>
 8004566:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800456a:	ee17 3a90 	vmov	r3, s15
 800456e:	b35b      	cbz	r3, 80045c8 <__kernel_sinf+0x70>
 8004570:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004574:	eddf 7a15 	vldr	s15, [pc, #84]	; 80045cc <__kernel_sinf+0x74>
 8004578:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80045d0 <__kernel_sinf+0x78>
 800457c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004580:	eddf 7a14 	vldr	s15, [pc, #80]	; 80045d4 <__kernel_sinf+0x7c>
 8004584:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004588:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80045d8 <__kernel_sinf+0x80>
 800458c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004590:	eddf 7a12 	vldr	s15, [pc, #72]	; 80045dc <__kernel_sinf+0x84>
 8004594:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004598:	eee6 7a07 	vfma.f32	s15, s12, s14
 800459c:	b930      	cbnz	r0, 80045ac <__kernel_sinf+0x54>
 800459e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80045e0 <__kernel_sinf+0x88>
 80045a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80045a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80045aa:	4770      	bx	lr
 80045ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80045b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80045b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80045b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80045bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80045e4 <__kernel_sinf+0x8c>
 80045c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80045c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80045d0:	b2d72f34 	.word	0xb2d72f34
 80045d4:	3638ef1b 	.word	0x3638ef1b
 80045d8:	b9500d01 	.word	0xb9500d01
 80045dc:	3c088889 	.word	0x3c088889
 80045e0:	be2aaaab 	.word	0xbe2aaaab
 80045e4:	3e2aaaab 	.word	0x3e2aaaab

080045e8 <fabsf>:
 80045e8:	ee10 3a10 	vmov	r3, s0
 80045ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f0:	ee00 3a10 	vmov	s0, r3
 80045f4:	4770      	bx	lr
	...

080045f8 <floorf>:
 80045f8:	ee10 3a10 	vmov	r3, s0
 80045fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004600:	0dca      	lsrs	r2, r1, #23
 8004602:	3a7f      	subs	r2, #127	; 0x7f
 8004604:	2a16      	cmp	r2, #22
 8004606:	dc2a      	bgt.n	800465e <floorf+0x66>
 8004608:	2a00      	cmp	r2, #0
 800460a:	da11      	bge.n	8004630 <floorf+0x38>
 800460c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004670 <floorf+0x78>
 8004610:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004614:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	dd05      	ble.n	800462a <floorf+0x32>
 800461e:	2b00      	cmp	r3, #0
 8004620:	da23      	bge.n	800466a <floorf+0x72>
 8004622:	4a14      	ldr	r2, [pc, #80]	; (8004674 <floorf+0x7c>)
 8004624:	2900      	cmp	r1, #0
 8004626:	bf18      	it	ne
 8004628:	4613      	movne	r3, r2
 800462a:	ee00 3a10 	vmov	s0, r3
 800462e:	4770      	bx	lr
 8004630:	4911      	ldr	r1, [pc, #68]	; (8004678 <floorf+0x80>)
 8004632:	4111      	asrs	r1, r2
 8004634:	420b      	tst	r3, r1
 8004636:	d0fa      	beq.n	800462e <floorf+0x36>
 8004638:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004670 <floorf+0x78>
 800463c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004648:	ddef      	ble.n	800462a <floorf+0x32>
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfbe      	ittt	lt
 800464e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004652:	fa40 f202 	asrlt.w	r2, r0, r2
 8004656:	189b      	addlt	r3, r3, r2
 8004658:	ea23 0301 	bic.w	r3, r3, r1
 800465c:	e7e5      	b.n	800462a <floorf+0x32>
 800465e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004662:	d3e4      	bcc.n	800462e <floorf+0x36>
 8004664:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004668:	4770      	bx	lr
 800466a:	2300      	movs	r3, #0
 800466c:	e7dd      	b.n	800462a <floorf+0x32>
 800466e:	bf00      	nop
 8004670:	7149f2ca 	.word	0x7149f2ca
 8004674:	bf800000 	.word	0xbf800000
 8004678:	007fffff 	.word	0x007fffff

0800467c <scalbnf>:
 800467c:	b508      	push	{r3, lr}
 800467e:	ee10 2a10 	vmov	r2, s0
 8004682:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004686:	ed2d 8b02 	vpush	{d8}
 800468a:	eef0 0a40 	vmov.f32	s1, s0
 800468e:	d004      	beq.n	800469a <scalbnf+0x1e>
 8004690:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004694:	d306      	bcc.n	80046a4 <scalbnf+0x28>
 8004696:	ee70 0a00 	vadd.f32	s1, s0, s0
 800469a:	ecbd 8b02 	vpop	{d8}
 800469e:	eeb0 0a60 	vmov.f32	s0, s1
 80046a2:	bd08      	pop	{r3, pc}
 80046a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a8:	d21c      	bcs.n	80046e4 <scalbnf+0x68>
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <scalbnf+0xac>)
 80046ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800472c <scalbnf+0xb0>
 80046b0:	4298      	cmp	r0, r3
 80046b2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80046b6:	db10      	blt.n	80046da <scalbnf+0x5e>
 80046b8:	ee10 2a90 	vmov	r2, s1
 80046bc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80046c0:	3b19      	subs	r3, #25
 80046c2:	4403      	add	r3, r0
 80046c4:	2bfe      	cmp	r3, #254	; 0xfe
 80046c6:	dd0f      	ble.n	80046e8 <scalbnf+0x6c>
 80046c8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004730 <scalbnf+0xb4>
 80046cc:	eeb0 0a48 	vmov.f32	s0, s16
 80046d0:	f000 f834 	bl	800473c <copysignf>
 80046d4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80046d8:	e7df      	b.n	800469a <scalbnf+0x1e>
 80046da:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004734 <scalbnf+0xb8>
 80046de:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80046e2:	e7da      	b.n	800469a <scalbnf+0x1e>
 80046e4:	0ddb      	lsrs	r3, r3, #23
 80046e6:	e7ec      	b.n	80046c2 <scalbnf+0x46>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dd06      	ble.n	80046fa <scalbnf+0x7e>
 80046ec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80046f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80046f4:	ee00 3a90 	vmov	s1, r3
 80046f8:	e7cf      	b.n	800469a <scalbnf+0x1e>
 80046fa:	f113 0f16 	cmn.w	r3, #22
 80046fe:	da06      	bge.n	800470e <scalbnf+0x92>
 8004700:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004704:	4298      	cmp	r0, r3
 8004706:	dcdf      	bgt.n	80046c8 <scalbnf+0x4c>
 8004708:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004734 <scalbnf+0xb8>
 800470c:	e7de      	b.n	80046cc <scalbnf+0x50>
 800470e:	3319      	adds	r3, #25
 8004710:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004714:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004718:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004738 <scalbnf+0xbc>
 800471c:	ee07 3a10 	vmov	s14, r3
 8004720:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004724:	e7b9      	b.n	800469a <scalbnf+0x1e>
 8004726:	bf00      	nop
 8004728:	ffff3cb0 	.word	0xffff3cb0
 800472c:	4c000000 	.word	0x4c000000
 8004730:	7149f2ca 	.word	0x7149f2ca
 8004734:	0da24260 	.word	0x0da24260
 8004738:	33000000 	.word	0x33000000

0800473c <copysignf>:
 800473c:	ee10 3a10 	vmov	r3, s0
 8004740:	ee10 2a90 	vmov	r2, s1
 8004744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004748:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800474c:	4313      	orrs	r3, r2
 800474e:	ee00 3a10 	vmov	s0, r3
 8004752:	4770      	bx	lr

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
